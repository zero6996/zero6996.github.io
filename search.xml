<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo部署至coding</title>
      <link href="/2020/02/29/other/hexo-bu-shu-zhi-coding/"/>
      <url>/2020/02/29/other/hexo-bu-shu-zhi-coding/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因本人的hexo是部署至github的，现在换了个主题图片有点多，导致访问速度非常慢，故想到部署到国内的服务器上，所以找到了coding，准备把hexo也同步部署到coding上去。</p><a id="more"></a><p>本文章记录了如何将hexo部署至coding，从而加快国内站点的访问，本文前置条件：</p><ol><li>拥有hexo博客，会hexo的基本操作；</li><li>拥有coding账户，且实名(未实名不能创建静态网站)。</li></ol><h3 id="1-coding配置"><a href="#1-coding配置" class="headerlink" title="1. coding配置"></a>1. coding配置</h3><p>首先进行coding的配置，步骤如下：</p><ol><li>打开你的coding页面，新建一个项目；</li></ol><p><img src="https://yanxuan.nosdn.127.net/d518fdebcf6f8b7bd51bc9a9c92a835f.png" alt="选择项目模板.png"></p><blockquote><p>注意：不要选择代码托管，这样不能创建静态页面</p></blockquote><ol start="2"><li>填写项目基本信息；</li></ol><p><img src="https://yanxuan.nosdn.127.net/7574ea9e1ac663cc9f71c8817c8c7324.png" alt="填写项目基本信息.png"></p><p>一般都选择默认配置即可，点击完成创建。</p><ol start="3"><li>进入项目，点击代码仓库，找到项目的https链接，后面会用到。</li></ol><p><img src="https://yanxuan.nosdn.127.net/d1efb6e8e01170c6d47c7bfd65b4cffd.png" alt="coding链接.png"></p><h3 id="2-hexo配置"><a href="#2-hexo配置" class="headerlink" title="2. hexo配置"></a>2. hexo配置</h3><p>接下来到hexo进行相关配置。</p><h4 id="2-1-安装部署服务器插件"><a href="#2-1-安装部署服务器插件" class="headerlink" title="2.1 安装部署服务器插件"></a>2.1 安装部署服务器插件</h4><p>打开你本地的hexo文件夹，然后打开Cmd或者GitBash窗口，输入以下命令安装插件：</p><pre><code class="bash">npm install hexo-deployer-git --save</code></pre><p><img src="https://yanxuan.nosdn.127.net/f023d323295d1eabc3a38146fb88abcf.png" alt="安装插件"></p><p>我安装过了所以显示的不一样。</p><blockquote><p>本人使用的cnpm是npm的淘宝镜像源，访问速度比npm快一些，比较推荐更换，<a href="http://npm.taobao.org/" target="_blank" rel="noopener">详见链接</a></p></blockquote><h4 id="2-2-修改站点配置文件"><a href="#2-2-修改站点配置文件" class="headerlink" title="2.2 修改站点配置文件"></a>2.2 修改站点配置文件</h4><p>该文件位于主目录下，名称是<code>_config.yml</code>，使用任意编辑器打开。</p><p><img src="https://yanxuan.nosdn.127.net/ce00ec9be9c7559c78832fdf9b952fa1.png" alt="配置文件"></p><p>打开后找到<code>deploy</code>，修改配置如下：</p><pre><code class="yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git # 部署类型  repo: # 上传仓库地址    github: https://github.com/zero6996/zero6996.github.io.git # github仓库地址    coding: https://e.coding.net/zero024/hexo.git # coding仓库地址，将你的coding链接复制到这里。  branch: master # 推送到远程的分支</code></pre><blockquote><p>注意yml的语法，缩进都是空两格，然后<code>：</code>冒号后面要空一格才能生效</p></blockquote><h4 id="2-3-部署项目"><a href="#2-3-部署项目" class="headerlink" title="2.3 部署项目"></a>2.3 部署项目</h4><p>回到命令行窗口，输入<code>hexo d</code>部署项目，如果没有问题的话应该显示有如下关键信息：</p><pre><code class="bash">Branch 'master' set up to track remote branch 'master' from 'https://github.com/zero6996/zero6996.github.io.git'.Everything up-to-dateBranch 'master' set up to track remote branch 'master' from 'https://e.coding.net/zero024/hexo.git'.Everything up-to-dateINFO  Deploy done: git</code></pre><h4 id="2-4-配置静态网站"><a href="#2-4-配置静态网站" class="headerlink" title="2.4 配置静态网站"></a>2.4 配置静态网站</h4><p>回到coding的hexo项目，刷新一下可以看到代码仓库中已经有代码了，下面找到左侧<code>构建与部署</code>一栏，进行静态网站的相关配置。</p><p><img src="https://yanxuan.nosdn.127.net/3fa30fd26bca77eb12b130b0ebec5c8a.png" alt="构建与部署"></p><p>点击<code>立即发布静态网站</code>，进入新建静态网站页面，网站名称任意，其他选项一般默认即可。</p><p><img src="https://yanxuan.nosdn.127.net/db064e6bcd75810068ae6efe1ca70163.png" alt="新建静态网站"></p><p>保存后点击<code>立即部署</code>，即可部署项目到网站，coding给了个默认地址可以访问，点击即可查看静态网站部署效果。</p><p><img src="https://yanxuan.nosdn.127.net/7a304592937bb1838a379a40fc70a440.png" alt="部署网站"></p><h3 id="3-域名配置"><a href="#3-域名配置" class="headerlink" title="3. 域名配置"></a>3. 域名配置</h3><p>如果你拥有域名的话，可以绑定域名，具体操作如下。</p><h4 id="3-1-域名解析"><a href="#3-1-域名解析" class="headerlink" title="3.1 域名解析"></a>3.1 域名解析</h4><p>本人使用的是阿里的域名，其他服务商的操作也大致相同。</p><p>首先进入域名解析页面，点击添加记录，设置一个CNAME，主机记录www，解析线路默认，记录值为你coding的默认访问地址；</p><p><img src="https://yanxuan.nosdn.127.net/240e822daae179f599361b6a24e8f5e3.png" alt="DNS解析"></p><p>在添加一个CNAME，主机记录@，解析默认，记录值同上；</p><p><img src="https://yanxuan.nosdn.127.net/d7d950a269c87f8f1da8ff6cdde9433d.png" alt="DNS解析"></p><p>这样DNS解析就设置完毕了，回到coding进行域名绑定，点击你的静态网站，右上角有个设置选项，可以进行很多设置。</p><p><img src="https://yanxuan.nosdn.127.net/402a34805f92ad3cebb0cbde31017365.png" alt="域名绑定"></p><p>找到自定义域名，输入你的域名地址进行绑定，添加两个。</p><p><img src="https://yanxuan.nosdn.127.net/245ca3613c374f27bbbaabd507b6ade2.png" alt="域名绑定"></p><p>大功告成！你可以使用你的域名快速的访问你的博客了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计科04:[二进制]</title>
      <link href="/2020/01/22/computerscience/04-er-jin-zhi/"/>
      <url>/2020/01/22/computerscience/04-er-jin-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h2><p><a href="https://www.bilibili.com/video/av21376839?p=4" target="_blank" rel="noopener">视频</a></p><h3 id="1-二进制原理"><a href="#1-二进制原理" class="headerlink" title="1. 二进制原理"></a>1. 二进制原理</h3><p>逻辑门可以判断布尔语句，布尔代数只有两个值：True和False，但如果只有两个值，我们该如何表达更多东西？上文提到，1个二进制可以代表1个数，我们可以把真和假，当做1和0，如果想表示更多东西，加位数就行了。</p><a id="more"></a><p>我们熟悉的十进制，只有10个数(0-9)，要表示大于9的数，就需要加位数。拿263举例，这个数字实际代表了：2个100、6个10、3个1，加在一起就是263。每列有不同的乘数(100,10,1)，每个乘数比右边大十倍，如果超过9，就要在下一列进1(满十进一，满二十进二…)，因此叫“基于十的表示法”或<strong>十进制</strong>。</p><p>二进制也是如此，只不过是基于2而已。因为二进制只有两个可能的数，1和0；意味着每个乘数必须是右侧乘数的两倍，就不是十进制的100，10，1了，而是4,2,1。拿二进制数101举例，意味着有1个“4”，0个“2”和1个“1”，加在一起就得到十进制的5。</p><p>为了表示更大的数字，二进制需要更多的位数，拿二进制数10110111举例，可以用相同的方法转成十进制：1 x 128 ，0 x 64 ，1 x 32 ，1 x 16 ，0 x 8 ，1 x 4 ，1 x 2 ，1 x 1，加起来等于183。</p><p><img src="https://i.loli.net/2020/01/22/wrWxRTbvDNFuH1V.png" alt="二进制转十进制"></p><p>二进制的计算也不难，以十进制数183加19举例：首先 3 + 9，得到 12，然后位数记作 2，满10向前进 1；再算 8+1+1=10，所以位数记作0，再满10进 1，最后1+1=2，位数记作2，和就是202。</p><p>二进制的计算：先把19换算为二进制就是00010011，从个位开始计算，1+1=2，但二进制中没有 2，所以位数记作 0 ，进 1；然后1+1，再加上进位的1，等于3，用二进制表示是11，所以位数记作 1，再进 1，以此类推。最后得到的数字，跟十进制的202是一样的。</p><p><img src="https://i.loli.net/2020/01/22/Q5e3uynETFYGADO.png" alt="二进制的计算"></p><p>二进制中，一个1或0叫一“位”，上面的例子我们用了8位，8位能表示的最小数是0(8位都是0)，最大数是255(8位都是1)；能表示256个不同的值，就是2的8次方。</p><p>你可能听过8位机，8位图像，8位音乐，意思是计算机里大部分操作都是8位8位这样处理的；但256个值不算多，意味着8位游戏只能用256种颜色，8位非常常见，以至于有专门的名字：<strong>字节(Byte)</strong>。</p><p>1字节(byte)等于8位(bits)，如果有10个字节，就代表80位。千字节(kb)兆字节(mb)千兆字节(gb)，不同前缀代表不同数量级，就像1千克=1000克，1千字节=1000字节(或8000位)。如今你可能有1TB的硬盘，代表8万亿个1和0。二进制里，1 千字节 = 2的10次方 = 1024 字节，1000 也是千字节（KB）的正确单位，1000 和 1024 都对。</p><h3 id="2-正数、负数、整数、浮点数的表示"><a href="#2-正数、负数、整数、浮点数的表示" class="headerlink" title="2. 正数、负数、整数、浮点数的表示"></a>2. 正数、负数、整数、浮点数的表示</h3><p>你应该听过32位或64位计算机，意思是一块块处理数据，每块是32位或64位。32位表示的最大数是43亿左右，也就是32个1。所以 Instagram 照片很清晰，因为它有上百万种颜色，如今都用32位颜色。当然，不是所有数字都是正数，因此就需要有方法表示正数和负数，大部分计算机用第一位表示正负，即1是负，0是正，用剩下31位来表示数字，能表示的数字范围是正20亿到负20亿，虽然是很大的数，但有时还不够用。</p><p>计算机必须给内存中每一个位置，做一个 “标记”，这个标记叫 <strong>“位址”</strong>, 目的是为了方便存取数据，如今硬盘已经增长到 GB 和 TB，上万亿个字节！内存地址也应该有64位；除了负数和正数，计算机也要处理非整数，比如 12.7 和 3.14，或”星历 43989.1”，这叫<strong>浮点数</strong>。</p><p>因为小数点可以在数字间浮动，所以有好几种方法 表示浮点数，最常见的是 IEEE 754 标准，它用类似科学计数法的方法，来存十进制值；例如，625.9 可以写成 0.6259×10 ^ 3，这里有两个重要数字：.6259 叫 “有效位数” , 3 是指数。在32位浮点数中，第一位表示数字的正负，接下来 8 位存指数，剩下 23 位存有效位数。</p><p><img src="https://i.loli.net/2020/01/22/L6aUtRelxGdgwNF.png" alt="浮点数32位表示"></p><h3 id="3-ASCII"><a href="#3-ASCII" class="headerlink" title="3. ASCII"></a>3. ASCII</h3><p>为了表示文字，最直接的方法是给字母编号：A是1，B是2，C是3，以此类推。著名英国作家 弗朗西斯·培根（Francis Bacon）曾用 5位序列 来编码英文的 26 个字母，在十六世纪传递机密信件。五位（bit）可以存 32 个可能值（2^5） - 这对26个字母够了，但不能表示 标点符号，数字和大小写字母。</p><p><strong>ASCII，美国信息交换标准代码</strong>，发明于 1963 年，ASCII 是 7 位代码，足够存 128 个不同值，范围扩大之后，可以表示大写字母，小写字母,数字 0 到 9, @ 这样的符号, 以及标点符号；举例，小写字母 a 用数字 97 表示，大写字母 A 是 65，: 是58 ，) 是41等等。</p><p>ASCII 甚至有特殊命令符号，比如换行符，用来告诉计算机换行。因为在老计算机系统中，如果没换行符，文字会超出屏幕。</p><p> ASCII 是个很早的标准，故被广泛使用，让不同公司制作的计算机，能互相交换数据，这种通用交换信息的能力叫 “互用性”；但其有个限制：它是为英语设计的。</p><p>好在一个字节有8位，而不是7位，128到 255 的字符渐渐变得常用，这些字符以前是空的，是给各个国家自己  “保留使用的”。在美国，这些额外的数字主要用于编码附加符号，比如数学符号，图形元素和常用的重音字符；另一方面，虽然拉丁字符被普遍使用，但在俄罗斯，他们用这些额外的字符表示西里尔字符；而希腊电脑用希腊字母，等等。这些保留下来给每个国家自己安排的空位，对大部分国家都够用。</p><h3 id="4-Unicode"><a href="#4-Unicode" class="headerlink" title="4. Unicode"></a>4. Unicode</h3><p>随着计算机在亚洲兴起，这种做法彻底失效了，中文和日文这样的语言有数千个字符，根本没办法用 8 位来表示所有字符！</p><p>为了解决这个问题，每个国家都发明了多字节编码方案，但不相互兼容。日本人总是碰到编码问题，以至于专门有词来称呼：”mojibake” 意思是 乱码。</p><p>所以 Unicode 诞生了，它是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求， 设计于 1992 年，解决了不同国家不同标准的问题。最常见的Unicode是16位的，有超过一百万个位置，对所有语言的每个字符都够用了。100多种字母表加起来占了12万个位置。还有位置放数学符号，甚至 Emoji。</p><p>就像 ASCII 用二进制来表示字母或是其他格式，比如MP3或GIF，用二进制编码声音/颜色，表示图片、电影、音乐。重要的是，这些标准归根到底就是一长串位，包括短信， YouTube 视频，整个互联网上的每个网页，甚至操作系统，都只不过是一长串的1和0，二进制能表示一切！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ComputerScience </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计科03:[布尔代数和逻辑门]</title>
      <link href="/2020/01/10/computerscience/03-bu-er-luo-ji-he-luo-ji-men/"/>
      <url>/2020/01/10/computerscience/03-bu-er-luo-ji-he-luo-ji-men/</url>
      
        <content type="html"><![CDATA[<h2 id="布尔逻辑和逻辑门"><a href="#布尔逻辑和逻辑门" class="headerlink" title="布尔逻辑和逻辑门"></a>布尔逻辑和逻辑门</h2><p><a href="https://www.bilibili.com/video/av21376839?p=3" target="_blank" rel="noopener">视频</a></p><h3 id="1-什么是二进制"><a href="#1-什么是二进制" class="headerlink" title="1. 什么是二进制"></a>1. 什么是二进制</h3><p>计算机是最早的机电设备，一般用十进制计数，比如用齿轮数来代表十进制，再到晶体管计算机。</p><a id="more"></a><p>只用 <strong>开/关</strong>两种状态来代表信息，这叫二进制。如果只需表示true和false，两个值就够了。电路闭合，电流流过，代表“真”；电路断开，无电流通过，代表“假”。二进制也可以写成1和0而不是true和false，只是不同的表达方式罢了。</p><p>晶体管的确可以不只是 开/关，还可以让不同大小的电流通过。一些早期电子计算机是三进制的，有 3 种状态，甚至五进制，5 种状态；问题是，状态越多，越难区分信号。如果手机快没电了或者附近有电噪音，比如有人在用微波炉，信号可能会混在一起，而每秒百万次变化的晶体管会让这个问题变得更糟。所以我们把两种信号尽可能分开，只用”开”和”关”两种状态，可以尽可能减少这类问题。</p><h4 id="1-1-布尔代数"><a href="#1-1-布尔代数" class="headerlink" title="1.1 布尔代数"></a>1.1 布尔代数</h4><p>计算机用二进制的另一个原因是有一整个数学分支存在，专门处理“真”和“假”，它已经解决了所有法则和运算，它叫作<strong>“布尔代数”</strong>。</p><p>乔治·布尔（George Boole）是布尔二字的由来，他是一位19 世纪自学成才的英国数学家。他感兴趣用数学式子扩展亚里士多德基于哲学的逻辑方法，布尔用逻辑方程系统而正式的证明真理(truth)。他在1847 年的第一本书”逻辑的数学分析”中介绍过：在”常规“的代数里，是数字，可以进行加法或乘法之类的操作；但在布尔代数中，变量的值是 true 和 false，能进行逻辑操作。</p><h3 id="2-三个基本操作：NOT-AND-OR"><a href="#2-三个基本操作：NOT-AND-OR" class="headerlink" title="2. 三个基本操作：NOT,AND,OR"></a>2. 三个基本操作：NOT,AND,OR</h3><p>布尔代数中三个基本操作：NOT, AND 和 OR，这些操作都非常有用。</p><h4 id="2-1-NOT"><a href="#2-1-NOT" class="headerlink" title="2.1 NOT"></a>2.1 NOT</h4><p>NOT操作把布尔值反转，把true进行NOT就会变成false，反之亦然。</p><p>根据NOT操作的输入和输出，做出如下表</p><p><img src="https://i.loli.net/2020/01/09/xvNyu1V3968ADIo.png" alt="NOT操作输入输出表" style="zoom:67%;"></p><p>使用晶体管可以轻松实现这个逻辑。晶体管只是电控制的开关，有3根线：2根电极和一根控制线。控制线通电时，电流就可以从一个电极流到另一个电极；就像水龙头一样：打开水龙头，水流出，关掉水龙头，就没水了。</p><p>可以把控制线，当做输入，底部的电极，当做输出，所以一个晶体管，就有一个输入和一个输出。当打开输入时，输出也会打开，因为电流可以通过；如果关闭输入，输出也会关闭，因为电流无法通过。用布尔代数来说，输入为真，输出为真；输入为假，输出为假。这个电路没什么意思，因为它没有做什么事情。</p><p>但稍加修改，即可实现NOT，只要把输出放到上面即可。如下图示：</p><p><img src="https://i.loli.net/2020/01/10/U9uAEVl2vkQoIZn.png" alt="NOT_Gate" style="zoom:30%;"></p><ul><li>当打开输入on，电流可以流过然后“接地”，输出就没有电流了，所以输出是off。</li><li>当输入是off，电流没法接地，就流过了输出，所以输出是on。</li></ul><blockquote><p>接地：大地是一个电阻非常低、电容量非常大的物体，拥有吸收无限电荷的能力，而且在吸收大量电荷后仍能保持电位不变 ，故接地后设备其他线路就不会有电流输出。</p></blockquote><p>如上图示叫非门(NOT gate)，之所以叫门，是因为它能控制电流的路径。</p><h4 id="2-2-AND"><a href="#2-2-AND" class="headerlink" title="2.2 AND"></a>2.2 AND</h4><p>AND操作有两个输入，1个输出，如下表所示：</p><table><thead><tr><th>输入</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><ul><li>简单记忆：遇假即假，全真即真。</li></ul><p>为了实现与门(AND gate)，需要两个晶体管连在一起，如下图示：</p><p><img src="https://i.loli.net/2020/01/10/A6iUJflcoh8K9aD.png" alt="AND_Gate.png" style="zoom:25%;"></p><p>这样有2个输入和1个输出，如果只打开A，不打开B，电流无法流到output，所以输出是false；如果只打开B，不开A，也一样，电流无法流到output；只有A和B都打开了，output才有电流。</p><h4 id="2-3-OR"><a href="#2-3-OR" class="headerlink" title="2.3 OR"></a>2.3 OR</h4><p>OR操作也有两个输入，1个输出，其中2个输入里1个是true，输出就是true。如下表所示：</p><table><thead><tr><th>输入</th><th>输入</th><th>输出</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><ul><li>遇真即真，全假即假。</li></ul><p>为了实现或门(OR gate)，除了晶体管还要额外的线，不是串联起来，而是并联。如下图示：</p><p><img src="https://i.loli.net/2020/01/10/wtUjeNZcIHFDysC.png" alt="OR_Gate" style="zoom:25%;"></p><p>左边这条线表示电流输入，如果A和B都是OFF，电流就无法通过任意一条线流到输出，所以输出是OFF；如果只打开A，电流可以流过，输出ON；如果只打开B，电流也可以通过，输出ON；只要A或者B是ON，输出就是ON，如果AB都是ON，那么输出自然是ON。</p><h3 id="3-XOR异或"><a href="#3-XOR异或" class="headerlink" title="3. XOR异或"></a>3. XOR异或</h3><p>异或(XOR)，输入相同时输出false，不同才输出true。如下XOR表：</p><p><img src="https://i.loli.net/2020/01/10/tOUph6iIKxTVQlb.png" alt="XOR_table" style="zoom:50%;"></p><p>如果两个输入都是true，或者都是false，那么XOR输出false；如果一个输入为true，另一个为false，那么XOR输出才会是true。</p><ul><li>相同即假，不同才真。</li></ul><p>用晶体管实现异或门(XOR gate)，需使用到前面提到的三种门来做异或门。墙裂推荐配合<a href="https://www.bilibili.com/video/av21376839?p=3" target="_blank" rel="noopener">视频</a>学习理解(时间07:38)。</p><p><img src="https://i.loli.net/2020/01/10/vueRLdVTzGJnqxl.png" alt="XOR_gate" style="zoom:30%;"></p><p>如上图A和B输入两个true，到下方的OR门，输出依然是true，上方第一个AND门输入两个true，输出也是true，然后电流到NOT门，反转电流高低电平，true变成了false，到最后一个AND门就是输入一个false一个true，输出就是false；如此便满足XOR门第一个条件，输入两个true，输出false，以此类推。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ComputerScience </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计科02:[电子计算机]</title>
      <link href="/2020/01/08/computerscience/02-dian-zi-ji-suan-ji/"/>
      <url>/2020/01/08/computerscience/02-dian-zi-ji-suan-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="电子计算机"><a href="#电子计算机" class="headerlink" title="电子计算机"></a>电子计算机</h2><p><a href="https://www.bilibili.com/video/av21376839?p=2" target="_blank" rel="noopener">视频</a></p><h3 id="1-计算机的发展"><a href="#1-计算机的发展" class="headerlink" title="1. 计算机的发展"></a>1. 计算机的发展</h3><p>20世纪初，早期的计算设备都针对特定用途，比如 制表机，大大推进了政府和企业，它们帮助甚至代替了人工，然而人类社会的规模在以前所未有的速度增长。</p><a id="more"></a><p>20世纪上半叶，世界人口几乎翻倍。一战动员7千万人，二战1亿人，全球贸易和运输更加紧密，工程和科学的复杂度也达到新高，我们甚至开始考虑登陆其他行星。</p><p>复杂度的增高导致数据量暴增，人们需要更多自动化、更强的计算能力。很快，柜子大小的计算机变成房间大小，维护费用高且容易出错，而正是这些机器，为未来的创新打下基础。</p><h3 id="2-哈佛Mark1号"><a href="#2-哈佛Mark1号" class="headerlink" title="2. 哈佛Mark1号"></a>2. 哈佛Mark1号</h3><p>最大的机电计算机之一是：哈佛马克一号。</p><p>IBM在1944完成建造，给二战同盟国建造的，它有76万5千个组件，300万个连接点和500英里长的导线。为了保持内部机械装置同步，它有一个50英尺的传动轴，由一个 5 马力的电机驱动。这台机器最早的用途之一 是给”曼哈顿计划”跑模拟，这台机器的大脑是”继电器”。</p><h3 id="3-继电器"><a href="#3-继电器" class="headerlink" title="3. 继电器"></a>3. 继电器</h3><p>继电器是：用电控制的机械开关，继电器里，有根“控制线路”，控制电路是开还是关。”控制线路” 连着一个线圈，当电流流过线圈，线圈产生电磁场，吸引金属臂，从而闭合电路。你可以把继电器想成水龙头，控制线路就是打开水龙头，水会流出来，关闭水龙头，水就没有了。继电器是一样的，只不过控制的是电子  而不是水。这个控制电路可以连到其他电路，比如马达，马达让计数齿轮+1，就像制表机一样。</p><p>不幸的是，继电器内的机械臂是“有质量的“，因此无法快速开关。1940年代一个好的继电器1秒能翻转50次。看起来好像很快，但还不够快，不足以解决复杂的大问题。哈佛马克一号，1秒能做3次加减法运算，一次乘法要花6秒，除法要花15秒，更复杂的操作比如三角函数，可能要一分钟以上。</p><p>除了速度慢，另一个限制就是齿轮磨损，任何会动的机械都会随时间磨损。有些部件会完全损坏，有些则是变黏，变慢，变的不可靠。并且随着继电器数量增加，故障概率也会增加。</p><p>哈佛马克一号有大约3500个继电器，哪怕假设继电器的使用寿命是10年，也意味着平均每天得换一个故障继电器！</p><p>这个问题很严重，因为有些重要运算要运算好几天，而且还有更多其他问题要考虑。</p><h3 id="4-BUG的由来"><a href="#4-BUG的由来" class="headerlink" title="4. BUG的由来"></a>4. BUG的由来</h3><p>这些巨大、黑色、温暖的机器也会吸引昆虫，1947年9月，哈佛马克2型的操作员从故障继电器中，拔出一只死虫。Grace Hopper曾说：”从那时起，每当电脑出了问题，我们就说它出了bug(虫子)“。这就是术语“bug”的来源。</p><h3 id="5-真空管的出现"><a href="#5-真空管的出现" class="headerlink" title="5. 真空管的出现"></a>5. 真空管的出现</h3><p>如果想进一步提高计算能力，我们需要更快更可靠的东西，来替代继电器。</p><p>在1904年，英国物理学家“约翰·安布罗斯·弗莱明”开发了一种新的电子组件，叫“热电子管”，把两个电极装在一个气密的玻璃灯泡里，这就是世上第一个“真空管”。</p><p>其中一个电极可以加热，从而发射电子，这叫“热电子发射”；另一个电极会吸引电子，形成“电龙头”电流。但只有带正电才行，如果带负电荷或中性电荷，电子就无法被吸引，越过真空区域，因此就没有电流。电流只能单向流动的电子部件叫 “二极管”，但是我们需要的是，一个能开关电流的东西。</p><p>不久之后的1906年，美国发明家 “李·德富雷斯特”在“弗莱明”设计的两个电极之间，加入了第三个”控制“电极，向”控制“电极施加正电荷，它会允许电子流动，但如果施加负电荷，它会阻止电子流动。因此通过控制线路，可以断开或闭合电路。和继电器的功能一样，但重要的是，真空管内没有会动的组件，这意味着更少的磨损，更重要的是，每秒可以开闭数千次。</p><p>因此这些”三极真空管”成为了无线电，长途电话以及其他电子设备的基础，持续了接近半个世纪。</p><p>真空管并不完美，它很脆弱，像灯泡一样会烧坏，但比起机械继电器是一次巨大进步。</p><h3 id="6-巨人1号"><a href="#6-巨人1号" class="headerlink" title="6. 巨人1号"></a>6. 巨人1号</h3><p>第一个大规模使用真空管的计算机是“巨人1号”，由工程师Tommy Flowers 设计，完工于1943年12月。</p><p>巨人1号在英国的”布莱切利园”, 用于破解纳粹通信。2 年前 阿兰·图灵也在”布莱切利园”做了台机电装置，叫 “Bombe”，其设计目的是为了纳粹”英格码”通讯加密设备。但Bombe 严格来说不算计算机，后续文章会谈到这个问题。</p><p>巨人1号有 1600 个真空管，总共造了 10 台巨人计算机，来帮助破解密码。巨人被认为是第一个可编程的电子计算机，编程的方法是把几百根电线插入插板，有点像老电话交换机，这是为了让计算机执行正确操作。</p><h3 id="7-第一个可编程计算机“ENIAC”"><a href="#7-第一个可编程计算机“ENIAC”" class="headerlink" title="7. 第一个可编程计算机“ENIAC”"></a>7. 第一个可编程计算机“ENIAC”</h3><p>几年后在 1946 年，在”宾夕法尼亚大学”，电子数值积分计算机 “ENIAC”完成建造。设计者是John Mauchly 和 J. Presper Eckert。这是世上第一个真正的通用、可编程电子计算机。</p><p>ENIAC 每秒可执行 5000 次十位数加减法，它运作了十年，但因为真空管很多，所以故障很常见。ENIAC 运行半天左右就会出一次故障。</p><h3 id="8-晶体管"><a href="#8-晶体管" class="headerlink" title="8. 晶体管"></a>8. 晶体管</h3><p>到 1950 年代，真空管计算机都达到了极限，美国空军的 AN/FSQ-7 计算机于 1955 年完成，是 “SAGE” 防空计算机系统的一部分。为了降低成本和大小，同时提高可靠性和速度，我们需要一种新的电子开关。</p><p>1947 年，贝尔实验室科学家  John Bardeen，Walter Brattain，William Shockley发明了晶体管，一个全新的计算机时代诞生了！</p><p>晶体管的物理学相当复杂，这里不做概述。晶体管就像之前提过的“继电器”和“真空管”，它是一个开关，可以用来控制线路和控制开或关。</p><p>晶体管有两个电极，电极之间有一种材料隔开它们，这种材料有时候导电，有时不导电，这叫“半导体”。控制线连接到一个”门“电极，通过改变 “门” 的电荷，我们可以控制半导体材料的导电性，来允许或不允许 电流流动。</p><p>贝尔实验室的第一个晶体管就展示了巨大的潜力，每秒可以开关 10,000 次，而且，比起玻璃制成，小心易碎的真空管，晶体管是固态的，体型也可远远小于继电器或真空管，导致更小更便宜的计算机。比如1957年发布的IBM 608，第一个完全用晶体管，而且消费者也可以买到的计算机，它有 3000 个晶体管，每秒能执行 4500 次加法，执行 80 次左右的乘除法。IBM 很快把所有产品都转向了晶体管，把晶体管计算机带入办公室，最终引入家庭。</p><p>晶体管不仅小，还超级快，秒可以切换上百万次，并且能工作几十年。</p><h3 id="9-硅谷的典故和英特尔"><a href="#9-硅谷的典故和英特尔" class="headerlink" title="9. 硅谷的典故和英特尔"></a>9. 硅谷的典故和英特尔</h3><p>很多晶体管和半导体的开发在”圣克拉拉谷”，这个地方在加州，位于”旧金山”和”圣荷西”之间，而生产半导体最常见的材料是 “硅”，而生产半导体最常见的材料是 “硅”。</p><p>甚至 William Shockley 都搬了过去，创立了”肖克利半导体”，里面的员工后来成立了”仙童半导体”，这里面的员工后来创立了<strong>英特尔</strong> - 当今世界上最大的计算机芯片制造商。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ComputerScience </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计科01:[计算机早期历史]</title>
      <link href="/2020/01/03/computerscience/01-ji-suan-ji-zao-qi-li-shi/"/>
      <url>/2020/01/03/computerscience/01-ji-suan-ji-zao-qi-li-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机早期历史"><a href="#计算机早期历史" class="headerlink" title="计算机早期历史"></a>计算机早期历史</h2><p><a href="https://www.bilibili.com/video/av21376839" target="_blank" rel="noopener">视频</a></p><h3 id="1-最早的计算设备：算盘"><a href="#1-最早的计算设备：算盘" class="headerlink" title="1. 最早的计算设备：算盘"></a>1. 最早的计算设备：算盘</h3><p>公认最早的计算设备是算盘，发明于“美索不达米亚”，大约公元前2500年。它是手动计算器，用来帮助加减数字，它存储着当前的计算状态，类似于如今的硬盘。</p><a id="more"></a><p>人们制造算盘是因为社会的规模已经超出个人心算的能力，例如一个村庄可能有上千个人和上万头牛，如此就需要一些计算工具辅助计算。</p><p>算盘有很多变种，最基础的如下所示：</p><p><img src="https://i.loli.net/2020/01/03/Fyp7X5HGhBnaw3u.png" alt="算盘"></p><p>每行代表10的不同次方，最底下一行，一个珠子代表10的0次方，也就是1。再上面一行是10的1次方(也就是10)，再往上就是10的2次方(以此类推)。</p><p>假设最底部的3颗珠子，代表3头牛，那么有4头牛，只需向右移动4个珠子，就能代表7头牛。但如果再有5头牛，那最底行珠子就不够用了。</p><p>所以把所有珠子移回左边，在把第二排的1颗珠子向右移动，代表10头牛，最底行移动2颗珠子，代表2头牛，合计就是12，如此就可以代表12头牛了。</p><p>在接下来4000年，人类发明了各种巧妙的计算设备。比如星盘，让船只可以在海上计算纬度；或计算尺，帮助计算乘法和除法。</p><p>人们还创造了上百种时钟，算日出、潮汐、天体位置，或者纯粹计时。</p><p>这些设备让原先很费力的事变得更快，更简单，也更精准。</p><h3 id="2-Computer从指代职业变成指代机器"><a href="#2-Computer从指代职业变成指代机器" class="headerlink" title="2. Computer从指代职业变成指代机器"></a>2. Computer从指代职业变成指代机器</h3><ul><li>计算机先驱Charles Babbage说过：”随着知识的增长和新工具的诞生，人工劳力会越来越少。“</li></ul><p>最早使用“计算机”一词的文献来自1613年的一本书，作者Richard Braithwait，但当时指的不是机器，而是一种职业。Braithwait 说：“我听说过的计算者里最厉害的，能把好几天的工作量大大缩减。”</p><p>那时，“Computer”指负责计算的人，“Computer”偶尔会用机器帮忙，但大部分时候靠自己。</p><p>这个职位一直到1800年代还存在，之后“Computer”逐渐开始代表机器。</p><h3 id="3-步进计算器"><a href="#3-步进计算器" class="headerlink" title="3. 步进计算器"></a>3. 步进计算器</h3><p>“步进计算器”，由德国博学家 戈特弗里德·莱布尼茨 建造于 1694 年。</p><p>莱布尼茨说过 “… 让优秀的人浪费时间算数简直侮辱尊严，农民用机器能算得一样准”。</p><p>步进计算器有点像汽车里的里程表，不断累加里程数，它有一连串可以转动的齿轮，每个齿轮有十个齿，代表数字0到9，每当一个齿轮转过 9，它会转回 0，同时让旁边的齿轮前进 1 个齿，就像算盘超过 10 一样。做减法时，机器会反向运作。</p><p>利用一些巧妙的机械结构，步进计算器也能做到乘法和除法。举例：17除以5，只要减5，减5，再减5，直到不能再减5，就知道了17=5x3+2。</p><p>步进计算器可以自动完成这种操作，它是第一台能做到“加减乘除”全部四种运算的机器，它的设计非常成功，以至于沿用了3个世纪。</p><h3 id="4-查表测距"><a href="#4-查表测距" class="headerlink" title="4. 查表测距"></a>4. 查表测距</h3><p>不幸的是，即使有机械计算器，很多现实问题，仍然需要很多步，计算一个结果可能要几小时甚至几天。而且这些手工制作的机器非常昂贵，大部分人买不起。</p><p>所以在20世纪以前，大部分人会用预先算好的计算表，这些计算表由之前说的“人力计算器”编撰。如果你想知道867,5309的平方根，只需要再表中查找即可找到答案。</p><h3 id="5-差分机"><a href="#5-差分机" class="headerlink" title="5. 差分机"></a>5. 差分机</h3><p>Charles Babbage 在 1822 年写了一篇论文，向皇家天文学会指出了这个问题，标题叫：”机械在天文与计算表中的应用“。</p><p>Charles Babbage 提出了一种新型机械装置叫 “差分机”，一个更复杂的机器，能近似多项式。多项式描述了几个变量之间的关系，也可用于近似对数和三角函数。</p><p>Charles Babbage 在 1823 年开始建造差分机，并在接下来二十年，视图制造和组装25000个零件，总重接近15吨，不幸的是，该项目最终放弃了。</p><p>但在1991年，历史学家根据Charles Babbage 的草稿做了一个差分机，而且可以运行。</p><p>更重要的是，在差分机的建造期间，Charles Babbage 构想了一个更复杂的机器 - 分析机。</p><h3 id="6-分析机"><a href="#6-分析机" class="headerlink" title="6. 分析机"></a>6. 分析机</h3><p>不像差分机，步进计算器和以前的其他计算设备，分析机是“通用计算机”，它可以做很多事情，不只是一种特定运算。甚至可以给它数据，然后按顺序执行一系列操作。它有内存，甚至一个很原始的打印机，就像差分机一样，这台机器太超前了，所以没能键成。然而，这种“自动计算机”的概念思想：计算机可以自动完成一些操作。是个跨时代的概念，预示着计算机程序的诞生。</p><p>英国数学家 Ada Lovelace 给分析机写了假想的程序，她说：“未来会诞生一门全新的，强大的，专为分析所用的语言”，因此Ada被认为是世上第一位程序员。</p><p>分析机激励了第一代计算机科学家，这些计算机科学家把很多 Charles Babbage 的点子融入到他们的机器，<strong>所以Charles Babbage 经常被认为是 “计算之父”</strong>。</p><h3 id="7-打孔机"><a href="#7-打孔机" class="headerlink" title="7. 打孔机"></a>7. 打孔机</h3><p>到了19世纪末，为了解决人口普查耗时太长的问题，美国人口普查找了Herman Hollerith，他发明了打孔卡片制表机。他的机器是“电动机械的”，用传统机械来计数，结构类似莱布尼茨的乘法器，但用电动结构连接其他组件。Hollerith 的机器用打孔卡，一种纸卡，上面有网格，用打孔来表示数据。Hollerith 的机器速度是手动的 10 倍左右！</p><p>企业开始意识到计算机的价值，可以提升劳动力以及数据密集型任务，来提升利润。为了满足这一需求，Hollerith 成立了制表机器公司。这家公司后来在1924年与其他机械制造商合并，成为了“国际商业机器公司”，<strong>简称IBM。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ComputerScience </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加live2d动态模型插件</title>
      <link href="/2019/11/04/other/live2d/"/>
      <url>/2019/11/04/other/live2d/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>live2d动态模型插件是一款非常有意思的插件。</p><p>使用和安装<code>helper-live2d</code>动态插件，需具备以下前提条件：</p><a id="more"></a><ol><li>hexo博客，没有搭建的可以看我以前的文章《<a href="https://zero6996.github.io/2018/12/04/Other/hexo-git搭建个人博客/" target="_blank" rel="noopener">hexo+git搭建hexo个人博客</a>》</li><li>Node.js环境和npm</li><li>插件Github地址：<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a></li><li>live2d模型仓库地址：<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">live2d-widget-models</a>以及部分模型<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">预览网址</a></li></ol><h3 id="1-安装模块"><a href="#1-安装模块" class="headerlink" title="1. 安装模块"></a>1. 安装模块</h3><p>在hexo跟目录执行命令</p><pre><code class="bash">cnpm install --save hexo-helper-live2d</code></pre><h3 id="2-下载模型"><a href="#2-下载模型" class="headerlink" title="2. 下载模型"></a>2. 下载模型</h3><p>可先查看模型预览：<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">hexo live2d插件 2.0</a></p><h4 id="2-1-安装模型"><a href="#2-1-安装模型" class="headerlink" title="2.1 安装模型"></a>2.1 安装模型</h4><p>使用<code>npm install {packagename}</code>安装单独模型，包名称列表如下：</p><ul><li><code>live2d-widget-model-chitose</code></li><li><code>live2d-widget-model-epsilon2_1</code></li><li><code>live2d-widget-model-gf</code></li><li><code>live2d-widget-model-haru/01</code>（使用<code>npm install --save live2d-widget-model-haru</code>）</li><li><code>live2d-widget-model-haru/02</code>（使用<code>npm install --save live2d-widget-model-haru</code>）</li><li><code>live2d-widget-model-haruto</code></li><li><code>live2d-widget-model-hibiki</code></li><li><code>live2d-widget-model-hijiki</code></li><li><code>live2d-widget-model-izumi</code></li><li><code>live2d-widget-model-koharu</code></li><li><code>live2d-widget-model-miku</code></li><li><code>live2d-widget-model-ni-j</code></li><li><code>live2d-widget-model-nico</code></li><li><code>live2d-widget-model-nietzsche</code></li><li><code>live2d-widget-model-nipsilon</code></li><li><code>live2d-widget-model-nito</code></li><li><code>live2d-widget-model-shizuku</code></li><li><code>live2d-widget-model-tororo</code></li><li><code>live2d-widget-model-tsumiki</code></li><li><code>live2d-widget-model-unitychan</code></li><li><code>live2d-widget-model-wanko</code></li><li><code>live2d-widget-model-z16</code></li></ul><p>举例本人安装的模型：</p><pre><code class="bash">cnpm install live2d-widget-model-tororo</code></pre><h3 id="3-进行详细配置"><a href="#3-进行详细配置" class="headerlink" title="3. 进行详细配置"></a>3. 进行详细配置</h3><p>在Hexo的<code>_config.yml</code>文件下或主题的<code>_config.yml</code>文件中均可配置：</p><p>配置API查看：<a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" rel="noopener">live2d-widget.js API</a></p><h4 id="3-1-API配置"><a href="#3-1-API配置" class="headerlink" title="3.1 API配置"></a>3.1 API配置</h4><p>本人博客配置文件如下</p><pre><code class="yml"># Live 2D settings## 插件github地址：https://github.com/EYHN/hexo-helper-live2d## API网址：https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-initlive2d:    enable: true  scriptFrom: local # 默认  pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)  pluginJsPath: lib/ # 脚本文件相对与插件根目录路径  pluginModelPath: assets/ # 模型文件相对与插件根目录路径  # scriptFrom: jsdelivr # jsdelivr CDN  # scriptFrom: unpkg # unpkg CDN  # scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url  tagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中  debug: true # 调试, 是否在控制台输出日志  model:    use: live2d-widget-model-tororo # npm-module package name    # use: wanko # 博客根目录/live2d_models/ 下的目录名    # use: ./wives/wanko # 相对于博客根目录的路径    # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url  display:    position: right    width: 145    height: 315  mobile:    show: true # 是否在移动设备上显示    scale: 0.5 # 移动设备上的缩放         react:    opacityDefault: 0.7    opacityOnHover: 0.8</code></pre><blockquote><p>本文内容参考摘录自文章<a href="https://joeybling.github.io/2019/05/05/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0helper-live2d%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">Hexo博客添加helper-live2d动态模型插件</a>，欢迎大家关注该作者。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2019/10/28/other/git/"/>
      <url>/2019/10/28/other/git/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git简介"><a href="#1-Git简介" class="headerlink" title="1. Git简介"></a>1. Git简介</h2><p>Git是目前世界上最先进的<strong>分布式版本控制系统</strong>。</p><a id="more"></a><p>Linus大神为了解决Linux代码管理问题，在2005年花费两周时间用C编写了Git，此后迅速成为最流行的分布式版本控制系统。2008年，GitHub网站上线，它为开源项目免费提供Git存储，无数开源项目迁移至GitHub。</p><blockquote><p>本文仅做Git最基本操作的学习，方便速查。详细教程请看廖雪峰<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a></p></blockquote><h3 id="1-1-安装Git"><a href="#1-1-安装Git" class="headerlink" title="1.1 安装Git"></a>1.1 安装Git</h3><p><a href="https://git-scm.com/" target="_blank" rel="noopener">进入官网</a>下载Git安装包，直接默认安装即可。</p><p>打开CMD，输入git，测试是否安装成功。</p><h2 id="2-远程仓库"><a href="#2-远程仓库" class="headerlink" title="2. 远程仓库"></a>2. 远程仓库</h2><p>使用远程仓库，需要先配置SSH。</p><h3 id="2-1-配置SSH"><a href="#2-1-配置SSH" class="headerlink" title="2.1 配置SSH"></a>2.1 配置SSH</h3><p>SSH用于身份验证，我们首先需要生成一个SSH密钥，然后添加到GitHub中。</p><ol><li>打开Git Bash</li><li>输入以下命令生成一个ssh密钥：<code>ssh-keygen -t rsa -C 'your email@example.com'</code>，一般情况下无需设置，一路回车就行。</li><li>输入命令<code>cd ~/.ssh/</code>，进入ssh文件夹。里面有两个文件，<code>id_rsa</code>和<code>id_rsa.pub</code>，这两个就是SSH Key的密钥对。其中<code>id_rsa</code>是私钥，不能泄露！<code>id_rsa.pub</code>是公钥，可以公开使用。</li><li>将SSH公钥复制到剪贴板：<code>clip &lt; ~/.ssh/id_rsa.pub</code></li><li>登录GitHub，右上角点击个人头像，然后点击<code>settings</code>进入设置界面。</li><li>点击<code>SSH and GPG keys</code>，然后点击<code>New SSH key</code>，填上任意title，在Key文本框内粘贴<code>id_rsa.pub</code>文件的内容，点击<code>Add Key</code>，就成功添加SSH key了！</li></ol><h3 id="2-2-克隆远程仓库"><a href="#2-2-克隆远程仓库" class="headerlink" title="2.2 克隆远程仓库"></a>2.2 克隆远程仓库</h3><p>首先需要在GitHub创建一个仓库，直接点击<code>New repository</code>，然后根据提示即可创建仓库。接下来我们将远程仓库克隆到本地，进行操作。</p><ol><li>打开GitHub仓库界面，点击右边的<code>clone or download</code>，选择SSH方式，复制仓库地址。</li><li>打开Git Bash</li><li>输入<code>git git@github.com:zero6996/Learn_Git.git</code>，即可将远程仓库克隆到本地。</li></ol><h2 id="3-Git基本操作"><a href="#3-Git基本操作" class="headerlink" title="3. Git基本操作"></a>3. Git基本操作</h2><ul><li><p>初始化git，将当前文件夹交由git管理：<code>git init</code></p></li><li><p>查看当前分支状态：<code>git status</code></p></li><li>提交到暂存区：<code>git add &lt;file&gt;</code></li><li>提交到仓库：<code>git commit file -m "message"</code></li></ul><h3 id="3-1-配置用户信息"><a href="#3-1-配置用户信息" class="headerlink" title="3.1 配置用户信息"></a>3.1 配置用户信息</h3><ul><li>配置全局用户信息：<code>git config --system user.email youremail@email.com</code></li><li>配置当前用户信息：<code>git config --global user.name yourname</code></li></ul><blockquote><p>用户配置文件在<code>.git/config</code></p></blockquote><h3 id="3-2-查看日志"><a href="#3-2-查看日志" class="headerlink" title="3.2 查看日志"></a>3.2 查看日志</h3><ul><li>查看当前工作日志：<code>git log</code></li><li>查看历史工作日志：<code>git reflog</code></li><li>查看更改日志：<code>git diff</code></li></ul><h3 id="3-3-回退版本"><a href="#3-3-回退版本" class="headerlink" title="3.3 回退版本"></a>3.3 回退版本</h3><ul><li>退回到上N个版本：<code>git reset --hard HEAD^</code>，一个<code>^</code>代表退回一个版本，以此类推。</li></ul><blockquote><p>HEAD指向的版本就是当前版本</p></blockquote><ul><li>退回到指定版本：<code>git reset --hard commit_id</code>，<code>commit_id</code>是指定版本号，举例<code>git reset --hard cbc5fdb</code>。</li></ul><h3 id="3-4-文件操作"><a href="#3-4-文件操作" class="headerlink" title="3.4 文件操作"></a>3.4 文件操作</h3><ul><li>移动文件：<code>git mv movefile_name targetdir/</code></li><li>删除文件：<code>git rm filename</code>，如果该文件已提交到版本库中，则直接删除版本库中文件。</li></ul><h2 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4. 分支管理"></a>4. 分支管理</h2><h3 id="4-1-分支基本操作"><a href="#4-1-分支基本操作" class="headerlink" title="4.1 分支基本操作"></a>4.1 分支基本操作</h3><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch &lt;name&gt;</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或<code>git switch -c &lt;name&gt;</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li><li>删除分支：<code>git branch -d &lt;name&gt;</code></li></ul><h2 id="5-标签管理"><a href="#5-标签管理" class="headerlink" title="5. 标签管理"></a>5. 标签管理</h2><p>标签可以用于给版本库中的版本打标记，方便版本管理。</p><ul><li>命令 <code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit_id。</li><li>命令 <code>git tag -a &lt;tagname&gt; -m 'message...</code>可以指定标签信息。</li><li><p>命令<code>git tag</code> 可以查看所有标签。</p></li><li><p>命令 <code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签到远程</p></li><li>命令 <code>git push origin --tags</code>可以推送本地全部未推送的标签到远程</li><li>命令 <code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签</li><li>命令 <code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合Demo</title>
      <link href="/2019/09/05/framework/ssm-zheng-he-xiang-mu/"/>
      <url>/2019/09/05/framework/ssm-zheng-he-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SSM整合项目"><a href="#1-SSM整合项目" class="headerlink" title="1. SSM整合项目"></a>1. SSM整合项目</h2><h3 id="1-1-搭建环境"><a href="#1-1-搭建环境" class="headerlink" title="1.1 搭建环境"></a>1.1 搭建环境</h3><a id="more"></a><ul><li>SSM整合可以使用多种方式，这里选择XML+注解的方式</li><li>整合思路<ul><li>先搭建整合环境</li><li>把Spring的配置搭建完成</li><li>使用Spring整合SpringMVC框架</li><li>最后使用Spring整合MyBatis框架</li></ul></li></ul><h3 id="1-2-基本环境"><a href="#1-2-基本环境" class="headerlink" title="1.2 基本环境"></a>1.2 基本环境</h3><ul><li>创建数据库表和表结构</li></ul><pre><code class="sql">create database ssm01;use ssm01;create table account(    id int primary key auto_increment,    name varchar(100),    money double);</code></pre><ul><li>创建一个Maven工程，在pom.xml文件中引入坐标依赖</li></ul><pre><code class="xml">&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;    &lt;!--设置版本锁定--&gt;    &lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt;    &lt;slf4j.version&gt;1.6.6&lt;/slf4j.version&gt;    &lt;log4j.version&gt;1.2.12&lt;/log4j.version&gt;    &lt;mysql.version&gt;5.1.6&lt;/mysql.version&gt;    &lt;mybatis.version&gt;3.4.5&lt;/mybatis.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;!-- spring --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.aspectj&lt;/groupId&gt;        &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;        &lt;version&gt;1.6.8&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;${mysql.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;        &lt;version&gt;2.5&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;        &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;        &lt;version&gt;2.0&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;jstl&lt;/groupId&gt;        &lt;artifactId&gt;jstl&lt;/artifactId&gt;        &lt;version&gt;1.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- log start --&gt;    &lt;dependency&gt;        &lt;groupId&gt;log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j&lt;/artifactId&gt;        &lt;version&gt;${log4j.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;        &lt;version&gt;${slf4j.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;        &lt;version&gt;${slf4j.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- log end --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;${mybatis.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;        &lt;version&gt;1.3.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;c3p0&lt;/groupId&gt;        &lt;artifactId&gt;c3p0&lt;/artifactId&gt;        &lt;version&gt;0.9.1.2&lt;/version&gt;        &lt;type&gt;jar&lt;/type&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><ul><li>创建基础环境，具体如下图所示：</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/09/06/ssm01-1567700025391.jpg" alt="ssm01"></p><ul><li>AccountDao代码</li></ul><pre><code class="java">/** * 账户dao接口 */public interface AccountDao {    /**     * 查询所有用户     * @return     */    public List&lt;Account&gt; findAll();    /**     * 保存账户     * @param account     */    public void SaveAccount(Account account);}</code></pre><ul><li>Account实体类代码</li></ul><pre><code class="java">/** * 账户类 */public class Account implements Serializable {    private Integer id;    private String name;    private Double money;}</code></pre><ul><li>业务层代码</li></ul><pre><code class="java">public class AccountServiceImpl implements AccountService {    @Override    public List&lt;Account&gt; findAll() {        System.out.println("业务层：查询所有账户....");        return null;    }    @Override    public void SaveAccount(Account account) {        System.out.println("业务层：保存账户....");    }}</code></pre><h2 id="2-Spring框架代码编写"><a href="#2-Spring框架代码编写" class="headerlink" title="2. Spring框架代码编写"></a>2. Spring框架代码编写</h2><h3 id="2-1-搭建和测试Spring开发环境"><a href="#2-1-搭建和测试Spring开发环境" class="headerlink" title="2.1 搭建和测试Spring开发环境"></a>2.1 搭建和测试Spring开发环境</h3><ul><li>在resources项目中创建applicationContext.xml配置文件，编写具体的配置信息。</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;    &lt;!-- 开启注解扫描，要扫描的是service和dao层的注解        要忽略web层注解，因为web层让SpringMVC框架去管理 --&gt;    &lt;context:component-scan base-package="com.zero"&gt;        &lt;!-- 配置要忽略的注解 --&gt;        &lt;context:exclude-filter type="annotation"                             expression="org.springframework.stereotype.Controller"/&gt;    &lt;/context:component-scan&gt;&lt;/beans&gt;</code></pre><ul><li>编写一个测试方法进行测试</li></ul><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:applicationContext.xml")public class TestSpring {    @Resource(name = "accountService")    private AccountService accountService;    @Test    public void test1(){        accountService.findAll();        accountService.SaveAccount(new Account());    }}</code></pre><h2 id="3-Spring整合SpringMVC框架"><a href="#3-Spring整合SpringMVC框架" class="headerlink" title="3. Spring整合SpringMVC框架"></a>3. Spring整合SpringMVC框架</h2><h3 id="3-1-搭建和测试SpringMVC的开发环境"><a href="#3-1-搭建和测试SpringMVC的开发环境" class="headerlink" title="3.1 搭建和测试SpringMVC的开发环境"></a>3.1 搭建和测试SpringMVC的开发环境</h3><ul><li>在web.xml中配置DispatcherServlet前端控制器，中文乱码过滤器</li></ul><pre><code class="xml">&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;  &lt;!--配置DispatcherServlet前端控制器--&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;!--配置初始化参数，创建完dispatcherServlet对象后加载springMVC.xml配置文件--&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;!--服务器启动时，就让dispatcherServlet对象创建--&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;  &lt;!-- 配置解决中文乱码的过滤器 --&gt;  &lt;filter&gt;    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;encoding&lt;/param-name&gt;      &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/filter&gt;  &lt;filter-mapping&gt;    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/filter-mapping&gt;&lt;/web-app&gt;</code></pre><ul><li>创建springMVC.xml配置文件</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:mvc="http://www.springframework.org/schema/mvc"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd"&gt;    &lt;!--扫描controller的注解，别的不用扫描--&gt;    &lt;context:component-scan base-package="com.zero.controller"&gt;        &lt;!-- 配置包含的注解 --&gt;        &lt;context:include-filter type="annotation"                                expression="org.springframework.stereotype.Controller"/&gt;    &lt;/context:component-scan&gt;    &lt;!--配置视图解析器--&gt;    &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;        &lt;!--配置前后缀--&gt;        &lt;property name="prefix" value="/WEB-INF/pages/" /&gt;        &lt;property name="suffix" value=".jsp"/&gt;    &lt;/bean&gt;    &lt;!--设置静态资源不过滤--&gt;    &lt;mvc:resources mapping="/css/**" location="/css/"/&gt;    &lt;mvc:resources mapping="/images/**" location="/images/"/&gt;    &lt;mvc:resources mapping="/js/**" location="/js/"/&gt;    &lt;!--开启对SpringMVC的注解支持--&gt;    &lt;mvc:annotation-driven/&gt;&lt;/beans&gt;</code></pre><ul><li>控制器代码</li></ul><pre><code class="java">@Controller@RequestMapping("account")public class AccountController {    @RequestMapping("/findAll")    public String findAll(){        System.out.println("表现层：查询所有用户....");        return "list";    }}</code></pre><ul><li>jsp：<code>&lt;a href="/account/findAll"&gt;查询所有用户&lt;/a&gt;</code></li></ul><h3 id="3-2-Spring整合SpringMVC的框架"><a href="#3-2-Spring整合SpringMVC的框架" class="headerlink" title="3.2 Spring整合SpringMVC的框架"></a>3.2 Spring整合SpringMVC的框架</h3><ul><li>目的：能在controller中成功调用service对象中的方法，查询数据。</li><li>在项目启动时，就去加载applicationContext.xml的配置文件，在web.xml中配置<code>ContextLoaderListener</code>监听器（该监听器默认只能加载WEB-INF目录下的applicationContext.xml的配置文件）。</li></ul><pre><code class="xml">&lt;!--配置Spring提供的监听器，用于启动服务器时加载容器--&gt;&lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;&lt;!--手动指定springMVC配置文件位置--&gt;&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;</code></pre><ul><li>修改控制器代码，注入service属性，调用方法</li></ul><pre><code class="java"> @Controller@RequestMapping("account")public class AccountController {    // 注入service对象    @Autowired    private AccountService accountService;    @RequestMapping("/findAll")    public String findAll(){        System.out.println("表现层：查询所有用户....");        // 调用service的方法        accountService.findAll();        return "list";    }}</code></pre><ul><li>测试结果</li></ul><pre><code>表现层：查询所有用户....业务层：查询所有账户....</code></pre><h2 id="4-Spring整合MyBatis框架"><a href="#4-Spring整合MyBatis框架" class="headerlink" title="4. Spring整合MyBatis框架"></a>4. Spring整合MyBatis框架</h2><h3 id="4-1-搭建和测试MyBatis的环境"><a href="#4-1-搭建和测试MyBatis的环境" class="headerlink" title="4.1 搭建和测试MyBatis的环境"></a>4.1 搭建和测试MyBatis的环境</h3><ul><li>在resources资源文件夹下创建SqlMapConfig.xml的配置文件，编写核心配置文件。</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;!--MyBatis核心配置文件--&gt;&lt;configuration&gt;    &lt;!--配置数据库环境--&gt;    &lt;environments default="mysql"&gt;        &lt;environment id="mysql"&gt;            &lt;transactionManager type="JDBC"/&gt;            &lt;dataSource type="POOLED"&gt;                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;                &lt;property name="url" value="jdbc:mysql:///ssm01"/&gt;                &lt;property name="username" value="root"/&gt;                &lt;property name="password" value="123456"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!-- 引入映射配置文件，这里使用的是注解方式 --&gt;    &lt;mappers&gt;        &lt;!--&lt;mapper class="com.zero.dao.AccountDao"/&gt;--&gt;        &lt;!-- 该包下所有的dao接口都可以使用 --&gt;        &lt;package name="com.zero.dao"/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><ul><li>使用注解方式进行SQL语句编写</li></ul><pre><code class="java">/** * 账户dao接口 */@Resourcepublic interface AccountDao {    /**     * 查询所有用户     * @return     */    @Select("select * from account")    public List&lt;Account&gt; findAll();    /**     * 保存账户     * @param account     */    @Insert("insert into account (name,money) values(#{name},#{money})")    public void SaveAccount(Account account);}</code></pre><ul><li>编写测试方法</li></ul><pre><code class="java">public class TestMyBatis {    /**     * 测试查询     * @throws Exception     */    @Test    public void test1() throws Exception {        // 加载配置文件        InputStream inputStream = Resources.getResourceAsStream("SqlMapConfig.xml");        // 创建工厂        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);        // 创建sqlSession对象        SqlSession session = factory.openSession();        // 获取代理对象        AccountDao dao = session.getMapper(AccountDao.class);        List&lt;Account&gt; list = dao.findAll();        for (Account account:list){            System.out.println(account);        }        // 释放资源        session.close();        inputStream.close();    }    /**     * 测试保存     * @throws Exception     */    @Test    public void test2() throws Exception {        Account account = new Account();        account.setName("小黑");        account.setMoney(400d);        // 加载配置文件        InputStream inputStream = Resources.getResourceAsStream("SqlMapConfig.xml");        // 创建工厂        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(inputStream);        // 创建sqlSession对象        SqlSession session = factory.openSession();        // 获取代理对象        AccountDao dao = session.getMapper(AccountDao.class);        dao.SaveAccount(account);        // 提交事务        session.commit();        // 释放资源        session.close();        inputStream.close();    }}</code></pre><h3 id="4-2-Spring整合MyBatis框架"><a href="#4-2-Spring整合MyBatis框架" class="headerlink" title="4.2 Spring整合MyBatis框架"></a>4.2 Spring整合MyBatis框架</h3><ul><li>目的：把SqlMapConfig.xml配置文件配置到Spring的配置文件中。</li></ul><h4 id="4-2-1-让Spring接管MyBatis的Session工厂"><a href="#4-2-1-让Spring接管MyBatis的Session工厂" class="headerlink" title="4.2.1 让Spring接管MyBatis的Session工厂"></a>4.2.1 让Spring接管MyBatis的Session工厂</h4><pre><code class="xml">&lt;!--spring整合MyBatis框架--&gt;&lt;!--配置c3p0连接池--&gt;&lt;bean id="DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;    &lt;property name="driverClass" value="com.mysql.jdbc.Driver"/&gt;    &lt;property name="jdbcUrl" value="jdbc:mysql:///ssm01"/&gt;    &lt;property name="user" value="root"/&gt;    &lt;property name="password" value="123456"/&gt;&lt;/bean&gt;&lt;!--配置SqlSessionFactory工厂--&gt;&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;    &lt;property name="dataSource" ref="DataSource"/&gt;&lt;/bean&gt;</code></pre><h4 id="4-2-2-配置自动扫描所有Mapper接口和文件"><a href="#4-2-2-配置自动扫描所有Mapper接口和文件" class="headerlink" title="4.2.2 配置自动扫描所有Mapper接口和文件"></a>4.2.2 配置自动扫描所有Mapper接口和文件</h4><pre><code class="xml">&lt;!--配置AccountDao接口所在包--&gt;&lt;!-- 引入映射配置文件--&gt;&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;    &lt;property name="basePackage" value="com.zero.dao"/&gt;&lt;/bean&gt;</code></pre><h4 id="4-2-4-测试"><a href="#4-2-4-测试" class="headerlink" title="4.2.4 测试"></a>4.2.4 测试</h4><ul><li>在AccountDao接口上添加注解</li></ul><pre><code class="java">/** * 账户dao接口 */@Repositorypublic interface AccountDao {}</code></pre><ul><li>在service层调用Dao</li></ul><pre><code class="java">@Service("accountService") // 将service交由IOC容器管理public class AccountServiceImpl implements AccountService {    // 注入Dao接口    @Autowired    private AccountDao accountDao;    @Override    public List&lt;Account&gt; findAll() {        System.out.println("业务层：查询所有账户....");        // 调用dao查询        return accountDao.findAll();    }    @Override    public void SaveAccount(Account account) {        System.out.println("业务层：保存账户....");        accountDao.SaveAccount(account);    }}</code></pre><ul><li>控制器代码</li></ul><pre><code class="java">@Controller@RequestMapping("account")public class AccountController {    // 注入service对象    @Autowired    private AccountService accountService;    @RequestMapping("/findAll")    public String findAll(Model model){        System.out.println("表现层：查询所有用户....");        // 调用service的方法        List&lt;Account&gt; list = accountService.findAll();        model.addAttribute("list",list); // 存入request域        return "list";    }}</code></pre><ul><li><code>list.jsp</code>页面</li></ul><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %&gt;&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;用户列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;用户列表&lt;/h3&gt;&lt;c:forEach items="${list}" var="account"&gt;    用户姓名：${account.name}&lt;br&gt;    余额：${account.money}&lt;br&gt;&lt;/c:forEach&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="4-2-5-配置Spring的声明式事务管理"><a href="#4-2-5-配置Spring的声明式事务管理" class="headerlink" title="4.2.5 配置Spring的声明式事务管理"></a>4.2.5 配置Spring的声明式事务管理</h4><ul><li>在<code>applicationContext.xml</code>中配置事务</li></ul><pre><code class="xml">&lt;!--3. 配置Spring框架声明式事务管理--&gt;&lt;!--3.1 配置事务管理器--&gt;&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;    &lt;property name="dataSource" ref="DataSource"/&gt;&lt;/bean&gt;&lt;!--3.2 配置事务通知--&gt;&lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt;    &lt;tx:attributes&gt;        &lt;tx:method name="find*" read-only="true"/&gt;        &lt;tx:method name="*" isolation="DEFAULT"/&gt;    &lt;/tx:attributes&gt;&lt;/tx:advice&gt;&lt;!--3.3 配置AOP增强--&gt;&lt;aop:config&gt;    &lt;aop:advisor advice-ref="txAdvice" pointcut="execution(* com.zero.service.Impl.*ServiceImpl.*(..))"/&gt;&lt;/aop:config&gt;</code></pre><ul><li>控制器新增保存用户方法</li></ul><pre><code class="java">/**     * 保存用户     * @param account     * @return     */@RequestMapping("/save")public String save(Account account){    System.out.println("表现层：保存用户....");    accountService.SaveAccount(account);    return "redirect:findAll";}</code></pre><ul><li><code>index.jsp</code>中添加代码，提交用户表单</li></ul><pre><code class="jsp">&lt;h3&gt;保存用户&lt;/h3&gt;&lt;form action="/account/save" method="post"&gt;    用户名：&lt;input type="text" name="name"&gt;&lt;br&gt;    金额：&lt;input type="text" name="money"&gt;&lt;br&gt;    &lt;input type="submit" value="保存"&gt;&lt;/form&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习2</title>
      <link href="/2019/09/04/framework/springmvc-kuang-jia-2/"/>
      <url>/2019/09/04/framework/springmvc-kuang-jia-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-响应数据和结果视图"><a href="#1-响应数据和结果视图" class="headerlink" title="1. 响应数据和结果视图"></a>1. 响应数据和结果视图</h2><h3 id="1-1-返回值分类"><a href="#1-1-返回值分类" class="headerlink" title="1.1 返回值分类"></a>1.1 返回值分类</h3><a id="more"></a><h4 id="1-1-1-字符串"><a href="#1-1-1-字符串" class="headerlink" title="1.1.1 字符串"></a>1.1.1 字符串</h4><p>Controller方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。</p><pre><code class="java">// 返回值是字符串@RequestMapping("/testString")public String testString(Model model){    System.out.println("testString方法执行了...");    // 模拟从数据库中查询出User对象    User user = new User("小明", "123", 22);    // 使用model传递数据    model.addAttribute("user",user);    return "success"; // 指定逻辑视图名，经过视图解析器解析为jsp物理路径：/WEB-INF/pages/success.jsp}</code></pre><h4 id="1-1-2-void"><a href="#1-1-2-void" class="headerlink" title="1.1.2 void"></a>1.1.2 void</h4><p>上篇文章中学到Servlet原始API可以作为控制器中方法的参数：</p><pre><code class="java">@RequestMapping("/testReturnVoid")public void testReturnVoid(HttpServletRequest request,HttpServletResponse response)throws Exception {    xxx}</code></pre><p>所以就可以在controller方法形参上可以定义request和response，使用request或response指定响应结果</p><ul><li>使用request跳转页面：</li></ul><pre><code class="java">/**     * 通过request跳转页面     * @param request     * @param response     * @throws Exception     */@RequestMapping("/testForward")public void testForward(HttpServletRequest request,                        HttpServletResponse response) throws Exception {    System.out.println("testForward方法执行了...");    request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);}</code></pre><ul><li>通过response重定向页面：</li></ul><pre><code class="java">/**     * 通过response重定向页面     * @param request     * @param response     * @throws Exception     */@RequestMapping("/testRedirect")public void testRedirect(HttpServletRequest request,                         HttpServletResponse response) throws Exception {    System.out.println("testRedirect方法执行了...");    response.sendRedirect("testString"); // 重定向到返回字符串页面}</code></pre><ul><li>通过response指定响应结果：</li></ul><pre><code class="java"> /**     * 通过 response 指定响应结果     * @param request     * @param response     * @throws Exception     */@RequestMapping("/testReturnJson")public void testReturnJson(HttpServletRequest request,                           HttpServletResponse response) throws Exception {    System.out.println("testReturnJson方法执行了...");    // 解决中文乱码问题    response.setCharacterEncoding("utf-8");    response.setContentType("application/json;charset=utf-8");    response.getWriter().write("响应json串");}</code></pre><h4 id="1-1-3-ModelAndView"><a href="#1-1-3-ModelAndView" class="headerlink" title="1.1.3 ModelAndView"></a>1.1.3 ModelAndView</h4><ul><li>ModelAndView 是 SpringMVC 为我们提供的一个对象，该对象也可以用作控制器方法的返回值。</li></ul><p>该对象中有两个主要方法</p><ul><li>ModelAndView addObject(String,Object)：添加模型到ModelMap对象中。</li><li><p>void serViewName(String)：用于设置逻辑视图名称，视图解析器会根据名称前往指定视图。</p></li><li><p>示例代码</p><ul><li>控制器</li></ul><pre><code class="java">/**     * 返回ModelAndView     * @return     */@RequestMapping("/testReturnModelAndView")public ModelAndView testReturnModelAndView(){    ModelAndView modelAndView = new ModelAndView();    // 将user对象存入到modelAndView对象中，底层会把user对象存入request域中    modelAndView.addObject("user",new User("小张","222",21));    modelAndView.setViewName("success"); // 设置视图名称    return modelAndView;}</code></pre><ul><li>jsp：</li></ul><pre><code class="jsp">&lt;h3&gt;访问成功！&lt;/h3&gt;${user.username}${user.password}${user.age}</code></pre></li></ul><h3 id="1-2-转发和重定向"><a href="#1-2-转发和重定向" class="headerlink" title="1.2 转发和重定向"></a>1.2 转发和重定向</h3><h4 id="1-2-1-forward转发"><a href="#1-2-1-forward转发" class="headerlink" title="1.2.1 forward转发"></a>1.2.1 forward转发</h4><p>controller方法提供了String类型的返回值之后，默认就是请求转发。我们也可以写成如下形式：</p><pre><code class="java">@RequestMapping("/testForward")    public String testForward()  {        System.out.println("testForward方法执行了...");        return "forward:/WEB-INF/pages/success.jsp"; // 使用了forward:,路径就必须写成物理视图url    }</code></pre><ul><li>注意：如果用了<code>forward:</code>，则路径必须写成实际视图 URL，不能写逻辑视图。</li><li>它相当于：<code>request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);</code></li><li>使用请求转发，即可以转发到jsp，也可以转发到其他控制器方法。例：<code>return "forward:testString";</code></li></ul><h4 id="1-2-2-Redirect重定向"><a href="#1-2-2-Redirect重定向" class="headerlink" title="1.2.2 Redirect重定向"></a>1.2.2 Redirect重定向</h4><pre><code class="java">@RequestMapping("/testRedirect")public String testRedirect() {    System.out.println("testRedirect方法执行了...");    return "redirect:testString"; // 重定向到返回字符串页面}</code></pre><ul><li>相当于：<code>response.sendRedirect("testString");</code></li><li>注意：如果是重定向到 jsp 页面，则 jsp 页面不能写在 WEB-INF 目录中，否则无法找到。</li></ul><h3 id="1-3-ResponseBody响应Json数据"><a href="#1-3-ResponseBody响应Json数据" class="headerlink" title="1.3 ResponseBody响应Json数据"></a>1.3 ResponseBody响应Json数据</h3><ul><li>作用：该注解用于将Controller的方法返回的对象，通过<code>HttpMessageConverter</code>接口转换为指定格式的数据如：json,xml 等，通过Response响应给客户端。</li></ul><h4 id="1-3-1-关于静态资源拦截问题"><a href="#1-3-1-关于静态资源拦截问题" class="headerlink" title="1.3.1 关于静态资源拦截问题"></a>1.3.1 关于静态资源拦截问题</h4><p><code>DispatcherServlet</code>会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而不能被使用。解决问题就是需要配置静态资源不进行拦截</p><ul><li>方法1：在SpringMVC.xml配置文件内使用<code>mvc:resources</code>标签配置资源文件不拦截<ul><li>location元素表示webapp目录下的包下的所有文件</li><li>mapping元素表示以<code>/static</code>开头的所有请求路径</li></ul></li></ul><pre><code class="xml">&lt;!-- 设置静态资源不过滤 --&gt;&lt;mvc:resources location="/css/" mapping="/css/**"/&gt; &lt;!-- 样式 --&gt;&lt;mvc:resources location="/images/" mapping="/images/**"/&gt; &lt;!-- 图片 --&gt;&lt;mvc:resources location="/js/" mapping="/js/**"/&gt; &lt;!-- javascript --&gt;</code></pre><ul><li>方法2：在web.xml配置文件中配置如下</li></ul><pre><code class="xml">&lt;!--设置访问静态资源--&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.css&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><h4 id="1-3-2-示例"><a href="#1-3-2-示例" class="headerlink" title="1.3.2 示例"></a>1.3.2 示例</h4><p>简单的获取json数据</p><ul><li>控制器代码</li></ul><pre><code class="java">/**     * 测试响应json数据     * @param     * @return     */@RequestMapping("/testResponseJson")public void testResponseJson(@RequestBody String body){    System.out.println("异步请求:"+body);}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;script&gt;    // 页面加载,绑定单机事件    $(function () {        $("#btn").click(function () {            // 发送ajax请求            $.ajax({                type:"post",                url:"user/testResponseJson",                contentType:"application/json;charset=utf-8",                data:'{"username":"小明","password":"123","age":33}',                dataType:"json",                success:function (data) {                    alert(data);                }            })        })    })&lt;/script&gt;&lt;h3&gt;6. ResponseBody响应Json数据&lt;/h3&gt;&lt;button id="btn"&gt;发送Ajax请求&lt;/button&gt;</code></pre><ul><li>测试结果：<code>异步请求:{"username":"小明","password":"123","age":33}</code></li></ul><p>如果需要将获取的json格式数据转换为JavaBean对象，则需要导入额外的jar包</p><ul><li>在pom.xml中导入坐标</li></ul><pre><code class="xml">&lt;!--导入json和JavaBean对象相互转换所需jar包：jackson--&gt;&lt;dependency&gt;    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;    &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;    &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;    &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><ul><li>控制器代码修改</li></ul><pre><code class="java">@RequestMapping("/testResponseJson")public @ResponseBody User testResponseJson(@RequestBody User user){    System.out.println("异步请求:"+user);    user.setUsername("花花");    user.setAge(18);    return user;}</code></pre><ul><li>前端修改js</li></ul><pre><code class="javascript">&lt;script&gt;    // 页面加载,绑定单机事件    $(function () {    $("#btn").click(function () {        // 发送ajax请求        $.ajax({            type:"post",            url:"user/testResponseJson",            contentType:"application/json;charset=utf-8",            data:'{"username":"小明","password":"123","age":33}',            dataType:"json",            success:function (data) {                // data是服务器端响应的json数据                alert(data.username);                alert(data.password);                alert(data.age);            }        })    })})&lt;/script&gt;</code></pre><h2 id="2-SpringMVC实现文件上传"><a href="#2-SpringMVC实现文件上传" class="headerlink" title="2. SpringMVC实现文件上传"></a>2. SpringMVC实现文件上传</h2><h3 id="2-1-文件上传回顾"><a href="#2-1-文件上传回顾" class="headerlink" title="2.1 文件上传回顾"></a>2.1 文件上传回顾</h3><h4 id="2-1-1-必要前提"><a href="#2-1-1-必要前提" class="headerlink" title="2.1.1 必要前提"></a>2.1.1 必要前提</h4><ul><li>form表单的enctype(表单请求正文的类型)取值必须是：<code>multipart/form-data</code>，默认值是<code>application/x-www-form-urlencoded</code>。</li><li>method属性取值必须是Post</li><li>提供一个文件选择域<code>&lt;input type="file"/&gt;</code></li></ul><h4 id="2-1-2-原理分析"><a href="#2-1-2-原理分析" class="headerlink" title="2.1.2 原理分析"></a>2.1.2 原理分析</h4><ul><li>当form表单的enctype取值不是默认值后，<code>request.getParameter()</code>将会失效。</li><li><code>enctype=”application/x-www-form-urlencoded”</code>时，form 表单的正文内容是键值对形式。</li><li>当form表单的enctype取值为<code>multipart/form-data</code>时，请求正文内容就变成：每一部分都是MIME类型描述的正文。</li></ul><pre><code>-----------------------------7de1a433602ac                     --&gt;分界符Content-Disposition: form-data; name="userName"             --&gt;协议头文件上传测试                                                      --&gt;协议的正文-----------------------------7de1a433602acContent-Disposition: form-data; name="file";filename="C:\Users\zhy\Desktop\fileupload_demofile\b.txt"Content-Type: text/plain                                     --&gt;协议的类型（MIME 类型）文件实际内容xxxxxx-----------------------------7de1a433602ac--</code></pre><h4 id="2-1-3-借助第三方组件实现文件上传"><a href="#2-1-3-借助第三方组件实现文件上传" class="headerlink" title="2.1.3 借助第三方组件实现文件上传"></a>2.1.3 借助第三方组件实现文件上传</h4><p>使用 Commons-fileupload 组件实现文件上传，需要导入该组件相应的支撑 jar 包：<code>Commons-fileupload 和commons-io</code>。commons-io 不属于文件上传组件的开发 jar 文件，但Commons-fileupload 组件从 1.1 版本开始，它工作时需要 commons-io 包的支持。</p><ul><li>在pom.xml中导入所需jar包</li></ul><pre><code class="xml">&lt;!--导入文件上传相关jar包--&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;    &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-io&lt;/groupId&gt;    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;    &lt;version&gt;2.4&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="2-2-SpringMVC传统方式的文件上传"><a href="#2-2-SpringMVC传统方式的文件上传" class="headerlink" title="2.2 SpringMVC传统方式的文件上传"></a>2.2 SpringMVC传统方式的文件上传</h3><p>传统方式的文件上传，指的是我们上传的文件和访问的应用存在于同一台服务器上。且上传完毕后，浏览器可能跳转。</p><h4 id="2-2-1-编写控制器"><a href="#2-2-1-编写控制器" class="headerlink" title="2.2.1 编写控制器"></a>2.2.1 编写控制器</h4><pre><code class="java">/*** SpringMVC框架方式文件上传*/@RequestMapping("/MVCfileUpLoad")public String MVCfileUpLoad(String picname, MultipartFile uploadFile,                            HttpServletRequest request) throws Exception{    System.out.println("SpringMVC框架方式文件上传");    // 1.定义文件名称    String fileName = "";    // 1.1. 获取原始文件名    String originalFilename = uploadFile.getOriginalFilename();    // 1.2. 截取文件扩展名    String extentName = originalFilename.substring(originalFilename.lastIndexOf(".") + 1,                                                   originalFilename.length());    // 1.3. 将文件加上随机数，防止文件重复    String uuid = UUID.randomUUID().toString().replace("-", "").toUpperCase();    // 1.4. 判断是否输入了文件名    if (!StringUtils.isEmpty(picname)){        fileName = uuid+"_"+picname+"."+extentName;    }else {        fileName = uuid+"_"+originalFilename;    }    System.out.println("文件名称："+fileName);    // 2. 获取文件路径    String basePath = request.getSession().getServletContext().getRealPath("/uploads");    System.out.println("文件路径："+basePath);    // 3. 解决用一文件夹中文件过多问题    String datePath = new SimpleDateFormat("yyyy-MM-dd").format(new Date());    // 4. 判断路径是否存在    File file = new File(basePath+"/"+datePath);    if (!file.exists()){ // 如果文件夹不存在        file.mkdirs(); // 创建    }    // 5. 使用MultipartFile接口中方法，将上传的文件写到指定位置    uploadFile.transferTo(new File(file,fileName));    return "success";}</code></pre><h4 id="2-2-2-编写jsp页面"><a href="#2-2-2-编写jsp页面" class="headerlink" title="2.2.2 编写jsp页面"></a>2.2.2 编写jsp页面</h4><pre><code class="jsp">&lt;h3&gt;文件上传&lt;/h3&gt;&lt;form action="/file/MVCfileUpLoad" method="post" enctype="multipart/form-data"&gt;    文件名称：&lt;input type="text" name="picname"&gt;    选择上传文件:&lt;input type="file" name="uploadFile"/&gt; &lt;br&gt;    &lt;input type="submit" value="上传"&gt;&lt;/form&gt;</code></pre><h4 id="2-2-3-配置文件解析器"><a href="#2-2-3-配置文件解析器" class="headerlink" title="2.2.3 配置文件解析器"></a>2.2.3 配置文件解析器</h4><p>在SpringMVC.xml中添加如下配置</p><pre><code class="xml">&lt;!--配置文件上传解析器,id:multipartResolver是固定值--&gt;&lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt;    &lt;!--设置上传文件的最大尺寸为 5MB=5*1024*1024=5242880字节 --&gt;    &lt;property name="maxUploadSize"&gt;        &lt;value&gt;5242880&lt;/value&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><h3 id="2-3-跨服务器方式的文件上传"><a href="#2-3-跨服务器方式的文件上传" class="headerlink" title="2.3 跨服务器方式的文件上传"></a>2.3 跨服务器方式的文件上传</h3><h4 id="2-3-1-分服务器的目的"><a href="#2-3-1-分服务器的目的" class="headerlink" title="2.3.1 分服务器的目的"></a>2.3.1 分服务器的目的</h4><p>实际开发中，会有很多处理不同功能的服务器，例</p><ul><li>应用服务器：负责部署我们的应用</li><li>数据库服务器：运行数据库</li><li>缓存和消息服务器：负责处理大并发访问的缓存和消息</li><li>文件服务器：负责存储用户上传文件的服务器</li></ul><h4 id="2-3-2-准备文件服务器"><a href="#2-3-2-准备文件服务器" class="headerlink" title="2.3.2 准备文件服务器"></a>2.3.2 准备文件服务器</h4><p>创建一个新的Tomcat服务器，在WEB-INF下创建一个uploads文件夹，用于存放文件</p><h4 id="2-3-3-具体代码"><a href="#2-3-3-具体代码" class="headerlink" title="2.3.3 具体代码"></a>2.3.3 具体代码</h4><ul><li>控制器</li></ul><pre><code class="java">/**     * 跨服务器文件上传     * @return     */@RequestMapping("/MVCfileUpLoad2")public String MVCfileUpLoad2(String picname, MultipartFile uploadFile) throws Exception{    System.out.println("跨服务器文件上传");    // 1.定义文件名称    String fileName = "";    // 1.1. 获取原始文件名    String originalFilename = uploadFile.getOriginalFilename();    System.out.println(originalFilename);    // 1.2. 截取文件扩展名    String extentName = originalFilename.substring(originalFilename.lastIndexOf(".") + 1,                                                   originalFilename.length());    // 1.3. 将文件加上随机数，防止文件重复    String uuid = UUID.randomUUID().toString().replace("-", "").toUpperCase();    if (!StringUtils.isEmpty(picname)){        fileName = uuid+"_"+picname+"."+extentName;    }else {        fileName = uuid+"_"+originalFilename;    }    // 定义上传文件服务器路径    String path = "http://localhost:8080/uploads/";    // 完成文件上传，跨服务器版    // 创建客户端的对象    Client client = Client.create();    // 和文件服务器进行连接    WebResource resource = client.resource(path+ fileName);    // 上传文件     todo:中文乱码问题?    resource.put(uploadFile.getBytes());    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;h3&gt;跨服务器文件上传&lt;/h3&gt;&lt;form action="/file/MVCfileUpLoad2" method="post" enctype="multipart/form-data"&gt;    文件名称：&lt;input type="text" name="picname"&gt;    选择上传文件:&lt;input type="file" name="uploadFile"/&gt; &lt;br&gt;    &lt;input type="submit" value="上传"&gt;&lt;/form&gt;</code></pre><ul><li>403Forbidden问题</li></ul><p>上传文件涉及到读写权限，这个报错的意思就是服务器（Tomcat）没有写入的权限，需要在服务器的web.xml文件中找到servlet标签，在servlet里添加如下字段，开启文件读写</p><pre><code class="xml">&lt;init-param&gt;    &lt;param-name&gt;readonly&lt;/param-name&gt;    &lt;param-value&gt;false&lt;/param-value&gt;&lt;/init-param&gt;</code></pre><ul><li>409 Conflict 问题</li></ul><p>文件夹未创建，在服务器<code>target\fileUploadServer</code>下创建uploads文件夹即可</p><ul><li>关于中文文件名上传报错问题</li></ul><p><a href="https://yq.aliyun.com/articles/641394" target="_blank" rel="noopener">见文章</a></p><p>Tomcat版本8.5，尚未解决问题</p><h2 id="3-SpringMVC中的异常处理"><a href="#3-SpringMVC中的异常处理" class="headerlink" title="3. SpringMVC中的异常处理"></a>3. SpringMVC中的异常处理</h2><h3 id="3-1-异常处理的思路"><a href="#3-1-异常处理的思路" class="headerlink" title="3.1 异常处理的思路"></a>3.1 异常处理的思路</h3><p>系统中异常包括两类：预期异常和运行时异常<code>RuntimeException</code>，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p><p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springMVC前端控制器交由异常处理器进行异常处理，如下图示：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/09/06/Exception-1567699963265.jpg" alt="Exception"></p><h3 id="3-2-实现步骤"><a href="#3-2-实现步骤" class="headerlink" title="3.2 实现步骤"></a>3.2 实现步骤</h3><ul><li>控制器代码，模拟一个异常</li></ul><pre><code class="java">@Controller@RequestMapping("user")public class UserController {    @RequestMapping("/testException")    public String testException() throws SysException{        System.out.println("testException.....");        try {            // 模拟异常            int i = 1/0;        } catch (Exception e) {            e.printStackTrace();            // 抛出自定义异常信息            throw new SysException("查询错误....");        }        return "success";    }}</code></pre><ul><li>jsp访问页面和错误页面</li></ul><p>访问页面：</p><pre><code class="jsp">&lt;h3&gt;异常处理&lt;/h3&gt;&lt;a href="/user/testException"&gt;测试异常处理&lt;/a&gt;</code></pre><p>错误页面：</p><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" isELIgnored="false" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;出错啦！&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h4&gt;${errorMsg}&lt;/h4&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>编写自定义异常类</li></ul><pre><code class="java">/** * 自定义异常类 */public class SysException extends Exception {    // 存储提示信息的    private String message;    public SysException(String message) {        this.message = message;    }    @Override    public String getMessage() {        return message;    }    public void setMessage(String message) {        this.message = message;    }}</code></pre><ul><li>编写自定义异常解析器</li></ul><pre><code class="java">/** * 异常处理类 */public class SysExceptionResolver implements HandlerExceptionResolver {    /**     * 处理异常业务逻辑     * @param request     * @param response     * @param handler     * @param ex 当前抛出的异常对象     * @return     */    @Override    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {        // 获取异常对象        SysException e = null;        // 如果抛出的是系统自定义异常则直接转换        if (ex instanceof SysException){ // instanceof：判断ex是否是SysException的对象、直接或间接子类、其接口实现类            e = (SysException) ex;        }else {            // 如果抛出的不是系统自定义异常则重新构造一个系统错误异常            e = new SysException("系统维护中....");        }        // 创建ModelAndView对象，跳转页面        ModelAndView modelAndView = new ModelAndView();        modelAndView.addObject("errorMsg",e.getMessage()); // 获取异常消息，存入对象        modelAndView.setViewName("error"); // 跳转错误页面        return modelAndView;    }}</code></pre><ul><li>在SpringMVC.xml中，配置异常处理器</li></ul><pre><code class="xml">&lt;!--配置自定义异常处理器对象--&gt;&lt;bean id="SysExceptionResolver" class="cn.zero.exception.SysExceptionResolver"/&gt;</code></pre><h2 id="4-SpringMVC中的拦截器"><a href="#4-SpringMVC中的拦截器" class="headerlink" title="4. SpringMVC中的拦截器"></a>4. SpringMVC中的拦截器</h2><h3 id="4-1-拦截器的作用"><a href="#4-1-拦截器的作用" class="headerlink" title="4.1 拦截器的作用"></a>4.1 拦截器的作用</h3><ul><li><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行<strong>预处理和后处理。</strong></p></li><li><p>可以定义拦截器链，连接器链就是将拦截器按着一定的顺序结成一条链，在访问被拦截的方法时，拦截器链<br>中的拦截器会按着定义的顺序执行。</p></li><li>拦截器和过滤器的功能比较类似，区别点如下：<ul><li>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术。</li><li>拦截器是SpringMVC框架独有的。</li><li>过滤器配置了<code>/*</code>，可以拦截任何资源</li><li>拦截器只会对<strong>控制器中的方法进行拦截</strong>，不会拦截类似js、css等资源。</li></ul></li><li>拦截器也是AOP思想的一种实现方式。</li><li>想要自定义拦截器，需要实现<code>HandlerInterceptor</code>接口。</li></ul><h3 id="4-2-自定义拦截器的步骤"><a href="#4-2-自定义拦截器的步骤" class="headerlink" title="4.2 自定义拦截器的步骤"></a>4.2 自定义拦截器的步骤</h3><ul><li>编写拦截器类，实现<code>HandlerInterceptor</code>接口，重写方法</li></ul><pre><code class="java">/** * 定义拦截器 */public class CustomInterceptor implements HandlerInterceptor {    /**     * 预处理，controller方法执行前处理     * return true放行，执行下一个拦截器，如果没有下一拦截器，执行控制器方法     * return false不放行     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        System.out.println("CustomInterceptor执行了....预处理");//        request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);        return true;    }    /**     * 后处理，controller方法执行后处理     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {        System.out.println("postHandle....后处理");//        request.getRequestDispatcher("/WEB-INF/pages/error.jsp").forward(request,response);    }    /**     * 结尾处理，最后执行的，success.jsp页面执行完毕后，该方法执行。     * @param request     * @param response     * @param handler     * @param ex     * @throws Exception     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {        System.out.println("afterCompletion....尾处理");    }}</code></pre><ul><li>配置拦截器</li></ul><pre><code class="xml">&lt;!--配置拦截器--&gt;&lt;mvc:interceptors&gt;    &lt;mvc:interceptor&gt;        &lt;!--要拦截的具体方法--&gt;        &lt;mvc:mapping path="/user/*"/&gt;        &lt;!--不要拦截的方法--&gt;        &lt;!--&lt;mvc:exclude-mapping path=""/&gt;--&gt;        &lt;!-- 配置拦截器对象--&gt;        &lt;bean class="com.zero.interceptor.CustomInterceptor"/&gt;    &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt;</code></pre><ul><li>控制器</li></ul><pre><code class="java">@Controller@RequestMapping("user")public class UserController {    @RequestMapping("/testInterceptor")    public String testInterceptor(){        System.out.println("testInterceptor....控制器执行");        return "success";    }}</code></pre><ul><li>success.jsp</li></ul><pre><code class="jsp">&lt;h3&gt;访问成功！&lt;/h3&gt;&lt;% System.out.println("success.jsp执行了.....");%&gt;</code></pre><ul><li>测试结果</li></ul><pre><code>CustomInterceptor执行了....预处理testInterceptor....控制器执行postHandle....后处理success.jsp执行了.....afterCompletion....尾处理</code></pre><h3 id="4-3-拦截器简单案例-验证用户是否登录"><a href="#4-3-拦截器简单案例-验证用户是否登录" class="headerlink" title="4.3 拦截器简单案例(验证用户是否登录)"></a>4.3 拦截器简单案例(验证用户是否登录)</h3><h4 id="4-3-1-实现思路"><a href="#4-3-1-实现思路" class="headerlink" title="4.3.1 实现思路"></a>4.3.1 实现思路</h4><ul><li>编写登录页面，需要一个控制器访问页面。</li><li>登录页面有提交表单的动作，需在控制器中处理。<ul><li>判断用户名密码是否正确</li><li>正确，向session中写入用户信息</li><li>返回登录成功</li></ul></li><li>拦截用户请求，判断用户是否登录<ul><li>如已经登录，放行</li><li>如未登录，跳转到登录页面</li></ul></li><li>登录后使用重定向退出，涉及到<code>RedirectView</code>类<ul><li>作用：跟<code>return "redirect:xxx"</code>类似，也是重定向操作。</li><li>重定向相对地址：<code>return new RedirectView("index.jsp")</code>，在此请求路径下找相应路。</li><li>重定向绝对路径：<code>return new RedirectView("/index.jsp"</code>，相当于项目路径+此路径。</li></ul></li></ul><h4 id="4-3-2-核心代码"><a href="#4-3-2-核心代码" class="headerlink" title="4.3.2 核心代码"></a>4.3.2 核心代码</h4><ul><li>控制器代码</li></ul><pre><code class="java">@Controller@RequestMapping("user")public class UserController {    /**     * 跳转登录页面     * @param model     * @return     * @throws Exception     */    @RequestMapping("/login")    public String login(Model model) throws Exception{        return "login";    }    /**     * 登录提交     * @param session     * @param userId 用户账户     * @param pwd 密码     * @return     * @throws Exception     */    @RequestMapping("/loginSubmit")    public String loginSubmit(HttpSession session,String userId,String pwd) throws Exception{        // 在session中记录用户身份信息        session.setAttribute("activeUser",userId);        System.out.println("用户已登录");        return "success";    }    /**     * 退出     * @param session     * @param request     * @param response     * @return     * @throws Exception     */    @RequestMapping("/logOut")    public RedirectView logOut(HttpSession session,                         HttpServletRequest request,                         HttpServletResponse response) throws Exception{        // 设置session过期        session.invalidate();           // return new RedirectView("index.jsp"); 相当于：localhost/user/index.jsp        return new RedirectView("/index.jsp"); // 相当于：localhost/index.jsp    }}</code></pre><ul><li>定义登录拦截器</li></ul><pre><code class="java">/** * 登录拦截器 */public class LoginInterceptor implements HandlerInterceptor {    /**     * 预处理验证用户是否登录     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        System.out.println("登录拦截器执行");        // 如果是登录页面则放行        if (request.getRequestURI().indexOf("login")&gt;=0){            return true;        }        HttpSession session = request.getSession();        // 如果用户已登录也放行        if (session.getAttribute("activeUser")!=null){            return true;        }        // 用户没有登录则跳转到登录页面        request.getRequestDispatcher("/WEB-INF/pages/login.jsp").forward(request,response);        System.out.println("用户尚未登录");        return false;    }}</code></pre><ul><li>配置拦截器</li></ul><pre><code class="xml">&lt;!--配置登录拦截器--&gt;&lt;mvc:interceptors&gt;    &lt;mvc:interceptor&gt;        &lt;!--要拦截的具体方法--&gt;        &lt;mvc:mapping path="/user/**"/&gt;        &lt;!--不要拦截的方法--&gt;        &lt;!--&lt;mvc:exclude-mapping path=""/&gt;--&gt;        &lt;!-- 配置拦截器对象--&gt;        &lt;bean class="com.zero.interceptor.LoginInterceptor"/&gt;    &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt;</code></pre><ul><li>jsp登录页面，其他页面就不贴代码了</li></ul><pre><code class="jsp">&lt;h3&gt;用户登录&lt;/h3&gt;&lt;form action="/user/loginSubmit" method="post"&gt;    用户名称：&lt;input type="text" name="userId"&gt;&lt;br&gt;    密码：&lt;input type="password" name="pwd"&gt;&lt;br&gt;    &lt;input type="submit" value="登录"&gt;&lt;/form&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习1</title>
      <link href="/2019/09/02/framework/springmvc-kuang-jia-1/"/>
      <url>/2019/09/02/framework/springmvc-kuang-jia-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SpringMVC基本概念"><a href="#1-SpringMVC基本概念" class="headerlink" title="1. SpringMVC基本概念"></a>1. SpringMVC基本概念</h2><h3 id="1-1-关于三层架构和MVC"><a href="#1-1-关于三层架构和MVC" class="headerlink" title="1.1 关于三层架构和MVC"></a>1.1 关于三层架构和MVC</h3><a id="more"></a><h4 id="1-1-1-三层架构"><a href="#1-1-1-三层架构" class="headerlink" title="1.1.1 三层架构"></a>1.1.1 三层架构</h4><ul><li>开发服务器端程序，一般基于两种形式，一种C/S架构程序，一种B/S架构程序</li><li>使用Java语言基本上都是开发B/S架构的程序，B/S架构又分为了三层架构</li><li>三层架构<ol><li>表现层：WEB层，用来和客户端进行数据交互的。表现层一般会采用MVC的设计模型</li><li>业务层：处理公司具体的业务逻辑</li><li>持久层：用来操作数据库</li></ol></li></ul><h4 id="1-1-2-MVC模型"><a href="#1-1-2-MVC模型" class="headerlink" title="1.1.2 MVC模型"></a>1.1.2 MVC模型</h4><ol><li>MVC全名是<code>Model View Controller</code>模型视图控制器，每个部分各司其职。</li><li>Model：数据模型，JavaBean的类，用来进行数据封装。</li><li>View：指JSP、HTML用来展示数据给用户</li><li>Controller：用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</li></ol><h3 id="1-2-SpringMVC概述"><a href="#1-2-SpringMVC概述" class="headerlink" title="1.2 SpringMVC概述"></a>1.2 SpringMVC概述</h3><h4 id="1-2-1-SpringMVC是什么"><a href="#1-2-1-SpringMVC是什么" class="headerlink" title="1.2.1 SpringMVC是什么"></a>1.2.1 SpringMVC是什么</h4><ol><li>是一种基于Java实现的MVC设计模型的请求驱动类型的轻量级Web框架。</li><li>Spring MVC属于SpringFrameWork的后续产品，已经融合在SpringWebFlow里面。Spring框架提供了构建 Web 应用程序的全功能MVC模块。</li><li>使用Spring可插入的MVC架构，从而在使用Spring进行WEB开发时，可以选择使用Spring的SpringMVC框架或集成其他MVC开发框架，如Struts1(现在一般不用)，Struts2等。</li><li>它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持<br> RESTful 编程风格的请求。</li></ol><h4 id="1-2-2-SpringMVC在三层架构的位置"><a href="#1-2-2-SpringMVC在三层架构的位置" class="headerlink" title="1.2.2 SpringMVC在三层架构的位置"></a>1.2.2 SpringMVC在三层架构的位置</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/09/06/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84-1567699806413.jpg" alt="三层架构"></p><h4 id="1-2-3-SpringMVC的优势"><a href="#1-2-3-SpringMVC的优势" class="headerlink" title="1.2.3 SpringMVC的优势"></a>1.2.3 SpringMVC的优势</h4><ul><li>清晰的角色划分：<ul><li>前端控制器（DispatcherServlet）</li><li>请求到处理器映射（HandlerMapping）</li><li>处理器适配器（HandlerAdapter）</li><li>视图解析器（ViewResolver）</li><li>处理器或页面控制器（Controller）</li><li>验证器（ Validator）</li><li>命令对象（Command 请求参数绑定到的对象就叫命令对象）</li><li>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</li></ul></li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</li><li>由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。</li><li>和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</li><li>可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</li><li>功能强大的数据验证、格式化、绑定机制。</li><li>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</li><li>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</li><li><p>强大的 JSP 标签库，使 JSP 编写更容易。</p></li><li><p>支持RESTful风格的编程支持</p></li></ul><h4 id="1-2-4-SpringMVC和Struts2的优劣分析-了解"><a href="#1-2-4-SpringMVC和Struts2的优劣分析-了解" class="headerlink" title="1.2.4 SpringMVC和Struts2的优劣分析[了解]"></a>1.2.4 SpringMVC和Struts2的优劣分析[了解]</h4><ul><li>共同点：<ul><li>都是表现层框架，基于MVC模型编写的。</li><li>底层都离不开原始ServletAPI。</li><li>它们处理请求的机制都是一个核心控制器。</li></ul></li><li>区别：<ul><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter。</li><li>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</li><li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便。</li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提<br>升，尤其是 Struts2 的表单标签，远没有 html 执行效率高。</li></ul></li></ul><blockquote><p>OGNL是对象 - 图形导航语言的缩写，它是一种功能强大的表达式语言，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。</p></blockquote><h2 id="2-SpringMVC入门"><a href="#2-SpringMVC入门" class="headerlink" title="2. SpringMVC入门"></a>2. SpringMVC入门</h2><h3 id="2-1-SpringMVC入门案例"><a href="#2-1-SpringMVC入门案例" class="headerlink" title="2.1 SpringMVC入门案例"></a>2.1 SpringMVC入门案例</h3><h4 id="1-创建Web工程，引入开发相关的jar包"><a href="#1-创建Web工程，引入开发相关的jar包" class="headerlink" title="1. 创建Web工程，引入开发相关的jar包"></a>1. 创建Web工程，引入开发相关的jar包</h4><pre><code class="xml">&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;    &lt;!--版本锁定--&gt;    &lt;spring.version&gt;5.0.2.RELEASE&lt;/spring.version&gt;&lt;/properties&gt;&lt;dependencies&gt;    &lt;!--引入spring相关jar包--&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;        &lt;version&gt;${spring.version}&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;        &lt;version&gt;2.5&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;        &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;        &lt;version&gt;2.0&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h4 id="2-配置核心控制器-DispatcherServlet"><a href="#2-配置核心控制器-DispatcherServlet" class="headerlink" title="2. 配置核心控制器(DispatcherServlet)"></a>2. 配置核心控制器(DispatcherServlet)</h4><ul><li>在web.xml中配置前端控制器</li></ul><pre><code class="xml">&lt;!--配置核心前端控制器--&gt;&lt;servlet&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;!--加载mvc配置文件--&gt;    &lt;init-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:SpringMVC.xml&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;!--启动服务器就自动加载配置文件，生成对象--&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;!--配置控制器映射，拦截所有请求--&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><h4 id="3-编写SpringMVC-xml的配置文件"><a href="#3-编写SpringMVC-xml的配置文件" class="headerlink" title="3. 编写SpringMVC.xml的配置文件"></a>3. 编写SpringMVC.xml的配置文件</h4><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:mvc="http://www.springframework.org/schema/mvc"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd"&gt;    &lt;!--开启注解扫描--&gt;    &lt;context:component-scan base-package="cn.zero.controller"/&gt;    &lt;!--配置视图解析器对象--&gt;    &lt;bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;        &lt;!--配置前缀后缀，访问路径等于：/WEB-INF/pages/xxx.jsp--&gt;        &lt;property name="prefix" value="/WEB-INF/pages/"/&gt;        &lt;property name="suffix" value=".jsp"/&gt;    &lt;/bean&gt;    &lt;!--开启SpringMVC框架注解的支持--&gt;    &lt;mvc:annotation-driven/&gt;&lt;/beans&gt;</code></pre><h4 id="4-编写index-jsp和HelloController控制器类"><a href="#4-编写index-jsp和HelloController控制器类" class="headerlink" title="4. 编写index.jsp和HelloController控制器类"></a>4. 编写index.jsp和HelloController控制器类</h4><ul><li>index.jsp</li></ul><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;主页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;SpringMVC快速入门&lt;/h3&gt;&lt;a href="/hello"&gt;入门程序&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>HelloController</li></ul><pre><code class="java">// 控制器类@Controllerpublic class HelloController {    @RequestMapping("/hello")    public String sayHello(){        System.out.println("Hello SpringMVC!");        return "success";    }}</code></pre><h4 id="5-在WEB-INF下创建pages文件夹，编写success-jsp的成功页面"><a href="#5-在WEB-INF下创建pages文件夹，编写success-jsp的成功页面" class="headerlink" title="5. 在WEB-INF下创建pages文件夹，编写success.jsp的成功页面"></a>5. 在WEB-INF下创建pages文件夹，编写success.jsp的成功页面</h4><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;访问成功&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;入门程序访问成功&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-启动服务器"><a href="#6-启动服务器" class="headerlink" title="6. 启动服务器"></a>6. 启动服务器</h4><p>访问localhost/index.jsp，点击入门程序，查看是否正常跳转。</p><h3 id="2-2-入门案例的执行过程及原理分析"><a href="#2-2-入门案例的执行过程及原理分析" class="headerlink" title="2.2 入门案例的执行过程及原理分析"></a>2.2 入门案例的执行过程及原理分析</h3><h4 id="2-2-1-入门案例的执行流程"><a href="#2-2-1-入门案例的执行流程" class="headerlink" title="2.2.1 入门案例的执行流程"></a>2.2.1 入门案例的执行流程</h4><ol><li>当启动Tomcat服务器的时候，因为配置了load-on-startup标签，所以会创建DispatcherServlet对象，<br>就会加载springmvc.xml配置文件</li><li>开启了注解扫描，那么HelloController对象就会被创建</li><li>从index.jsp发送请求，请求会先到达DispatcherServlet核心控制器，根据配置@RequestMapping注解<br> 找到执行的具体方法</li><li>根据执行方法的返回值，再根据配置的视图解析器，去指定的目录下查找指定名称的JSP文件</li><li>Tomcat服务器渲染页面，做出响应</li><li>如下图示流程图：</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/09/06/flowChart-1567699840232.jpg" alt="flowChart"></p><h4 id="2-2-2-SpringMVC的请求响应流程"><a href="#2-2-2-SpringMVC的请求响应流程" class="headerlink" title="2.2.2 SpringMVC的请求响应流程"></a>2.2.2 SpringMVC的请求响应流程</h4><ul><li>官方完整流程图：</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/29/mvc-1567090970613.jpg" alt="mvc"></p><h3 id="2-3-组件详解"><a href="#2-3-组件详解" class="headerlink" title="2.3 组件详解"></a>2.3 组件详解</h3><ul><li>前端控制器(DispatcherServlet)<ul><li>用户请求到达前端控制器，它相当于mvc模式中的c。DispatcherServlet 是<strong>整个流程控制的中心</strong>，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的<strong>耦合性</strong>。</li></ul></li><li>处理器映射器(HandlerMapping)<ul><li>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</li></ul></li><li>处理器(Handler)<ul><li>它就是我们开发中要编写的具体<strong>业务控制器</strong>。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</li></ul></li><li>处理器适配器(HandlerAdapter)<ul><li>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</li></ul></li><li>视图解析器(ViewResolver)<ul><li>View Resolver 负责将处理结果生成 View 视图，View Resolver首先根据逻辑视图名解析成物理视图名<br>即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</li></ul></li><li>视图(View)<ul><li>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView<br>等。我们最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</li></ul></li></ul><h4 id="2-3-1-lt-mvc-annotation-driven-gt"><a href="#2-3-1-lt-mvc-annotation-driven-gt" class="headerlink" title="2.3.1 <mvc:annotation-driven/>"></a>2.3.1 <code>&lt;mvc:annotation-driven/&gt;</code></h4><p>在SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为SpringMVC的三大组件。</p><p>使用自动加载 RequestMappingHandlerMapping(处理映射器)和RequestMappingHandlerAdapter(处 理 适 配 器)， 可用在SpringMVC.xml配置文件中使用替代注解处理器和适配器的配置。</p><h3 id="2-4-RequestMapping注解详解"><a href="#2-4-RequestMapping注解详解" class="headerlink" title="2.4 @RequestMapping注解详解"></a>2.4 @RequestMapping注解详解</h3><ol><li>RequestMapping注解的作用是<strong>建立请求URL和处理方法之间的对应关系</strong></li><li>RequestMapping注解可以作用在方法和类上<ol><li>作用在类上：第一级的访问目录</li><li>作用在方法上：第二级的访问目录</li><li>细节：前端路径可以不写 <code>/</code> 表示应用的根目录开始</li><li>细节：<code>${pageContext.request.contextPath}</code>也可以省略不写，但是路径上不能写 /</li></ol></li><li>RequestMapping的属性<ol><li>path：指定请求路径的url</li><li>value：value属性等同于path属性，指定请求路径url</li><li>mthod：指定该方法的请求方式</li><li>params：指定限制请求参数的条件，允许简单的表达式，例<code>params={“money!100”}</code>表示请求参数中money不能是100。</li><li>headers：发送的请求中必须包含的请求头</li></ol></li></ol><blockquote><p>以上属性出现两个以上时，他们的关系是&amp;&amp;逻辑与关系</p></blockquote><h2 id="3-请求参数的绑定-重点"><a href="#3-请求参数的绑定-重点" class="headerlink" title="3. 请求参数的绑定[重点]"></a>3. 请求参数的绑定[重点]</h2><h3 id="3-1-绑定说明"><a href="#3-1-绑定说明" class="headerlink" title="3.1 绑定说明"></a>3.1 绑定说明</h3><h4 id="3-1-1-绑定的机制"><a href="#3-1-1-绑定的机制" class="headerlink" title="3.1.1 绑定的机制"></a>3.1.1 绑定的机制</h4><ul><li>表单提交的数据都是key=value格式的，例：username=xiaoming&amp;password=123456</li><li>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的</li><li>要求：提交表单的name和参数的名称必须是相同的</li></ul><h4 id="3-1-2-支持的数据类型"><a href="#3-1-2-支持的数据类型" class="headerlink" title="3.1.2 支持的数据类型"></a>3.1.2 支持的数据类型</h4><ul><li>基本类型参数：包括基本类型和String类型</li><li>POJO类型参数：包括实体类，以及关联的实体类</li><li>数组和集合类型参数：包括List结构和Map结构的集合(包括数组)</li></ul><h4 id="3-1-3-使用要求"><a href="#3-1-3-使用要求" class="headerlink" title="3.1.3 使用要求"></a>3.1.3 使用要求</h4><ul><li>如果是基本类型或String类型<ul><li>要求参数名称必须和控制器中方法的形参名称保持一致。(严格区分大小写)</li></ul></li><li>如果是 POJO 类型，或者它的关联对象<ul><li>要求表单中参数名称和 POJO 类的属性名称保持一致。并且控制器方法的参数类型是 POJO 类型。</li></ul></li><li>如果是集合类型,有两种方式：<ul><li>要求集合类型的请求参数必须在 POJO 中。在表单中请求参数名称要和 POJO 中集合属性名称相同。给 List 集合中的元素赋值，使用下标。给 Map 集合中的元素赋值，使用键值对。</li><li>接收的请求参数是 json 格式数据。需要借助一个注解实现。</li></ul></li></ul><h4 id="3-1-4-绑定参数示例"><a href="#3-1-4-绑定参数示例" class="headerlink" title="3.1.4 绑定参数示例"></a>3.1.4 绑定参数示例</h4><h5 id="1-基本类型和String类型作为参数"><a href="#1-基本类型和String类型作为参数" class="headerlink" title="1. 基本类型和String类型作为参数"></a>1. 基本类型和String类型作为参数</h5><ul><li>控制器代码</li></ul><pre><code class="java">@RequestMapping("/testParam")public String testParam(String username){    System.out.println("用户名："+username);    return "success";}</code></pre><ul><li>jsp代码</li></ul><pre><code class="jsp">&lt;a href="param/testParam?username=xiaoming"&gt;请求参数绑定&lt;/a&gt;</code></pre><h5 id="2-POJO类型作为参数"><a href="#2-POJO类型作为参数" class="headerlink" title="2. POJO类型作为参数"></a>2. POJO类型作为参数</h5><ul><li>需创建实体类Account和User，User类作为账户类的参数。</li></ul><pre><code class="java">public class Account implements Serializable {    private String username;    private String password;    private Double money;    private User user;}public class User {    private String name;    private Integer age;}</code></pre><ul><li>控制器代码</li></ul><pre><code class="java">/**     * 接收参数，封装为POJO类型     * @param account     * @return     */@RequestMapping(value = "/testPojo",method = RequestMethod.POST)public String testPojo(Account account){    System.out.println(account);    return "success";}</code></pre><ul><li>Jsp</li></ul><pre><code class="jsp">&lt;form action="/param/testPojo" method="post"&gt;    用户名：&lt;input type="text" name="username"&gt;&lt;br&gt;    密码：&lt;input type="password" name="password"&gt;&lt;br&gt;    余额：&lt;input type="text" name="money"&gt;&lt;br&gt;    真实姓名：&lt;input type="text" name="user.name"&gt;&lt;br&gt;    年龄：&lt;input type="text" name="user.age"&gt;&lt;br&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;</code></pre><ul><li>访问结果：<code>Account{username='admin', password='123', money=333.0, user=User{name='xiaoming', age=22}}</code></li></ul><h5 id="3-POJO类中包含集合类型参数"><a href="#3-POJO类中包含集合类型参数" class="headerlink" title="3. POJO类中包含集合类型参数"></a>3. POJO类中包含集合类型参数</h5><ul><li>修改Account类</li></ul><pre><code class="java">public class Account implements Serializable {    private String username;    private String password;    private Double money;    // 演示绑定POJO对象//    private User user;    // POJO类中包含集合类型参数    private List&lt;User&gt; list;    private Map&lt;String,User&gt; map;}</code></pre><ul><li>控制器添加方法</li></ul><pre><code class="java">/**     * POJO类中包含集合类型参数     */@RequestMapping(value = "/testSetType",method = RequestMethod.POST)public String testSetType(Account account){    System.out.println(account);    return "success";}</code></pre><ul><li>Jsp</li></ul><pre><code class="jsp">&lt;h3&gt;POJO类中包含集合类型参数&lt;/h3&gt;&lt;form action="/param/testSetType" method="post"&gt;    用户名：&lt;input type="text" name="username"&gt;&lt;br&gt;    密码：&lt;input type="password" name="password"&gt;&lt;br&gt;    余额：&lt;input type="text" name="money"&gt;&lt;br&gt;    &lt;h4&gt;封装到list集合中&lt;/h4&gt;    真实姓名：&lt;input type="text" name="list[0].name"&gt;&lt;br&gt;    年龄：&lt;input type="text" name="list[0].age"&gt;&lt;br&gt;    &lt;h4&gt;封装到map集合中&lt;/h4&gt;    真实姓名：&lt;input type="text" name="map['user'].name"&gt;&lt;br&gt;    年龄：&lt;input type="text" name="map['user'].age"&gt;&lt;br&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;</code></pre><ul><li>访问结果：<code>Account{username='admin', password='111', money=333.0, list=[User{name='小明', age=22}], map={user=User{name='小李', age=21}}}</code></li></ul><h5 id="4-POST请求参数中文乱码问题"><a href="#4-POST请求参数中文乱码问题" class="headerlink" title="4. POST请求参数中文乱码问题"></a>4. POST请求参数中文乱码问题</h5><p>在web.xml中，添加过滤器</p><pre><code class="xml">&lt;!--添加过滤器，解决POST中文乱码问题--&gt;&lt;filter&gt;    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre><h3 id="3-2-特殊情况"><a href="#3-2-特殊情况" class="headerlink" title="3.2 特殊情况"></a>3.2 特殊情况</h3><p>如果User类中有一个Date参数，在表单提交时日期格式不正确，封装POJO对象就会失败，这时就需要自己定义一个类型转换器。 </p><h4 id="3-2-1-自定义类型转换器"><a href="#3-2-1-自定义类型转换器" class="headerlink" title="3.2.1 自定义类型转换器"></a>3.2.1 自定义类型转换器</h4><p>表单提交的任何数据类型全部都是字符串类型，但是后台定义Integer类型，数据也可以封装上，说明Spring框架内部会默认进行数据类型转换。如果想自定义数据类型转换，可以实现Converter的接口</p><h5 id="1-第一步：定义一个类，实现Converter接口，该接口有两个泛型。"><a href="#1-第一步：定义一个类，实现Converter接口，该接口有两个泛型。" class="headerlink" title="1. 第一步：定义一个类，实现Converter接口，该接口有两个泛型。"></a>1. 第一步：定义一个类，实现Converter接口，该接口有两个泛型。</h5><pre><code class="java">/** * 将字符串类型转换为日期格式 */public class StringToDateConverter implements Converter&lt;String, Date&gt; {    /**     * @param source 传入的字符串参数     * @return     */    @Override    public Date convert(String source) {        if (source == null){            throw new RuntimeException("please entry param！");        }        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");        // 把字符串转换为日期        try {            return df.parse(source);        } catch (Exception e) {            throw new RuntimeException("Data switch Error！");        }    }}</code></pre><h5 id="2-在SpringMVC-xml中配置类型转换器"><a href="#2-在SpringMVC-xml中配置类型转换器" class="headerlink" title="2. 在SpringMVC.xml中配置类型转换器"></a>2. 在SpringMVC.xml中配置类型转换器</h5><pre><code class="xml">&lt;!--配置自定义类型转换器--&gt;&lt;bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean"&gt;    &lt;!--注册转换器类--&gt;    &lt;property name="converters"&gt;        &lt;set&gt;            &lt;bean class="cn.zero.utils.StringToDateConverter"/&gt;        &lt;/set&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;!--开启SpringMVC框架注解的支持    配置一下让转换器生效--&gt;&lt;mvc:annotation-driven conversion-service="conversionService"/&gt;</code></pre><ul><li>重启服务器在测试一下，就支持<code>yyyy-MM-dd</code>的日期格式了。</li></ul><h4 id="3-2-2-使用ServletAPI对象作为方法参数"><a href="#3-2-2-使用ServletAPI对象作为方法参数" class="headerlink" title="3.2.2 使用ServletAPI对象作为方法参数"></a>3.2.2 使用ServletAPI对象作为方法参数</h4><ul><li><p>示例获取Servlet对象</p><ul><li>在控制器中新增方法</li></ul><pre><code class="java">/**     * 测试获取ServetlAPI     * @param request     * @param response     * @param session     * @return     */@RequestMapping("/testServletAPI")public String testServletAPI(HttpServletRequest request,                             HttpServletResponse response,                             HttpSession session){    System.out.println(request);    System.out.println(response);    System.out.println(session);    return "success";}</code></pre><ul><li>jsp代码：<code>&lt;a href="/param/testServletAPI"&gt;测试访问ServletAPI&lt;/a&gt;</code></li></ul></li></ul><h2 id="4-常用注解"><a href="#4-常用注解" class="headerlink" title="4. 常用注解"></a>4. 常用注解</h2><h3 id="4-1-RequestParam"><a href="#4-1-RequestParam" class="headerlink" title="4.1 @RequestParam"></a>4.1 @RequestParam</h3><h4 id="1-使用说明"><a href="#1-使用说明" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><ul><li>作用：把请求中指定名称的参数给控制器中的形参赋值</li><li>属性：<ul><li>value：请求参数中的名称</li><li>required：请求参数中是否必须提供此参数。默认为true，表示必须提供，不提供将报错。</li></ul></li></ul><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h4><ul><li>控制器代码</li></ul><pre><code class="java">@Controller@RequestMapping("anno")public class AnnotationController {    @RequestMapping("/useRequestParam")    public String useRequestParam(@RequestParam("name") String username,                                  @RequestParam(value = "age",required = false) Integer age){        System.out.println(username+":"+age);        return "success";    }}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;常用注解测试&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;1. 测试requestParam注解的使用&lt;/h2&gt;&lt;a href="/anno/useRequestParam?name=xiaoming"&gt;@RequestParam注解&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>结果：<code>xiaoming:null</code>，因配置了required=false，故请求参数中无age不会报错。</li></ul><h3 id="4-2-RequestBody"><a href="#4-2-RequestBody" class="headerlink" title="4.2 @RequestBody"></a>4.2 @RequestBody</h3><h4 id="1-使用说明-1"><a href="#1-使用说明-1" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><ul><li>作用：用于获取请求体内容。直接使用得到是key=value&amp;key=value结构的数据。get请求方式不适用。</li><li>属性：<ul><li>required：是否必须有请求体。默认值true，表示必须有请求体，故get请求方式会报错。如取值为false，get请求得到的是null。</li></ul></li></ul><h4 id="2-示例-1"><a href="#2-示例-1" class="headerlink" title="2. 示例"></a>2. 示例</h4><ul><li>控制器代码</li></ul><pre><code class="java">/**     * RequestBody:用于获取请求体内容。     * @param body     * @return     */@RequestMapping("/useRequestBody")public String useRequestBody(@RequestBody(required = false) String body){    System.out.println(body);    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;h3&gt;2. 测试@RequestBody注解使用&lt;/h3&gt;&lt;h5&gt;POST请求测试&lt;/h5&gt;&lt;form action="/anno/useRequestBody" method="post"&gt;    用户名：&lt;input type="text" name="name"&gt;&lt;br&gt;    年龄：&lt;input type="text" name="age"&gt;&lt;br&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;&lt;h5&gt;GET请求测试&lt;/h5&gt;&lt;a href="/anno/useRequestBody?body=test"&gt;requestBody注解get请求&lt;/a&gt;</code></pre><ul><li>测试结果：<ul><li>POST请求：<code>name=xiaoming&amp;age=1</code></li><li>GET请求：<code>null</code></li></ul></li></ul><h3 id="4-3-ResponseBody"><a href="#4-3-ResponseBody" class="headerlink" title="4.3 @ResponseBody"></a>4.3 @ResponseBody</h3><h4 id="1-使用说明-2"><a href="#1-使用说明-2" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><p>该注解的作用是将控制器方法返回的对象通过适当的转换器转换为指定格式之后，写入到response对象的body区，通常用来<strong>返回JSON数据</strong>或者是XML数据。</p><ul><li>注意：使用此注解后不会在走视图解析器，而是直接将数据写入到输出流中，效果等同于通过response对象输出指定格式数据(<code>response.getWriter.write(JSONObject.fromObject(user).toString());</code>)。</li></ul><h4 id="2-示例-2"><a href="#2-示例-2" class="headerlink" title="2. 示例"></a>2. 示例</h4><ul><li>控制器代码</li></ul><pre><code class="java">@RequestMapping("/testResponseBody")@ResponseBodypublic Student testResponseBody(){    return new Student("小明","男");}</code></pre><ul><li>访问页面结果：<code>{"name":"小明","sex":"男"}</code></li><li>因返回值满足key-value(对象或map)格式，所以会自动将响应头的Content-Type设置为了<code>application/html;charset=utf-8</code>，然后把转换后的内容以输出流的形式响应给客户端。</li></ul><blockquote><p>注意：使用该注解返回json数据还需额外jar包：jackson，依赖坐标如下</p><pre><code class="xml">&lt;!--添加对json数据的支持 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.8.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.9.1&lt;/version&gt;&lt;/dependency&gt;</code></pre></blockquote><ul><li>如果返回是字符串类型，控制器代码如下</li></ul><pre><code class="java">@RequestMapping(value = "/testResponseBody",produces = "text/html;charset=utf-8") @ResponseBodypublic String testResponseBody(){    return "你好!";}</code></pre><ul><li>访问结果：<code>你好!</code></li><li>如果返回值不能解析为json格式，注解就会将其直接以输出流形式输出到页面上。</li></ul><blockquote><p>注：使用produces设置响应头Content-Type为<code>text/html;charset=utf-8</code>解决中文乱码问题。</p></blockquote><h3 id="4-4-PathVaribale"><a href="#4-4-PathVaribale" class="headerlink" title="4.4 @PathVaribale"></a>4.4 @PathVaribale</h3><h4 id="1-使用说明-3"><a href="#1-使用说明-3" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><p>路径变量，用于绑定 url 中的占位符。例如：请求url中/delete/{id}，这个{id}就是url占位符。url 支持占位符是 Spring3.0 之后加入的，是 SpringMVC支持<strong>REST风格</strong>URL的一个重要标志。</p><ul><li>属性<ul><li>value：用于指定url中占位符名称。</li><li>required：是否必须提供占位符。</li></ul></li></ul><h4 id="2-示例-3"><a href="#2-示例-3" class="headerlink" title="2. 示例"></a>2. 示例</h4><ul><li>控制器代码</li></ul><pre><code class="java">/**     * PathVaribale：用于绑定 url 中的占位符     */@RequestMapping("/usePathVariable/{id}")public String usePathVariable(@PathVariable("id") Integer id){    System.out.println(id);    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;h3&gt;3. 测试@PathVaribale注解&lt;/h3&gt;&lt;a href="/anno/usePathVariable/100"&gt;PathVariable注解的使用&lt;/a&gt;</code></pre><ul><li>测试结构：<code>100</code></li></ul><h4 id="3-关于REST风格URL"><a href="#3-关于REST风格URL" class="headerlink" title="3. 关于REST风格URL"></a>3. 关于REST风格URL</h4><ul><li>什么是REST：<ul><li><strong>表现层状态转换</strong>（REST，英文：<strong>Representational State Transfer</strong>），一种万维网软件架构风格，目的是便于不同软件/程序在网络中互相传递信息。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</li></ul></li></ul><p><a href="https://www.jianshu.com/p/c5c83872dad2" target="_blank" rel="noopener">详细内容见文章</a></p><ul><li>RESTful的优点：结构清晰、符合标准、易于理解、扩展方便。RESTful可以通过一套统一的接口为 Web、iOS和Android提供服务，另外对于很多平台来说（比如像Facebook，Twiter、微博、微信等开放平台），它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful便是它们最好的选择。</li><li>RESTful的特性<ul><li><strong>资源(Resources)</strong>：网络上的一个实体，或说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。通过一个URI来指向它。</li><li><strong>表现层(Representation)</strong>：把资源具体呈现出来的形式，叫做它的表现层。比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</li><li><strong>状态转化(Status Transfer)</strong>：每发出一个请求，就代表了客户端和服务器的一次交互过程。HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”。而这种转化是建立在表现层上的。所以就是“表现层状态转化”。具体说，就是HTTP协议里面，四个表示操作方式的动词以及对应的基本操作：GET(获取资源)、POST(新建资源)、PUT(更新资源)、DELETE(删除资源)。</li></ul></li></ul><h4 id="4-基于HiddentHttpMethodFilter的REST风格示例-了解"><a href="#4-基于HiddentHttpMethodFilter的REST风格示例-了解" class="headerlink" title="4. 基于HiddentHttpMethodFilter的REST风格示例[了解]"></a>4. 基于HiddentHttpMethodFilter的REST风格示例[了解]</h4><ul><li><p>作用：</p><ul><li>由于浏览器form表单只支持GET和POST请求，而DELETE、PUT等method并不支持，Spring3.0添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持DELETE和PUT请求。</li></ul></li><li><p>使用步骤：</p><ul><li>第一步：在web.xml中配置该过滤器</li><li>第二步：请求方式必须使用POST请求</li><li>第三部：按照要求提供_method请求参数，该参数的取值就是我们需要的请求方式。</li></ul></li><li><p>示例代码</p><ul><li>jsp</li></ul><pre><code class="jsp">&lt;!-- 更新 --&gt;&lt;form action="springmvc/testRestPUT/1" method="post"&gt;    用户名称：&lt;input type="text" name="username"&gt;&lt;br/&gt;    &lt;input type="hidden" name="_method" value="PUT"&gt;    &lt;input type="submit" value="更新"&gt;&lt;/form&gt;</code></pre><ul><li>控制器</li></ul><pre><code class="java">/*** put 请求：更新* @param username* @return*/@RequestMapping(value="/testRestPUT/{id}",method=RequestMethod.PUT)public String testRestfulURLPUT(@PathVariable("id")Integer id,User user){    System.out.println("rest put "+id+","+user);    return "success";}</code></pre></li></ul><h3 id="4-5-RequestHeader"><a href="#4-5-RequestHeader" class="headerlink" title="4.5 @RequestHeader"></a>4.5 @RequestHeader</h3><h4 id="1-使用说明-4"><a href="#1-使用说明-4" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><ul><li>作用：用于获取请求消息头</li><li>属性<ul><li>value：提供消息头名称</li><li>required：是否必须有此消息头</li></ul></li></ul><blockquote><p>了解即可，一般不用</p></blockquote><h4 id="2-示例-4"><a href="#2-示例-4" class="headerlink" title="2. 示例"></a>2. 示例</h4><ul><li>控制器代码</li></ul><pre><code class="java">/**     * RequestHeader：用于获取请求消息头。     */@RequestMapping("/useRequestHeader")public String useRequestHeader(@RequestHeader(value = "Accept-Language",required = false)String requestHeader){    System.out.println(requestHeader);    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;h3&gt;4. 测试@RequestHeader注解&lt;/h3&gt;&lt;a href="/anno/useRequestHeader"&gt;获取请求消息头&lt;/a&gt;</code></pre><ul><li>结果：<code>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</code></li></ul><h3 id="4-6-CookieValue"><a href="#4-6-CookieValue" class="headerlink" title="4.6 @CookieValue"></a>4.6 @CookieValue</h3><h4 id="1-使用说明-5"><a href="#1-使用说明-5" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><ul><li>作用：用于把指定cookie名称的值传入控制器方法参数</li><li>属性：<ul><li>value：指定cookie的名称</li><li>required：是否必须有此cookie</li></ul></li></ul><h4 id="2-示例-5"><a href="#2-示例-5" class="headerlink" title="2. 示例"></a>2. 示例</h4><ul><li>控制器代码</li></ul><pre><code class="java">/**     * @CookieValue：用于把指定cookie名称的值传入控制器方法参数。     * @param cookieValue     * @return     */@RequestMapping("/useCookieValue")public String useCookieValue(@CookieValue(value = "JSESSIONID",required = false)String cookieValue){    System.out.println(cookieValue);    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;h3&gt;5. 测试@CookieValue&lt;/h3&gt;&lt;a href="/anno/useCookieValue"&gt;绑定cookie的值&lt;/a&gt;</code></pre><ul><li>结果：<code>C8001453C280DF881950883018287F9C</code></li></ul><h3 id="4-7-ModelAttribute"><a href="#4-7-ModelAttribute" class="headerlink" title="4.7 @ModelAttribute"></a>4.7 @ModelAttribute</h3><h4 id="1-使用说明-6"><a href="#1-使用说明-6" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><ul><li>作用：该注解是SpringMVC4.3版本以后新加入的。它可以用于修饰方法和参数。<ul><li><strong>出现在方法上</strong>，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰有具体返回值的方法，也可以修饰没有返回值的方法。</li><li><strong>出现在参数上</strong>，获取指定的数据给参数赋值。</li></ul></li><li>属性：<ul><li>value：用于获取数据的key。key可以是POJO的属性名称，也可以是map结构的key。</li></ul></li><li>应用场景<ul><li>当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。</li></ul></li></ul><h4 id="2-示例-6"><a href="#2-示例-6" class="headerlink" title="2. 示例"></a>2. 示例</h4><ul><li><p>基于POJO属性的基本使用</p><ul><li>控制器代码</li></ul><pre><code class="java">/**     * 出现在方法上：     *    被ModelAttribute 修饰的方法     *    当前方法会在控制器的方法执行之前，先执行。     * @param user     */@ModelAttributepublic void showModel(User user){    System.out.println("执行了showModel方法"+user.getName());}/**     * 接收请求的方法     * @param user     * @return     */@RequestMapping("/testModelAttribute")public String testModelAttribute(User user) {    System.out.println("执行了控制器的方法"+user.getName());    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;h3&gt;6. 测试@ModelAttribute&lt;/h3&gt;&lt;a href="/anno/testModelAttribute?name=test"&gt;测试ModelAttribute注解的使用&lt;/a&gt;</code></pre><ul><li>测试结果：<pre><code>执行了showModel方法test执行了控制器的方法test</code></pre></li></ul></li><li><p>基于Map的应用场景示例：修饰方法带返回值</p><ul><li>控制器代码</li></ul><pre><code class="java">/**     * 出现在方法上：     *    被ModelAttribute 修饰的方法     *    当前方法会在控制器的方法执行之前，先执行。     *    在控制器执行前，查询数据库中用户信息     * @param name     */@ModelAttributepublic User showModel(String name){    // 调用数据库查询方法，返回用户对象    User user = findUserByName(name);    System.out.println("执行了findUser方法"+user);    return user;}/**     * 模拟修改用户方法     * @param user     * @return     */@RequestMapping("/updateUser")public String updateUser(User user) {    System.out.println("控制器中处理请求的方法：修改用户"+user);    return "success";}/**     * 模拟数据库查询操作     * @param name     * @return     */private User findUserByName(String name) {    User user = new User();    user.setName(name);    user.setAge(19);    user.setDate(new Date());    return user;}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;h4&gt;6.1 2 基于Map应用场景示例：修饰方法带返回值&lt;/h4&gt;&lt;form action="/anno/updateUser" method="post"&gt;    用户名称：&lt;input type="text" name="name"&gt;&lt;br&gt;    年龄：&lt;input type="text" name="age"&gt;&lt;br&gt;    &lt;input type="submit" value="保存"&gt;&lt;/form&gt;</code></pre><ul><li>测试结果：</li></ul><pre><code>执行了findUser方法User{name='小王', age=19, date=Sun Sep 01 17:02:46 CST 2019}控制器中处理请求的方法：修改用户User{name='小王', age=11, date=Sun Sep 01 17:02:46 CST 2019}</code></pre></li><li><p>基于Map的应用场景示例：修饰方法不带返回值</p><ul><li>前端代码不变，修改控制器方法</li></ul><pre><code class="java">@ModelAttributepublic void showModel(String name, Map&lt;String,User&gt; map){    // 调用数据库查询方法，返回用户对象    User user = findUserByName(name);    System.out.println("showModel"+System.identityHashCode(user));    System.out.println("执行了findUser方法"+user);    map.put("user",user);}@RequestMapping("/updateUser")    public String updateUser(@ModelAttribute("user") User user) {        System.out.println("update"+System.identityHashCode(user));        System.out.println("控制器中处理请求的方法：修改用户"+user);        return "success";    }</code></pre></li></ul><h3 id="4-8-SessionAttribute"><a href="#4-8-SessionAttribute" class="headerlink" title="4.8 @SessionAttribute"></a>4.8 @SessionAttribute</h3><h4 id="1-使用说明-7"><a href="#1-使用说明-7" class="headerlink" title="1. 使用说明"></a>1. 使用说明</h4><ul><li>作用：用于多次执行控制器方法间的参数共享</li><li>属性<ul><li>value：用于指定存入的属性名称</li><li>type：用于指定存入的数据类型</li></ul></li></ul><h4 id="2-示例-7"><a href="#2-示例-7" class="headerlink" title="2. 示例"></a>2. 示例</h4><h5 id="2-1-存储值"><a href="#2-1-存储值" class="headerlink" title="2.1 存储值"></a>2.1 存储值</h5><ul><li>控制器代码</li></ul><pre><code class="java">@Controller@RequestMapping("anno")@SessionAttributes(value = {"msg"}) // @SessionAttributes该注解只能作用在类上，这里使用效果是将msg再存一份到session域中public class AnnotationController {    /**     * SessionAttribute注解     * 将值存储到request域中     * @return     */    @RequestMapping("/useSessionAttribute")    public String useSessionAttribute(Model model) {        // 底层会存储到request域对象中        model.addAttribute("msg","小明");        return "success";    }}</code></pre><ul><li>Anno.jsp</li></ul><pre><code class="jsp">&lt;h3&gt;7. 测试@SessionAttribute&lt;/h3&gt;&lt;a href="/anno/useSessionAttribute"&gt;使用SessionAttribute存储值&lt;/a&gt;&lt;br&gt;</code></pre><ul><li>success.jsp</li></ul><pre><code class="jsp">&lt;body&gt;&lt;h3&gt;测试程序访问成功&lt;/h3&gt;存储到request域中：${msg}&lt;br&gt;存储到session域中：${sessionScope}&lt;/body&gt;</code></pre><ul><li>测试结果：</li></ul><pre><code>测试程序访问成功存储到request域中：小明 存储到session域中：{msg=小明}</code></pre><h5 id="2-2-获取值"><a href="#2-2-获取值" class="headerlink" title="2.2 获取值"></a>2.2 获取值</h5><ul><li>控制器</li></ul><pre><code class="java">/**     * 获取值     * @param map     * @return     */@RequestMapping("/getSessionAttribute")public String getSessionAttribute(ModelMap map) { // model无法获取，只能通过它的实现类ModelMap来获取    System.out.println("getSessionAttribute....");    // 获取存储在request域中的数据    String msg = (String) map.get("msg");    System.out.println(msg);    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;a href="/anno/getSessionAttribute"&gt;获取值&lt;/a&gt;&lt;br&gt;</code></pre><ul><li>测试结果，后台显示：</li></ul><pre><code>getSessionAttribute....小明</code></pre><h5 id="2-3-清除值"><a href="#2-3-清除值" class="headerlink" title="2.3 清除值"></a>2.3 清除值</h5><ul><li>控制器</li></ul><pre><code class="java">    /**     * 删除值     * @param status     * @return     */@RequestMapping("/delSessionAttribute")public String delSessionAttribute(SessionStatus status) {    System.out.println("delSessionAttribute....");    status.setComplete(); // 删除session域中存储的值    return "success";}</code></pre><ul><li>jsp</li></ul><pre><code class="jsp">&lt;a href="/anno/delSessionAttribute"&gt;删除值&lt;/a&gt;</code></pre><ul><li>测试结果，后台显示：<code>delSessionAttribute....</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC入门</title>
      <link href="/2019/08/29/framework/springmvc-ru-men/"/>
      <url>/2019/08/29/framework/springmvc-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="1-SpringMVC-入门"><a href="#1-SpringMVC-入门" class="headerlink" title="1. SpringMVC 入门"></a>1. SpringMVC 入门</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>Spring MVC是Spring提供的一个强大而灵活的web框架，目前最好的实现MVC设计模式的框架。借助于注解，Spring MVC提供了几乎是POJO的开发模式，使得控制器的开发和测试更加简单。这些控制器一般不直接处理请求，而是将其委托给Spring上下文中的其他bean，提供Spring的依赖注入功能，这些bean被注入到控制器中。</p><a id="more"></a><p>Spring MVC主要由DispatcherServlet、处理器映射、适配器、控制器、视图解析器、视图组成。</p><h3 id="1-2-MVC设计模式"><a href="#1-2-MVC设计模式" class="headerlink" title="1.2 MVC设计模式"></a>1.2 MVC设计模式</h3><p> MVC是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式。</p><ul><li>Controller：负责接收并处理用户请求，响应客户端。</li><li>Model：模型数据，业务逻辑。</li><li>View：展示模型，与用户进行交互。</li></ul><h3 id="1-3-SpringMVC核心组件"><a href="#1-3-SpringMVC核心组件" class="headerlink" title="1.3 SpringMVC核心组件"></a>1.3 SpringMVC核心组件</h3><ol><li>DispatcherServlet：前置控制器。</li><li>HandlerMapping：将请求映射到Handler。</li><li>Handler：后端控制器，完成具体业务逻辑。</li><li>HandlerInterceptor：处理器拦截器。</li><li>HandlerExecutionChain：处理器执行链。</li><li>HandlerAdapter：处理器适配器。</li><li>ModelAndView：装载模型数据和视图信息。</li><li>ViewResolver：视图解析器。</li></ol><h3 id="1-4-SpringMVC实现流程"><a href="#1-4-SpringMVC实现流程" class="headerlink" title="1.4 SpringMVC实现流程"></a>1.4 SpringMVC实现流程</h3><ol><li>客户端请求被DispatcherServlet接收。</li><li>DispatcherServlet将请求映射到Handler。</li><li>生成Handler以及HandlerInterceptor。</li><li>返回HandlerExecutionChain(Handler+HandlerInterceptor)。</li><li>DispatcherServlet通过HandlerAdapter执行Handler。</li><li>返回一个ModelAndView。</li><li>DispatcherServlet通过ViewResolver进行解析。</li><li>返回填充了模型数据的View，响应给客户端。</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/29/mvc-1567090970613.jpg" alt="mvc"></p><h2 id="2-SpringMVC快速开发"><a href="#2-SpringMVC快速开发" class="headerlink" title="2. SpringMVC快速开发"></a>2. SpringMVC快速开发</h2><p>大部分组件由框架提供，开发者只需通过配置进行关联。开发者只需手动编写Handler和View。</p><h3 id="2-1-基于XML配置的使用"><a href="#2-1-基于XML配置的使用" class="headerlink" title="2.1 基于XML配置的使用"></a>2.1 基于XML配置的使用</h3><ol><li>SpringMVC基础配置</li><li>XML配置Controller，HandlerMapping组件映射。</li><li>XML配置ViewResolver组件映射。</li></ol><h4 id="2-1-1-示例"><a href="#2-1-1-示例" class="headerlink" title="2.1.1 示例"></a>2.1.1 示例</h4><ul><li>使用maven创建一个简单的web项目，修改pom包导入相关jar包</li></ul><pre><code class="xml">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;!--导入SpringMVC所需jar包--&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;        &lt;version&gt;4.3.1.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--导入servlet相关jar包--&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;        &lt;version&gt;3.1.0&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><ul><li>创建MyHandler控制器，完成具体业务逻辑</li></ul><pre><code class="java">public class MyHandler implements Controller {    @Override    public ModelAndView handleRequest(javax.servlet.http.HttpServletRequest httpServletRequest, javax.servlet.http.HttpServletResponse httpServletResponse) throws Exception {        // 装载模型数据和逻辑视图        ModelAndView modelAndView = new ModelAndView();        // 添加模型数据        modelAndView.addObject("name","Tom");        // 添加逻辑视图        modelAndView.setViewName("show");        return modelAndView;    }}</code></pre><ul><li>创建show.jsp，做前端显示</li></ul><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@page isELIgnored="false" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    ${name}&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>资源文件夹resources下创建springmvc.xml的配置文件</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;!--        URL处理映射的方式有三种：        1. BeanNameUrlHandlerMapping：通过url名字，找到对应的bean的name的控制器        2. 在SimpleUrlHandlerMapping中配置：通过key找到bean        3. ControllerClassNameHandlerMapping：通过类名    --&gt;    &lt;!--1. 配置HandlerMapping，将url请求映射到Handler--&gt;    &lt;bean id="handlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;        &lt;!--配置简单url映射--&gt;        &lt;property name="mappings"&gt;            &lt;props&gt;                &lt;!--2. 配置test请求对应的handler--&gt;                &lt;prop key="/test"&gt;testHandler&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;!--3. 配置控制器--&gt;    &lt;bean id="testHandler" class="com.zero.handler.MyHandler"/&gt;    &lt;!--4. 配置视图解析器--&gt;    &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;        &lt;!--配置前缀--&gt;        &lt;property name="prefix" value="/"/&gt;        &lt;!--配置后缀--&gt;        &lt;property name="suffix" value=".jsp"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><ul><li>在web.xml下配置DispatcherServlet</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"         version="3.1"&gt;  &lt;!-- 配置：所有请求由SpringMVC管理 --&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><ul><li>启动服务器，访问/test.do路径资源，查看是否显示姓名。</li></ul><h3 id="2-2-基于注解方式的使用-重要"><a href="#2-2-基于注解方式的使用-重要" class="headerlink" title="2.2 基于注解方式的使用[重要]"></a>2.2 基于注解方式的使用[重要]</h3><ol><li>SpringMVC基础配置。</li><li>Controller，HandlerMapping通过<strong>注解进行映射。</strong></li><li>XML中配置ViewResolver组件映射。</li></ol><h4 id="2-2-1-示例"><a href="#2-2-1-示例" class="headerlink" title="2.2.1 示例"></a>2.2.1 示例</h4><ul><li>其余配置不变，新建一个控制器类，使用注解声明</li></ul><pre><code class="java">// 基于注解实现映射@Controllerpublic class AnnotationHandler {    /**     * 业务方法1：ModelAndView完成数据的传递，视图的解析     */    @RequestMapping("/modelAndViewTest")    public ModelAndView modelAndViewTest(){        // 创建ModelAndView对象        ModelAndView modelAndView = new ModelAndView();        // 填充模型数据        modelAndView.addObject("name","Tom");        // 设置逻辑视图        modelAndView.setViewName("show");        return modelAndView;    }    /**     * 业务方法2：Model传值，String进行视图解析     * @return     */    @RequestMapping("/modelTest")    public String ModelTest(Model model){        // 填充模型数据        model.addAttribute("name","Jerry");        // 设置逻辑视图        return "show";    }    /**     * 业务方法3：Map传值，String进行视图解析     */    @RequestMapping("/mapTest")    public String MapTest(Map&lt;String,String&gt; map){        // 填充模型数据        map.put("name","Cat");        // 设置逻辑视图        return "show";    }}</code></pre><ul><li>mvc配置文件中，开启自动扫描，并删除前面配置的两个bean对象即可</li></ul><pre><code class="xml">&lt;!--1. 配置自动扫描包--&gt;&lt;context:component-scan base-package="com.zero.backoffice.web.controller"/&gt;</code></pre><ul><li>重启服务器，访问<code>/modelAndViewTest</code>等资源路径，测试是否成功。</li></ul><h3 id="2-3-URL处理器映射-了解"><a href="#2-3-URL处理器映射-了解" class="headerlink" title="2.3 URL处理器映射[了解]"></a>2.3 URL处理器映射[了解]</h3><ul><li><p>BeanNameUrlHandlerMapping</p><ul><li>功能：寻找controller，根据url请求去匹配bean的name属性，找到对应的控制器。</li></ul><pre><code class="xml">&lt;!-- 1. 配置处理器映射，mvc默认的处理器映射器     BeanNameUrlHandlerMapping:根据bean的name属性的url去找Controller --&gt;    &lt;bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt;&lt;bean name="/user.do" class="com.zero.backoffice.web.controller.UserController"/&gt;</code></pre></li><li><p>SimpleUrlHandlerMapping</p><ul><li>功能：寻找controller，根据浏览器url匹配简单url的key，key就是通过controller的id找到对应的Controller</li></ul><pre><code class="xml">&lt;bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"&gt;    &lt;property name="mappings"&gt;        &lt;props&gt;            &lt;prop key="/user1.do"&gt;userController&lt;/prop&gt;        &lt;/props&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;bean id="userController" name="/user.do" class="com.zero.web.controller.UserController"/&gt;</code></pre></li><li><p>ControllerClassNameHandlerMapping</p><ul><li>功能：寻找controller，根据类名.do来访问，类名首字母小写。如下访问路径就是<code>userController.do</code></li></ul><pre><code class="xml">&lt;bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/&gt;&lt;bean class="com.zero.backoffice.web.controller.UserController"/&gt;</code></pre></li></ul><h3 id="2-4-处理器适配器"><a href="#2-4-处理器适配器" class="headerlink" title="2.4 处理器适配器"></a>2.4 处理器适配器</h3><ul><li><p>SimpleControllerHandlerAdapter</p><ul><li>功能：执行controller，调用controller里面的方法，返回ModelAndView</li></ul><pre><code class="xml">&lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"/&gt;</code></pre></li><li><p>HttpRequestHandlerAdapter</p><ul><li>执行控制器：负责调用实现HttpRequestHandler接口的控制器</li></ul></li></ul><h3 id="2-5-乱码问题"><a href="#2-5-乱码问题" class="headerlink" title="2.5 乱码问题"></a>2.5 乱码问题</h3><ul><li>POST请求乱码，需在web.xml中配置编码过滤器</li></ul><pre><code class="xml">&lt;!-- 配置编码过滤器  --&gt;&lt;filter&gt;    &lt;filter-name&gt;EncodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;EncodingFilter&lt;/filter-name&gt;&lt;/filter-mapping&gt;</code></pre><ul><li>GET请求乱码：Tomcat8默认进行了url编码，故get请求不会乱码，tomcat7会乱码。</li></ul><h2 id="3-SpringMVC接收请求参数"><a href="#3-SpringMVC接收请求参数" class="headerlink" title="3. SpringMVC接收请求参数"></a>3. SpringMVC接收请求参数</h2><h3 id="3-1-封装参数分析"><a href="#3-1-封装参数分析" class="headerlink" title="3.1 封装参数分析"></a>3.1 封装参数分析</h3><ul><li>常用的数据绑定类型<ul><li>基本数据类型</li><li>包装类</li><li>数组</li><li>对象(POJO)</li><li>集合(List、Set、Map)</li><li>JSON</li></ul></li></ul><h3 id="3-2-接收基本数据类型"><a href="#3-2-接收基本数据类型" class="headerlink" title="3.2 接收基本数据类型"></a>3.2 接收基本数据类型</h3><ul><li>编写一个注册类register.jsp</li></ul><pre><code class="jsp">&lt;body&gt;    &lt;form action="${pageContext.request.contextPath}/user/register.do" method="post"&gt;        用户名:&lt;input type="text" name="username"&gt;&lt;br&gt;        密码:&lt;input type="text" name="password"&gt;&lt;br&gt;        性别:&lt;input type="text" name="gender"&gt;&lt;br&gt;        年龄:&lt;input type="text" name="age"&gt;&lt;br&gt;        生日:&lt;input type="text" name="birthday"&gt;&lt;br&gt;        爱好:&lt;input type="checkbox" name="hobbyIds" value="1"&gt;打球             &lt;input type="checkbox" name="hobbyIds" value="2"&gt;看书             &lt;input type="checkbox" name="hobbyIds" value="3"&gt;玩游戏&lt;br&gt;        &lt;input type="submit"&gt;    &lt;/form&gt;&lt;/body&gt;</code></pre><ul><li>控制器中新增注册方法</li></ul><pre><code class="java">@Controller@RequestMapping("user")public class UserController{    @RequestMapping("/toRegister")    public String toRegister(){        return "user/register";    }    /**     * 第一种接收表单参数的方式：     *      直接在形参列表写要接受的参数     *      默认日期格式： MM/DD/YYYY     * @return     */    @RequestMapping("/register")    public String register(String username, String password,                           int age, String gender, Date birthday,                           String[] hobbyIds){        System.out.println(username);        return "user/info";    }}</code></pre><h3 id="3-3-接收POJO类型"><a href="#3-3-接收POJO类型" class="headerlink" title="3.3 接收POJO类型"></a>3.3 接收POJO类型</h3><ul><li>模型类User新增对应属性</li></ul><pre><code class="java">public class User {    private String username;    private String password;    private String gender;    private int age;    private String birthday;    private String[] hobbyIds;}</code></pre><ul><li>控制器中新增方法</li></ul><pre><code class="java">/**     * 第二种接收表单参数的方式：     *     使用POJO对象接收     * @return     */@RequestMapping("/register2")public String register2(User user){    System.out.println(user);    return "user/info";}</code></pre><ul><li><p>register.jsp中修改<code>&lt;form action="${pageContext.request.contextPath}/user/register.do" method="post"&gt;</code></p></li><li><p>info.jsp做数据展示</p></li></ul><pre><code class="jsp">&lt;body&gt;&lt;h4&gt;用户信息&lt;/h4&gt;用户名:${user.username}&lt;br&gt;密码:${user.password}&lt;br&gt;性别:${user.gender}&lt;br&gt;年龄:${user.age}&lt;br&gt;生日:${user.birthday}&lt;br&gt;爱好:${user.hobbyIds}&lt;br&gt;&lt;/body&gt;</code></pre><h3 id="3-4-接收包装类型参数"><a href="#3-4-接收包装类型参数" class="headerlink" title="3.4 接收包装类型参数"></a>3.4 接收包装类型参数</h3><ul><li>创建UserExt类，把User写成一个类的属性，模型里面有模型</li></ul><pre><code class="java">public class UserExt {    private User user;    @Override    public String toString() {        return "UserExt{" +                "user=" + user +                '}';    }    public User getUser() {        return user;    }    public void setUser(User user) {        this.user = user;    }}</code></pre><ul><li>控制器添加注册方法</li></ul><pre><code class="java">/**     * 第三种接收表单参数的方式：接收包装类型参数     *     使用包装类，相当于模型里面有模型     * @return     */@RequestMapping("/register3")public String register3(UserExt user){    System.out.println(user);    return "user/info";}</code></pre><ul><li>修改form表单</li></ul><pre><code class="jsp">&lt;body&gt;    &lt;form action="${pageContext.request.contextPath}/user/register3.do" method="post"&gt;        用户名:&lt;input type="text" name="user.username"&gt;&lt;br&gt;        密码:&lt;input type="text" name="user.password"&gt;&lt;br&gt;        性别:&lt;input type="text" name="user.gender"&gt;&lt;br&gt;        年龄:&lt;input type="text" name="user.age"&gt;&lt;br&gt;        生日:&lt;input type="text" name="user.birthday"&gt;&lt;br&gt;        爱好:&lt;input type="checkbox" name="user.hobbyIds" value="1"&gt;打球             &lt;input type="checkbox" name="user.hobbyIds" value="2"&gt;看书             &lt;input type="checkbox" name="user.hobbyIds" value="3"&gt;玩游戏&lt;br&gt;        &lt;input type="submit"&gt;    &lt;/form&gt;&lt;/body&gt;</code></pre><h3 id="3-5-接收List集合类型参数"><a href="#3-5-接收List集合类型参数" class="headerlink" title="3.5 接收List集合类型参数"></a>3.5 接收List集合类型参数</h3><ul><li>修改UserExt类，添加list集合属性</li></ul><pre><code class="java">public class UserExt {    private User user;    private List&lt;User&gt; users = new ArrayList&lt;&gt;();    @Override    public String toString() {        return "UserExt{" +                "user=" + user +                ", users=" + users +                '}';    }    public User getUser() {        return user;    }    public void setUser(User user) {        this.user = user;    }    public List&lt;User&gt; getUsers() {        return users;    }    public void setUsers(List&lt;User&gt; users) {        this.users = users;    }}</code></pre><ul><li>register.jsp中新增一个测试form表单</li></ul><pre><code class="jsp">&lt;h4&gt;接收集合类型的参数&lt;/h4&gt;&lt;form action="${pageContext.request.contextPath}/user/register4.do" method="post"&gt;    用户名1:&lt;input type="text" name="users[0].username"&gt;&lt;br&gt;    密码1:&lt;input type="text" name="users[0].password"&gt;&lt;br&gt;    &lt;hr&gt;    用户名2:&lt;input type="text" name="users[1].username"&gt;&lt;br&gt;    密码2:&lt;input type="text" name="users[1].password"&gt;&lt;br&gt;    &lt;input type="submit" value="保存"&gt;&lt;/form&gt;</code></pre><ul><li>添加注册方法</li></ul><pre><code class="java">/**     * 第四种接收表单参数的方式：接收List集合类型参数     * @return     */@RequestMapping("/register4")public String register4(UserExt user){    System.out.println(user.getUsers());    return "user/info";}</code></pre><h3 id="3-6-接收Map集合类型参数"><a href="#3-6-接收Map集合类型参数" class="headerlink" title="3.6 接收Map集合类型参数"></a>3.6 接收Map集合类型参数</h3><ul><li>UserExt添加一个map集合属性</li></ul><pre><code class="java">public class UserExt {    private User user;    private List&lt;User&gt; users = new ArrayList&lt;&gt;();    private Map&lt;String,Object&gt; infos = new HashMap&lt;String,Object&gt;(); // 使用map来接收参数}</code></pre><ul><li>添加注册方法</li></ul><pre><code class="java">/**     * 第五种接收表单参数的方式：接收Map集合类型参数     * @return     */@RequestMapping("/register5")public String register5(UserExt user){    System.out.println(user.getInfos());    return "user/info";}</code></pre><ul><li>修改表单</li></ul><pre><code class="jsp">&lt;h4&gt;    表单数据用map接收&lt;/h4&gt;&lt;form action="${pageContext.request.contextPath}/user/register5.do" method="post"&gt;        用户名:&lt;input type="text" name="infos['username']"&gt;&lt;br&gt;        密码:&lt;input type="text" name="infos['password']"&gt;&lt;br&gt;        性别:&lt;input type="text" name="infos['gender']"&gt;&lt;br&gt;        年龄:&lt;input type="text" name="infos['age']"&gt;&lt;br&gt;        &lt;input type="submit"&gt;&lt;/form&gt;</code></pre><h2 id="4-页面回显"><a href="#4-页面回显" class="headerlink" title="4. 页面回显"></a>4. 页面回显</h2><ul><li>控制器配置一个列表方法</li></ul><pre><code class="java">@RequestMapping("/list")    public String userlist(Model model){        // 1. 模拟一个数据库中的数据        List&lt;User&gt; users = new ArrayList&lt;&gt;();        users.add(new User("小明","male",22,"2018"));        users.add(new User("小李","male",12,"2019"));        users.add(new User("小哈","male",32,"2014"));        // 将数据存储到model中        model.addAttribute("userList",users);        return "user/userList";    }</code></pre><ul><li>前端jsp展示数据</li></ul><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;UserList&lt;/title&gt;&lt;/head&gt;&lt;body&gt;用户列表:&lt;table border="1"&gt;    &lt;tr&gt;        &lt;td&gt;姓名：&lt;/td&gt;        &lt;td&gt;年龄&lt;/td&gt;        &lt;td&gt;性别&lt;/td&gt;        &lt;td&gt;生日&lt;/td&gt;    &lt;/tr&gt;    &lt;c:forEach items="${userList}" var="user"&gt;        &lt;tr&gt;            &lt;td&gt;${user.username}&lt;/td&gt;            &lt;td&gt;${user.age}&lt;/td&gt;            &lt;td&gt;${user.gender}&lt;/td&gt;            &lt;td&gt;${user.birthday}&lt;/td&gt;        &lt;/tr&gt;    &lt;/c:forEach&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>修改用户方法示例</li></ul><pre><code class="java">// 编辑页面@RequestMapping("/edit")public String edit(Integer id, Model model){    // 模拟通过id在数据库中查询数据,返回一个user对象，再将user对象存入model    System.out.println("修改的用户id:"+id);    User user = new User(id, "小明", "male", 22, "2018");    model.addAttribute("user",user);    return "user/userEdit";}// 修改用户信息@RequestMapping("/update")public String update(Integer id,Model model){    System.out.println("修改的用户id:"+id);    return "user/userList";}</code></pre><ul><li>编辑jsp界面</li></ul><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Edit&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="${pageContext.request.contextPath}/user/update.do?id=${user.id}" method="post"&gt;    用户名：&lt;input type="text" name="username" value="${user.username}"&gt;&lt;br&gt;    年龄：&lt;input type="text" name="age" value="${user.age}"&gt;&lt;br&gt;    性别：&lt;input type="text" name="gender" value="${user.gender}"&gt;&lt;br&gt;    生日：&lt;input type="text" name="birthday" value="${user.birthday}"&gt;&lt;br&gt;    &lt;button type="submit" value="提交修改"/&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="5-URL模板映射"><a href="#5-URL模板映射" class="headerlink" title="5. URL模板映射"></a>5. URL模板映射</h2><p>模板映射可以RESTful软件架构风格。</p><ul><li>修改url格式，体验RESTful</li></ul><pre><code class="jsp">&lt;a href="${pageContext.request.contextPath}/user/edit1/${user.id}.do"&gt;RESTful修改&lt;/a&gt;&lt;!--配置接收url模板映射：    {}：匹配接收页面url路径参数--&gt;</code></pre><ul><li>控制器中添加方法</li></ul><pre><code class="java">// 编辑页面,使用RESTful风格。{id}里面参数通过@PathVariable注入到后面参数Integer id中去@RequestMapping("/edit1/{id}")public String edit1(@PathVariable Integer id, Model model){    // 模拟通过id在数据库中查询数据,返回一个user对象，再将user对象存入model    System.out.println("修改的用户id:"+id);    User user = new User(id, "小明", "male", 22, "2018");    model.addAttribute("user",user);    return "user/userEdit";}</code></pre><ul><li>需在web.xml中配置rest路径</li></ul><pre><code class="xml">&lt;servlet-mapping&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!--RESTful风格--&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;DispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><ul><li>测试页面，<code>http://localhost/rest/user/edit1/1</code></li></ul><h2 id="6-转发和重定向"><a href="#6-转发和重定向" class="headerlink" title="6. 转发和重定向"></a>6. 转发和重定向</h2><ul><li>转发到同一个控制器的方法：<code>forward</code></li></ul><pre><code class="java">// 示例转发到list.do。同一个控制器中转发@RequestMapping("/test1")public String test1(){    return "forward:list.do";}</code></pre><ul><li>转发到不同的控制器</li></ul><pre><code class="java">@Controller@RequestMapping("stu")public class StudentController {    // 示例转发到list.do。不同控制器中转发,加上域名/user即可    @RequestMapping("/test1")    public String test1(){        return "forward:/user/list.do";    }}</code></pre><ul><li>重定向，只需改成<code>redirect</code>即可</li></ul><pre><code class="java">@Controller@RequestMapping("stu")public class StudentController {    // 示例重定向到list.do。不同控制器中转发    @RequestMapping("/test1")    public String test1(){        return "redirect:/user/list.do";    }}</code></pre><h2 id="7-RequestParam"><a href="#7-RequestParam" class="headerlink" title="7. RequestParam"></a>7. RequestParam</h2><ul><li>该注解是对参数的一些说明描述<ul><li>value：参数名称</li><li>defaultValue：默认值</li><li>required：参数是否必须有值。如果为true，参数又是空且未定义默认值，则会报错。</li></ul></li></ul><ul><li>示例</li></ul><pre><code class="java">@Controller@RequestMapping("stu")public class StudentController {    // 示例注解请求参数配置    @RequestMapping("/test1")    public String test1(@RequestParam(value = "uid",required = true,defaultValue = "1")Integer uid){        System.out.println(uid);        return "redirect:/user/list.do";    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis进阶</title>
      <link href="/2019/08/24/framework/mybatis-jin-jie/"/>
      <url>/2019/08/24/framework/mybatis-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MyBatis的关联查询"><a href="#1-MyBatis的关联查询" class="headerlink" title="1. MyBatis的关联查询"></a>1. MyBatis的关联查询</h2><h3 id="1-1-案例：用户和订单"><a href="#1-1-案例：用户和订单" class="headerlink" title="1.1 案例：用户和订单"></a>1.1 案例：用户和订单</h3><p>表结构如下：</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/user_orders-1566663584689.jpg" alt="user_orders"></p><ul><li>user和orders<ul><li>user与orders：一个用户可以创建多个订单，<strong>一对多。</strong></li><li>orders与user：多个订单只由一个用户创建，<strong>多对一</strong>。</li></ul></li><li>orders和orderdetail<ul><li>orders与orderdetail：一个订单可以包括多个订单明细，因为一个订单可以购买多个商品，每个商品购买信息在orderdetail记录，<strong>一对多关系</strong>。</li><li>orderdetail与orders：多个订单明细包括在一个订单中，<strong>多对一</strong>。</li></ul></li><li>orderdetail和items<ul><li>orderdetail与items：多个订单明细只对应一个商品信息，<strong>多对一</strong>。</li><li>items与orderdetail：一个商品可以包括在多个订单明细中，<strong>一对多</strong>。</li></ul></li></ul><h3 id="1-2-一对一：resultType实现"><a href="#1-2-一对一：resultType实现" class="headerlink" title="1.2 一对一：resultType实现"></a>1.2 一对一：resultType实现</h3><p>复杂查询时，单表对应的PO类已经不能满足结果集的映射。所以要根据需求<strong>建立一个扩展类</strong>来作为resultType的类型。</p><ul><li>创建订单类</li></ul><pre><code class="java">public class Orders {    private int id;    private int user_id;    private String number;    private Date createtime;    private String note;    // 省略get/set，toString}</code></pre><ul><li>创建订单类的扩展类</li></ul><pre><code class="java">// Orders扩展类public class OrdersExt extends Orders {    private String username;    private String address;    @Override    public String toString() {        return "OrdersExt{" +                "username='" + username + '\'' +                ", address='" + address + '\'' +                '}' + super.toString();    }    // 省略get/set}</code></pre><ul><li>声明订单接口</li></ul><pre><code class="java">public interface OrderMapper {    public OrdersExt findOrderById(int id);}</code></pre><ul><li>声明订单映射文件</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--OrderMapper接口映射文件--&gt;&lt;mapper namespace="com.zero.mapper.OrderMapper"&gt;    &lt;select id="findOrderById" parameterType="int" resultType="ordersExt"&gt;        select            u.username,u.address,o.*        from            orders o,user u        where            u.`id`=o.`user_id`            and o.id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><ul><li>加载映射文件</li></ul><pre><code class="xml">&lt;mappers&gt;    &lt;package name="com.zero.mapper"/&gt;&lt;/mappers&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">public class OrderMapperTest {    private SqlSession session = null;    @Before    public void before() throws IOException {        System.out.println("before:获取session");        //1. 读取配置文件        InputStream is = Resources.getResourceAsStream("SqlMapconfig.xml");        //2. 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(is);        session = sessionFactory.openSession();    }    @After    public void after(){        System.out.println("after:关闭会话");        //5. 关闭会话。        session.commit();        session.close();    }    // 测试复杂查询一对一    @Test    public void test1(){        OrderMapper mapper = session.getMapper(OrderMapper.class);        OrdersExt order = mapper.findOrderById(3);        System.out.println(order);    }}</code></pre><h3 id="1-3-一对一：resultMap实现"><a href="#1-3-一对一：resultMap实现" class="headerlink" title="1.3 一对一：resultMap实现"></a>1.3 一对一：resultMap实现</h3><ul><li>Orders类中新增user属性，添加get/set方法，以存储订单所属用户</li></ul><pre><code class="java">public class Orders {    private Integer id;    private Integer user_id;    private String number;    private Date createtime;    private String note;    private User user; // 订单所属用户    public User getUser() {        return user;    }    public void setUser(User user) {        this.user = user;    }    // 注意toString方法要添加user信息}</code></pre><ul><li>mapper接口新增方法</li></ul><pre><code class="java">public Orders findOrderById2(int id);</code></pre><ul><li>映射文件中添加查询，使用resultMap</li></ul><pre><code class="xml">&lt;!--如果模型里面有模型，使用resultMap--&gt;&lt;resultMap id="orderRslMap" type="orders"&gt;    &lt;!--往orders的模型匹配数据--&gt;    &lt;id property="id" column="id"/&gt;    &lt;id property="number" column="number"/&gt;    &lt;id property="createtime" column="createtime"/&gt;    &lt;id property="note" column="note"/&gt;    &lt;!--往orders中的user匹配数据            使用association进行配置--&gt;    &lt;association property="user" javaType="user"&gt;        &lt;id property="id" column="user_id"/&gt;        &lt;id property="username" column="username"/&gt;        &lt;id property="address" column="address"/&gt;    &lt;/association&gt;&lt;/resultMap&gt;&lt;select id="findOrderById2" parameterType="int" resultMap="orderRslMap"&gt;    select    u.username,u.address,o.*    from    orders o,user u    where    u.`id`=o.`user_id`    and o.id = #{id}&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">// 测试resultMap一对一@Testpublic void test2(){    OrderMapper mapper = session.getMapper(OrderMapper.class);    Orders order = mapper.findOrderById2(3);    System.out.println(order);}</code></pre><ul><li>小结：<ul><li>resultType：使用resultType实现较为简单，如果POJO中没有包括查询出来的列名， 则必须增加列名对应的属性，才可完成映射。<strong>如果没有查询结果的特殊要求建议使用resultType</strong>。</li><li>resultMap：需单独定义resultMap，实现较麻烦，如果对<strong>查询结果有特殊的要求</strong>，使用resultMap可以完成将关联查询映射到POJO的对象属性中。</li><li>resultMap可以实现延迟加载，resultType无法实现延迟加载。</li></ul></li></ul><h3 id="1-4-一对多"><a href="#1-4-一对多" class="headerlink" title="1.4 一对多"></a>1.4 一对多</h3><ul><li>需求：根据订单ID查找订单信息、用户信息和订单明细信息。</li></ul><pre><code class="sql">-- 根据订单ID查找订单信息、用户信息和订单明细信息。select   u.`username`,  u.`address`,  o.*,  od.id detail_id,  od.items_id,  od.items_numfrom   user u,  orders o,  orderdetail odwhere   u.`id`=o.`user_id`   and o.`id`=od.orders_id  and o.`id` = 3;</code></pre><ul><li>新建OrderDetail类</li></ul><pre><code class="java">// 订单详情实体类public class OrderDetail {    private Integer id; // 订单详情id    private Integer items_id; // 商品id    private Integer items_num; // 商品数量    // 省略get/set，toString}</code></pre><ul><li>修改Orders类，添加订单明细属性</li></ul><pre><code class="java">public class Orders {    private Integer id;    private Integer user_id;    private String number;    private Date createtime;    private String note;    private User user; // 订单所属用户    // 一对多数据封装：订单明细    private List&lt;OrderDetail&gt; orderDetails;}</code></pre><ul><li>mapper接口</li></ul><pre><code class="java">public interface OrderMapper {    public OrdersExt findOrderById(int id);    public Orders findOrderById2(int id);    // 一对多关系映射配置    public Orders findOrderById3(int id);}</code></pre><ul><li>映射文件添加查询,resultMap中有个extends属性，可继承父类配置的数据映射关系。</li></ul><pre><code class="xml">&lt;!-- =========== 一对多 ============= --&gt;&lt;resultMap id="orderRslMap2" type="orders" extends="orderRslMap"&gt; &lt;!--如果继承了orderRslMap 下面的orders和user模型无需再次编写。--&gt;    &lt;!--往orders的模型匹配数据--&gt;    &lt;id property="id" column="id"/&gt;    &lt;id property="number" column="number"/&gt;    &lt;id property="createtime" column="createtime"/&gt;    &lt;id property="note" column="note"/&gt;    &lt;!--往orders中的user匹配数据            使用association进行配置--&gt;    &lt;association property="user" javaType="user"&gt;        &lt;id property="id" column="user_id"/&gt;        &lt;id property="username" column="username"/&gt;        &lt;id property="address" column="address"/&gt;    &lt;/association&gt;    &lt;!-- 一对多匹配：往orders中的orderDetails匹配数据            注意：集合里类型需使用ofType，而不是javaType--&gt;    &lt;collection property="orderDetails" ofType="orderDetail"&gt;        &lt;id property="id" column="detail_id"/&gt;        &lt;id property="items_id" column="items_id"/&gt;        &lt;id property="items_num" column="items_num"/&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id="findOrderById3" parameterType="int" resultMap="orderRslMap2"&gt;    select        u.`username`,        u.`address`,        o.*,        od.id detail_id,        od.items_id,        od.items_num    from        user u,        orders o,        orderdetail od    where        u.`id`=o.`user_id`        and o.`id`=od.orders_id        and o.`id` = #{id};&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">// 测试resultMap一对一@Testpublic void test3(){    OrderMapper mapper = session.getMapper(OrderMapper.class);    Orders order = mapper.findOrderById3(3);    System.out.println(order);}</code></pre><h4 id="1-4-1-小结"><a href="#1-4-1-小结" class="headerlink" title="1.4.1 小结"></a>1.4.1 小结</h4><p>Mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中。</p><h3 id="1-5-多对多"><a href="#1-5-多对多" class="headerlink" title="1.5 多对多"></a>1.5 多对多</h3><ul><li>需求：查询用户信息及用户购买的商品信息，要求将关系信息映射到主POJO的POJO属性中。</li></ul><pre><code class="sql">SELECT   u.`id`,  u.`username`,  u.`address`,  o.`id` order_id,  o.`number`,  o.`createtime`,  o.`note`,  od.`id` detail_id,  od.`items_id`,  od.`items_num`,  it.`name`,  it.`price`,  it.`detail`FROM   user u,  orders o,  orderdetail od,  items itWHERE   u.`id` = o.`user_id`  and o.`id` = od.`orders_id`  and od.`items_id` = it.`id`;</code></pre><ul><li>映射思路<ul><li>将用户信息映射到user中。</li><li>在user类中添加订单列表属性<code>List&lt;Orders&gt; orderslist</code>，将用户创建的订单映射到orderslist中。</li><li>在Orders中添加订单明细列表属性<code>List&lt;Orderdetail&gt; detailList</code>，将订单的明细映射到detailList中。</li><li>在Orderdetail中添加Items属性，将订单明细所对应的商品映射到Items中。</li></ul></li></ul><ul><li>mapper中添加方法</li></ul><pre><code class="java">public interface UserMapper {    // 多对多查询:查询用户信息及用户购买的商品信息    public List&lt;User&gt; findUserAndOrderInfo();}</code></pre><ul><li>在user类中添加订单列表属性<code>List&lt;Orders&gt; orderslist</code>，将用户创建的订单映射到orderslist中。</li></ul><pre><code class="java">public class User implements Serializable {    private int id;    private String username;    private String sex;    private Date birthday;    private String address;    private List&lt;Orders&gt; orderList; // 一个用户有多张订单}</code></pre><ul><li>在Orders中添加订单明细列表属性<code>List&lt;Orderdetail&gt; detailList</code>，将订单的明细映射到detailList中。</li></ul><pre><code class="java">public class Orders {    private Integer id;    private Integer user_id;    private String number;    private Date createtime;    private String note;    private User user; // 订单所属用户    // 一对多数据封装：订单明细    private List&lt;OrderDetail&gt; orderDetails;}</code></pre><ul><li>新建items类</li></ul><pre><code class="java">public class Items {    private Integer id;    private String name;    private Float price;    private String detail;}</code></pre><ul><li>在Orderdetail中添加Items属性，将订单明细所对应的商品映射到Items中。</li></ul><pre><code class="java">public class OrderDetail {    private Integer id; // 订单详情id    private Integer items_id; // 商品id    private Integer items_num; // 商品数量    private Items items; // 订单详情}</code></pre><ul><li>映射文件中配置映射关系，查询方法</li></ul><pre><code class="xml">&lt;!-- 多对多查询:查询用户信息及用户购买的商品信息 --&gt;&lt;resultMap id="userRslMap" type="user"&gt;    &lt;!--1. 配置user属性--&gt;    &lt;id property="id" column="id"/&gt;    &lt;result property="username" column="username"/&gt;    &lt;result property="address" column="address"/&gt;    &lt;!--2. 配置user的orderList--&gt;    &lt;collection property="orderList" ofType="orders"&gt;        &lt;id property="id" column="order_id"/&gt;        &lt;result property="number" column="number"/&gt;        &lt;result property="createtime" column="createtime"/&gt;        &lt;result property="note" column="note"/&gt;        &lt;!--3. 配置orders的orderDetail--&gt;        &lt;collection property="orderDetails" ofType="orderDetail"&gt;            &lt;id property="id" column="detail_id"/&gt;            &lt;result property="items_id" column="items_id"/&gt;            &lt;result property="items_num" column="items_num"/&gt;            &lt;!--4. 匹配订单详情的商品信息：在Orderdetail中添加Items属性，将订单明细所对应的商品映射到Items中。--&gt;            &lt;association property="items" javaType="items"&gt;                &lt;id property="id" column="items_id"/&gt;                &lt;result property="name" column="name"/&gt;                &lt;result property="price" column="price"/&gt;                &lt;result property="detail" column="detail"/&gt;            &lt;/association&gt;        &lt;/collection&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id="findUserAndOrderInfo" resultMap="userRslMap"&gt;    SELECT        u.`id`,        u.`username`,        u.`address`,        o.`id` order_id,        o.`number`,        o.`createtime`,        o.`note`,        od.`id` detail_id,        od.`items_id`,        od.`items_num`,        it.`name`,        it.`price`,        it.`detail`    FROM        user u,        orders o,        orderdetail od,        items it    WHERE        u.`id` = o.`user_id`        and o.`id` = od.`orders_id`        and od.`items_id` = it.`id`&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">/** * 多对多查询信息：查询用户信息及用户购买的商品信息 */@Testpublic void test2() {    UserMapper mapper = session.getMapper(UserMapper.class);    List&lt;User&gt; infos = mapper.findUserAndOrderInfo();    for (User user:infos){        System.out.println("用户信息："+user);        for (Orders order:user.getOrderList()){            System.out.println("订单信息："+order);            for (OrderDetail od:order.getOrderDetails()){                System.out.println("订单详情：" + od);            }            System.out.println("&lt;---------------------------------&gt;");        }    }}</code></pre><ul><li>输出结果</li></ul><pre><code>用户信息：User{id=1, username='赵六', sex='null', birthday=null, address='杭州市'}订单信息：Orders{id=3, user_id=null, number='1000010', createtime=Wed Feb 04 13:22:35 CST 2015, note='null', user=null, orderDetails=[OrderDetail{id=1, items_id=1, items_num=1, items=Items{id=1, name='台式机', price=3000.0, detail='该电脑质量非常好！！！！'}}, OrderDetail{id=2, items_id=2, items_num=3, items=Items{id=2, name='笔记本', price=6000.0, detail='笔记本性能好，质量好！！！！！'}}]}订单详情：OrderDetail{id=1, items_id=1, items_num=1, items=Items{id=1, name='台式机', price=3000.0, detail='该电脑质量非常好！！！！'}}订单详情：OrderDetail{id=2, items_id=2, items_num=3, items=Items{id=2, name='笔记本', price=6000.0, detail='笔记本性能好，质量好！！！！！'}}&lt;---------------------------------&gt;订单信息：Orders{id=4, user_id=null, number='1000011', createtime=Tue Feb 03 13:22:41 CST 2015, note='null', user=null, orderDetails=[OrderDetail{id=3, items_id=3, items_num=4, items=Items{id=3, name='背包', price=200.0, detail='名牌背包，容量大质量好！！！！'}}, OrderDetail{id=4, items_id=2, items_num=3, items=Items{id=2, name='笔记本', price=6000.0, detail='笔记本性能好，质量好！！！！！'}}]}订单详情：OrderDetail{id=3, items_id=3, items_num=4, items=Items{id=3, name='背包', price=200.0, detail='名牌背包，容量大质量好！！！！'}}订单详情：OrderDetail{id=4, items_id=2, items_num=3, items=Items{id=2, name='笔记本', price=6000.0, detail='笔记本性能好，质量好！！！！！'}}&lt;---------------------------------&gt;</code></pre><h4 id="1-5-1-小结"><a href="#1-5-1-小结" class="headerlink" title="1.5.1 小结"></a>1.5.1 小结</h4><ul><li>resultType：将查询结果安装sql列名和POJO属性名一致性映射到POJO中。</li><li>resultMap：使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）<ul><li>association：将关联查询信息映射到一个POJO对象中。</li><li>collection：将关联查询信息映射到一个list集合中。</li></ul></li></ul><blockquote><ul><li>模型里面有模型，用association</li><li>模型里面有集合，用collection</li></ul></blockquote><h2 id="2-延时加载"><a href="#2-延时加载" class="headerlink" title="2. 延时加载"></a>2. 延时加载</h2><p>延迟加载又叫懒加载，也叫按需加载。即先加载主信息，在需要的时候，再去加载从信息。</p><p>在Mybatis中，resultMap标签的association标签和collection标签具有延迟加载的功能。</p><ul><li>分别在两个接口中添加方法</li></ul><pre><code class="java">public interface UserMapper {    public User findUserById(int id);}public interface OrderMapper {    // 懒加载订单的用户数据    public List&lt;Orders&gt; findOrderAndUserByLazyloading();}</code></pre><ul><li>映射文件</li></ul><pre><code class="xml">&lt;!--UserMapper映射文件--&gt;&lt;mapper namespace="com.zero.mapper.UserMapper"&gt;    &lt;select id="findUserById" parameterType="int" resultType="user"&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;&lt;!--OrderMapper接口映射文件--&gt;&lt;mapper namespace="com.zero.mapper.OrderMapper"&gt;    &lt;!-- =========== 懒加载 ============= --&gt;    &lt;resultMap id="orderLazyloadingRslMap" type="orders"&gt;        &lt;id property="id" column="id"/&gt;        &lt;result property="note" column="note"/&gt;        &lt;result property="number" column="number"/&gt;        &lt;result property="createtime" column="createtime"/&gt;        &lt;!-- 配置懒加载查询语句，column是子查询所需参数--&gt;        &lt;association property="user" select="com.zero.mapper.UserMapper.findUserById" column="user_id"/&gt;    &lt;/resultMap&gt;    &lt;select id="findOrderAndUserByLazyloading" resultMap="orderLazyloadingRslMap"&gt;        select * from orders    &lt;/select&gt;&lt;/mapper&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">// 懒加载@Testpublic void test４(){    OrderMapper mapper = session.getMapper(OrderMapper.class);    List&lt;Orders&gt; orders = mapper.findOrderAndUserByLazyloading();    for (Orders order:orders){        System.out.println("订单信息："+order);        System.out.println("订单用户："+order.getUser());    }}</code></pre><ul><li>全局配置文件中配置懒加载</li></ul><pre><code class="xml">&lt;configuration&gt;    &lt;!--懒加载配置--&gt;    &lt;settings&gt;        &lt;setting name="lazyLoadingEnabled" value="true"/&gt;    &lt;/settings&gt;&lt;/configuration&gt;</code></pre><h2 id="3-查询缓存"><a href="#3-查询缓存" class="headerlink" title="3. 查询缓存"></a>3. 查询缓存</h2><p>Mybatis提供查询缓存，用于减轻数据压力，提高数据库抗压力。</p><p>Mybatis的缓存，包括<strong>一级缓存和二级缓存</strong>，一级缓存是默认使用的。二级缓存需手动开启。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/cache-1566663654286.jpg" alt="cache"></p><p>在操作数据库时需构造SqlSession对象，在对象中有一个数据结构(HashMap)用于缓存数据。不同的SqlSession之间的缓存数据区域是互不影响的。</p><ul><li>Mybatis一级缓存的作用域是同一个SqlSession，在同一个sqlSession中两次执行相同的sql语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。当一个sqlSession结束后该sqlSession中的一级缓存也就不存在了。Mybatis默认开启一级缓存。</li><li>Mybatis二级缓存是<strong>多个SqlSession共享</strong>的，其作用域是mapper的同一个namespace，不同的sqlSession两次执行相同namespace下的sql语句且向sql中传递参数也相同即最终执行相同的sql语句，第一次执行完毕会将数据库中查询的数据写到缓存（内存），第二次会从缓存中获取数据将不再从数据库查询，从而提高查询效率。Mybatis默认没有开启二级缓存，需要在setting全局参数中配置开启二级缓存。</li></ul><h3 id="3-1-一级缓存原理"><a href="#3-1-一级缓存原理" class="headerlink" title="3. 1 一级缓存原理"></a>3. 1 一级缓存原理</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/OneLevelCache-1566663673662.jpg" alt="OneLevelCache"></p><ul><li><p>第一次发起查询，会先去找缓存中是否有id为1的用户信息，如果没有，从数据库中查询用户信息。获取信息后再将用户信息存储到一级缓存中。</p></li><li><p>第二次发起查询用户id为1的用户信息时，先去缓存中找，如缓存中有，直接从缓存中获取用户信息。</p></li><li>如果SqlSession执行了commit操作(执行插入、更新、删除)，会清空SqlSession中的一级缓存，以确保缓存中存储的是最新数据，避免脏读。</li><li>Mybatis内部存储缓存使用一个HashMap。key为HashCode+sqlId+Sql语句，value是查询出来映射生成的java对象。</li></ul><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test1() throws IOException {    //1. 读取配置文件    InputStream is = Resources.getResourceAsStream("SqlMapconfig.xml");    //2. 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。    SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(is);    // 3. 会话    SqlSession session = sessionFactory.openSession();    // 4. 通过会话获取dao接口    UserMapper mapper = session.getMapper(UserMapper.class);    /**         * 默认情况下，一级缓存也就是session级别缓存是开启的         * 保存、删除、更新操作，一级缓存数据会自动清空         */    User user1 = mapper.findUserById(1);    System.out.println("user1"+user1);    // 保存用户,测试缓存是否清空    mapper.save(new User("小花","1",null,"杭州"));    session.commit();    User user2 = mapper.findUserById(1);    System.out.println("user2"+user1);}</code></pre><h3 id="3-2-二级缓存原理"><a href="#3-2-二级缓存原理" class="headerlink" title="3.2 二级缓存原理"></a>3.2 二级缓存原理</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/TwoLevelCache-1566663699382.jpg" alt="TwoLevelCache"></p><ul><li>SqlSession1去查询用户id为1的用户信息，查询到用户信息后会将查询数据存储到二级缓存中。</li><li>SqlSession2去查询用户id为1的用户信息时，会先去缓存中找是否有数据，有则直接从缓存中取。</li><li>二级缓存区域是根据mapper的namespace划分的，同一个namespace的mapper查询数据放在同一个区域，如果使用mapper代理方法每个mapper的namespace都不同，此时可以理解为二级缓存区域是根据mapper划分。</li><li>每次查询会先从缓存区域找，如果找不到从数据库查询，查询到数据将数据写入缓存。</li><li>sqlSession执行insert、update、delete等操作commit提交后会清空缓存区域。</li><li>开启二级缓存需在配置文件中手动配置。</li></ul><h4 id="3-2-1-代码示例"><a href="#3-2-1-代码示例" class="headerlink" title="3.2.1 代码示例"></a>3.2.1 代码示例</h4><ul><li>开启二级缓存总开关</li></ul><pre><code class="xml">&lt;settings&gt;    &lt;!--懒加载配置--&gt;    &lt;setting name="lazyLoadingEnabled" value="true"/&gt;    &lt;!--开启二级缓存--&gt;    &lt;setting name="cacheEnabled" value="true"/&gt;&lt;/settings&gt;</code></pre><ul><li>在UserMapper中配置二级缓存</li></ul><pre><code class="xml">&lt;mapper namespace="com.zero.mapper.UserMapper"&gt;    &lt;!-- 配置缓存：该类下所有查询方法都使用二级缓存        type不写，默认使用的是mybatis自带的缓存技术：perpetualCache --&gt;    &lt;cache&gt;&lt;/cache&gt;&lt;/mapper&gt;</code></pre><ul><li>User类序列化</li></ul><pre><code class="java">public class User implements Serializable {}</code></pre><ul><li>测试</li></ul><pre><code class="java">// 二级缓存@Testpublic void test2() throws IOException {    //1. 读取配置文件    InputStream is = Resources.getResourceAsStream("SqlMapconfig.xml");    //2. 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。    SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(is);    // 3. 会话    SqlSession session1 = sessionFactory.openSession();    SqlSession session2 = sessionFactory.openSession();    SqlSession session3 = sessionFactory.openSession();    // 4. 通过会话获取dao接口    UserMapper mapper1 = session1.getMapper(UserMapper.class);    UserMapper mapper2 = session2.getMapper(UserMapper.class);    UserMapper mapper3 = session3.getMapper(UserMapper.class);    User user1 = mapper1.findUserById(1);    System.out.println("user1"+user1);    // session关闭后才会写入二级缓存    session1.close();    // 执行修改更新删除等操作，提交后，会清空二级缓存    mapper3.save(user1);    session3.commit();    User user2 = mapper2.findUserById(1);    System.out.println("user2"+user2);    session3.close();}</code></pre><ul><li>关于禁用指定方法二级缓存</li></ul><pre><code class="xml">&lt;select id="findUserById" parameterType="int" resultType="user" useCache="false"&gt;     SELECT * FROM USER WHERE id = #{id}&lt;/select&gt;</code></pre><ul><li>关于刷新缓存</li></ul><pre><code class="xml">&lt;!--        默认情况下，插入、更新、删除会清空二级缓存        默认flushCache="true"        如果设置为false，插入、更新、删除就不会清空二级缓存    --&gt;&lt;insert id="save" parameterType="user" flushCache="false"&gt;    INSERT into user (username,sex,birthday,address)    values (#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h3 id="3-3-整合Ehcache"><a href="#3-3-整合Ehcache" class="headerlink" title="3.3 整合Ehcache"></a>3.3 整合Ehcache</h3><p>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是一个分布式的缓存框架。</p><p>Mybatis本身是一个持久层框架，它不是专门的缓存框架，所以它对缓存的实现不够好，不能支持分布式。</p><ul><li><p>分布式：系统为了提高性能，通常会对系统采用分布式部署(集群部署方式)</p></li><li><p>整合思路</p><ul><li>Cache是一个借口，它的默认实现是mybatis的PerpetualCache。如果想整合mybatis的二级缓存，那么实现Cache接口即可。</li></ul></li><li><p>实现步骤：</p><ul><li>先添加jar包</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/ehcache-1566663742344.jpg" alt="ehcache"></p><ul><li>设置映射文件中的cache标签的type值为ehcache的实现类</li></ul><pre><code class="xml">&lt;mapper namespace="com.zero.mapper.UserMapper"&gt;    &lt;!-- 配置缓存：该类下所有查询方法都使用二级缓存        type不写，默认使用的是mybatis自带的缓存技术：perpetualCache --&gt;    &lt;cache type="org.mybatis.caches.ehcache.EhcacheCache"&gt;&lt;/cache&gt;&lt;/mapper&gt;</code></pre><ul><li>在src下添加ehcache的配置文件</li></ul><pre><code class="xml">&lt;ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../config/ehcache.xsd"&gt;    &lt;diskStore path="java.io.tmpdir"/&gt;    &lt;!--        maxElementsInMemory :设置基于内存的缓存中可存放的对象最大数目        eternal:设置对象是否为永久的,true表示永不过期,此时将忽略        timeToIdleSeconds 和 timeToLiveSeconds属性; 默认值是false        timeToIdleSeconds:设置对象空闲最长时间,以秒为单位, 超过这个时间,对象过期。        当对象过期时,EHCache会把它从缓存中清除。如果此值为0,表示对象可以无限期地处于空闲状态。        timeToLiveSeconds:设置对象生存最长时间,超过这个时间,对象过期。        如果此值为0,表示对象可以无限期地存在于缓存中. 该属性值必须大于或等于 timeToIdleSeconds 属性值        overflowToDisk:设置基于内在的缓存中的对象数目达到上限后,是否把溢出的对象写到基于硬盘的缓存中        diskPersistent 当jvm结束时是否持久化对象 true false 默认是false        diskExpiryThreadIntervalSeconds 指定专门用于清除过期对象的监听线程的轮询时间        memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候，        移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）    --&gt;    &lt;defaultCache            maxElementsInMemory="10000"            eternal="false"            timeToIdleSeconds="120"            timeToLiveSeconds="120"            maxElementsOnDisk="10000000"            diskExpiryThreadIntervalSeconds="120"            memoryStoreEvictionPolicy="LRU"&gt;        &lt;persistence strategy="localTempSwap"/&gt;    &lt;/defaultCache&gt;&lt;/ehcache&gt;</code></pre><ul><li>测试：用上一个二级缓存案例即可</li></ul></li><li><p>二级缓存应用场景</p><ul><li>对于访问响应速度要求高，但是实时性不高的查询，可以采用二级缓存技术。</li></ul></li></ul><h2 id="4-MyBatis整合Spring"><a href="#4-MyBatis整合Spring" class="headerlink" title="4. MyBatis整合Spring"></a>4. MyBatis整合Spring</h2><h3 id="4-1-创建工程导包"><a href="#4-1-创建工程导包" class="headerlink" title="4.1 创建工程导包"></a>4.1 创建工程导包</h3><ul><li>导入Mybatis包及依赖包</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/mybatis-1566663766728.jpg" alt="mybatis"></p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/mybatis_relyon-1566663784695.jpg" alt="mybatis_relyon"></p><ul><li><p>导入mysql数据库驱动：<code>mysql-connector-java-5.1.7-bin.jar</code></p></li><li><p>DBCP连接池相关包：<code>commons-dbcp-1.4.jar</code>和<code>commons-pool-1.6.jar</code></p></li><li>spring+mvc相关包：</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/spring_mvc-1566663800152.jpg" alt="spring_mvc"></p><ul><li>Mybatis-spring整合包：<code>mybatis-spring-1.2.2.jar</code></li></ul><h3 id="4-2-配置mybatis的核心配置文件"><a href="#4-2-配置mybatis的核心配置文件" class="headerlink" title="4.2 配置mybatis的核心配置文件"></a>4.2 配置mybatis的核心配置文件</h3><ul><li>创建核心配置文件</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;    &lt;!--加载配置文件--&gt;&lt;!--    &lt;properties resource="db.properties"/&gt;--&gt;    &lt;!--别名配置--&gt;    &lt;typeAliases&gt;        &lt;!-- 批量配置别名--&gt;        &lt;!-- [name]：指定批量定义别名的类包，别名为类名，第一个字母小写--&gt;        &lt;package name="com.zero.sm.model"/&gt;    &lt;/typeAliases&gt;    &lt;!--加载映射文件--&gt;    &lt;mappers&gt;        &lt;package name="com/zero/sm/sqlmap/User.xml"/&gt;        &lt;!-- 加载mapper包下所有映射文件--&gt;        &lt;package name="com.zero.sm.mapper"/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><ul><li>创建User模型</li></ul><pre><code class="java">public class User implements Serializable {    private int id;    private String username;    private String sex;    private Date birthday;    private String address;    // 省略get、set、toString}</code></pre><ul><li>User映射文件</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="user"&gt;    &lt;select id="findUserById" parameterType="int" resultType="user" &gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h3 id="4-3-配置spring数据源"><a href="#4-3-配置spring数据源" class="headerlink" title="4.3 配置spring数据源"></a>4.3 配置spring数据源</h3><pre><code class="xml">&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context-3.2.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "&gt;    &lt;!-- 1.配置数据库，dbcp数据库连接池 --&gt;    &lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt;        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;        &lt;property name="url" value="jdbc:mysql:///mybatis01?useUnicode=true&amp;amp;characterEncoding=utf8"/&gt;        &lt;property name="username" value="root"/&gt;        &lt;property name="password" value="123456"/&gt;        &lt;!-- 最大连接  --&gt;        &lt;property name="maxActive" value="10"/&gt;        &lt;!--最大空闲数  --&gt;        &lt;property name="maxIdle" value="5"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h3 id="4-4-spring配置SqlSessionFactory"><a href="#4-4-spring配置SqlSessionFactory" class="headerlink" title="4.4 spring配置SqlSessionFactory"></a>4.4 spring配置SqlSessionFactory</h3><pre><code class="xml"> &lt;!--2. 配置会话工厂--&gt;&lt;bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"&gt;    &lt;!--引用数据源--&gt;    &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;!--设置全局配置文件路径--&gt;    &lt;property name="configLocation" value="classpath:SqlMapconfig.xml"/&gt;&lt;/bean&gt;</code></pre><h3 id="4-5-编写UserDaoImpl，省略接口"><a href="#4-5-编写UserDaoImpl，省略接口" class="headerlink" title="4.5 编写UserDaoImpl，省略接口"></a>4.5 编写UserDaoImpl，省略接口</h3><pre><code class="java">public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao {    @Override    public User findUserById(int id) {        return getSqlSession().selectOne("user.findUserById",id); // 调用父类方法获取会话对象，然后执行方法    }}</code></pre><h3 id="4-6-spring中配置daobean"><a href="#4-6-spring中配置daobean" class="headerlink" title="4.6 spring中配置daobean"></a>4.6 spring中配置daobean</h3><pre><code class="java">&lt;!--3. 配置dao--&gt;&lt;bean id="userDao" class="com.zero.sm.dao.Impl.UserDaoImpl"&gt;    &lt;property name="sqlSessionFactory" ref="sessionFactory"/&gt;&lt;/bean&gt;</code></pre><h3 id="4-7-测试"><a href="#4-7-测试" class="headerlink" title="4.7 测试"></a>4.7 测试</h3><pre><code class="java">public class Demo01 {    @Test    public void test1(){        // 1. 加载spring的配置文件        ApplicationContext context = new ClassPathXmlApplicationContext("springConfig.xml");        // 2. 获取dao的bean        UserDao userDao = (UserDao) context.getBean("userDao");        // 3. 调用dao方法        User user = userDao.findUserById(1);        System.out.println(user);    }}</code></pre><h3 id="4-8-换成Mapper接口整合dao"><a href="#4-8-换成Mapper接口整合dao" class="headerlink" title="4.8 换成Mapper接口整合dao"></a>4.8 换成Mapper接口整合dao</h3><ul><li>创建Mapper映射文件</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.zero.sm.mapper.UserMapper"&gt;    &lt;select id="findUserById" parameterType="int" resultType="user" &gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><ul><li>加载映射文件</li></ul><pre><code class="xml">&lt;mappers&gt;    &lt;mapper resource="com/zero/sm/sqlmap/User.xml"/&gt;    &lt;!-- 加载mapper包下所有映射文件--&gt;    &lt;package name="com.zero.sm.mapper"/&gt;&lt;/mappers&gt;</code></pre><ul><li>spring配置MapperFactoryBean</li></ul><pre><code class="xml">&lt;!-- 第二种方法--&gt;&lt;!--4. 使用工厂Bean生成userMapper对象--&gt;&lt;bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"&gt;    &lt;property name="sqlSessionFactory" ref="sessionFactory"/&gt;    &lt;property name="mapperInterface" value="com.zero.sm.mapper.UserMapper"/&gt;&lt;/bean&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java"> @Testpublic void test2() {    // 1. 加载spring的配置文件    ApplicationContext context = new ClassPathXmlApplicationContext("springConfig.xml");    // 2. 获取dao的bean    UserMapper userMapper = (UserMapper) context.getBean("userMapper");    User us = userMapper.findUserById(1);    System.out.println(us);}</code></pre><h3 id="4-9-使用MapperScannerConfigurer批量扫描创建代理对象"><a href="#4-9-使用MapperScannerConfigurer批量扫描创建代理对象" class="headerlink" title="4.9 使用MapperScannerConfigurer批量扫描创建代理对象"></a>4.9 使用<code>MapperScannerConfigurer</code>批量扫描创建代理对象</h3><p>mapper代理开发方式批量mapper配置  ,内部会扫描指定包下的mapper，创建代理对象，bean的名字默认为mapper接口类名的首字母小写。</p><pre><code class="xml"> &lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt;     &lt;property name="basePackage" value="com.zero.sm.mapper"/&gt;     &lt;property name="sqlSessionFactoryBeanName" value="sessionFactory"/&gt;&lt;/bean&gt;</code></pre><p>测试方法同上案例。</p><blockquote><p>Notice：JDK1.8以上使用该方式，无法创建bean，改成JDK1.7即可；或spring版本3.2.9以上。</p></blockquote><h2 id="5-逆向工程"><a href="#5-逆向工程" class="headerlink" title="5. 逆向工程"></a>5. 逆向工程</h2><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h3><p>简单的说，就是通过数据库中的表单，自动生成java代码。</p><p>Mybatis官方提供了逆向工程，可以针对单表自动生成Mybatis代码(<code>mapper.java\mapper.xml\po类</code>)</p><ul><li><a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">下载地址</a></li></ul><h3 id="5-2-使用方法"><a href="#5-2-使用方法" class="headerlink" title="5.2 使用方法"></a>5.2 使用方法</h3><ol><li>创建简单的java项目；</li><li>导入jar包，创建generator配置文件；</li><li>使用java类来执行逆向工程；</li><li>把生成的代码拷贝到项目中；</li><li>在正式项目中使用逆向工程生成的代码。</li></ol><h3 id="5-3-案例示范"><a href="#5-3-案例示范" class="headerlink" title="5.3 案例示范"></a>5.3 案例示范</h3><h4 id="5-3-1-第一步：创建generator配置文件"><a href="#5-3-1-第一步：创建generator配置文件" class="headerlink" title="5.3.1  第一步：创建generator配置文件"></a>5.3.1  第一步：创建generator配置文件</h4><p>在src下，创建generator配置文件，文件内容可以从官方docs目录下的index.html中找到相关代码</p><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt;    &lt;context id="mysqlTables" targetRuntime="MyBatis3"&gt;        &lt;!--数据库配置--&gt;        &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver"                        connectionURL="jdbc:mysql:///mybatis01"                        userId="root"                        password="123456"&gt;        &lt;/jdbcConnection&gt;        &lt;!--java类型解析--&gt;        &lt;javaTypeResolver &gt;            &lt;property name="forceBigDecimals" value="false" /&gt;        &lt;/javaTypeResolver&gt;        &lt;!--模型生成包名--&gt;        &lt;javaModelGenerator targetPackage="com.zero.sm.model" targetProject=".\src"&gt;            &lt;property name="enableSubPackages" value="true" /&gt;            &lt;property name="trimStrings" value="true" /&gt;        &lt;/javaModelGenerator&gt;        &lt;!--mybatis的映射 .xml--&gt;        &lt;sqlMapGenerator targetPackage="com.zero.sm.mapper"  targetProject=".\src"&gt;            &lt;property name="enableSubPackages" value="true" /&gt;        &lt;/sqlMapGenerator&gt;        &lt;!--mybatis的mapper接口生成包路径--&gt;        &lt;javaClientGenerator type="XMLMAPPER" targetPackage="com.zero.sm.mapper"  targetProject=".\src"&gt;            &lt;property name="enableSubPackages" value="true" /&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 配置生成表的模型            domainObjectName: 默认会根据表名生成，首字母自动大写            --&gt;        &lt;table tableName="items"/&gt;        &lt;table tableName="orderdetail" domainObjectName="OrderDetail"/&gt;        &lt;table tableName="orders"/&gt;        &lt;table tableName="user"/&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h4 id="5-3-2-第二步：使用java类来执行逆向工程"><a href="#5-3-2-第二步：使用java类来执行逆向工程" class="headerlink" title="5.3.2  第二步：使用java类来执行逆向工程"></a>5.3.2  第二步：使用java类来执行逆向工程</h4><p>需导入mysql驱动包和mybatis的逆向工程包</p><pre><code class="java">public class Main {    public static void main(String[] args)  throws Exception{        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();        boolean overwrite = true;        File configFile = new File("src/generator.xml");        ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(configFile);        DefaultShellCallback callback = new DefaultShellCallback(overwrite);        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,                callback, warnings);        myBatisGenerator.generate(null);    }}</code></pre><h4 id="5-3-3-第三步：把生成的代码拷贝到项目中"><a href="#5-3-3-第三步：把生成的代码拷贝到项目中" class="headerlink" title="5.3.3  第三步：把生成的代码拷贝到项目中"></a>5.3.3  第三步：把生成的代码拷贝到项目中</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/25/AutoGenerator-1566663834855.jpg" alt="AutoGenerator"></p><h4 id="5-3-4-第四步：测试"><a href="#5-3-4-第四步：测试" class="headerlink" title="5.3.4  第四步：测试"></a>5.3.4  第四步：测试</h4><pre><code class="java">// 测试基本查询@Testpublic void test2() {    // 1. 加载spring的配置文件    ApplicationContext context = new ClassPathXmlApplicationContext("springConfig.xml");    // 2. 获取dao的bean    UserMapper userMapper = (UserMapper) context.getBean("userMapper");    // 3. 通过主键查询对象    User user = userMapper.selectByPrimaryKey(1);    System.out.println(user);}// 测试Example@Testpublic void test3() {    // 自动生成的Example是用于查询的    // 1. 加载spring的配置文件    ApplicationContext context = new ClassPathXmlApplicationContext("springConfig.xml");    // 2. 获取dao的bean    UserMapper userMapper = (UserMapper) context.getBean("userMapper");    UserExample example = new UserExample();    // 封装查询条件    UserExample.Criteria criteria = example.createCriteria();    criteria.andSexEqualTo("1"); // 查询男性用户    // 通过封装后的查询条件查询    List&lt;User&gt; users = userMapper.selectByExample(example);    System.out.println(users);}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis基础入门</title>
      <link href="/2019/08/21/framework/mybatis-ru-men/"/>
      <url>/2019/08/21/framework/mybatis-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MyBatis简介"><a href="#1-MyBatis简介" class="headerlink" title="1. MyBatis简介"></a>1. MyBatis简介</h2><p>MyBatis本是apache的一个开源项目iBatis，2010年这个项目由 apache software foundation迁移到了google code，并改名为MyBatis，实质上MyBatis是对iBatis进行进行了一些改进。</p><a id="more"></a><ul><li>Mybatis是一个优秀的持久层框架，它对jdbc的操作数据库过程进行封装，使开发者只需要关注SQL本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</li><li>对jdbc封装的框架有：Hibernate、DBUtils、jdbcTemplate、Mybatis</li><li>Mybatis原理：<ul><li>通过<strong>XML或注解</strong>的方式将要执行的各种statement(preparedStatement)配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象返回。</li></ul></li><li>MyBatis框架核心<ol><li>mybatis配置文件：包括全局配置文件和映射文件。其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息。</li><li>mybatis通过读取配置文件信息(全局配置文件和映射文件)，构造出SQLSessionFactory，即会话工厂。</li><li>通过SQLSessionFactory，可以创建SQLSession(会话)。Mybatis是通过SQLSession来操作数据库的。</li><li>SQLSession本身不能直接操作数据库，它是通过底层的Executor执行器接口来操作数据库的。Executor接口有两个实现类，一个普通执行器，一个是缓存执行器(默认)。</li><li>Executor执行器要处理的SQL信息是封装到一个底层对象MappedStatement中。该对象包括：SQL语句、输入参数映射信息、输出信息集映射信息。其中输入参数和输出结果的映射类型包括HashMap集合对象、POJO对象类型。</li></ol></li></ul><blockquote><p>POJO：Plain Ordinary Java Object，简单的Java对象，实际就是普通JavaBeans，是为了避免和EJB混淆所创造的简称</p></blockquote><h2 id="2-MyBatis入门"><a href="#2-MyBatis入门" class="headerlink" title="2. MyBatis入门"></a>2. MyBatis入门</h2><h3 id="2-1-环境准备"><a href="#2-1-环境准备" class="headerlink" title="2.1 环境准备"></a>2.1 环境准备</h3><ul><li>下载Mybatis<ul><li><a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">下载地址</a></li></ul></li><li>创建项目导包</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/21/mybatis-1566398238994.jpg" alt="mybatis"></p><ul><li><p>添加日志配置</p><ul><li>项目src下创建log4j.properties文件，内容如下：</li></ul><pre><code class="properties"># Global logging configurationlog4j.rootLogger=DEBUG, stdout# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</code></pre></li></ul><h3 id="2-2-开发步骤"><a href="#2-2-开发步骤" class="headerlink" title="2.2 开发步骤"></a>2.2 开发步骤</h3><ol><li>根据需求创建PO类</li><li>创建全局配置文件：SqlMapConfig.xml</li><li>编写映射文件</li><li>在SqlMapConfig.xml中加载映射文件</li><li>编写测试代码，连接并操作数据库<ul><li>读取配置文件</li><li>通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。</li><li>通过SqlSessionFactory创建SqlSession。</li><li>调用SqlSession的操作数据库方法。</li><li>关闭会话。</li></ul></li></ol><h4 id="2-2-1-创建PO类"><a href="#2-2-1-创建PO类" class="headerlink" title="2.2.1 创建PO类"></a>2.2.1 创建PO类</h4><pre><code class="java">public class User implements Serializable {    private int id;    private String username;    private String sex;    private Date birthday;    private String address;    // 省略get/set    // 省略toString}</code></pre><h4 id="2-2-2-创建全局配置文件"><a href="#2-2-2-创建全局配置文件" class="headerlink" title="2.2.2 创建全局配置文件"></a>2.2.2 创建全局配置文件</h4><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;configuration&gt;    &lt;!-- 配置mybatis的环境信息 --&gt;    &lt;environments default="development"&gt;        &lt;environment id="development"&gt;            &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;            &lt;!-- 配置数据源，采用dbcp连接池 --&gt;            &lt;dataSource type="POOLED"&gt;                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;                &lt;property name="url" value="jdbc:mysql:///mybatis01?useUnicode=true&amp;amp;characterEncoding=utf8"/&gt;                &lt;property name="username" value="root"/&gt;                &lt;property name="password" value="123456"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;&lt;/configuration&gt;</code></pre><h4 id="2-2-3-编写映射文件"><a href="#2-2-3-编写映射文件" class="headerlink" title="2.2.3 编写映射文件"></a>2.2.3 编写映射文件</h4><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--    namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离    注意：使用mapper代理开发时，namespace有特殊且重要的作用 --&gt;&lt;mapper namespace="test"&gt;    &lt;!--        [id]：statement的id，要求在命名空间内唯一        [parameterType]：参数输入类型        [resultType]：查询出的单条结果集对应的java类型，返回值类型        [#{}]： 表示一个占位符?        [#{id}]：表示该占位符待接收参数的名称为id。            注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义     --&gt;    &lt;select id="findUserById" parameterType="int" resultType="com.zero.model.User"&gt;        SELECT * FROM USER WHERE id = #{id1}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h4 id="2-2-4-加载映射文件"><a href="#2-2-4-加载映射文件" class="headerlink" title="2.2.4 加载映射文件"></a>2.2.4 加载映射文件</h4><pre><code class="xml">&lt;!--加载映射文件--&gt;&lt;mappers&gt;    &lt;mapper resource="com/zero/sqlmap/User.xml"/&gt;&lt;/mappers&gt;</code></pre><h4 id="2-2-5-编写测试"><a href="#2-2-5-编写测试" class="headerlink" title="2.2.5 编写测试"></a>2.2.5 编写测试</h4><pre><code class="java">public class UserTest {    @Test    public void test1() throws IOException {        //1. 读取配置文件        InputStream is = Resources.getResourceAsStream("SqlMapconfig.xml");        //2. 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(is);        //3. 通过SqlSessionFactory创建SqlSession。        SqlSession session = sessionFactory.openSession();        //4. 调用SqlSession的操作数据库方法。        User user = session.selectOne("findUserById",10);        System.out.println(user);        //5. 关闭会话。        session.commit();    }}</code></pre><blockquote><p>junit4.12可能会报<code>java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing</code>，版本切换为5.4后不会报错。</p></blockquote><h4 id="2-2-6-查询案例"><a href="#2-2-6-查询案例" class="headerlink" title="2.2.6 查询案例"></a>2.2.6 查询案例</h4><h5 id="1-模糊查询"><a href="#1-模糊查询" class="headerlink" title="1. 模糊查询"></a>1. 模糊查询</h5><ul><li>模糊查询，修改映射文件，添加如下内容：</li></ul><pre><code class="xml">&lt;!--        模糊查询用户信息：            [${}]：表示拼接SQL字符串             [${value}]：表示要拼接的是简单类型参数。             注意：            1、如果参数为简单类型时，${}里面的参数名称必须为value            2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}        --&gt;&lt;select id="findUserByName" parameterType="String" resultType="com.zero.model.User"&gt;    SELECT * FROM USER WHERE username like '%${value}%'&lt;/select&gt;</code></pre><ul><li>测试文件添加查询语句</li></ul><pre><code class="java">// 通过姓名模糊查询用户集合List&lt;User&gt; users = session.selectList("findUserByName", "张");System.out.println(users);</code></pre><h5 id="2-添加用户"><a href="#2-添加用户" class="headerlink" title="2. 添加用户"></a>2. 添加用户</h5><ul><li>修改映射文件，添加内容</li></ul><pre><code class="xml">&lt;!--插入用户信息--&gt;&lt;insert id="insertUser" parameterType="com.zero.model.User"&gt;    &lt;!--如果主键的值是通过MySQL自增机制生成的，那么我们此处无需再‘显式’的给ID赋值--&gt;    INSERT into user (username,sex,birthday,address) values (#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><ul><li>测试代码，注意：需在PO类User中添加一个没有id属性的全参构造方法</li></ul><pre><code class="java">// 插入用户session.insert("insertUser",new User("zero","男",new Date(),"杭州"));</code></pre><h5 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3. 删除用户"></a>3. 删除用户</h5><ul><li>修改映射文件</li></ul><pre><code class="xml">&lt;!--通过id删除用户--&gt;&lt;delete id="deleteUserById" parameterType="int"&gt;    delete from user where id = #{id}&lt;/delete&gt;&lt;!--通过姓名删除用户--&gt;&lt;delete id="deleteUserByName" parameterType="String"&gt;    delete from user where username = #{name}&lt;/delete&gt;</code></pre><ul><li>测试代码</li></ul><pre><code class="java">// 通过id删除用户session.delete("deleteUserById",28);// 通过姓名删除用户，test是映射文件的命名空间session.delete("test.deleteUserByName","张小明");</code></pre><h5 id="4-更新用户"><a href="#4-更新用户" class="headerlink" title="4. 更新用户"></a>4. 更新用户</h5><ul><li>映射文件</li></ul><pre><code class="xml">&lt;!--通过id更新用户--&gt;&lt;update id="updateUserById" parameterType="com.zero.model.User"&gt;    update user set username=#{username},sex=#{sex} where id=#{id}&lt;/update&gt;</code></pre><ul><li>测试代码</li></ul><pre><code class="java">// 通过id更新用户User upUser = new User();upUser.setId(1); // 输入要修改的用户idupUser.setUsername("赵六儿");// 需修改的用户姓名upUser.setSex("女");session.update("updateUserById",upUser);</code></pre><h4 id="2-2-7-返回MySQL自增主键"><a href="#2-2-7-返回MySQL自增主键" class="headerlink" title="2.2.7 返回MySQL自增主键"></a>2.2.7 返回MySQL自增主键</h4><ul><li>MySQL自增主键，是指在insert之前MySQL会自动生成一个自增的主键</li><li><p>可以通过MySQL的函数获取刚插入的自增主键：<code>select LAST_INSERT_ID()</code>，该函数在insert语句之后调用。</p></li><li><p>修改映射文件添加用户内容</p></li></ul><pre><code class="xml">&lt;!--插入用户信息--&gt;&lt;insert id="insertUser" parameterType="com.zero.model.User"&gt;    &lt;!--   [selectKey标签]：通过select查询来生成主键   [keyProperty]：指定存放生成主键的属性   [resultType]：生成主键所对应的Java类型   [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句   [last_insert_id]：MySQL的函数，要配合insert语句一起使用 --&gt;    &lt;selectKey keyProperty="id" resultType="int" order="AFTER"&gt;        SELECT LAST_INSERT_ID()    &lt;/selectKey&gt;    &lt;!--如果主键的值是通过MySQL自增机制生成的，那么我们此处无需再‘显式’的给ID赋值--&gt;    INSERT into user (username,sex,birthday,address) values (#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><ul><li>使用Junit4的注解功能，抽取重复代码</li></ul><pre><code class="java">private SqlSession session = null;@Beforepublic void before() throws IOException {    System.out.println("before:获取session");    //1. 读取配置文件    InputStream is = Resources.getResourceAsStream("SqlMapconfig.xml");    //2. 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。    SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(is);    //3. 通过SqlSessionFactory创建SqlSession。    session = sessionFactory.openSession();}@Afterpublic void after(){    System.out.println("after:关闭会话");    //5. 关闭会话。    session.close();}</code></pre><ul><li>测试代码</li></ul><pre><code class="java"> // 插入用户后，将主键返回，设置到模型id中@Testpublic void test2(){    User user = new User("zero001", "男", new Date(), "杭州");    int Row = session.insert("insertUser", user);    session.commit();    System.out.println("受影响行数："+Row);    System.out.println("用户ID:"+user.getId());}</code></pre><h4 id="2-2-8-返回MySQL自增UUID"><a href="#2-2-8-返回MySQL自增UUID" class="headerlink" title="2.2.8 返回MySQL自增UUID"></a>2.2.8 返回MySQL自增UUID</h4><ul><li>映射文件</li></ul><pre><code class="xml">&lt;insert id="insertUser" parameterType="com.gyf.domain.User"&gt;    &lt;selectKey keyProperty="id" resultType="String" order="BEFORE"&gt;        SELECT UUID()    &lt;/selectKey&gt;    INSERT INTO USER (username,sex,birthday,address)     VALUES(#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h3><ul><li><code>parameterType</code>和<code>resultType</code><ul><li><code>parameterType</code>：指定输入参数的java类型，可以填写别名或Java类的全限定名(就是全类名)。</li><li><code>resultType</code>：指定输出结果的java类型，可以填写别名或Java类的全限定名。</li></ul></li><li><code>#{}</code>和<code>${}</code><ul><li><code>#{}</code>：相当于预处理中的占位符<ul><li><code>#{}</code>里面的参数表示接受java输入参数的名称</li><li><code>#{}</code>可以接受HashMap、POJO类型的参数。当接受简单类型参数时，里面可以是vlaue，也可以是其他。</li><li><code>#{}</code>可以防止SQL注入</li></ul></li><li><code>${}</code>：相当于拼接SQL串，对传入的值不做任何解释的原样输出。<ul><li>会引起SQL注入，所有需谨慎使用</li><li>可以接受HashMap、POJO类型的参数。当接受简单类型的参数时，<code>${}</code>里面只能是value。</li></ul></li></ul></li><li><code>selectOne</code>和<code>selectList</code><ul><li><code>selectOne</code>：只能查询0或1条记录，大于1条记录就会报错。</li><li><code>selectList</code>：可以查询0条或N条记录。</li></ul></li></ul><h3 id="2-4-MyBatis的Dao编写-了解即可"><a href="#2-4-MyBatis的Dao编写-了解即可" class="headerlink" title="2.4 MyBatis的Dao编写(了解即可)"></a>2.4 MyBatis的Dao编写(了解即可)</h3><ul><li>Dao层</li></ul><pre><code class="java">public class UserDaoImpl  implements UserDao {    private SqlSessionFactory ssf;    public UserDaoImpl() {    }    public UserDaoImpl(SqlSessionFactory ssf) {        this.ssf = ssf;    }    @Override    public void save(User user) {        // 获取session        SqlSession session = ssf.openSession();        // 插入用户        session.insert("insertUset",user);        session.commit();        session.close();    }    @Override    public User findUserById(int id) {        // 获取session        SqlSession session = ssf.openSession();        // 查询用户        User user = session.selectOne("findUserById", id);        session.commit();        session.close();        return user;    }}</code></pre><ul><li>测试</li></ul><pre><code class="java">public class UserDaoTest {//    private SqlSession session = null;    private SqlSessionFactory sessionFactory;    @Before    public void before() throws IOException {        System.out.println("before:获取session");        //1. 读取配置文件        InputStream is = Resources.getResourceAsStream("SqlMapconfig.xml");        //2. 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。        sessionFactory = new SqlSessionFactoryBuilder().build(is);    }    @Test    public void test1(){        // 调用dao        // 1. 创建dao        UserDaoImpl userDao = new UserDaoImpl(sessionFactory);        // 2. 查询        User user = userDao.findUserById(1);        System.out.println(user);    }}</code></pre><h3 id="2-5-MyBatis的Dao编写-mapper代理方式实现"><a href="#2-5-MyBatis的Dao编写-mapper代理方式实现" class="headerlink" title="2.5 MyBatis的Dao编写(mapper代理方式实现)"></a>2.5 MyBatis的Dao编写(mapper代理方式实现)</h3><p>Mapper代理的开发方式，程序员只需编写mapper接口(相当于dao接口)即可。MyBatis会自动的为mapper接口生成动态代理实现类。</p><ul><li>开发规范<ul><li>mapper接口的全限定名要和mapper映射文件的namespace的值相同</li><li>mapper接口的方法名称要和映射文件中的statement的id相同</li><li>mapper的接口方法参数只能有一个，且类型要和mapper映射文件中statement的parameterType的值保持一致。</li><li>mapper接口的返回值类型要和mapper映射文件中statement的resultType值或resultMap中的type值保持一致。</li></ul></li></ul><ul><li>编写示例文件</li></ul><pre><code class="java">// mapper类public interface UserMapper {    public void save(User user);    public User findUserById(int id);}</code></pre><p>映射文件:</p><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--    注意：使用mapper代理开发时，namespace值必须是接口全限定名 --&gt;&lt;mapper namespace="com.zero.mapper.UserMapper"&gt;    &lt;insert id="save" parameterType="com.zero.model.User"&gt;        INSERT into user (username,sex,birthday,address)        values (#{username},#{sex},#{birthday},#{address})    &lt;/insert&gt;    &lt;select id="findUserById" parameterType="int" resultType="com.zero.model.User"&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>开发规范：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/21/mapper-1566398292193.jpg" alt="mapper"></p><ul><li>添加映射配置文件</li></ul><pre><code class="xml">&lt;!--加载映射文件--&gt;&lt;mappers&gt;    &lt;mapper resource="com/zero/mapper/UserMapper.xml"/&gt;&lt;/mappers&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">public class UserMapperTest {    private SqlSession session = null;    @Before    public void before() throws IOException {        System.out.println("before:获取session");        //1. 读取配置文件        InputStream is = Resources.getResourceAsStream("SqlMapconfig.xml");        //2. 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(is);        session = sessionFactory.openSession();    }    @After    public void after(){        System.out.println("after:关闭会话");        //5. 关闭会话。        session.close();    }    @Test    public void test1(){        // 通过session获取接口代理类[默认代理：JDK实现的代理]        UserMapper mapper = session.getMapper(UserMapper.class);        // 查询        User user = mapper.findUserById(1);        System.out.println(user);        mapper.save(new User("xxx", "x", new Date(), "xx"));        session.commit();    }}</code></pre><h2 id="3-全局配置文件其他配置"><a href="#3-全局配置文件其他配置" class="headerlink" title="3. 全局配置文件其他配置"></a>3. 全局配置文件其他配置</h2><h3 id="3-1-properties数据库文件配置"><a href="#3-1-properties数据库文件配置" class="headerlink" title="3.1 properties数据库文件配置"></a>3.1 properties数据库文件配置</h3><ul><li>在src下配置<code>db.properties</code>文件</li></ul><pre><code class="properties">driver=com.mysql.jdbc.Driverurl=jdbc:mysql:///mybatis01?useUnicode=true&amp;amp;characterEncoding=utf8username=rootpassword=123456</code></pre><ul><li>在全局配置文件中加载并使用</li></ul><pre><code class="xml">&lt;configuration&gt;    &lt;!--1. 加载配置文件--&gt;    &lt;properties resource="db.properties"/&gt;    &lt;!-- 配置mybatis的环境信息 --&gt;    &lt;environments default="development"&gt;        &lt;environment id="development"&gt;            &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;            &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt;            &lt;!-- 配置数据源，采用dbcp连接池 --&gt;            &lt;dataSource type="POOLED"&gt;                &lt;!--2. 使用${}，可以引用一句加载的java配置文件中的信息--&gt;                &lt;property name="driver" value="${driver}"/&gt;                &lt;property name="url" value="${url}"/&gt;                &lt;property name="username" value="${username}"/&gt;                &lt;property name="password" value="${password}"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;&lt;/configuration&gt;</code></pre><h3 id="3-2-typeAliases"><a href="#3-2-typeAliases" class="headerlink" title="3.2 typeAliases"></a>3.2 <code>typeAliases</code></h3><p>别名的使用是为了在映射文件中，更方便的去指定参数和结果集的类型，不再用写很长一段全限定名。</p><ul><li>mybatis支持的别名<ul><li>java的全部基本数据类型及其对应包装类，引用数据类型等等。</li></ul></li><li>自定义别名</li></ul><pre><code class="xml">&lt;!--在全局配置文件中进行别名配置--&gt;&lt;typeAliases&gt;    &lt;!--单个定义别名--&gt;    &lt;typeAlias type="com.zero.model.User" alias="user"/&gt;    &lt;!-- 批量配置别名--&gt;    &lt;!-- [name]：指定批量定义别名的类包，别名为类名，第一个字母小写(User=user)--&gt;    &lt;package name="com.zero.model"/&gt;&lt;/typeAliases&gt;</code></pre><h3 id="3-3-加载映射文件的几种方式"><a href="#3-3-加载映射文件的几种方式" class="headerlink" title="3.3 加载映射文件的几种方式"></a>3.3 加载映射文件的几种方式</h3><ul><li>使用相对于类路径的资源。</li></ul><pre><code class="xml">&lt;mappers&gt;    &lt;mapper resource="com/zero/mapper/UserMapper.xml"/&gt;&lt;/mappers&gt;</code></pre><ul><li>使用mapper接口的全限定名。注意：此方法要求mapper接口和mapper映射文件名称相同，且在同一目录下。</li></ul><pre><code class="xml">&lt;mappers&gt;    &lt;mapper class="com.zero.mapper.UserMapper"/&gt;&lt;/mappers&gt;</code></pre><p>​        如果没有映射文件，那么在接口中要声明注解。不推荐使用</p><pre><code class="java">public interface UserMapper {    @Insert("INSERT into user (username,sex,birthday,address) values (#{username},#{sex},#{birthday},#{address})")    public void save(User user);    @Select("SELECT * FROM USER WHERE id = #{id}")    public User findUserById(int id);}</code></pre><ul><li>注册指定包下的所有映射文件。推荐</li></ul><pre><code class="xml">&lt;mappers&gt;&lt;!--3. 注册指定包下的所有映射文件--&gt;    &lt;package name="com.zero.mapper"/&gt;&lt;/mappers&gt;</code></pre><h2 id="4-MyBatis的映射文件"><a href="#4-MyBatis的映射文件" class="headerlink" title="4. MyBatis的映射文件"></a>4. MyBatis的映射文件</h2><h3 id="4-1-输入映射ParameterType"><a href="#4-1-输入映射ParameterType" class="headerlink" title="4.1 输入映射ParameterType"></a>4.1 输入映射<code>ParameterType</code></h3><p>指定输入参数的java类型，可以使用别名或类的全限定名。它可以接收简单类型、POJO对象、HashMap</p><h4 id="4-1-1-传递简单类型"><a href="#4-1-1-传递简单类型" class="headerlink" title="4.1.1 传递简单类型"></a>4.1.1 传递简单类型</h4><pre><code class="xml">&lt;select id="findUserById" parameterType="int" resultType="com.zero.model.User"&gt;    SELECT * FROM USER WHERE id = #{id}&lt;/select&gt;</code></pre><h4 id="4-1-2-传递POJO对象"><a href="#4-1-2-传递POJO对象" class="headerlink" title="4.1.2 传递POJO对象"></a>4.1.2 传递POJO对象</h4><pre><code class="xml">&lt;!--插入用户信息--&gt;&lt;insert id="insertUser" parameterType="user"&gt;    &lt;selectKey keyProperty="id" resultType="int" order="AFTER"&gt;        SELECT LAST_INSERT_ID()    &lt;/selectKey&gt;    INSERT into user (username,sex,birthday,address) values (#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h4 id="4-1-3-传递POJO包装对象"><a href="#4-1-3-传递POJO包装对象" class="headerlink" title="4.1.3 传递POJO包装对象"></a>4.1.3 传递POJO包装对象</h4><p>开发中通过pojo传递查询条件 ，查询条件是综合的查询条件。不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。</p><ul><li><p>需求：综合查询用户信息，需传入复杂查询条件，如（用户信息、订单信息、商品信息）。</p></li><li><p>定义POJO包装类</p></li></ul><pre><code class="java">public class UserQueryVO {    private User user;    public User getUser() {        return user;    }    public void setUser(User user) {        this.user = user;    }}</code></pre><ul><li>修改映射接口</li></ul><pre><code class="java">public interface UserMapper {    public void save(User user);    public User findUserById(int id);    public List&lt;User&gt; findUserByUserQueryVo(UserQueryVO vo);}</code></pre><ul><li>修改映射文件，添加查询方法</li></ul><pre><code class="xml">&lt;!--查找用户id为n的用户--&gt;&lt;select id="findUserByUserQueryVo" parameterType="userQueryVO" resultType="user"&gt;    select u.* from user u where u.id = #{user.id}&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test1(){    UserMapper mapper = session.getMapper(UserMapper.class);    // 构造查询对象    UserQueryVO query = new UserQueryVO();    // 设置set    User user = new User();    user.setId(1);    query.setUser(user);    // 查询用户列表    List&lt;User&gt; queryVo = mapper.findUserByUserQueryVo(query);    System.out.println(queryVo);}</code></pre><h4 id="4-1-4-传递Map对象"><a href="#4-1-4-传递Map对象" class="headerlink" title="4.1.4 传递Map对象"></a>4.1.4 传递Map对象</h4><ul><li>修改映射接口文件,添加方法</li></ul><pre><code class="java">public interface UserMapper {    public void save(User user);    public User findUserById(int id);    public List&lt;User&gt; findUserByUserQueryVo(UserQueryVO vo);    public List&lt;User&gt; findUserByMap(Map&lt;String,Object&gt; map);}</code></pre><ul><li>修改映射文件，添加查询语句</li></ul><pre><code class="xml">&lt;select id="findUserByMap" parameterType="hashMap" resultType="user"&gt;    select u.* from user u    where username like '%${username}%' and sex=#{sex}&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java"> @Testpublic void  test2(){    UserMapper mapper = session.getMapper(UserMapper.class);    // 构建map    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();    map.put("username","张");    map.put("sex","1");    // 查询数据    List&lt;User&gt; users = mapper.findUserByMap(map);    System.out.println(users);}</code></pre><blockquote><p>如果查询不到数据，原因是全局配置文件加载外部数据库属性文件会影响到映射文件中的数据读取，需在全局配置文件中将加载外部数据库属性文件关闭。</p></blockquote><h3 id="4-2-输出映射resultType-resultMap"><a href="#4-2-输出映射resultType-resultMap" class="headerlink" title="4.2 输出映射resultType/resultMap"></a>4.2 输出映射<code>resultType/resultMap</code></h3><h4 id="4-2-1-resultType"><a href="#4-2-1-resultType" class="headerlink" title="4.2.1 resultType"></a>4.2.1 <code>resultType</code></h4><ul><li>使用<code>resultType</code>进行结果映射时，查询的列名和映射的POJO属性名完全一致，该列才能映射成功。</li><li>如果查询的列名和映射的POJO属性名全部不一致，则不会创建POJO对象。</li><li>如果查询的列名和映射的POJO属性名有一个一致，就会创建POJO对象。</li></ul><h5 id="4-2-1-1-输出简单类型"><a href="#4-2-1-1-输出简单类型" class="headerlink" title="4.2.1.1 输出简单类型"></a>4.2.1.1 输出简单类型</h5><p>当输出结果只有一列时，可以使用<code>resultType</code>指定简单类型作为输出结果类型。</p><ul><li><p>示例输出一个<code>count(*)</code></p></li><li><p>映射接口文件中添加方法</p></li></ul><pre><code class="java">public int findUserCount(UserQueryVO vo);</code></pre><ul><li>映射文件中添加查询方法</li></ul><pre><code class="xml">&lt;select id="findUserCount" parameterType="userQueryVO" resultType="int"&gt;    select count(*) from user where sex=#{user.sex}&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void  test3(){    UserMapper mapper = session.getMapper(UserMapper.class);    UserQueryVO query = new UserQueryVO();    User user = new User();    user.setSex("1");    query.setUser(user);    int userCount = mapper.findUserCount(query);    System.out.println(userCount);}</code></pre><h5 id="4-2-1-2-输出单个POJO对象"><a href="#4-2-1-2-输出单个POJO对象" class="headerlink" title="4.2.1.2 输出单个POJO对象"></a>4.2.1.2 输出单个POJO对象</h5><ul><li>接口文件添加方法</li></ul><pre><code class="java">public User findUserById(int id);</code></pre><ul><li>映射文件添加查询方法</li></ul><pre><code class="xml">&lt;select id="findUserById" parameterType="int" resultType="user"&gt;    SELECT * FROM USER WHERE id = #{id}&lt;/select&gt;</code></pre><h5 id="4-2-1-3-输出多个POJO对象"><a href="#4-2-1-3-输出多个POJO对象" class="headerlink" title="4.2.1.3 输出多个POJO对象"></a>4.2.1.3 输出多个POJO对象</h5><ul><li>接口</li></ul><pre><code class="java">public List&lt;User&gt; findUserByUserQueryVo(UserQueryVO vo);</code></pre><ul><li>映射文件</li></ul><pre><code class="xml">&lt;select id="findUserByUserQueryVo" parameterType="userQueryVO" resultType="user"&gt;    select u.* from user u where u.id = #{user.id}&lt;/select&gt;</code></pre><h5 id="4-2-1-小结"><a href="#4-2-1-小结" class="headerlink" title="4.2.1 小结"></a>4.2.1 小结</h5><p>输出单个POJO对象和POJO列表时，mapper映射文件中的resultType的类型是一样的，mapper接口的方法返回值不同。</p><p>同样的mapper映射文件，返回单个对象和对象列表时，mapper接口在生成动态代理时，会根据返回值的类型，决定调用selectOne方法还是selectList方法。</p><blockquote><ul><li>POJO对象属性跟数据库列名一致，使用resultType。</li><li>不一致，使用resultMap定义映射关系。</li></ul></blockquote><h4 id="4-2-2-resultMap"><a href="#4-2-2-resultMap" class="headerlink" title="4.2.2 resultMap"></a>4.2.2 <code>resultMap</code></h4><p>如果查询出来的列名和属性名不一致，通过定义一个resultMap将<strong>列名</strong>和POJO<strong>属性名</strong>之间作一个<strong>映射关系</strong>。</p><ul><li>mapper接口</li></ul><pre><code class="java">public User findUserByIdResultMap(int id);</code></pre><ul><li>映射文件</li></ul><pre><code class="xml">&lt;!--设置返回类型为resultMap--&gt;&lt;resultMap id="userResultMap" type="user"&gt;    &lt;!--自定义resultMap列名与属性之间的映射关系--&gt;    &lt;id property="id" column="id_" /&gt;    &lt;result property="username" column="username_" /&gt;    &lt;result property="sex" column="sex_" /&gt;    &lt;result property="birthday" column="birthday_" /&gt;    &lt;result property="address" column="address_" /&gt;&lt;/resultMap&gt;&lt;select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap"&gt;    select id id_, username username_, sex sex_,birthday birthday_, address address_    from user where id=#{id};&lt;/select&gt;</code></pre><h2 id="5-动态SQL"><a href="#5-动态SQL" class="headerlink" title="5. 动态SQL"></a>5. 动态SQL</h2><h3 id="5-1-if和where"><a href="#5-1-if和where" class="headerlink" title="5.1 if和where"></a>5.1 if和where</h3><ul><li><p>if标签：作为判断入参来使用的，如果条件符合，则把if标签体内的SQL拼接上。</p></li><li><p>where标签：会去掉条件中的第一个and符号。</p></li><li><p>动态SQL示例：</p><ul><li>修改mapper接口</li></ul><pre><code class="java">public List&lt;User&gt; findUserList(UserQueryVO vo);</code></pre><ul><li>修改映射文件</li></ul><pre><code class="xml">&lt;!--    动态拼接SQL--&gt;&lt;select id="findUserList" parameterType="userQueryVO" resultType="user"&gt;    select * from user    -- 条件判断    &lt;where&gt;        &lt;if test="user != null"&gt;            &lt;if test="user.sex != null and user.sex != ''"&gt;                sex=#{user.sex}            &lt;/if&gt;            &lt;if test="user.username != null and user.username != ''"&gt;                and username like '%${user.username}%'            &lt;/if&gt;        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">// 动态拼接SQL@Testpublic void  test5(){    UserMapper mapper = session.getMapper(UserMapper.class);    UserQueryVO query = new UserQueryVO();    User user = new User();    user.setSex("1");    user.setUsername("张");    query.setUser(user);    List&lt;User&gt; list = mapper.findUserList(query);    System.out.println(list);}</code></pre></li></ul><h3 id="5-2-SQL片段"><a href="#5-2-SQL片段" class="headerlink" title="5.2 SQL片段"></a>5.2 SQL片段</h3><p>MyBatis提供了SQL片段功能，可提高SQL的可重用性</p><pre><code class="xml">&lt;!--声明一个SQL片段--&gt;&lt;sql id="select_user_where"&gt;    &lt;if test="user != null"&gt;        &lt;if test="user.sex != null and user.sex != ''"&gt;            sex=#{user.sex}        &lt;/if&gt;        &lt;if test="user.username != null and user.username != ''"&gt;            and username like '%${user.username}%'        &lt;/if&gt;        &lt;if test="user.address != null and user.address != ''"&gt;            and address like '%${user.address}%'        &lt;/if&gt;    &lt;/if&gt;&lt;/sql&gt;&lt;!--动态拼接SQL--&gt;&lt;select id="findUserList" parameterType="userQueryVO" resultType="user"&gt;    select * from user    -- 条件判断    &lt;where&gt;        -- 引用SQL片段        &lt;include refid="select_user_where"/&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><h3 id="5-3-forEach遍历"><a href="#5-3-forEach遍历" class="headerlink" title="5.3 forEach遍历"></a>5.3 forEach遍历</h3><ul><li>查询对象类中新增ids属性，存放id列表</li></ul><pre><code class="java">public class UserQueryVO {    private User user;    private List&lt;Integer&gt; ids;    public List&lt;Integer&gt; getIds() {        return ids;    }    public void setIds(List&lt;Integer&gt; ids) {        this.ids = ids;    }    public User getUser() {        return user;    }    public void setUser(User user) {        this.user = user;    }}</code></pre><ul><li>mapper接口</li></ul><pre><code class="java">/**     * 查询多个id的用户数据     */public List&lt;User&gt; findUserByIds(UserQueryVO vo);</code></pre><ul><li>映射文件</li></ul><pre><code class="xml">&lt;!--foreach示例--&gt;&lt;select id="findUserByIds" parameterType="userQueryVO" resultType="user"&gt;    select * from user    -- select * from user where id in (10,24,37);    &lt;where&gt;        &lt;if test="ids != null and ids.size &gt; 0"&gt;            &lt;!--                    foreach标签：表示一个foreach循环                    collection：集合参数的名称，如果是直接传入集合参数，则该处参数名称只能填写[list]                    item：每次遍历出来的对象                    open：开始遍历时拼接的串                    close：结束遍历时拼接的串                    separator：遍历出的每个对象之间需要拼接的字符                --&gt;            &lt;foreach collection="ids" item="id" open="id in(" close=")" separator=","&gt;                ${id}            &lt;/foreach&gt;        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void  test6() {    UserMapper mapper = session.getMapper(UserMapper.class);    UserQueryVO query = new UserQueryVO();    List&lt;Integer&gt; ids = new ArrayList&lt;&gt;();    //select * from user where id in (10,24,37);    ids.add(10);    ids.add(24);    ids.add(37);    query.setIds(ids);    List&lt;User&gt; users = mapper.findUserByIds(query);    System.out.println(users);}</code></pre><ul><li><p>关于参数直接传入id集合</p><ul><li>mapper接口</li></ul><pre><code class="java">public List&lt;User&gt; findUserByLists(List&lt;Integer&gt; list);</code></pre><ul><li>映射文件</li></ul><pre><code class="xml">&lt;!--如果参数是数组的话，parameterType可以写全限定名，也可以写别名--&gt;&lt;select id="findUserByLists" parameterType="java.util.List" resultType="user"&gt;    select * from user    &lt;where&gt;        &lt;if test="list != null and list.size &gt; 0"&gt;            -- 如果是直接传入集合参数，则该处参数名称只能填写[list]            &lt;foreach collection="list" item="id" open="id in(" close=")" separator=","&gt;                ${id}            &lt;/foreach&gt;        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><ul><li>测试同上，查询方法改一下即可。</li></ul></li></ul><h2 id="6-MyBatis与Hibernate的区别"><a href="#6-MyBatis与Hibernate的区别" class="headerlink" title="6. MyBatis与Hibernate的区别"></a>6. MyBatis与Hibernate的区别</h2><h3 id="6-1-MyBatis技术特点"><a href="#6-1-MyBatis技术特点" class="headerlink" title="6.1 MyBatis技术特点"></a>6.1 MyBatis技术特点</h3><ul><li>好处：<ul><li>通过直接编写SQL语句，可以直接对SQL进行性能优化</li><li>学习成本低，有SQL基础，就可以学习MyBatis，容易上手</li><li>由于直接编写SQL语句，所以灵活多变，代码维护性更好</li></ul></li><li>缺点<ul><li>不能支持数据库无关性，即数据库发生变更，要写多套代码进行支持，移植性不好。</li><li>需要编写结果映射。</li></ul></li></ul><h3 id="6-2-Hibernate技术特点"><a href="#6-2-Hibernate技术特点" class="headerlink" title="6.2 Hibernate技术特点"></a>6.2 Hibernate技术特点</h3><ul><li>好处<ul><li>标准的ORM框架，程序员无需编写SQL语句。</li><li>具有良好的数据库无关性，即数据库发生变化，代码无需再次编写。<ul><li>例：mysql数据迁移到oracle，只需更改方言配置即可</li></ul></li></ul></li><li>缺点<ul><li>学习门槛高，需要对数据关系模型有良好的基础，而且在设置OR映射时，需考虑好性能和对象模型的权衡</li><li>我们不能自主的去进行SQL性能优化。</li></ul></li></ul><h3 id="6-3-MyBatis应用场景"><a href="#6-3-MyBatis应用场景" class="headerlink" title="6.3 MyBatis应用场景"></a>6.3 MyBatis应用场景</h3><p>需求多变的互联网项目，例如电商项目</p><h3 id="6-4-Hibernate应用场景"><a href="#6-4-Hibernate应用场景" class="headerlink" title="6.4 Hibernate应用场景"></a>6.4 Hibernate应用场景</h3><p>需求明确，业务固定的项目，例如OA项目，ERP项目等。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的事务管理</title>
      <link href="/2019/08/18/framework/spring-shi-wu-guan-li/"/>
      <url>/2019/08/18/framework/spring-shi-wu-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Java事务导引"><a href="#1-Java事务导引" class="headerlink" title="1. Java事务导引"></a>1. Java事务导引</h2><h3 id="1-1-事务简介"><a href="#1-1-事务简介" class="headerlink" title="1.1 事务简介"></a>1.1 事务简介</h3><ul><li>什么是事务<ul><li>事务是<strong>正确执行</strong>一系列的操作(或动作)，使得数据库从一种状态转换成另一种状态，且保证操作<strong>全部成功</strong>，或者<strong>全部失败</strong>。</li></ul></li></ul><a id="more"></a><ul><li>事务原则是什么<ul><li>事务必须服从ISO/IEC所制定的ACID原则</li></ul></li><li>ACID原则具体内容如下：<ul><li>原子性（Atomicity）：即不可分割性，事务要么全部被执行，要么就全部不被执行。</li><li>一致性（Consistency）：事务的执行使得数据库从一种正确状态转换成另一种正确状态。</li><li>隔离性（Isolation）：在事务正确提交之前，它可能的结果不应显示给任何其他事务。</li><li>持久性（Durability）：事务正确提交后，其结果将永久保存在数据库中。</li></ul></li></ul><h3 id="1-2-Java事务"><a href="#1-2-Java事务" class="headerlink" title="1.2 Java事务"></a>1.2 Java事务</h3><ul><li>Java事务的产生<ul><li>程序操作数据库的需要。以Java编写的程序或系统，实现ACID的操作。</li></ul></li><li>Java事务实现<ul><li>通过JDBC相应方法间接来实现对数据库的增删改查，把事务转移到Java程序代码中进行控制。</li><li>确保事务要么全部执行成功，要么撤销不执行。</li></ul></li><li>总结：Java事务机制和原理就是操作确保数据库操作的ACID特性。</li></ul><h3 id="1-3-Java事务实现模式"><a href="#1-3-Java事务实现模式" class="headerlink" title="1.3 Java事务实现模式"></a>1.3 Java事务实现模式</h3><ul><li>Java事务的实现<ul><li>通过Java代码来实现对数据库的事务性操作</li></ul></li><li>Java事务类型<ul><li>JDBC事务：用Connection对象控制的手动模式和自动模式</li><li>JTA(Java Transaction API)事务：与实现无关的，与协议无关的API</li><li>容器事务：应用服务器提供的，且大多是基于JTA完成(通常基于JNDI的，相当复杂的API实现)</li></ul></li></ul><h3 id="1-4-三种事务的差异"><a href="#1-4-三种事务的差异" class="headerlink" title="1.4 三种事务的差异"></a>1.4 三种事务的差异</h3><ul><li>JDBC事务：控制的局限性在一个数据库连接内，但是其使用简单。</li><li>JTA事务：功能强大，可跨越多个数据库或多DAO，使用比较复杂。</li><li>容器事务：主要指的是J2EE应用服务器提供的事务管理，局限于EJB应用使用。</li></ul><h2 id="2-Spring事务核心接口"><a href="#2-Spring事务核心接口" class="headerlink" title="2. Spring事务核心接口"></a>2. Spring事务核心接口</h2><h3 id="2-1-事务接口架构"><a href="#2-1-事务接口架构" class="headerlink" title="2.1 事务接口架构"></a>2.1 事务接口架构</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/18/framework-1566143165106.jpg" alt="framework"></p><h3 id="2-2-Spring事务管理器"><a href="#2-2-Spring事务管理器" class="headerlink" title="2.2 Spring事务管理器"></a>2.2 Spring事务管理器</h3><ul><li>JDBC事务管理器(<code>DataSourceTransactionManager</code>)<ul><li>本事务管理器是通过调用<code>java.sql.Connection</code>来管理事务。</li><li>Spring配置示例</li></ul></li><li>Hibernate事务管理器(<code>HibernateTransactionManager</code>)<ul><li>本管理器将事务管理的职责委托给<code>org.hibernate.Transaction</code>对象来管理事务，而后者是从Hibernate Session中获取到的。</li></ul></li><li>JPA事务管理器(<code>JpaTransactionManager</code>)<ul><li>通过一个JPA实体管理工厂(<code>javax.persistence.EntityManagerFactory</code>接口的任意实现)将与由工厂所产生的JPA <code>EntityManager</code>合作来构建事务。</li></ul></li><li>JTA事务管理器(<code>JtaTransactionManager</code>)<ul><li>本管理器将事务管理的责任委托给<code>javax.transaction.UserTransaction</code>和<code>javax.transaction.TransactionManager</code>对象进行事务处理。</li></ul></li></ul><h3 id="2-3-Spring事务属性定义"><a href="#2-3-Spring事务属性定义" class="headerlink" title="2.3 Spring事务属性定义"></a>2.3 Spring事务属性定义</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/18/Transaction_attribute-1566143193689.jpg" alt="Transaction_attribute"></p><h3 id="2-4-事务隔离级别"><a href="#2-4-事务隔离级别" class="headerlink" title="2.4 事务隔离级别"></a>2.4 事务隔离级别</h3><h4 id="2-4-1-数据读取类型说明"><a href="#2-4-1-数据读取类型说明" class="headerlink" title="2.4.1 数据读取类型说明"></a>2.4.1 数据读取类型说明</h4><ul><li>脏读<ul><li>脏读发生在一个事务A读取了被另一个事务B修改，但是还未提交的数据。假如B回滚，则事务A读取的就是无效数据。跟不可重复读类似，但是第二个事务无需执行提交。</li></ul></li><li>不可重复读<ul><li>在基于锁的并行控制方法中，如果在执行select时不添加读锁，就会发生不可重复读问题，导致两次读取的数据不一致。</li></ul></li><li>幻读<ul><li>幻读发生在当两个完全相同的查询执行时，第二次查询所返回的结果集跟第一次查询的不相同。</li></ul></li></ul><p><a href="https://www.cnblogs.com/balfish/p/8298296.html" target="_blank" rel="noopener">参考文章</a></p><h4 id="2-4-2-事务隔离级别"><a href="#2-4-2-事务隔离级别" class="headerlink" title="2.4.2 事务隔离级别"></a>2.4.2 事务隔离级别</h4><ul><li>隔离级别定义了一个事务可能受其他并发事务影响的程度</li><li>隔离级别如下：</li></ul><table><thead><tr><th>隔离级别</th><th>含义</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>使用后端数据库默认的隔离级别</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>对同一字段的多次读取结果都是一致的，除非数据时被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>最高的隔离级别，完全服从ACID的隔离级别，确保阻止脏读、不可重复读和幻读。也是最慢的事务隔离级别，因为它通常是通过完全锁定事务相关的数据库表来实现的</td></tr></tbody></table><h3 id="2-5-事务传播行为"><a href="#2-5-事务传播行为" class="headerlink" title="2.5 事务传播行为"></a>2.5 事务传播行为</h3><ul><li>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。即两个业务之间如何共享事务</li><li>Spring的7种传播行为：</li></ul><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>表示当前方法无需事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>表示该方法必须在事务中运行，如果当前事务不存在，则会抛异常</td></tr><tr><td>PROPAGATION_REQUIRED_NEW</td><td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用<code>JTATransactionManager</code>的话，则需要访问<code>TransactionManager</code></td></tr><tr><td>PROPAGATION_NOT_SUPPORTED</td><td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用<code>JTATransactionManager</code>的话，则需要访问<code>TransactionManager</code></td></tr><tr><td>PROPAGATION_NEVER</td><td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>表示如果当前存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与<code>PROPAGATION_REQUIRED</code>一样。注意各厂商对这种传播行为的支持是有所差异的。参考资源管理器的文档来确认它们是否支持嵌套事务。</td></tr></tbody></table><h3 id="2-6-事务中注意的问题"><a href="#2-6-事务中注意的问题" class="headerlink" title="2.6 事务中注意的问题"></a>2.6 事务中注意的问题</h3><ul><li>事务是否只读<ul><li>利用数据库事务的“只读”属性，进行特点优化处理</li></ul></li><li>注意：<ul><li>事务的是否“只读”属性，不同的数据库厂商支持不同</li><li>通常而言：只读属性的应用要参考厂商的具体支持说明，比如：<ul><li>Oracle的“readOnly”不起作用，不影响其增删改查</li><li>MySQL的“readOnly”为true，只能查，增删改则出异常</li></ul></li></ul></li><li>事务超时<ul><li>事务超时就是事务的一个定时器，在特定时间内事务如果没有执行完毕，那么就会自动回滚，而不是一直等待其结束。</li></ul></li><li>设计事务时注意点<ul><li>为了使应用程序更好的运行，事务不能运行太长的时间。因为事务可能涉及对后端数据库的锁定，所以长时间的事务会不必要的占用数据库资源。</li></ul></li><li>事务回滚<ul><li>默认情况下，事务只有遇到运行期异常才会回滚，而在遇到检查型异常时不会回滚。</li></ul></li><li>自定义回滚策略<ul><li>声明事务在遇到特定的检查型异常时像遇到运行期异常那样回滚；</li><li>声明事务遇到特定的异常不回滚，即使这些异常时运行期异常。</li></ul></li></ul><h3 id="2-7-Spring事务状态"><a href="#2-7-Spring事务状态" class="headerlink" title="2.7 Spring事务状态"></a>2.7 Spring事务状态</h3><ul><li><p>事务接口</p><ul><li>通过事务管理器获取<code>TransactionStatus</code>实例；</li><li>控制事务在回滚或提交时需要应用对应的事务状态；</li><li>Spring事务接口：</li></ul><pre><code class="java">// Spring事务状态接口：// 通过调用PlatformTransactionManager的getTransaction()// 获取事务状态实例public interface TransactionStatus{    boolean isNewTransaction(); // 是否是新的事务    boolean hasSavepoint(); // 是否有恢复点    void setRollbackOnly(); // 设置为只回滚    boolean isRollBackOnly(); // 是否为只回滚    boolean isCompleted; // 是否已完成}</code></pre></li></ul><h3 id="2-8-转账案例"><a href="#2-8-转账案例" class="headerlink" title="2.8 转账案例"></a>2.8 转账案例</h3><p>通过代理工厂实现事务</p><h4 id="2-8-1-环境搭建"><a href="#2-8-1-环境搭建" class="headerlink" title="2.8.1 环境搭建"></a>2.8.1 环境搭建</h4><p>创建用户数据库表</p><pre><code class="sql">create table account(id int primary key auto_increment,username varchar(50),money int);insert into account(username,money) values('jack',10000);insert into account(username,money) values('rose',10000);</code></pre><h4 id="2-8-2-导入jar包"><a href="#2-8-2-导入jar包" class="headerlink" title="2.8.2 导入jar包"></a>2.8.2 导入jar包</h4><ul><li>spring核心：4+1(core+context+beans+expression)+logging</li><li>aop：4（aop联盟、spring aop、aspectj规范、spring aspect）</li><li>数据库：jdbc、tx</li><li>驱动：mysql</li><li>连接池：dbcp</li></ul><h4 id="2-8-3-创建Dao层"><a href="#2-8-3-创建Dao层" class="headerlink" title="2.8.3 创建Dao层"></a>2.8.3 创建Dao层</h4><pre><code class="java">public class AccountDaoImpl extends JdbcDaoSupport implements AccountDao {     // JdbcDaoSupport，在xml中配置数据源即可使用    // 转出    @Override    public void out(String outer, Integer money) {        String sql = "update account set money = money - ? where username = ?";        getJdbcTemplate().update(sql,money,outer);    }    // 进账    @Override    public void in(String inner, Integer money) {        String sql = "update account set money = money + ? where username = ?";        getJdbcTemplate().update(sql,money,inner);    }}</code></pre><h4 id="2-8-4-创建Service层"><a href="#2-8-4-创建Service层" class="headerlink" title="2.8.4 创建Service层"></a>2.8.4 创建Service层</h4><pre><code class="java">public class AccountServiceImpl implements AccountService {    private AccountDao accountDao;    // 提供set方法，让spring注入属性    public void setAccountDao(AccountDao accountDao) {        this.accountDao = accountDao;    }    @Override    public void transfer(String outer, String inner, Integer money) {        this.accountDao.out(outer,money);        int i = 1/0; // 手动制造异常，测试事务是否其效果        this.accountDao.in(inner,money);    }}</code></pre><h4 id="2-8-5-配置文件"><a href="#2-8-5-配置文件" class="headerlink" title="2.8.5 配置文件"></a>2.8.5 配置文件</h4><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsd    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;    &lt;!--配置DBCP数据源--&gt;    &lt;bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"&gt;        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;        &lt;property name="url" value="jdbc:mysql://localhost:3306/selection_course?useUnicode=true&amp;amp;characterEncoding=utf-8"/&gt;        &lt;property name="username" value="root"/&gt;        &lt;property name="password" value="123456"/&gt;    &lt;/bean&gt;    &lt;!--配置Template--&gt;    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置Dao--&gt;    &lt;bean id="accountDao" class="com.zero.transaction.dao.Impl.AccountDaoImpl"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置事务管理器--&gt;    &lt;bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置service--&gt;    &lt;bean id="accountService" class="com.zero.transaction.service.Impl.AccountServiceImpl"&gt;           &lt;!--添加属性accountDao--&gt;        &lt;property name="accountDao" ref="accountDao"/&gt;    &lt;/bean&gt;    &lt;!--配置代理工厂--&gt;    &lt;bean id="proxyService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"&gt;        &lt;!--接口，注意配置全类名--&gt;        &lt;property name="proxyInterfaces" value="com.zero.transaction.service.AccountService"/&gt;         &lt;!--目标对象--&gt;        &lt;property name="target" ref="accountService"/&gt;        &lt;!--切面对象，SPring做了，就不用写了--&gt;        &lt;!--事务管理器--&gt;        &lt;property name="transactionManager" ref="txManager"/&gt;        &lt;!--            事务属性/详情配置            prop.key ：确定哪些方法使用当前事务配置            prop.text:用于配置事务详情            格式：PROPAGATION,ISOLATION,readOnly,-Exception,+Exception            传播行为         隔离级别          是否只读    异常回滚          异常提交        --&gt;        &lt;property name="transactionAttributes"&gt;            &lt;props&gt;                &lt;!--可以配置隔离级别--&gt;                &lt;prop key="transfer"&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h4 id="2-8-6-测试"><a href="#2-8-6-测试" class="headerlink" title="2.8.6 测试"></a>2.8.6 测试</h4><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:transfer.xml")public class transferTest {//    @Autowired    @Resource(name = "proxyService")    private AccountService accountService;    // 转账测试    @Test    public void test1(){        // 获取service        accountService.transfer("jack","rose",100);    }}</code></pre><h2 id="3-编程式事务管理"><a href="#3-编程式事务管理" class="headerlink" title="3. 编程式事务管理"></a>3. 编程式事务管理</h2><h3 id="3-1-编程式事务实现方式"><a href="#3-1-编程式事务实现方式" class="headerlink" title="3.1 编程式事务实现方式"></a>3.1 编程式事务实现方式</h3><ul><li>模板事务(<code>TransactionTemplate</code>)的方式<ul><li>此为Spring官方团队推荐的编程式事务管理方式</li><li>主要工具为<code>JdbcTemplate</code>类。</li></ul></li><li>平台事务管理器(<code>PlatformTransactionManager</code>)方式<ul><li>类似应用<code>JTA UserTransaction API</code>方式，但异常处理更简洁；</li><li>辅助类为：<code>TransactionDefinition</code>和<code>TransactionStatus</code></li></ul></li></ul><h3 id="3-2-编程式事务实现案例"><a href="#3-2-编程式事务实现案例" class="headerlink" title="3.2 编程式事务实现案例"></a>3.2 编程式事务实现案例</h3><ul><li><p>模板事务(<code>TransactionTemplate</code>)案例</p><ul><li>步骤：获取模板对象；选择事务结果类型；业务数据操作处理。</li></ul></li><li><p>平台事务管理器(<code>PlatformTransactionManager</code>)案例</p><ul><li>步骤：获取事务管理器；获取事务属性对象；获取事务状态对象；创建JDBC模板对象；业务数据操作处理。</li></ul></li><li>数据库工具类DButil</li></ul><pre><code class="java">public class DBUtil {    static  final String dbDriver = "com.mysql.jdbc.Driver" ;    static final String dbUrl = "jdbc:mysql://localhost:3306/selection_course?useUnicode=true&amp;characterEncoding=utf-8" ;//    static final String userName = "root" ;    static final String password = "123456" ;    static {        try{//加载MySql的驱动类            Class.forName(dbDriver) ;        }catch(ClassNotFoundException e){            System.out.println("找不到驱动程序类 ，加载驱动失败！");            e.printStackTrace() ;        }    }    public static Connection getConnection(){        try {            return DriverManager.getConnection(dbUrl , userName , password ) ;        } catch (SQLException e) {            e.printStackTrace();        }        return null ;    }}</code></pre><ul><li>数据库工具类<code>TemplateUtils</code></li></ul><pre><code class="java">/** * Spring数据库操作工具类 */public class TemplateUtils {    private final static  String dbDriver = "com.mysql.jdbc.Driver" ;    private final static  String dbUrl = "jdbc:mysql://127.0.0.1:3306/selection_course?useUnicode=true&amp;characterEncoding=utf-8" ;//    private final static  String dbUser = "root";    private final static  String dbPwd = "123456";    private static BasicDataSource dataSource ;    //静态初识：创建连接数据源    static {    //创建DBCP简单数据源并初始化相关数据源属性    //private void createSimpleDataSource(){        dataSource = new   BasicDataSource() ;        dataSource.setDriverClassName(dbDriver);        dataSource.setUrl(dbUrl);        dataSource.setUsername(dbUser);        dataSource.setPassword(dbPwd);//        //指定数据库连接池初始连接数//        dataSource.setInitialSize(10);//        //设定同时向数据库申请的最大连接数//        dataSource.setMaxTotal(50);//        //设置连接池中保持的最少连接数量//        dataSource.setMinIdle(5);    //}    }    public static TransactionTemplate getTransactionTemplate() {          PlatformTransactionManager txManager = new DataSourceTransactionManager(                  dataSource);          return new TransactionTemplate(txManager);      }      public static JdbcTemplate getJdbcTemplate() {          return new JdbcTemplate(dataSource);      }      public static NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {          return new NamedParameterJdbcTemplate(dataSource);      }      public static SimpleJdbcInsert getSimpleJdbcTemplate() {          return new SimpleJdbcInsert(dataSource);      }      /**     * //获取事务管理器：TransactionManager     * 根据需要，可以是如JDBC、Hibernate,这里定义JDBC事务管理其     * @return DataSourceTransactionManager     */    public static DataSourceTransactionManager getDataSourceTransactionManager(){         DataSourceTransactionManager dataSourceTransactionManager = new DataSourceTransactionManager();         // 设置数据源:此事务数据源须和正式事务管理器的数据源一致         dataSourceTransactionManager.setDataSource(dataSource);         return dataSourceTransactionManager;    }}</code></pre><ul><li>事务管理器示例</li></ul><pre><code class="java">/** *  事务管理器方式案例 */public class ProTransExample {    // 事务模板：第二种事务编程模式    // private TransactionTemplate transactionTemplate ;    // 数据持久化操作    public void addBook(final Book book) {        // 获取事务模板对象        TransactionTemplate tt = TemplateUtils.getTransactionTemplate();        // 可设置事务属性，如隔离级别、超时时间等,如：        // tt.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);        // 内部类        tt.execute(new TransactionCallbackWithoutResult() {            protected void doInTransactionWithoutResult(TransactionStatus s) {                try {                    // 数据库操作1                    // JdbcTemplate jdbcTemplate                    // =TemplateUtils.getJdbcTemplate();                    // jdbcTemplate.execute(sql);                    // 简单模板化新增数据                    SimpleJdbcInsert simpleInsert = TemplateUtils.getSimpleJdbcTemplate();                    simpleInsert.withTableName("books").usingColumns("isbn", "name", "price", "pubdate");                    Map&lt;String, Object&gt; parameters = new HashMap&lt;String, Object&gt;();                    parameters.put("isbn", book.getIsbn());                    parameters.put("name", book.getName());                    parameters.put("price", book.getPrice());                    parameters.put("pubdate", book.getPubdate());                    simpleInsert.execute(parameters);                    System.out.println("新增数据成功！");                    // 或者DAO数据操作模式：                    // BookDAO.save(book);                } catch (Exception e) {                    s.setRollbackOnly();                    e.printStackTrace();                }            }        });    }    public Book findBookByIsbn(final String isbn) {        TransactionTemplate tt = TemplateUtils.getTransactionTemplate();        Book book = null;        @SuppressWarnings("unchecked")        List&lt;Map&lt;String, Object&gt;&gt; books = (List&lt;Map&lt;String, Object&gt;&gt;) tt.execute(new TransactionCallback&lt;Object&gt;() {            public Object doInTransaction(TransactionStatus arg0) {                JdbcTemplate jdbcTemplate = TemplateUtils.getJdbcTemplate();                return jdbcTemplate.queryForList("select isbn,name,price,pubdate from books where isbn ='" + isbn + "'");            }        });        if (books.size() != 0) {// 封装获取的数据            Map&lt;String, Object&gt; m = (Map) books.get(0);            book = new Book();            book.setIsbn(m.get("isbn").toString());            book.setName(m.get("name").toString());            book.setPrice((Float) m.get("price"));            book.setPubdate((Date) m.get("pubdate"));        }        return book;    }    // 1、编程式事务管理：事务管理器PlatformTransactionManager方式实现    public void updateBookByIsbn(Book book) {        //第一步：获取JDBC事务管理器        DataSourceTransactionManager dtm = TemplateUtils.getDataSourceTransactionManager();        // 第二步：创建事务管理器属性对象        DefaultTransactionDefinition transDef = new DefaultTransactionDefinition(); // 定义事务属性        // 根据需要，设置事务管理器的相关属性        // 设置传播行为属性        transDef.setPropagationBehavior(DefaultTransactionDefinition.PROPAGATION_REQUIRED);        // 第三步：获得事务状态对象        TransactionStatus ts = dtm.getTransaction(transDef);        // 第四步：基于当前事务管理器,获取数据源，创建操作数据库的JDBC模板对象        JdbcTemplate jt = new JdbcTemplate(dtm.getDataSource());        try {            //第五步：业务操作            jt.update("update books set price="+book.getPrice()+",name='"+book.getName()                    +"'  where isbn='"+book.getIsbn()+"' ");            // 其它数据操作如增删            //第六步：提交事务            dtm.commit(ts); // 如果不commit，则更新无效果            System.out.println("修改成功");        } catch (Exception e) {            // 报错直接回滚事务            dtm.rollback(ts);            e.printStackTrace();        }    }    public static void main(String[] args) {        ProTransExample pte = new ProTransExample();        Book book = pte.findBookByIsbn("128-166-890-China"); // 查询数据        if (book != null){ // 如果查询到就更新数据            book.setName("华夏龙图腾");            book.setPrice(125.5f);            pte.updateBookByIsbn(book);        }else {            // 如果没有则添加数据            Book addbook = new Book();            addbook.setIsbn("128-166-890-China");            addbook.setName("华夏龙图腾");            addbook.setPrice(128.5f);            pte.addBook(addbook);        }        /*         *1-新增书籍         * Date pd = new Date(System.currentTimeMillis()); Book book = new         * Book(); book.setIsbn("120-166-990-China"); book.setName("人性的弱点");         * book.setPrice(65.6f); book.setPubdate(pd);         */        // pte.addBook(book);        //2-查找书籍        /*Book bk = pte.findBookByIsbn("120-166-890-China");        System.out.println("书籍名称：" + bk.getName());*/        //3-更新书籍名称和价格    }}</code></pre><h3 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结"></a>3.3 小结</h3><ul><li>需要有效的数据源，具体数据源根据实际情况创建</li><li>创建编程事务管理对象<ul><li>事务模板(<code>TransactionTemplate</code>)</li><li>事务管理器(<code>PlateformTransactionManager</code>)</li></ul></li><li>业务逻辑处理<ul><li>基于<code>JdbcTemplate</code>完成业务处理。</li></ul></li></ul><h2 id="4-声明式事务管理-掌握"><a href="#4-声明式事务管理-掌握" class="headerlink" title="4. 声明式事务管理(掌握)"></a>4. 声明式事务管理(掌握)</h2><h3 id="4-1-声明式事务实现方式"><a href="#4-1-声明式事务实现方式" class="headerlink" title="4.1 声明式事务实现方式"></a>4.1 声明式事务实现方式</h3><ul><li><p>声明式事务管理的配置类型</p><ul><li>5种类型：独立代理；共享代理；拦截器；tx拦截器；全注释。</li></ul></li><li><p>声明式事务管理配置实现方式：</p><ul><li>5种类型的配置实现参考</li></ul></li><li><p>转账案例<strong>基于AOP的事务配置</strong>：</p><ul><li>基本代码不变，修改xml配置文件如下</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsd    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;    &lt;!--开启自动扫描--&gt;    &lt;context:component-scan base-package="com.zero.jdbc_Template"/&gt;    &lt;!--配置DBCP数据源--&gt;    &lt;bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"&gt;        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;        &lt;property name="url" value="jdbc:mysql://localhost:3306/selection_course?useUnicode=true&amp;amp;characterEncoding=utf-8"/&gt;        &lt;property name="username" value="root"/&gt;        &lt;property name="password" value="123456"/&gt;    &lt;/bean&gt;    &lt;!--配置Template--&gt;    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置Dao--&gt;    &lt;bean id="accountDao" class="com.zero.transaction.dao.Impl.AccountDaoImpl"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置事务管理器--&gt;    &lt;bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置service--&gt;    &lt;bean id="accountService" class="com.zero.transaction.service.Impl.AccountServiceImpl"&gt;        &lt;property name="accountDao" ref="accountDao"/&gt;    &lt;/bean&gt;    &lt;!--使用spring的aop来配置事务--&gt;    &lt;!--1. 配置通知事务管理器--&gt;    &lt;tx:advice id="txAdvice" transaction-manager="txManager"&gt;        &lt;!--事务详情：传播行为，隔离级别--&gt;        &lt;tx:attributes&gt;            &lt;tx:method name="transfer" propagation="REQUIRED" isolation="DEFAULT"/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;    &lt;!--2. 事务通知与切入点关联--&gt;    &lt;aop:config&gt;&lt;!--        &lt;aop:pointcut id="myPoinycut" expression="execution(* com.zero.transaction.service..*.*(..))"/&gt;--&gt;&lt;!--        &lt;aop:advisor advice-ref="" pointcut-ref="myPoinycut"/&gt;--&gt;        &lt;!--事务与连接点关联--&gt;        &lt;aop:advisor advice-ref="txAdvice" pointcut="execution(* com.zero.transaction.service..*.*(..))"/&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:transfer_aop.xml")public class transferTest {    @Autowired // 使用自动注入//    @Resource(name = "proxyService")    private AccountService accountService;    // 转账测试    @Test    public void test1(){        // 获取service        accountService.transfer("jack","rose",100);    }    // 使用aop配置事务    @Test    public void test2(){        accountService.transfer("jack","rose",100);    }}</code></pre></li></ul><ul><li><p>使用注解来实现事务</p><ul><li>基本代码不变，修改xml如下</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsd    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;    &lt;!--开启自动扫描--&gt;    &lt;context:component-scan base-package="com.zero.jdbc_Template"/&gt;    &lt;!--配置DBCP数据源--&gt;    &lt;bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"&gt;        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;        &lt;property name="url" value="jdbc:mysql://localhost:3306/selection_course?useUnicode=true&amp;amp;characterEncoding=utf-8"/&gt;        &lt;property name="username" value="root"/&gt;        &lt;property name="password" value="123456"/&gt;    &lt;/bean&gt;    &lt;!--配置Template--&gt;    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置Dao--&gt;    &lt;bean id="accountDao" class="com.zero.transaction.dao.Impl.AccountDaoImpl"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--配置service--&gt;    &lt;bean id="accountService" class="com.zero.transaction.service.Impl.AccountServiceImpl"&gt;        &lt;property name="accountDao" ref="accountDao"/&gt;    &lt;/bean&gt;    &lt;!--使用spring的注解来实现事务--&gt;    &lt;!--1. 配置事务管理器--&gt;    &lt;bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;    &lt;!--2. 开启事务注解驱动--&gt;    &lt;tx:annotation-driven transaction-manager="txManager"/&gt;&lt;/beans&gt;</code></pre><ul><li>在需要开启事务的实现类上添加注解信息</li></ul><pre><code class="java">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT)public class AccountServiceImpl implements AccountService {    private AccountDao accountDao;    // 提供set方法，让spring注入属性    public void setAccountDao(AccountDao accountDao) {        this.accountDao = accountDao;    }    @Override    public void transfer(String outer, String inner, Integer money) {        this.accountDao.out(outer,money);//        int i = 1/0;        this.accountDao.in(inner,money);    }}</code></pre><ul><li>测试</li></ul><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:transfer_anno.xml") // 修改为注解配置的xml即可public class transferTest {    @Autowired//    @Resource(name = "proxyService")    private AccountService accountService;    // 使用aop配置事务    @Test    public void test2(){        accountService.transfer("jack","rose",100);    }}</code></pre></li></ul><h2 id="5-事务管理最佳实践"><a href="#5-事务管理最佳实践" class="headerlink" title="5. 事务管理最佳实践"></a>5. 事务管理最佳实践</h2><h3 id="5-1-编程事务管理和声明事务管理的区别"><a href="#5-1-编程事务管理和声明事务管理的区别" class="headerlink" title="5.1 编程事务管理和声明事务管理的区别"></a>5.1 编程事务管理和声明事务管理的区别</h3><ul><li>编程式事务允许用户在代码中精确定义事务的边界；</li><li>声明式事务有助于用户将操作与事务规则进行解耦<ul><li>基于AOP交由Spring容器实现</li><li>实现关注点聚焦在业务逻辑上</li></ul></li><li>简言<ul><li>编程式事务侵入到了业务代码里面，但是提供了更加详细的事务管理；而声明式事务由于基于AOP，所以即能起到事务管理的作用，又不影响业务代码的具体实现。</li></ul></li></ul><h3 id="5-2-两种事务的选择"><a href="#5-2-两种事务的选择" class="headerlink" title="5.2 两种事务的选择"></a>5.2 两种事务的选择</h3><ul><li>小型应用、事务操作少<ul><li>建议编程式事务管理实现：<code>TransactionTemplate</code></li><li>简单、显式操作、直观明显、可以设置事务名称</li></ul></li><li>大型应用，事务操作量多<ul><li>业务复杂度高、关联性紧密，建议声明式事务管理实现</li><li>关注点聚焦到业务层面，实现业务和事务的解耦。</li></ul></li></ul><h2 id="6-Spring事务管理总结"><a href="#6-Spring事务管理总结" class="headerlink" title="6. Spring事务管理总结"></a>6. Spring事务管理总结</h2><ul><li>事务与Spring事务管理</li><li>Spring事务核心接口类</li><li>编程式事务实现</li><li>声明式事务实现</li><li>事务的综合案例</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC_Template</title>
      <link href="/2019/08/11/framework/jdbctemplate/"/>
      <url>/2019/08/11/framework/jdbctemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JDBC-Template"><a href="#1-JDBC-Template" class="headerlink" title="1. JDBC Template"></a>1. JDBC Template</h2><p>Spring对数据库的操作在jdbc上面做了深层次的封装，简化了持久层操作。使用spring的注入功能，可以把DataSource注册到JdbcTemplate中。</p><a id="more"></a><ul><li>为了简化持久化操作，Spring在JDBC API之上提供了JDBC Template组件</li></ul><h3 id="1-1-准备阶段"><a href="#1-1-准备阶段" class="headerlink" title="1.1 准备阶段"></a>1.1 准备阶段</h3><ul><li>先创建数据库</li></ul><pre><code class="sql">drop database if exists selection_course;create database selection_course;use selection_course;create table course(   id                   int not null auto_increment,   name                 char(20),   score                int,   primary key (id));create table selection(   student              int not null,   course               int not null,   selection_time       datetime,   score                int,   primary key (student, course));create table student(   id                   int not null auto_increment,   name                 varchar(20),   sex                  char(2),   born                 date,   primary key (id));alter table selection add constraint FK_Reference_1 foreign key (course)      references course (id) on delete restrict on update restrict;alter table selection add constraint FK_Reference_2 foreign key (student)      references student (id) on delete restrict on update restrict;-- 修改表字符集alter table course default character set utf8 collate utf8_general_ci;insert into course(id,name,score) values(1001,'英语',5);insert into course(id,name,score) values(1002,'操作系统',5);insert into course(id,name,score) values(1003,'数据结构',3);commit;</code></pre><blockquote><p>如果出现1366问题，是表字符集编码问题，需修改表默认字符集为utf8。</p></blockquote><ul><li>创建Maven项目，导入相关jar包<ul><li>MySQL驱动</li><li>Spring组件（core、beans、context、aop）</li><li>JDBC Template（jdbc、tx）</li></ul></li></ul><pre><code class="xml">&lt;!--导入数据库驱动包--&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.32&lt;/version&gt;&lt;/dependency&gt;&lt;!--导入Template相关包--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;    &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;    &lt;version&gt;${spring.version}&lt;/version&gt;&lt;/dependency&gt;</code></pre><ul><li><p>创建<code>spring.xml</code>文件，配置如下内容</p><ul><li>数据源</li><li>JDBC Template</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context.xsd    http://www.springframework.org/schema/aop    http://www.springframework.org/schema/aop/spring-aop.xsd    http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;    &lt;!--配置数据源--&gt;    &lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;        &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;        &lt;property name="url" value="jdbc:mysql://localhost:3306/selection_cource?useUnicode=true&amp;amp;characterEncoding=utf-8"/&gt;        &lt;property name="username" value="root"/&gt;        &lt;property name="password" value="123456"/&gt;    &lt;/bean&gt;    &lt;!--配置Template--&gt;    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;        &lt;property name="dataSource" ref="dataSource"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre></li></ul><h3 id="1-2-JDBC-Template基本使用"><a href="#1-2-JDBC-Template基本使用" class="headerlink" title="1.2 JDBC Template基本使用"></a>1.2 JDBC Template基本使用</h3><h4 id="1-2-1-execute方法"><a href="#1-2-1-execute方法" class="headerlink" title="1.2.1 execute方法"></a>1.2.1 execute方法</h4><pre><code class="java">public void testExecute(){    jdbcTemplate.execute("create table user1(id int,name varchar(20))");}</code></pre><h4 id="1-2-2-update与batchUpdate方法"><a href="#1-2-2-update与batchUpdate方法" class="headerlink" title="1.2.2 update与batchUpdate方法"></a>1.2.2 update与batchUpdate方法</h4><ul><li>update方法：对数据进行增删改操作</li></ul><pre><code class="java">int update(String sql, Object[] agrs)int update(String slq, Object... args)// 方法示例// int update(String sql, Object[] agrs)@Testpublic void testUpdate(){    String sql = "insert into student(name,sex) values(?,?)";    jdbcTemplate.update(sql,new Object[]{"小明","男"});}// int update(String slq, Object... args)@Testpublic void testUpdate2(){    String sql = "update student set sex=? where name=?";    jdbcTemplate.update(sql,"女","小明");}</code></pre><ul><li>batchUpdate方法：批量增删改操作</li></ul><pre><code class="java">int[] batchUpdate(String[] sql)int[] barchUpdate(String sql, List&lt;Object[]&gt; args)// 方法示例// int[] batchUpdate(String[] sql)@Testpublic void testBatchUpdate(){    String[] sqls = {        "insert into student(name,sex) values('小李','女')",        "insert into student(name,sex) values('小花','女')",        "update student set sex='男' where name = '小李'"    };    jdbcTemplate.batchUpdate(sqls);}// int[] barchUpdate(String sql, List&lt;Object[]&gt; args),适用于同步sql语句执行,使用率较高。@Testpublic void testBatchUpdate2(){    String sql = "insert into selection(student,course) values(?,?)";    List&lt;Object[]&gt; list = new ArrayList&lt;Object[]&gt;();    list.add(new Object[]{2,1002});    list.add(new Object[]{2,1003});    jdbcTemplate.batchUpdate(sql,list);}</code></pre><h4 id="1-2-3-query与queryXXX方法"><a href="#1-2-3-query与queryXXX方法" class="headerlink" title="1.2.3 query与queryXXX方法"></a>1.2.3 query与queryXXX方法</h4><ul><li><p>查询简单数据项</p><ul><li>获取一个</li></ul><pre><code class="java">T queryForObject(String sql, Class&lt;T&gt; type)T queryForObject(String sql, Object[] args, Class&lt;T&gt; type)T queryForObject(String sql, Class&lt;T&gt; type,Object... arg)// 方法示例// T queryForObject(String sql, Class&lt;T&gt; type)@Testpublic void testQueryForObject(){    String sql = "select count(*) from student";    int count = jdbcTemplate.queryForObject(sql, Integer.class); // 第一个参数sql语句，第二个参数返回值类型    System.out.println(count);}</code></pre><ul><li>获取多个</li></ul><pre><code class="java">T queryForList(String sql, Class&lt;T&gt; type)T queryForList(String sql, Object[] args, Class&lt;T&gt; type)T queryForList(String sql, Class&lt;T&gt; type,Object... arg)// 方法示例// T queryForList(String sql, Class&lt;T&gt; type)@Testpublic void testQueryForList(){    String sql = "select name from student where sex=?";    List&lt;String&gt; names = jdbcTemplate.queryForList(sql, String.class, "女");    System.out.println(names);}</code></pre></li><li><p>查询复杂对象（封装为Map）</p><ul><li>获取一个</li></ul><pre><code class="java">Map queryForMap(String sql)Map queryForMap(String sql,Object[] args)Map queryForMap(String sql,Object... arg)// 方法示例// Map queryForMap(String sql)@Testpublic void testQueryForMap(){    String sql = "select * from student where id = ?";    Map&lt;String, Object&gt; map = jdbcTemplate.queryForMap(sql, 1);    System.out.println(map); // {id=1, name=小明, sex=女, born=null}}</code></pre><ul><li>获取多个</li></ul><pre><code class="java">List&lt;Map&lt;String,Object&gt;&gt; queryForList(String sql)List&lt;Map&lt;String,Object&gt;&gt; queryForList(String sql,Object[] args)List&lt;Map&lt;String,Object&gt;&gt; queryForList(String sql,Object... arg)// 方法示例// List&lt;Map&lt;String,Object&gt;&gt; queryForList(String sql)@Testpublic void testQueryList(){    String sql = "select * from student";    List&lt;Map&lt;String, Object&gt;&gt; stus = jdbcTemplate.queryForList(sql);    System.out.println(stus); // [{id=1, name=小明, sex=女, born=null}, {id=2, name=小李, sex=男, born=null}, {id=3, name=小花, sex=女, born=null}]}</code></pre></li><li><p>查询复杂对象（封装为实体对象）</p><ul><li><p>RowMapper接口</p></li><li><p>获取一个</p></li></ul><pre><code class="java">T queryForObject(String sql,RowMapper&lt;T&gt; mapper)T queryForObject(String sql,Object[] args,RowMapper&lt;T&gt; mapper)T queryForObject(String sql,RowMapper&lt;T&gt; mapper,Object... arg)// 方法示例@Testpublic void testQueryEntity1(){    String sql = "select * from student where id = ?";    Student student = jdbcTemplate.queryForObject(sql, new RowMapper&lt;Student&gt;() {        // 设置映射关系        public Student mapRow(ResultSet rs, int rowNum) throws SQLException {            Student student = new Student();            student.setId(rs.getInt("id"));            student.setName(rs.getString("name"));            student.setSex(rs.getString("sex"));            student.setBorn(rs.getDate("born"));            return student;        }    },1);    System.out.println(student); // Student{id=1, name='小明', sex='女', born=null}    //        Student student = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;Student&gt;(Student.class), 1);    //        System.out.println(student);}</code></pre><ul><li>获取多个</li></ul><pre><code class="java">List&lt;T&gt; query(String sql,RowMapper&lt;T&gt; mapper)List&lt;T&gt; query(String sql,Object[] args,RowMapper&lt;T&gt; mapper)List&lt;T&gt; query(String sql,RowMapper&lt;T&gt; mapper,Object... arg)// 方法示例// List&lt;T&gt; query(String sql,RowMapper&lt;T&gt; mapper) 获取多条记录，封装成实体类@Testpublic void testQueryEntity2(){    String sql = "select * from student";    List&lt;Student&gt; stus = jdbcTemplate.query(sql, new RowMapper&lt;Student&gt;() {        // 设置映射关系        public Student mapRow(ResultSet rs, int rowNum) throws SQLException {            Student student = new Student();            student.setId(rs.getInt("id"));            student.setName(rs.getString("name"));            student.setSex(rs.getString("sex"));            student.setBorn(rs.getDate("born"));            return student;        }    });    System.out.println(stus);}</code></pre></li></ul><h3 id="1-3-优缺点分析"><a href="#1-3-优缺点分析" class="headerlink" title="1.3 优缺点分析"></a>1.3 优缺点分析</h3><ul><li>优点：简单灵活</li><li>缺点：<ul><li>SQL与Java代码掺杂</li><li>功能不丰富</li></ul></li></ul><h2 id="2-连接池技术"><a href="#2-连接池技术" class="headerlink" title="2. 连接池技术"></a>2. 连接池技术</h2><ul><li>JDBC(Java DataBase Connecttivity)，java数据库连接。是一种用于执行SQL语句的Java API</li><li>ODBC(Open DataBase Connectivity)，开发数据库连接。是微软公司提供的一组对数据库访问的标准API(应用程序编程接口)</li><li>DBCP(DataBase Connection Pool)数据库连接池，是Java数据库连接池的一种，由Apache开发。</li><li>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。目前使用它的开源项目有Hibernate、Spring等。</li><li>提问：c3p0和dbcp的区别？<ul><li>dbcp没有自动回收空闲连接的功能；c3p0有自动回收空闲连接的功能。</li><li>对数据连接的处理方式不同：C3P0提供最大空闲时间，DBCP提供最大连接数。C3P0当连接超过最大空闲连接时间时，当前连接就会被断掉。DBCP当前连接超过最大连接数时，所有连接都会被断开。</li></ul></li></ul><h3 id="2-1-配置DBCP"><a href="#2-1-配置DBCP" class="headerlink" title="2.1 配置DBCP"></a>2.1 配置DBCP</h3><p>导入<code>commons-dbcp2.jar</code>、<code>commons-pool.jar</code>到工程。在spring配置文件中配置如下。</p><pre><code class="xml">&lt;!--配置DBCP数据源--&gt;&lt;bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"&gt;    &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"/&gt;    &lt;property name="url" value="jdbc:mysql://localhost:3306/selection_course?useUnicode=true&amp;amp;characterEncoding=utf-8"/&gt;    &lt;property name="username" value="root"/&gt;    &lt;property name="password" value="123456"/&gt;&lt;/bean&gt;&lt;!--配置Template--&gt;&lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;    &lt;property name="dataSource" ref="dataSource"/&gt;&lt;/bean&gt;&lt;!--依赖注入，注意一定要提供set方法--&gt;&lt;bean id="studentDao" class="com.zero.jdbc_Template.dao.Impl.StudentDaoImpl"&gt;    &lt;property name="jdbcTemplate" ref="jdbcTemplate"/&gt;&lt;/bean&gt;</code></pre><h3 id="2-2-配置C3P0"><a href="#2-2-配置C3P0" class="headerlink" title="2.2 配置C3P0"></a>2.2 配置C3P0</h3><p>导入<code>c3p0-0.9.2.1.jar</code>到工程。在spring配置文件中配置如下。</p><pre><code class="xml">&lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt;    &lt;property name="driverClass" value="com.mysql.jdbc.Driver"/&gt;    &lt;property name="jdbcUrl" value="jdbc:mysql://localhost:3306/selection_course?useUnicode=true&amp;amp;characterEncoding=utf-8"/&gt;    &lt;property name="user" value="root"/&gt;    &lt;property name="password" value="123456"/&gt;&lt;/bean&gt;</code></pre><h3 id="2-3-关于JdbcDaoSupport"><a href="#2-3-关于JdbcDaoSupport" class="headerlink" title="2.3 关于JdbcDaoSupport"></a>2.3 关于<code>JdbcDaoSupport</code></h3><p>JdbcDaoSupport是spring框架为我们提供的一个类，该类中定义了一个JdbcTemplate对象，我们可以直接获取使用，但是要想创建该对象，需要为其提供一个数据源。</p><p><a href="https://blog.csdn.net/weixin_42112635/article/details/88020509" target="_blank" rel="noopener">参考文章</a></p><h3 id="2-4-关于引用外部属性文件"><a href="#2-4-关于引用外部属性文件" class="headerlink" title="2.4 关于引用外部属性文件"></a>2.4 关于引用外部属性文件</h3><ul><li>将数据库连接的信息配置到属性文件中：</li></ul><pre><code class="properties">username=rootpassword=123456driver=com.mysql.jdbc.Driverurl=jdbc:mysql://127.0.0.1:3306/selection_course?useUnicode=true&amp;amp;characterEncoding=utf-8</code></pre><ul><li>在spring配置文件中引入外部的属性文件</li></ul><pre><code class="xml">&lt;!-- 引入外部属性文件： --&gt;&lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;    &lt;property name="location" value="classpath:jdbc.properties"/&gt;&lt;/bean&gt;&lt;!--方法2--&gt;&lt;context:property-placeholder location="classpath:jdbc.properties"/&gt;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>持久化操作特点</li><li>ORM：对象关系映射</li><li>JDBC Template是Spring框架对JDBC操作的封装，简单、灵活但不够强大</li><li>实际应用中还需和其他ORM框架混合使用。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AspectJ的AOP开发</title>
      <link href="/2019/08/10/framework/aspectj-de-aop-kai-fa/"/>
      <url>/2019/08/10/framework/aspectj-de-aop-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-AspectJ-简介"><a href="#1-AspectJ-简介" class="headerlink" title="1. AspectJ 简介"></a>1. AspectJ 简介</h2><p>AspectJ是一个面向切面的框架，它扩展了Java语言。AspectJ定义了AOP语法，它有一个专门的编译器用来生成遵守Java字节编码规范的Class文件。</p><a id="more"></a><ul><li>AspectJ是一个基于Java语言的AOP框架</li><li>Spring2.0以后新增了对AspectJ切点表达式的支持</li><li>@AspectJ是AspectJ1.5新增功能，通过JDK5注解技术，允许直接在Bean类中定义切面</li><li>新版本Spring框架，建议使用AspectJ方式来开发AOP</li><li>使用AspectJ需要导入Spring AOP和AspectJ相关jar包<ul><li>spring-aop-4.2.4.RELEASE.jar</li><li>com.springsource.org.aopalliance-1.0.0.jar</li><li>spring.aspects-4.2.4.RELEASE.jar</li><li>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</li></ul></li></ul><h2 id="2-注解方式实现AOP"><a href="#2-注解方式实现AOP" class="headerlink" title="2. 注解方式实现AOP"></a>2. 注解方式实现AOP</h2><h3 id="2-1-注解开发：环境准备"><a href="#2-1-注解开发：环境准备" class="headerlink" title="2.1 注解开发：环境准备"></a>2.1 注解开发：环境准备</h3><p>xml配置如下：</p><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"&gt;    &lt;!--开启AspectJ自动代理--&gt;    &lt;aop:aspectj-autoproxy/&gt;&lt;/beans&gt;</code></pre><h3 id="2-2-AspectJ提供不同的通知类型"><a href="#2-2-AspectJ提供不同的通知类型" class="headerlink" title="2.2 @AspectJ提供不同的通知类型"></a>2.2 <code>@AspectJ</code>提供不同的通知类型</h3><ul><li><code>@Before</code>：前置通知，相当于<code>BeforeAdvice</code></li><li><code>@AfterReturning</code>：后置通知，相当于<code>AfterReturningAdvice</code></li><li><code>@Around</code>：环绕通知，相当于<code>MethodInterceptor</code></li><li><code>@AfterThrowing</code>：异常抛出通知，相当于<code>ThrowAdvice</code></li><li><code>@After</code>：最终final通知，不管是否异常，该通知都会执行</li><li><code>@DeclareParents</code>：引介通知，相当于<code>IntroductionInterceptor</code>（了解即可）</li></ul><h3 id="2-3-在通知中通过value属性定义切点"><a href="#2-3-在通知中通过value属性定义切点" class="headerlink" title="2.3 在通知中通过value属性定义切点"></a>2.3 在通知中通过value属性定义切点</h3><ul><li>通过<code>execution</code>函数，可以定义切点的方法切入</li><li>语法：<code>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)</code></li><li>示例：<ul><li>匹配所有类public方法：<code>execution(public * *(..))</code></li><li>匹配指定包下所有类方法：<code>execution(* com.zero.dao.*(..))</code>，不包含子包</li><li><code>execution(* com.zero.dao..*(..))</code>：<code>..*</code>表示包含子包</li><li>匹配指定类所有方法：<code>execution(* com.zero.service.UserService.*(..))</code></li><li>匹配实现特定接口所有类方法：<code>execution(* com.zero.dao.GenericDao+.*(..))</code></li><li>匹配所有save开头的方法：<code>execution(* save*(..))</code></li></ul></li></ul><h3 id="2-4-为目标类、定义切面类，实现AOP"><a href="#2-4-为目标类、定义切面类，实现AOP" class="headerlink" title="2.4 为目标类、定义切面类，实现AOP"></a>2.4 为目标类、定义切面类，实现AOP</h3><h4 id="2-4-1-使用前置通知-Before"><a href="#2-4-1-使用前置通知-Before" class="headerlink" title="2.4.1 使用前置通知@Before"></a>2.4.1 使用前置通知<code>@Before</code></h4><ul><li>首先定义目标类<code>ProductDao</code></li></ul><pre><code class="java">public class ProductDao {    public void save(){ System.out.println("保存商品。。。"); }    public void delete(){        System.out.println("删除商品。。。");    }    public void update(){        System.out.println("更新商品。。。");    }    public void findOne(){        System.out.println("查询一个商品。。。");    }    public void findAll(){        System.out.println("查询所有商品。。。");    }}</code></pre><ul><li>定义切面类</li></ul><pre><code class="java">/** * 切面类，注解方式 */@Aspectpublic class MyAspectAnno {    @Before(value = "execution( * com.zero.aspectj.demo1.ProductDao.*(..))")  // 匹配任意返回值类型的，具体目标类(com.zero.aspectj.demo1.ProductDao)下的所有任意参数的方法    public void before(JoinPoint joinPoint){        System.out.println("前置通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+joinPoint); // 可以在方法中传入JoinPoint对象，用来获得切点信息，格式为：前置通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;execution(void com.zero.aspectj.demo1.ProductDao.save())    }}</code></pre><ul><li>配置xml文件</li></ul><pre><code class="xml">&lt;!--开启AspectJ自动代理--&gt;&lt;aop:aspectj-autoproxy/&gt;&lt;!--目标类--&gt;&lt;bean id="productDao" class="com.zero.aspectj.demo1.ProductDao"/&gt;&lt;!--切面类--&gt;&lt;bean class="com.zero.aspectj.demo1.MyAspectAnno"/&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:applicationContext.xml")public class Demo1Test {    @Resource(name = "productDao") // 注入目标类    private ProductDao productDao;    @Test    public void test1(){        productDao.save();        productDao.delete();        productDao.update();        productDao.findAll();        productDao.findOne();    }}</code></pre><blockquote><p>目标类定义方法时，注意要写上访问权限修饰符<code>public</code>，不然定义<code>execution( * com.zero.aspectj.demo1.ProductDao.*(..))</code>时会匹配不到方法</p></blockquote><h4 id="2-4-2-使用后置通知-AfterReturning"><a href="#2-4-2-使用后置通知-AfterReturning" class="headerlink" title="2.4.2 使用后置通知@AfterReturning"></a>2.4.2 使用后置通知<code>@AfterReturning</code></h4><ul><li>只需要在切面类中定义后置通知方法即可，如果目标方法有返回值，可以通过设置<code>returning</code>属性，来获取返回值。</li></ul><pre><code class="java">// 示例update有返回值，返回更新商品人员public String update(){    System.out.println("更新商品。。。");    return "某某某更新了商品";}// 使用后置通知，定义增强方法@AfterReturning(value = "execution(* com.zero.aspectj.demo1.ProductDao.update(..))",returning = "result")public void afterReturning(Object result){ // 通过returning属性，可以定义方法返回值，作为参数    System.out.println("后置通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+result);}</code></pre><h4 id="2-4-3-使用环绕通知-Around"><a href="#2-4-3-使用环绕通知-Around" class="headerlink" title="2.4.3 使用环绕通知@Around"></a>2.4.3 使用环绕通知<code>@Around</code></h4><ul><li><code>Around</code>方法的返回值就是目标代理方法执行的返回值</li><li><p>通过参数<code>ProceedingJoinPoing</code>，可以拦截目标方法执行</p></li><li><p>示例定义环绕通知方法</p></li></ul><pre><code class="java">// 环绕通知@Around(value = "execution(* com.zero.aspectj.demo1.ProductDao.delete(..))")public Object around(ProceedingJoinPoint joinPoint) throws Throwable {    System.out.println("环绕前通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"); // 环绕前代码区    Object obj = joinPoint.proceed(); // 执行目标方法    System.out.println("环绕后通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");// 环绕后代码区    return obj;}</code></pre><blockquote><p>如果不调用<code>ProceedingJoinPoing</code>的<code>proceed</code>方法，那么目标方法就不会被执行，即被拦截了。</p></blockquote><h4 id="2-4-4-异常抛出通知-AfterThrowing"><a href="#2-4-4-异常抛出通知-AfterThrowing" class="headerlink" title="2.4.4 异常抛出通知@AfterThrowing"></a>2.4.4 异常抛出通知<code>@AfterThrowing</code></h4><ul><li>通过设置<code>throwing</code>属性，可以设置发生异常时的处理</li></ul><pre><code class="java">// 目标类public void findOne(){    System.out.println("查询一个商品。。。");    int i = 1/0; // 手动制造一个异常，测试异常通知}// 切面类中定义异常通知操作// 异常通知@AfterThrowing(value = "execution(* com.zero.aspectj.demo1.ProductDao.findOne(..))",throwing = "error") // 设置throwing，获取异常信息public void afterThrowing(Throwable error){    System.out.println("某某某方法有异常抛出&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+error.getMessage()); }</code></pre><h4 id="2-4-5-最终通知-After"><a href="#2-4-5-最终通知-After" class="headerlink" title="2.4.5 最终通知@After"></a>2.4.5 最终通知<code>@After</code></h4><ul><li>无论是否出现异常，最终通知总是会被执行的</li></ul><pre><code class="java">// 目标类public void findAll(){    System.out.println("查询所有商品。。。");    int i = 1/0; // 手动制造异常，测试最终通知}// 最终通知,无论增强方法是否有异常都会执行@After(value = "execution(* com.zero.aspectj.demo1.ProductDao.findAll(..))")public void after(){    System.out.println("最终通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");}</code></pre><h4 id="2-4-6-通过-Pointcut为切点命名"><a href="#2-4-6-通过-Pointcut为切点命名" class="headerlink" title="2.4.6 通过@Pointcut为切点命名"></a>2.4.6 通过<code>@Pointcut</code>为切点命名</h4><ul><li>在每个通知内定义切点，会造成工作量大，不易维护，对于重复的切点，可以使用<code>@Pointcut</code>进行定义</li><li>切点方法：<code>private void 无参方法，方法名为切点名</code></li><li>当通知多个切点时，可以使用||进行连接。</li><li>切面类代码示例</li></ul><pre><code class="java">@Aspectpublic class MyAspectAnno {    // 前置通知    @Before(value = "savePointcut()")  // 匹配任意返回值类型的，具体目标类(com.zero.aspectj.demo1.ProductDao)下的所有任意参数的方法    public void before(JoinPoint joinPoint){        System.out.println("前置通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+joinPoint); // 可以在方法中传入JoinPoint对象，用来获得切点信息，格式为：前置通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;execution(void com.zero.aspectj.demo1.ProductDao.save())    }    // 后置通知    @AfterReturning(value = "updatePointcut()||findOnePointcut()",returning = "result") // 多个切点通知，用||连接    public void afterReturning(Object result){ // 通过returning属性，可以定义方法返回值，作为参数        System.out.println("后置通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+result);    }    // 环绕通知    @Around(value = "deletePointcut()")    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {        System.out.println("环绕前通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");        Object obj = joinPoint.proceed(); // 执行目标方法        System.out.println("环绕后通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");        return obj;    }    // 异常通知    @AfterThrowing(value = "findOnePointcut()",throwing = "error") // 设置throwing，获取异常信息    public void afterThrowing(Throwable error){        System.out.println("某某某方法有异常抛出&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+error.getMessage());    }    // 最终通知    @After(value = "findAllPointcut()")    public void after(){        System.out.println("最终通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");    }    // 使用Pointcut为所有切点命名    @Pointcut(value = "execution(* com.zero.aspectj.demo1.ProductDao.save(..))")    private void savePointcut(){}    @Pointcut(value = "execution(* com.zero.aspectj.demo1.ProductDao.delete(..))")    private void deletePointcut(){}    @Pointcut(value = "execution(* com.zero.aspectj.demo1.ProductDao.update(..))")    private void updatePointcut(){}    @Pointcut(value = "execution(* com.zero.aspectj.demo1.ProductDao.findOne(..))")    private void findOnePointcut(){}    @Pointcut(value = "execution(* com.zero.aspectj.demo1.ProductDao.findAll(..))")    private void findAllPointcut(){}}</code></pre><h2 id="3-XML方式实现AOP"><a href="#3-XML方式实现AOP" class="headerlink" title="3. XML方式实现AOP"></a>3. XML方式实现AOP</h2><h3 id="3-1-使用XML配置切面"><a href="#3-1-使用XML配置切面" class="headerlink" title="3.1 使用XML配置切面"></a>3.1 使用XML配置切面</h3><ul><li>编写客户类及其实现类</li></ul><pre><code class="java">public class CustomerDaoImpl implements CustomerDao{    public void save() {        System.out.println("保存客户...");    }    public void update() {        System.out.println("修改客户...");    }    public void delete() {        System.out.println("删除客户...");    }    public void findOne() {        System.out.println("查询一个客户...");    }    public void findAll() {        System.out.println("查询全部客户...");    }}</code></pre><ul><li>编写切面类</li></ul><pre><code class="java">/** * 切面类，XML方式 */public class MyAspectXml {    // 前置通知    public void before(){        System.out.println("XML方式的前置通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");    }    public void afterReturning(Object obj){        System.out.println("后置增强&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+obj);    }    public Object around(ProceedingJoinPoint joinPoint) throws Throwable{        System.out.println("环绕前增强&gt;&gt;&gt;&gt;&gt;&gt;&gt;");        Object obj = joinPoint.proceed();        System.out.println("环绕后增强&gt;&gt;&gt;&gt;&gt;&gt;&gt;");        return obj;    }    public void afterThrowing(Throwable e){        System.out.println("异常抛出通知&gt;&gt;&gt;&gt;&gt;&gt;"+e.getMessage());    }    public void after(){        System.out.println("最终通知&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;");    }}</code></pre><ul><li>完成切面类的配置</li></ul><pre><code class="xml">&lt;!--使用XML配置方式完成AOP开发--&gt;&lt;!--配置目标类--&gt;&lt;bean id="customerDao" class="com.zero.aspectj.demo2.CustomerDaoImpl"/&gt;&lt;!--配置切面类--&gt;&lt;bean id="myAspectXml" class="com.zero.aspectj.demo2.MyAspectXml"/&gt;</code></pre><ul><li>配置AOP完成增强</li></ul><pre><code class="xml">&lt;!--进行AOP相关配置--&gt;&lt;aop:config&gt;    &lt;!--配置切入点：哪些类的哪些方法需要增强--&gt;    &lt;aop:pointcut id="savePointcut" expression="execution(* com.zero.aspectj.demo2.CustomerDao.save(..))"/&gt;    &lt;aop:pointcut id="updatePointcut" expression="execution(* com.zero.aspectj.demo2.CustomerDao.update(..))"/&gt;    &lt;aop:pointcut id="deletePointcut" expression="execution(* com.zero.aspectj.demo2.CustomerDao.delete(..))"/&gt;    &lt;aop:pointcut id="findOnePointcut" expression="execution(* com.zero.aspectj.demo2.CustomerDao.findOne(..))"/&gt;    &lt;aop:pointcut id="findAllPointcut" expression="execution(* com.zero.aspectj.demo2.CustomerDao.findAll(..))"/&gt;    &lt;!--配置AOP的切面--&gt;    &lt;aop:aspect ref="myAspectXml"&gt;        &lt;!--配置前置通知--&gt;        &lt;aop:before method="before" pointcut-ref="savePointcut"/&gt;        &lt;!--配置后置通知--&gt;        &lt;aop:after-returning method="afterReturning" pointcut-ref="updatePointcut" returning="obj"/&gt;        &lt;!--配置环绕通知--&gt;        &lt;aop:around method="around" pointcut-ref="deletePointcut"/&gt;        &lt;!--配置异常抛出通知--&gt;        &lt;aop:after-throwing method="afterThrowing" pointcut-ref="findOnePointcut" throwing="e"/&gt;        &lt;!--配置最终通知--&gt;        &lt;aop:after method="after" pointcut-ref="findAllPointcut" /&gt;    &lt;/aop:aspect&gt;&lt;/aop:config&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:applicationContext2.xml")public class Demo2Test {    @Resource(name = "customerDao")    private CustomerDao customerDao;    @Test    public void test1(){        customerDao.save();        customerDao.update();        customerDao.delete();        customerDao.findOne();        customerDao.findAll();    }}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>使用AspectJ完成AOP开发所需环境的配置，需要哪些jar包?</li></ul><pre><code class="xml">&lt;!--导入Spring基本开发包--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--导入AOP相关包--&gt;&lt;dependency&gt;    &lt;groupId&gt;aopalliance&lt;/groupId&gt;    &lt;artifactId&gt;aopalliance&lt;/artifactId&gt;    &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--导入AspectJ相关包--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;    &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;    &lt;version&gt;1.8.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--导入测试相关包--&gt;&lt;dependency&gt;    &lt;groupId&gt;junit&lt;/groupId&gt;    &lt;artifactId&gt;junit&lt;/artifactId&gt;    &lt;version&gt;4.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-test&lt;/artifactId&gt;    &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--导入DI属性注入相关包,java注解类--&gt;&lt;dependency&gt;    &lt;groupId&gt;javax.annotation&lt;/groupId&gt;    &lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;    &lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;</code></pre><ul><li>注解方式实现AOP</li><li>AspectJ的各种通知类型</li><li>切面类的定义，切入点的配置</li><li>XML方式实现AOP，AOP的XML配置</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring的AOP</title>
      <link href="/2019/08/08/framework/spring-de-aop/"/>
      <url>/2019/08/08/framework/spring-de-aop/</url>
      
        <content type="html"><![CDATA[<h2 id="1-AOP的概念"><a href="#1-AOP的概念" class="headerlink" title="1. AOP的概念"></a>1. AOP的概念</h2><h3 id="1-1-什么是AOP？"><a href="#1-1-什么是AOP？" class="headerlink" title="1.1 什么是AOP？"></a>1.1 什么是AOP？</h3><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/面向切面编程/6016335" target="_blank" rel="noopener">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/预编译/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><a id="more"></a><ul><li>AOP(Aspect Oriented Programing)，面向切面编程</li><li>AOP采取横向抽取的机制，取代了传统纵向继承体系重复性代码(性能监视、事务管理、安全检查、缓存)</li><li>Spring AOP使用纯Java实现，不需要专门的编译过程和类加载器，在运行期通过<strong>代理方式</strong>向目标类织入增强代码。</li></ul><h3 id="1-2-AOP相关术语"><a href="#1-2-AOP相关术语" class="headerlink" title="1.2 AOP相关术语"></a>1.2 AOP相关术语</h3><ul><li><strong><code>Joinpoint</code>(连接点)：所谓连接点是指那些被拦截到的点</strong>。在spring中，这些<strong>点指的是方法</strong>，因为spirng只支持方法类型的连接点。</li><li><code>Pointcut</code>(切入点)：所谓切入点是指我们要对哪些<code>Joinpoint</code>进行拦截的定义。</li><li><strong><code>Advice</code>(通知/增强)：所谓通知是指拦截到<code>Joinpoint</code>之后所要做的事情就是通知</strong>。通知分为前置通知，后置通知，异常通知，最终通知，环绕通知(切面要完成的功能)</li><li><code>Introduction</code>(引介)：引介是一种特殊的通知在不修改类代码的前提下，<code>Introduction</code>可以在运行期为类动态地添加一些方法或Filed。</li><li><strong><code>Target</code>(目标对象)：代理的目标对象。</strong></li><li><code>Weaving</code>(织入)：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译器织入和类装载期织入。</li><li><strong><code>Proxy</code>(代理)：一个类被AOP织入增强后，就产生一个结果代理类。</strong></li><li><code>Aspect</code>(切面)：是切入点和通知(引介)的结合。</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/09/aop-1565345189637.jpg" alt="aop"></p><h2 id="2-AOP的底层实现"><a href="#2-AOP的底层实现" class="headerlink" title="2. AOP的底层实现"></a>2. AOP的底层实现</h2><h3 id="2-1-JDK动态代理"><a href="#2-1-JDK动态代理" class="headerlink" title="2.1 JDK动态代理"></a>2.1 JDK动态代理</h3><p>使用JDK本身的一个类<code>Proxy</code>来实现动态代理，核心代码如下：</p><pre><code class="java">public class MyJDKProxy implements InvocationHandler {    private final UserDao userDao;    public MyJDKProxy(UserDao userDao){        this.userDao = userDao;    }    public Object createProxy(){        Object proxy = Proxy.newProxyInstance(userDao.getClass().getClassLoader(),userDao.getClass().getInterfaces(),this);        return proxy;    }    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println("所有代理对象的方法都会经过invoke调用");        if ("save".equals(method.getName())){            // 进行权限校验代码区            System.out.println("权限校验...");            return method.invoke(userDao,args);        }        return method.invoke(userDao,args);    }}</code></pre><h3 id="2-2-使用CGLIB生成代理"><a href="#2-2-使用CGLIB生成代理" class="headerlink" title="2.2 使用CGLIB生成代理"></a>2.2 使用CGLIB生成代理</h3><ul><li>对于不使用接口的业务类，无法使用JDK动态代理</li><li>CGlib采用非常底层字节码技术，可以为一个类创建子类，解决无接口代理问题。</li></ul><pre><code class="java">/** * 示意CGlib生成代理 */public class MyCGlibProxy implements MethodInterceptor {    private final UserDao userDao;    public MyCGlibProxy(UserDao userDao){        this.userDao = userDao;    }    public Object createProxy(){        // 1. 创建核心类        Enhancer enhancer = new Enhancer();        // 2. 设置父类        enhancer.setSuperclass(userDao.getClass());        // 3. 设置回调        enhancer.setCallback(this);        // 4. 生成代理        Object proxy = enhancer.create();        return proxy;    }    public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {        if ("save".equals(method.getName())){            System.out.println("权限校验");            return methodProxy.invokeSuper(proxy,args);        }        return methodProxy.invokeSuper(proxy,args);    }}</code></pre><h3 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h3><ul><li>Spring在运行期，生成动态代理对象，不需要特殊的编译器</li><li>Spring AOP的底层就是通过JDK动态代理或CGlib动态代理技术为目标Bean执行横向织入<ul><li>若目标对象实现了若干接口，spring使用JDK的<code>java.lang.reflect.Proxy</code>类代理</li><li>若目标对象没有实现任何接口，spring使用CGlib库生成目标对象的子类</li></ul></li><li>程序中应优先对接口创建代理，便于程序解耦维护</li><li>标记为final的方法，不能被代理，因为无法进行覆盖<ul><li>JDK动态代理，是针对接口生成子类，接口中方法不能使用final修饰</li><li>CGlib是针对目标类生成子类，因此类或方法不能使用final</li></ul></li><li>Spring只支持方法连接点，不提供属性连接</li></ul><h2 id="3-Spring的传统AOP"><a href="#3-Spring的传统AOP" class="headerlink" title="3. Spring的传统AOP"></a>3. Spring的传统AOP</h2><h3 id="3-1-Spring-AOP增强类型"><a href="#3-1-Spring-AOP增强类型" class="headerlink" title="3.1 Spring AOP增强类型"></a>3.1 Spring AOP增强类型</h3><ul><li>AOP联盟为通知Advice定义了<code>org.aopalliance.aop.Interface.Advice</code></li><li>Spring按照通知Advice在目标类方法的连接点位置，可以分为5类<ul><li>前置通知<code>org.springframework.aop.MethodBeforeAdvice</code>：在目标方法执行前实施增强</li><li>后置通知<code>org.springframework.aop.AfterReturningAdvice</code>：在目标方法执行后实施增强</li><li>环绕通知<code>org.aopalliance.intercept.MethodInterceptor</code>：在目标方法执行前后实施增强</li><li>异常抛出通知<code>org.springframework.aop.ThrowsAdvice</code>：在方法抛出异常后实施增强</li><li>引介通知<code>org.springframework.aop.IntroductionInterceptor</code>：在目标类中添加一些新的方法和属性</li></ul></li></ul><h3 id="3-2-Spring-AOP切面类型"><a href="#3-2-Spring-AOP切面类型" class="headerlink" title="3.2 Spring AOP切面类型"></a>3.2 Spring AOP切面类型</h3><ul><li><code>Advisor</code>：代表一般切面，Advice本身就是一个切面，对目标类所有方法进行拦截</li><li><code>PointcutAdvisor</code>：代表具有切点的切面，可以指定拦截目标类哪些方法</li><li><code>IntroductionAdvisor</code>：代表引介切面，针对引介通知而使用切面(了解即可)</li></ul><h3 id="3-3-Advisor切面案例"><a href="#3-3-Advisor切面案例" class="headerlink" title="3.3 Advisor切面案例"></a>3.3 <code>Advisor</code>切面案例</h3><p><code>ProxyFactoryBean</code>常用可配置属性：</p><ul><li><code>target</code>：代理的目标对象</li><li><code>proxyInterfaces</code>：代理要实现的接口</li><li><code>proxyTargetClass</code>：是否对类代理而不是接口，设置为true时，使用CGlib代理</li><li><code>interceptorNames</code>：需要织入目标的Advice</li><li><code>singleton</code>：返回代理是否为单实例，默认为单例</li><li><code>optimize</code>：当设置为true时，强制使用CGlib</li></ul><p>代码示例：</p><ul><li>创建学生接口及其实现类</li></ul><pre><code class="java">public interface StudentDao {    void save();    void update();    void delete();    void find();}public class StudentDaoImpl implements StudentDao {    public void save() {        System.out.println("学生保存");    }    public void update() {        System.out.println("学生修改");    }    public void delete() {        System.out.println("学生删除");    }    public void find() {        System.out.println("学生查询");    }}</code></pre><ul><li>创建前置通知增强类</li></ul><pre><code class="java">// 使用前置通知实现增强类public class MyBeforeAdvice implements MethodBeforeAdvice {    public void before(Method method, Object[] args, Object target) throws Throwable {        System.out.println("前置增强&gt;&gt;&gt;&gt;&gt;&gt;");    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&lt;!--    配置目标类--&gt;    &lt;bean id="studentDao" class="com.zero.aop.demo2.StudentDaoImpl"/&gt;&lt;!--    前置通知类型--&gt;    &lt;bean id="myBeforeAdvice" class="com.zero.aop.demo2.MyBeforeAdvice"/&gt;&lt;!--    Sprint AOP 产生代理对象--&gt;    &lt;bean id="studentDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean"&gt;&lt;!--        配置目标类--&gt;        &lt;property name="target" ref="studentDao"/&gt;&lt;!--        实现的接口--&gt;        &lt;property name="proxyInterfaces" value="com.zero.aop.demo2.StudentDao"/&gt;&lt;!--        采用拦截的名称--&gt;        &lt;property name="interceptorNames" value="myBeforeAdvice"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration("classpath:applicationContext.xml")public class demo2Test {//    @Resource(name = "studentDao")     @Resource(name = "studentDaoProxy") // 使用代理对象    private StudentDao studentDao;    @Test    public void test1(){        studentDao.find();        studentDao.delete();        studentDao.save();        studentDao.update();    }}</code></pre><h3 id="3-4-PoingcutAdvisor切点切面"><a href="#3-4-PoingcutAdvisor切点切面" class="headerlink" title="3.4 PoingcutAdvisor切点切面"></a>3.4 <code>PoingcutAdvisor</code>切点切面</h3><ul><li>使用普通Advice作为切面，将对目标类所有方法进行拦截，不够灵活，在实际开发中常采用带有切点的切面</li><li><p>常用<code>PointcutAdvisor</code>实现类</p><ul><li><code>DefaultPointcutAdvisor</code>：最常用的切面类型，它可以通过任意<code>Pointcut</code>和Advice组合定义切面</li><li><code>JdkRegexpMethodPointcut</code>：构造正则表达式切点</li></ul></li><li><p>示例，创建客户类</p></li></ul><pre><code class="java">public class CustomerDao {    public void save() {        System.out.println("客户保存");    }    public void update() {        System.out.println("客户修改");    }    public void delete() {        System.out.println("客户删除");    }    public void find() {        System.out.println("客户查询");    }}</code></pre><ul><li>创建环绕通知型增强类</li></ul><pre><code class="java">public class MyAroundAdvice implements MethodInterceptor {    public Object invoke(MethodInvocation invocation) throws Throwable {        System.out.println("环绕前增强&gt;&gt;&gt;&gt;&gt;&gt;");        // 执行目标方法        Object obj = invocation.proceed();        System.out.println("环绕后增强&gt;&gt;&gt;&gt;&gt;&gt;");        return obj;    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;!--配置目标类--&gt;    &lt;bean id="customerDao" class="com.zero.aop.demo3.CustomerDao"/&gt;    &lt;!--配置通知--&gt;    &lt;bean id="myAroundAdvice" class="com.zero.aop.demo3.MyAroundAdvice"/&gt;    &lt;!--一般的切面是使用通知作为切面的，因为要对目标类的指定方法进行增强就需要配置一个带有切入点的切面--&gt;    &lt;bean id="MyAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"&gt;        &lt;!--pattern中配置正则表达式，以达到对指定方法进行增强的效果--&gt;        &lt;!--            对单个方法进行增强使用pattern即可            如果对多个方法，需使用patterns，多个值用逗号隔开        --&gt;        &lt;!--&lt;property name="pattern" value=".*save.*"/&gt;--&gt;        &lt;property name="patterns" value=".*save.*,.*delete.*"/&gt;        &lt;property name="advice" ref="myAroundAdvice"/&gt;    &lt;/bean&gt;    &lt;!--配置产生代理--&gt;    &lt;bean id="customerDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean"&gt;        &lt;property name="target" ref="customerDao"/&gt;        &lt;property name="proxyTargetClass" value="true"/&gt;        &lt;property name="interceptorNames" value="MyAdvisor"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:applicationContext2.xml")public class demo3Test {//    @Resource(name="customerDao") // 不使用代理    @Resource(name = "customerDaoProxy") // 使用代理对象    private CustomerDao customerDao;    @Test    public void test1(){        customerDao.find();        customerDao.delete();        customerDao.save();        customerDao.update();    }}</code></pre><h2 id="4-Spring传统AOP的自动代理"><a href="#4-Spring传统AOP的自动代理" class="headerlink" title="4. Spring传统AOP的自动代理"></a>4. Spring传统AOP的自动代理</h2><ul><li>前面的案例中，每个代理都是通过<code>ProxyFactoryBean</code>织入切面代理，在实际开发中，非常多的Bean每个都配置<code>ProxyFactoryBean</code>的话，开发维护量巨大</li><li>解决方案：自动创建代理<ul><li><code>BeanNameAutoProxyCreator</code>：根据Bean名称创建代理</li><li><code>DefaultAdvisorAutoProxyCreator</code>：根据Advisor本身包含信息创建代理</li><li><code>AnnotationAwareAspectJAutoProxyCreator</code>：基于Bean中的AspectJ注解进行自动代理</li></ul></li></ul><h3 id="4-1-基于Bean名称的自动代理"><a href="#4-1-基于Bean名称的自动代理" class="headerlink" title="4.1 基于Bean名称的自动代理"></a>4.1 基于Bean名称的自动代理</h3><ul><li><p>代码示例对所有以DAO结尾Bean所有方法进行代理</p><ul><li>将前面案例的<code>CustomerDao,StudentDao,StudentDaoImpl,MyBeforeAdvice,MyAroundAdvice</code>复制到一个文件夹，然后配置xml。</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&lt;!--    配置目标类--&gt;    &lt;bean id="studentDao" class="com.zero.aop.demo4.StudentDaoImpl"/&gt;    &lt;bean id="customerDao" class="com.zero.aop.demo4.CustomerDao"/&gt;    &lt;!--配置通知：前置通知--&gt;    &lt;bean id="myBeforeAdvice" class="com.zero.aop.demo4.MyBeforeAdvice"/&gt;    &lt;!--配置通知：环绕通知--&gt;    &lt;bean id="myAroundAdvice" class="com.zero.aop.demo4.MyAroundAdvice"/&gt;    &lt;bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt;        &lt;property name="beanNames" value="*Dao"/&gt;        &lt;property name="interceptorNames" value="myBeforeAdvice"/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><ul><li>测试</li></ul><p><code>`</code>java<br>@RunWith(SpringJUnit4ClassRunner.class)<br>@ContextConfiguration(“classpath:applicationContext3.xml”)<br>public class demo4Test {</p><pre><code>@Resource(name = "studentDao")private StudentDao studentDao;@Resource(name = "customerDao")private CustomerDao customerDao;@Testpublic void test1(){    studentDao.find();    studentDao.delete();    studentDao.save();    studentDao.update();    customerDao.find();    customerDao.delete();    customerDao.save();    customerDao.update();</code></pre></li></ul><pre><code>  }</code></pre><p>  }</p><pre><code>### 4.2 基于切面信息的自动代理- 配置环绕代理，将上述案例xml修改如下即可对指定方法进行增强```xml&lt;!--根据切面信息创建代理--&gt;&lt;!--配置目标类--&gt;&lt;bean id="studentDao" class="com.zero.aop.demo4.StudentDaoImpl"/&gt;&lt;bean id="customerDao" class="com.zero.aop.demo4.CustomerDao"/&gt;&lt;!--配置通知：前置通知--&gt;&lt;bean id="myBeforeAdvice" class="com.zero.aop.demo4.MyBeforeAdvice"/&gt;&lt;!--配置通知：环绕通知--&gt;&lt;bean id="myAroundAdvice" class="com.zero.aop.demo4.MyAroundAdvice"/&gt;&lt;!--配置切面--&gt;&lt;bean id="myAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor"&gt;    &lt;!--对指定包下指定方法进行增强,注意转义--&gt;    &lt;property name="pattern" value="com\.zero\.aop\.demo4\.CustomerDao\.save"/&gt;    &lt;property name="advice" ref="myAroundAdvice"/&gt;&lt;/bean&gt;&lt;bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"&gt;&lt;/bean&gt;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>什么是AOP</li><li>了解AOP相关术语：连接点，切入点，织入，目标对象，代理对象等。</li><li>传统AOP实现原理：JDK动态代理，CGlib代理</li><li>Spring的传统AOP：增强类型，切面类型。没有切入点的切面和有切入点的切面。</li><li>自动代理：基于Bean名称的，基于切面信息的</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBean管理</title>
      <link href="/2019/08/07/framework/spring-bean-guan-li/"/>
      <url>/2019/08/07/framework/spring-bean-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring的工厂类"><a href="#1-Spring的工厂类" class="headerlink" title="1. Spring的工厂类"></a>1. Spring的工厂类</h2><p><code>ApplicationContext</code>是继承自<code>BeanFactory</code>的。<code>BeanFactory</code>是一个老版本的工厂类，只有在调用<code>getBean</code>方法时，才会生成类的实例。</p><a id="more"></a><p><code>ApplicationContext</code>工厂在加载配置文件时，就会将Spring管理的类都实例化。</p><p>加载配置文件一般使用以下两个实现类：</p><ul><li><code>ClassPathXmlApplicationContext</code>：加载类路径下的配置文件（src下）</li><li><code>FileSystemXmlApplicationContext</code>：加载文件系统下的配置文件（磁盘下的文件）</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/07/SpringFactory-1565180791566.jpg" alt="SpringFactory"></p><h2 id="2-Spring的Bean管理-XML方式"><a href="#2-Spring的Bean管理-XML方式" class="headerlink" title="2. Spring的Bean管理(XML方式)"></a>2. Spring的Bean管理(XML方式)</h2><h3 id="2-1-使用类构造器实例化-默认无参数"><a href="#2-1-使用类构造器实例化-默认无参数" class="headerlink" title="2.1 使用类构造器实例化(默认无参数)"></a>2.1 使用类构造器实例化(默认无参数)</h3><ul><li>编写Bean1类：</li></ul><pre><code class="java">/** * Bean的实例化的三种方式：采用无参数的构造方法的方式 */public class Bean1 {    public Bean1(){        System.out.println("Bean1被实例化了...");    }}</code></pre><ul><li>在xml中配置如下内容：</li></ul><pre><code class="xml">&lt;!--    Bean的实例化的三种方式--&gt;&lt;!--    第一种：无参构造器的方式--&gt;&lt;bean id="bean1" class="com.zero.ioc.demo1.Bean1"&gt;&lt;/bean&gt;</code></pre><ul><li>在测试方法中加载对象，并完成实例化</li></ul><pre><code class="java">@Testpublic void test1(){    ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");    Bean1 bean1 = (Bean1) context.getBean("bean1");}</code></pre><h3 id="2-2-使用静态工厂方法实例化-简单工厂模式"><a href="#2-2-使用静态工厂方法实例化-简单工厂模式" class="headerlink" title="2.2 使用静态工厂方法实例化(简单工厂模式)"></a>2.2 使用静态工厂方法实例化(简单工厂模式)</h3><ul><li>编写Bean2类</li></ul><pre><code class="java">/** * Bean的实例化的三种方式：使用静态工厂方法实例化 */public class Bean2 {}</code></pre><ul><li>编写静态工厂类</li></ul><pre><code class="java">// Bean2的静态工厂public class Bean2Factory {    public static Bean2 createBean2(){        System.out.println("Bean2Factory已执行...");        return new Bean2();    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;!--    第二种：静态工厂的方式--&gt;&lt;bean id="bean2" class="com.zero.ioc.demo1.Bean2Factory" factory-method="createBean2"/&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test2(){    ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");    Bean2 bean2 = (Bean2) context.getBean("bean2");}</code></pre><blockquote><p>JDK12和Spring3.2不兼容！！！在使用静态工厂方法实例化对象时，会导致<code>java.lang.IllegalArgumentException</code>异常，更换Spring版本至4.2即可。</p></blockquote><h3 id="2-3-使用实例工厂方法实例化-工厂方法模式"><a href="#2-3-使用实例工厂方法实例化-工厂方法模式" class="headerlink" title="2.3 使用实例工厂方法实例化(工厂方法模式)"></a>2.3 使用实例工厂方法实例化(工厂方法模式)</h3><ul><li>编写Bean3类</li></ul><pre><code class="java">/** * Bean的实例化三种方式：实例工厂实例化 */public class Bean3 {}</code></pre><ul><li>编写实例工厂类</li></ul><pre><code class="java">public class Bean3Factory {    public Bean3 createBean3(){        System.out.println("Bean3Factory执行了...");        return new Bean3();    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;!--    第三种：实例工厂的方式--&gt;&lt;bean id="bean3Factory" class="com.zero.ioc.demo1.Bean3Factory"/&gt;&lt;bean id="bean3" factory-bean="bean3Factory" factory-method="createBean3"/&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test3(){    ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");    Bean3 bean3 = (Bean3) context.getBean("bean3");}</code></pre><h3 id="2-4-Bean的配置"><a href="#2-4-Bean的配置" class="headerlink" title="2.4 Bean的配置"></a>2.4 Bean的配置</h3><ul><li><strong>id和name</strong><ul><li>一般情况下，装配一个Bean时，通过指定一个id属性作为Bean的名称</li><li>id属性在IOC容器中必须是唯一的</li><li>如果Bean的名称中含有特殊字符，就需要使用name属性</li></ul></li><li><strong>class</strong><ul><li>class用于设置一个类的<strong>完全路径名称</strong>，主要作用是IOC容器生成类的实例</li></ul></li></ul><h3 id="2-5-Bean的作用域"><a href="#2-5-Bean的作用域" class="headerlink" title="2.5 Bean的作用域"></a>2.5 Bean的作用域</h3><table><thead><tr><th>类别</th><th>说明</th></tr></thead><tbody><tr><td><code>singleton</code></td><td>在<code>SpringIOC</code>容器中仅存在一个Bean实例，Bean以单实例的方式存在</td></tr><tr><td><code>prototype</code></td><td>每次调用<code>getBean()</code>时都会返回一个新的实例</td></tr><tr><td><code>request</code></td><td>每次HTTP请求都会创建一新的Bean，该作用域仅适用于<code>WebApplicationContext</code>环境</td></tr><tr><td><code>session</code></td><td>同一个<code>HTTP Session</code>共享一个Bean，不同的<code>HTTP Session</code>使用不同的Bean。该作用域仅适用于<code>WebApplicationContext</code>环境</td></tr></tbody></table><ul><li>在xml中配置</li></ul><pre><code class="xml">&lt;!--    Bean的作用范围--&gt;&lt;!--仅存在一个Bean实例，单实例--&gt;&lt;bean id="person" class="com.zero.ioc.demo2.Person" scope="singleton"/&gt;&lt;!--每次调用getBean()都会返回一个新实例--&gt;&lt;bean id="person" class="com.zero.ioc.demo2.Person" scope="prototype"/&gt;</code></pre><h3 id="2-6-Spring容器中Bean的生命周期"><a href="#2-6-Spring容器中Bean的生命周期" class="headerlink" title="2.6 Spring容器中Bean的生命周期"></a>2.6 Spring容器中Bean的生命周期</h3><p>Spring初始化bean或销毁bean时，有时需要作一些处理工作，因此spring可以在创建和拆卸bean时调用bean的两个生命周期方法。</p><pre><code class="xml">&lt;bean id="xxx" class="xxx"      init-method="init"      destroy-method="destroy"/&gt;&lt;!--当bean被载入到容器时调用init当bean从容器中删除时调用destroy(必须是单例bean才会自动调用，即scope="singleton"才有效)--&gt;</code></pre><blockquote><p>web容器中会自动调用，但是main函数或测试用例需手动调用。</p></blockquote><ul><li>示例，创建一个man类</li></ul><pre><code class="java">public class Man {    public Man(){        System.out.println("Man被实例化了");    }    public void setup(){        System.out.println("Man被初始化了");    }    public void myDestroy(){        System.out.println("Man被销毁了");    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;bean id="man" class="com.zero.ioc.demo2.Man" init-method="setup" destroy-method="myDestroy"/&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java"> @Testpublic void test2(){    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");    Man man = (Man) context.getBean("man");    context.close();}</code></pre><h4 id="2-6-1-Bean完整生命周期过程"><a href="#2-6-1-Bean完整生命周期过程" class="headerlink" title="2.6.1 Bean完整生命周期过程"></a>2.6.1 Bean完整生命周期过程</h4><p>完整生命周期总共有11个步骤。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/07/bean_lifeCycle-1565180819738.jpg" alt="bean_lifeCycle"></p><ol><li><code>instantiate bean</code>，对象实例化</li><li><code>populate properties</code>，封装属性</li><li>如果Bean实现<code>BeanNameAware</code>执行<code>setBeanName</code></li><li>如果Bean实现<code>BeanFactoryAware</code>或者<code>ApplicationContextAware</code>设置工厂<code>setBeanFactory</code>或者上下文对象<code>setApplicationContext</code></li><li>如果存在类实现<code>BeanPostProcessor</code>(后处理Bean)，执行<code>postProcessBeforeInitialization</code></li><li>如果Bean实现<code>InitializingBean</code>执行<code>afterPropertiesSet</code></li><li>调用<code>&lt;bean init-method="init"&gt;</code>指定初始化方法init</li><li>如果存在类实现<code>BeanPostProcessor</code>(处理Bean)，执行<code>postProcessAfterInitialization</code></li><li>执行业务处理</li><li>如果Bean实现<code>DisposableBean</code>执行<code>destroy</code></li><li>调用<code>&lt;bean destroy-method="customerDestroy"&gt;</code>指定销毁方法<code>customerDestroy</code></li></ol><p><strong>代码演示</strong>：</p><ul><li>编写man类</li></ul><pre><code class="java">public class Man implements BeanNameAware, ApplicationContextAware, InitializingBean, DisposableBean {    private String name;    public String getName() {        return name;    }    public void setName(String name) {        System.out.println("第二步：设置属性");        this.name = name;    }    public Man(){        System.out.println("第一步：实例化。。。");    }    public void setup(){        System.out.println("第七步：Man被初始化了");    }    public void myDestroy(){        System.out.println("第十一步：执行自己定义的销毁方法");    }    @Override    public void setBeanName(String s) {        System.out.println("第三步：设置Bean的名称"+s); // 就是xml中配置的id的值    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        System.out.println("第四步：了解工厂信息");    }    @Override    public void afterPropertiesSet() throws Exception {        System.out.println("第六步：属性设置后执行 ");    }    public void run(){        System.out.println("第九步：执行业务方法 ");    }    public void destroy() throws Exception{        System.out.println("第十步：执行Spring的销毁方法");    }}</code></pre><ul><li>编写<code>MyBeanPostProcessor</code>类</li></ul><pre><code class="java">public class MyBeanPostProcessor implements BeanPostProcessor {    @Override    public Object postProcessBeforeInitialization(Object o, String s) throws BeansException {        System.out.println("第五步：初始化前方法。。。");        return o;    }    @Override    public Object postProcessAfterInitialization(Object o, String s) throws BeansException {        System.out.println("第八步：初始化后方法。。。");        return o;    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;bean id="man" class="com.zero.ioc.demo2.Man" init-method="setup" destroy-method="myDestroy"&gt;    &lt;property name="name" value="张三"&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean class="com.zero.ioc.demo2.MyBeanPostProcessor"/&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test2(){    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");    Man man = (Man) context.getBean("man");    man.run();    context.close();}/** 输出结果:    第一步：实例化。。。    第二步：设置属性    第三步：设置Bean的名称man    第四步：了解工厂信息    第五步：初始化前方法。。。    第六步：属性设置后执行     第七步：Man被初始化了    第八步：初始化后方法。。。    第九步：执行业务方法     8月 06, 2019 7:48:41 下午 org.springframework.context.support.ClassPathXmlApplicationContext doClose    信息: Closing org.springframework.context.support.ClassPathXmlApplicationContext@7823a2f9: startup date [Tue Aug 06 19:48:41 CST 2019]; root of context hierarchy    第十步：执行Spring的销毁方法    第十一步：执行自己定义的销毁方法*/</code></pre><h2 id="3-Spring的属性注入-XML方式"><a href="#3-Spring的属性注入-XML方式" class="headerlink" title="3. Spring的属性注入(XML方式)"></a>3. Spring的属性注入(XML方式)</h2><p>对于类成员变量，注入方式有三种：构造函数注入、属性setter方法注入、接口注入</p><blockquote><p>Spring支持前两种</p></blockquote><h3 id="3-1-属性注入-构造方法注入"><a href="#3-1-属性注入-构造方法注入" class="headerlink" title="3.1 属性注入-构造方法注入"></a>3.1 属性注入-构造方法注入</h3><ul><li><p>通过构造方法注入Bean的属性值或依赖的对象，它保证了Bean实例在实例化后就可以使用。</p></li><li><p>构造器注入通过<code>&lt;constructor-arg&gt;</code>元素来声明属性</p></li><li><p>代码示例</p><ul><li>创建user类</li></ul><pre><code class="java">public class User {    private String name;    private Integer age;    public User(String name, Integer age){        this.name = name;        this.age = age;    }    @Override    public String toString() {        return "User{" +                "name='" + name + '\'' +                ", age=" + age +                '}';    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;!--    Spring属性注入-通过构造方法注入--&gt;&lt;bean id="user" class="com.zero.ioc.demo3.User"&gt;    &lt;constructor-arg name="name" value="张三"/&gt;    &lt;constructor-arg name="age" value="22"/&gt;&lt;/bean&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">public class demo3Test {    @Test    public void test1(){        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");        User user = (User) context.getBean("user");        System.out.println(user);    }}</code></pre></li></ul><h3 id="3-2-属性注入-set方法注入"><a href="#3-2-属性注入-set方法注入" class="headerlink" title="3.2 属性注入-set方法注入"></a>3.2 属性注入-set方法注入</h3><ul><li><p>使用set方法注入，在Spring配置文件中，通过<code>&lt;property&gt;</code>设置注入的属性</p></li><li><p>代码示例</p><ul><li>创建person类</li></ul><pre><code class="java">public class Person {    private String name;    private Integer age;    private Cat cat;    // 省略get/set方法    @Override    public String toString() {        return "Person{" +                "name='" + name + '\'' +                ", age=" + age +                ", cat=" + cat +                '}';    }}</code></pre><ul><li>创建cat类</li></ul><pre><code class="java">public class Cat {    private String name;    @Override    public String toString() {        return "Cat{" +                "name='" + name + '\'' +                '}';    }    // 省略get/set方法}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;!--    Spring属性注入-通过set方法注入--&gt;&lt;bean id="person" class="com.zero.ioc.demo3.Person"&gt;    &lt;property name="name" value="李四"/&gt;  &lt;property name="age" value="25"/&gt;    &lt;!--        ref可以引入其他bean的id或name--&gt;  &lt;property name="cat" ref="cat"/&gt;&lt;/bean&gt;&lt;bean id="cat" class="com.zero.ioc.demo3.Cat"&gt;    &lt;property name="name" value="ketty"/&gt;&lt;/bean&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test2(){    ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");  Person person = (Person) context.getBean("person");    System.out.println(person); // Person{name='李四', age=25, cat=Cat{name='ketty'}}}</code></pre></li></ul><blockquote><p>普通类型的值使用value设置值，对象类型的值使用ref。</p></blockquote><h3 id="3-3-属性注入-p名称空间"><a href="#3-3-属性注入-p名称空间" class="headerlink" title="3.3 属性注入-p名称空间"></a>3.3 属性注入-p名称空间</h3><p>使用p命名空间：为了简化xml文件配置，Spring从2.5开始引入一个新的p名称空间。</p><p>语法：<code>p:&lt;属性名&gt;="xxx" 引入常量值</code>，<code>p:&lt;属性名&gt;-ref="xxx"</code>引用其他Bean对象</p><ul><li>示例，配置xml，</li></ul><pre><code class="xml">&lt;!--先在beans中添加:xmlns:p="http://www.springframework.org/schema/p"，引入p命名空间--&gt;&lt;!--    Spring属性注入-通过p名称空间注入--&gt;&lt;!--修改原有的person配置如下，即可实现通过p名称空间注入--&gt;&lt;bean id="person" class="com.zero.ioc.demo3.Person" p:name="赵钱" p:age="26" p:cat-ref="cat"/&gt;&lt;bean id="cat" class="com.zero.ioc.demo3.Cat" p:name="小黑"/&gt;</code></pre><h3 id="3-4-属性注入-SpEL注入"><a href="#3-4-属性注入-SpEL注入" class="headerlink" title="3.4 属性注入-SpEL注入"></a>3.4 属性注入-SpEL注入</h3><ul><li><code>SpEL</code>：<code>spring expression language</code>，Spring表达式语言，对依赖注入进行简化</li><li>语法：<code>#{表达式}</code>，<code>&lt;bean id="" value="#{表达式}"/&gt;</code></li></ul><pre><code class="shell">Spel表达式语法：基本语法：#{}        #{'hello'}:使用字符串        #{beanId}:使用另一个bean        #{beanId.method()}:指定bean和对应方法，并执行方法        #{T(java.lang.Math).PI}:使用静态字段或方法</code></pre><ul><li>示例如下，创建Product和Category类用于测试</li></ul><pre><code class="java">public class Product {    private String name;    private Double price;    private Category category;    @Override    public String toString() {        return "Product{" +                "name='" + name + '\'' +                ", price=" + price +                ", category=" + category +                '}';    }    // 省略get/set方法}public class Category {    private String name;    @Override    public String toString() {        return "Category{" +                "name='" + name + '\'' +                '}';    }   // 省略get/set方法}</code></pre><ul><li>创建简单的计算类</li></ul><pre><code class="java">public class ProductInfo {    public Double addPrice(){        return Math.random() * 20;    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;!--    Spring属性注入-通过SpEL注入--&gt;&lt;bean id="category" class="com.zero.ioc.demo3.Category"&gt;    &lt;property name="name" value="#{'水果'}"/&gt;&lt;/bean&gt;&lt;bean id="productInfo" class="com.zero.ioc.demo3.ProductInfo"/&gt;&lt;bean id="product" class="com.zero.ioc.demo3.Product"&gt;    &lt;property name="name" value="#{'西瓜'}"/&gt;    &lt;property name="price" value="#{productInfo.addPrice()}"/&gt;    &lt;property name="category" value="#{category}"/&gt;&lt;/bean&gt;</code></pre><ul><li>测试 </li></ul><pre><code class="java"> @Test    public void test3(){        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");        Product product = (Product) context.getBean("product");        System.out.println(product);    }</code></pre><h3 id="3-5-复杂类型的属性注入"><a href="#3-5-复杂类型的属性注入" class="headerlink" title="3.5 复杂类型的属性注入"></a>3.5 复杂类型的属性注入</h3><ul><li>数组类型的属性注入</li><li>List集合类型的属性注入</li><li>Set集合类型的属性注入</li><li>Map集合类型的属性注入</li><li><p>Properties类型的属性注入</p></li><li><p>代码示例如下：</p><ul><li>创建集合类CollectionBean</li></ul><p><code>`</code>java<br>public class CollectionBean {</p><pre><code>private String[] arrs; // 数组类型private List&lt;String&gt; list; // List集合类型private Set&lt;String&gt; set; // Set集合类型private Map&lt;String,Integer&gt; map; // Map集合类型private Properties properties; // 属性类型</code></pre></li></ul><pre><code>  @Override  public String toString() {      return "CollectionBean{" +              "arrs=" + Arrays.toString(arrs) +              ", list=" + list +              ", set=" + set +              ", map=" + map +              ", properties=" + properties +              '}';  }   // 省略get/set方法   </code></pre><p>  }</p><pre><code>  - 配置xml，添加如下内容  ```xml  &lt;!--    复杂类型的属性注入--&gt;  &lt;bean id="collectionBean" class="com.zero.ioc.demo4.CollectionBean"&gt;      &lt;!--        数组类型的属性注入--&gt;      &lt;property name="arrs"&gt;          &lt;list&gt;              &lt;value&gt;aaa&lt;/value&gt;              &lt;value&gt;bbb&lt;/value&gt;              &lt;value&gt;ccc&lt;/value&gt;          &lt;/list&gt;      &lt;/property&gt;      &lt;!--        List集合类型的属性注入--&gt;      &lt;property name="list"&gt;          &lt;list&gt;              &lt;value&gt;111&lt;/value&gt;              &lt;value&gt;222&lt;/value&gt;              &lt;value&gt;333&lt;/value&gt;          &lt;/list&gt;      &lt;/property&gt;      &lt;!--        set集合类型的属性注入--&gt;      &lt;property name="set"&gt;          &lt;set&gt;              &lt;value&gt;ddd&lt;/value&gt;              &lt;value&gt;eee&lt;/value&gt;              &lt;value&gt;fff&lt;/value&gt;          &lt;/set&gt;      &lt;/property&gt;      &lt;!--        map集合类型的属性注入--&gt;      &lt;property name="map"&gt;          &lt;map&gt;              &lt;entry key="aaa" value="111"/&gt;              &lt;entry key="bbb" value="222"/&gt;              &lt;entry key="ccc" value="333"/&gt;          &lt;/map&gt;      &lt;/property&gt;      &lt;!--        Properties类型的属性注入--&gt;      &lt;property name="properties"&gt;          &lt;props&gt;              &lt;prop key="username"&gt;root&lt;/prop&gt;              &lt;prop key="password"&gt;123456&lt;/prop&gt;          &lt;/props&gt;      &lt;/property&gt;  &lt;/bean&gt;</code></pre><ul><li><p>测试</p><pre><code class="java">@Testpublic void test1(){  ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");  CollectionBean collectionBean = (CollectionBean) context.getBean("collectionBean");  System.out.println(collectionBean);}</code></pre></li></ul><h2 id="4-Spring的Bean管理-注解方式"><a href="#4-Spring的Bean管理-注解方式" class="headerlink" title="4. Spring的Bean管理(注解方式)"></a>4. Spring的Bean管理(注解方式)</h2><h3 id="4-1-使用注解定义Bean"><a href="#4-1-使用注解定义Bean" class="headerlink" title="4.1 使用注解定义Bean"></a>4.1 使用注解定义Bean</h3><ul><li>Spring2.5 引入使用注解去定义Bean<ul><li><code>@Component</code>，描述Spring框架中的Bean</li></ul></li><li>除了<code>@Component</code>外，Spring还提供了3个功能基本等效的注解<ul><li><code>@Repository</code>：用于对DAO实现类进行标注</li><li><code>@Service</code>：用于对Service实现类进行标注</li><li><code>@Controller</code>：用于对Controller实现类进行标注</li></ul></li><li><p>这三个注解是为了让标注类本身的用途更加清晰，Spring在后续版本会对其增强。</p></li><li><p>代码示例</p><ul><li>创建<code>UserService</code>类</li></ul><pre><code class="java">/** * Spring的Bean管理的注解方式： *      传统方式：需要去XML中配置&lt;bean id="" class=""&gt;&lt;/bean&gt; * */@Service("userService")public class UserService {    public String hello(String name){        return "Hello" + name;    }}</code></pre><ul><li>配置xml，开启扫描</li></ul><p><code>`</code>xml<br>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;</p><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"><pre><code>&lt;!-- 开启注解扫描 --&gt;&lt;context:component-scan base-package="com.zero.demo1"/&gt;</code></pre></beans></li></ul><p>  </p><pre><code>  - 测试  ```java  @Test  public void demo1(){      ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");      UserService userService = (UserService) context.getBean("userService");      String hello = userService.hello("小明");      System.out.println(hello);  }</code></pre><h2 id="5-Spring的属性注入-注解方式"><a href="#5-Spring的属性注入-注解方式" class="headerlink" title="5. Spring的属性注入(注解方式)"></a>5. Spring的属性注入(注解方式)</h2><ul><li>使用<code>@Autowired</code>进行自动注入</li><li><code>@Autowired</code>默认按照类型进行注入<ul><li>如果存在两个相同Bean类型相同，则按照名称注入</li></ul></li><li><code>@Autowired</code>注入时可以针对成员变量或者set方法</li><li>通过<code>@Autowired</code>的<code>required</code>属性，设置一定要找到匹配的Bean</li><li>使用<code>@Qualifier</code>指定注入Bean的名称</li><li><p>使用<code>Qualifier</code>指定Bean名称后，注解Bean必须指定相同名称</p></li><li><p>代码示例：</p><ul><li>创建一个dao</li></ul><pre><code class="java">@Repository("userDao")public class UserDao {    public void save(){        System.out.println("Dao中保存用户。。。");    }}</code></pre><ul><li>修改UserService</li></ul><pre><code class="java">@Service("userService")public class UserService {    //使用value直接对属性值进行注入    @Value("苹果")    private String something;    // 自动注入    @Autowired    @Qualifier("userDao") // 指定注解的Bean名称必须相同‘    @Resource(name="userDao") // 可以使用@Resource，指定Bean名称    private UserDao dao;    public String hello(String name){        return "Hello" + name;    }    public void eat(){        System.out.println("eat:"+something);    }    public void save(){        System.out.println("Service中保存用户。。。");        dao.save();    }}</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void demo2(){    ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");    UserService userService = (UserService) context.getBean("userService");    userService.save();}</code></pre></li></ul><blockquote><ul><li>Spring提供对JSR-250中定义<code>@Resource</code>标准注解的支持</li><li><code>@Resource</code>和<code>@Autowired</code>注解功能相似</li><li>如无法使用<code>@Resource</code>，需在<code>pom.xml</code>中引入<code>javax.annotation-api</code>依赖</li></ul></blockquote><h3 id="5-1-Spring的其他注解"><a href="#5-1-Spring的其他注解" class="headerlink" title="5.1 Spring的其他注解"></a>5.1 Spring的其他注解</h3><p>Spring初始化Bean或销毁bean时，有时需要作一些处理工作，因此spring可以在创建和拆卸bean时调用bean的两个生命周期方法。</p><pre><code class="xml">&lt;bean id="xxx" class="xxx"      init-method="setup"      destroy-method="teardown"/&gt;&lt;!--当bean被载入到容器时调用setup,注解方式：@PostConstruct,初始化当bean从容器中删除时调用teardown(必须是单例bean才会自动调用，即scope="singleton"才有效)注解方式：@PreDestroy，销毁--&gt;</code></pre><ul><li>代码示例，创建bean1类</li></ul><pre><code class="java">@Component("bean1")public class Bean1 {    // 生命周期注解，初始化    @PostConstruct    public void init(){        System.out.println("initBean...");    }    public void say(){        System.out.println("say...");    }    // 生命周期注解，销毁    @PreDestroy    public void destroy(){        System.out.println("destroyBean...");    }}</code></pre><ul><li>配置xml</li></ul><pre><code class="xml">&lt;!-- 开启注解扫描 --&gt;&lt;context:component-scan base-package="com.zero"/&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test1(){    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");    Bean1 bean1 = (Bean1) context.getBean("bean1");    bean1.say();    context.close();}</code></pre><h3 id="5-2-Bean的作用范围"><a href="#5-2-Bean的作用范围" class="headerlink" title="5.2 Bean的作用范围"></a>5.2 Bean的作用范围</h3><ul><li>使用注解配置的Bean和<code>&lt;bean&gt;</code>配置的一样，默认作用范围都是<code>singleton</code></li><li><p><code>@Scope</code>注解用于指定Bean的作用范围</p></li><li><p>代码示例：</p><ul><li>创建bean2类，设置其作用范围</li></ul><pre><code class="java">@Component("bean2")@Scope("prototype") // 设置作用范围，使用多例创建对象public class Bean2 {}</code></pre><ul><li>测试</li></ul><pre><code class="java"> @Testpublic void test2(){    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");    Bean2 bean1 = (Bean2) context.getBean("bean2");    Bean2 bean2 = (Bean2) context.getBean("bean2");    System.out.println(bean1 == bean2);}</code></pre></li></ul><h3 id="5-3-传统XML配置和注解配置混合使用"><a href="#5-3-传统XML配置和注解配置混合使用" class="headerlink" title="5.3 传统XML配置和注解配置混合使用"></a>5.3 传统XML配置和注解配置混合使用</h3><ul><li>XML方式的优势<ul><li>结构清晰，易于阅读</li></ul></li><li>注解方式的优势<ul><li>开发便捷，属性注入方便</li></ul></li><li><p>XML与注解的整合开发</p><ul><li>引入context命名空间</li><li>在配置文件中添加<code>&lt;context:annotation-config/&gt;</code></li></ul></li><li><p>代码示例</p><ul><li>创建<code>ProductService，ProductDao，CategoryDao</code>，均创建简单的save方法。</li></ul><p><code>`</code>java<br>public class ProductService {</p><pre><code>// 使用注解@Resource(name = "categoryDao")private CategoryDao categoryDao;@Resource(name = "productDao")private ProductDao productDao;</code></pre><p>//    public void setCategoryDao(CategoryDao categoryDao) {<br>//        this.categoryDao = categoryDao;<br>//    }<br>//<br>//    public void setProductDao(ProductDao productDao) {<br>//        this.productDao = productDao;<br>//    }</p><pre><code>public void save(){    System.out.println("ProductService中的save方法执行了...");    categoryDao.save();    productDao.save();}</code></pre><p>}</p><p>public class ProductDao {</p><pre><code>public void save(){    System.out.println("ProductDao中的save方法执行了...");}</code></pre><p>}</p></li></ul><p>  public class CategoryDao {<br>      public void save(){<br>          System.out.println(“CategoryDao中的save方法执行了…”);<br>      }<br>  }</p><pre><code>  - 配置xml  ```xml  &lt;!--单独开启注解功能--&gt;  &lt;context:annotation-config/&gt;  &lt;bean id="productService" class="com.zero.demo3.ProductService"&gt;      &lt;!--        &lt;property name="productDao" ref="productDao"/&gt;--&gt;      &lt;!--        &lt;property name="categoryDao" ref="categoryDao"/&gt;--&gt;  &lt;/bean&gt;  &lt;bean id="productDao" class="com.zero.demo3.ProductDao"/&gt;  &lt;bean id="categoryDao" class="com.zero.demo3.CategoryDao"/&gt;</code></pre><ul><li>测试</li></ul><pre><code class="java">@Testpublic void test1() {    ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");    ProductService productService = (ProductService) context.getBean("productService");    productService.save();}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring简单入门</title>
      <link href="/2019/08/05/framework/spring-ru-men/"/>
      <url>/2019/08/05/framework/spring-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring介绍"><a href="#1-Spring介绍" class="headerlink" title="1. Spring介绍"></a>1. Spring介绍</h2><p>Spring是一个开源框架，于2003年兴起的轻量级Java开发框架。Spring为简化企业级应用开发而生，使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能。</p><blockquote><p>简单来说：Spring是一个轻量级的控制反转(IOC)和面向切面(AOP)的容器框架。</p></blockquote><a id="more"></a><h3 id="1-1-Spring的好处"><a href="#1-1-Spring的好处" class="headerlink" title="1.1 Spring的好处"></a>1.1 Spring的好处</h3><ul><li>方便解耦，简化开发<ul><li>Spring就是一个大工厂，专门负责生产Bean，可以将所有对象创建和依赖关系维护，交给Spring管理。</li></ul></li><li>AOP编程的支持<ul><li>Spring提供面向切面编程，可以方便的实现对程序进行<strong>权限拦截</strong>、运行监控等功能。</li></ul></li><li>声明式事务的支持<ul><li>只需要通过配置就可以完成对事务的管理，而无需手动编程。</li></ul></li><li>方便程序的测试<ul><li>Spring对Junit4支持，可以通过注解方便的测试Spring程序。</li></ul></li><li>方便集成各种优秀框架<ul><li>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架(如：Struts、Hibernate、MyBatis等)的直接支持。</li></ul></li><li>降低JavaEE API的使用难度<ul><li>Spring对JavaEE开发中非常难用的一些API(JDBC、JavaMail、远程调用等)，都提供了封装，使这些API应用难度大大降低。</li></ul></li></ul><h3 id="1-2-Spring体系结构"><a href="#1-2-Spring体系结构" class="headerlink" title="1.2 Spring体系结构"></a>1.2 Spring体系结构</h3><p>Spring框架是一个分层架构，它包含一系列的功能要素并被分为大约<strong>20个模块</strong>。这些模块分为Core Container、Data Access/Integration、Web、AOP（Aspect Oriented Programming）、Instrumentation和测试部分。如下图所示：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/05/Spring-1565010640149.jpg" alt="Spring"></p><h2 id="2-Spring简单入门"><a href="#2-Spring简单入门" class="headerlink" title="2. Spring简单入门"></a>2. Spring简单入门</h2><p>基本流程：</p><ol><li>下载Spring开发包</li><li>导入Spring核心jar包</li><li>编写Spring核心配置文件</li><li>在程序中读取Spring配置文件，通过Spring框架获取Bean，完成相应操作。</li></ol><h3 id="2-1-下载Spring开发包"><a href="#2-1-下载Spring开发包" class="headerlink" title="2.1 下载Spring开发包"></a>2.1 下载Spring开发包</h3><p>Spring<a href="https://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">官方下载地址</a></p><p>下载后解压，目录结构如下：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/05/SpringDir-1565010658795.jpg" alt="SpringDir"></p><h3 id="2-2-导入Spring核心jar包到项目中"><a href="#2-2-导入Spring核心jar包到项目中" class="headerlink" title="2.2 导入Spring核心jar包到项目中"></a>2.2 导入Spring核心jar包到项目中</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/05/spring_jar-1565010729837.jpg" alt="spring_jar"></p><ul><li><code>spring-core-3.2.0.RELEASE.jar</code><ul><li>包含Spring框架基本的核心工具类，Spring其他组件都要使用到这个包里的类，是其他组件的基本核心。</li></ul></li><li><code>spring-beans-3.2.0.RELEASE.jar</code><ul><li>所有应用都要用到的，它包含访问配置文件、创建和管理bean，以及进行IOC/DI操作相关的所有类</li></ul></li><li><code>spring-context-3.2.0.RELEASE.jar</code><ul><li>Spring提供在基础IOC功能上的扩展功能，此外还提供许多企业级服务的支持，如邮件服务、任务调度、JNDI定位、EJB集成、远程访问、缓存以及各种视图层框架的封装等。</li></ul></li><li><code>spring-expression-3.2.0.RELEASE.jar</code><ul><li>Spring表达式语言</li></ul></li><li><code>commons-logging-1.2.jar</code><ul><li>第三方的主要用于处理日志</li></ul></li></ul><blockquote><p>注意导入时，不要导入带source的源文件。</p></blockquote><h3 id="2-3-编写Spring核心配置文件"><a href="#2-3-编写Spring核心配置文件" class="headerlink" title="2.3 编写Spring核心配置文件"></a>2.3 编写Spring核心配置文件</h3><h4 id="2-3-1-创建测试方法"><a href="#2-3-1-创建测试方法" class="headerlink" title="2.3.1 创建测试方法"></a>2.3.1 创建测试方法</h4><ul><li>在src下创建一个service文件夹，里面创建UserService及其对应实现类，实现add方法，直接打印一句话。</li></ul><pre><code class="java">public class UserServiceImpl implements UserService{    @Override    public void add() {        System.out.println("创建用户...");    }}</code></pre><ul><li>创建测试方法，调用add方法。</li></ul><pre><code class="java">public class UserServiceTest {    @Test    public void test1(){        UserService us = new UserServiceImpl();        us.add();    }}</code></pre><h4 id="2-3-2-使用Spring-IOC控制反转创建实例"><a href="#2-3-2-使用Spring-IOC控制反转创建实例" class="headerlink" title="2.3.2 使用Spring IOC控制反转创建实例"></a>2.3.2 使用<code>Spring IOC</code>控制反转创建实例</h4><ul><li>编写配置文件<code>beans.xml</code>，xsd约束文件可以在<code>/spring-framework-3.2.0.RC2-docs/reference/html/xsd-config.html</code>中查看</li></ul><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;!-- 配置一个bean --&gt;    &lt;bean id="userService" class="com.zero.service.UserServiceImpl"&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><h3 id="2-4-在程序中读取Spring配置文件，通过Spring框架获取Bean，完成相应操作。"><a href="#2-4-在程序中读取Spring配置文件，通过Spring框架获取Bean，完成相应操作。" class="headerlink" title="2.4 在程序中读取Spring配置文件，通过Spring框架获取Bean，完成相应操作。"></a>2.4 在程序中读取Spring配置文件，通过Spring框架获取Bean，完成相应操作。</h3><pre><code class="java">public class UserServiceTest {    @Test    public void test1(){        // 不使用spring的方式，自己创建对象        //        UserService us = new UserServiceImpl();        //        us.add();        // 使用spring容器方式获取UserService        // 1. 加载beans.xml 这个spring的配置文件，内部就会创建对象        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");        // 2. 获取对象        UserService userService1 = (UserService) context.getBean("userService");        userService1.add();        System.out.println(userService1); // com.zero.service.UserServiceImpl@5f058f00        UserService userService2 = (UserService) context.getBean("userService");        System.out.println(userService2); // com.zero.service.UserServiceImpl@5f058f00    }}</code></pre><h3 id="2-5-IOC"><a href="#2-5-IOC" class="headerlink" title="2.5 IOC"></a>2.5 IOC</h3><p>IOC(Inverse of Control) 反转控制的概念，就是将原本在程序中手动创建对象的控制权，交由Spring框架管理。简单的说，就是创建对象控制权被反转到了Spring框架。</p><h3 id="2-6-DI解释"><a href="#2-6-DI解释" class="headerlink" title="2.6 DI解释"></a>2.6 DI解释</h3><ul><li>Dependency Injection 依赖输入，在Spring框架负责创建Bean对象时，动态的将依赖对象注入到Bean组件。</li></ul><p>例：在UserServiceImpl中提供一个get/set的name方法，在beans.xml中提供property去注入。</p><pre><code class="java">public class UserServiceImpl implements UserService{    private String name;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public void add() {        System.out.println("创建用户..."+name);    }}</code></pre><p>配置文件中使用依赖注入：</p><pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;    &lt;!-- 配置一个bean --&gt;    &lt;bean id="userService" class="com.zero.service.UserServiceImpl"&gt;        &lt;!-- 使用DI依赖注入数据, 调用属性的set方法--&gt;        &lt;property name="name" value="zhangsan"&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSI7层模型和计算机网络相关知识</title>
      <link href="/2019/08/02/interview/ji-suan-ji-wang-luo-mian-shi-he-xin/"/>
      <url>/2019/08/02/interview/ji-suan-ji-wang-luo-mian-shi-he-xin/</url>
      
        <content type="html"><![CDATA[<h2 id="1-OSI开放式互联参考模型"><a href="#1-OSI开放式互联参考模型" class="headerlink" title="1. OSI开放式互联参考模型"></a>1. OSI开放式互联参考模型</h2><p>OSI 七层模型通过七个层次化的结构模型使不同的系统不同的网络之间实现可靠的通讯，因此其最主要的功能就是帮助<strong>不同类型的主机实现数据传输 </strong>。</p><a id="more"></a><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/02/OSI-1564755170924.png" alt="OSI"></p><p>一个设备在哪一层，关键看它工作时利用哪一层的数据头部信息。举例来说：</p><ul><li>物理层：网卡、网线、集线器、中继器、调制解调器</li><li>数据链路层：网桥、交换机</li><li>网络层：路由器</li></ul><p><strong>网关</strong>工作在第四层传输层及其以上。<strong>集线器</strong>是物理层设备，采用广播的形式来传输信息。<strong>交换机</strong>就是用来进行报文交换的及其，多为链路层设备(二层交换机)，能够进行地址学习，采用存储转发的形式来交换报文。<strong>路由器</strong>的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。选择通畅快捷的近路，能大大提高通信速度，减轻网络系统通信负荷，节约网络系统资源，提高网络系统畅通率。</p><h3 id="1-1-物理层"><a href="#1-1-物理层" class="headerlink" title="1.1 物理层"></a>1.1 物理层</h3><p>在OSI参考模型中，物理层（Physical Layer）是参考模型的最低层，也是OSI模型的第一层。</p><ul><li>主要功能：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。</li></ul><p>物理层的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p><h3 id="1-2-数据链路层"><a href="#1-2-数据链路层" class="headerlink" title="1.2 数据链路层"></a>1.2 数据链路层</h3><p>数据链路层（Data Link Layer）是OSI模型的第二层，负责建立和管理节点间的链路。</p><ul><li>主要功能：通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</li></ul><p>在计算机网络中由于各种干扰的存在，物理链路是不可靠的。因此，这一层的主要功能是在物理层提供的比特流的基础上，通过差错控制、流量控制方法，使有差错的物理线路变为无差错的数据链路，即提供可靠的通过物理介质传输数据的方法。</p><p>该层通常又被分为介质访问控制（MAC）和逻辑链路控制（LLC）两个子层。</p><ul><li>MAC子层的主要任务是解决共享型网络中多用户对信道竞争的问题，完成网络介质的访问控制</li><li>LLC子层的主要任务是建立和维护网络连接，执行差错校验、流量控制和链路控制。</li></ul><p>数据链路层的具体工作是接收来自物理层的位流形式的数据，并封装成帧，传送到上一层；同样，也将来自上层的数据帧，拆装为位流形式的数据转发到物理层；并且，还负责处理接收端发回的确认帧的信息，以便提供可靠的数据传输。</p><h3 id="1-3-网络层"><a href="#1-3-网络层" class="headerlink" title="1.3 网络层"></a>1.3 网络层</h3><p>网络层（Network Layer）是OSI模型的第三层，它是OSI参考模型中最复杂的一层，也是通信子网的最高一层。它在下两层的基础上向资源子网提供服务。</p><p>其主要任务是：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。该层控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。具体地说，数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。<br>一般地，数据链路层是解决同一网络内节点之间的通信，而网络层主要解决不同子网间的通信。例如在广域网之间通信时，必然会遇到路由（即两节点间可能有多条路径）选择问题。 </p><p>在实现网络层功能时，需要解决的主要问题如下：</p><ul><li>寻址：数据链路层中使用的物理地址（如MAC地址）仅解决网络内部的寻址问题。在不同子网之间通信时，为了识别和找到网络中的设备，每一子网中的设备都会被分配一个唯一的地址。由于各子网使用的物理技术可能不同，因此这个地址应当是逻辑地址（如IP地址）。</li><li>交换：规定不同的信息交换方式。常见的交换技术有：线路交换技术和存储转发技术，后者又包括报文交换技术和分组交换技术。</li><li>路由算法：当源节点和目的节点之间存在多条路径时，本层可以根据路由算法，通过网络为数据分组选择最佳路径，并将信息从最合适的路径由发送端传送到接收端。</li><li>连接服务：与数据链路层流量控制不同的是，前者控制的是网络相邻节点间的流量，后者控制的是从源节点到目的节点间的流量。其目的在于防止阻塞，并进行差错检测。</li></ul><h3 id="1-4-传输层"><a href="#1-4-传输层" class="headerlink" title="1.4 传输层"></a>1.4 传输层</h3><p>OSI下3层的主要任务是数据通信，上3层的任务是数据处理。而传输层（Transport Layer）是OSI模型的第4层。因此该层是通信子网和资源子网的接口和桥梁，起到承上启下的作用。</p><ul><li>主要任务是：向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输。传输层的作用是向高层屏蔽下层数据通信的细节，即向用户透明地传送报文。</li><li>该层常见的协议：TCP/IP中的TCP协议、Novell网络中的SPX协议和微软的NetBIOS/NetBEUI协议。</li></ul><p>传输层提供会话层和网络层之间的传输服务，这种服务从会话层获得数据，并在必要时，对数据进行分割。然后，传输层将数据传递到网络层，并确保数据能正确无误地传送到网络层。</p><p>因此，传输层负责提供两节点之间数据的可靠传送，当两节点的联系确定之后，传输层则负责监督工作。综上，传输层的主要功能如下：</p><ul><li>传输连接管理：提供建立、维护和拆除传输连接的功能。传输层在网络层的基础上为高层提供“面向连接”和“面向无接连”的两种服务。</li><li>处理传输差错：提供可靠的“面向连接”和不太可靠的“面向无连接”的数据传输服务、差错控制和流量控制。在提供“面向连接”服务时，通过这一层传输的数据将由目标设备确认，如果在指定的时间内未收到确认信息，数据将被重发。</li><li>监控服务质量。</li></ul><h3 id="1-5-会话层"><a href="#1-5-会话层" class="headerlink" title="1.5 会话层"></a>1.5 会话层</h3><p>会话层（Session Layer）是OSI模型的第5层，是用户应用程序和网络之间的接口，主要任务是：<strong>向两个实体的表示层提供建立和使用连接的方法</strong>。将不同实体之间的表示层的连接称为会话。因此会话层的任务就是组织和协调两个会话进程之间的通信，并对数据交换进行管理。<br>用户可以按照半双工、单工和全双工的方式建立会话。当建立会话时，用户必须提供他们想要连接的远程地址。而这些地址与MAC（介质访问控制子层）地址或网络层的逻辑地址不同，它们是为用户专门设计的，更便于用户记忆。域名（DN）就是一种网络上使用的远程地址例如：<code>www.baidu.com</code> 就是一个域名。</p><p>会话层的具体功能如下：</p><ul><li>会话管理：允许用户在两个实体设备之间建立、维持和终止会话，并支持它们之间的数据交换。例如提供单方向会话或双向同时会话，并管理会话中的发送顺序，以及会话所占用时间的长短。</li><li>会话流量控制：提供会话流量控制和交叉会话功能。</li><li>寻址：使用远程地址建立会话连接。</li><li>出错控制：从逻辑上讲会话层主要负责数据交换的建立、保持和终止，但实际的工作却是接收来自传输层的数据，并负责纠正错误。会话控制和远程过程调用均属于这一层的功能。但应注意，此层检查的错误不是通信介质的错误，而是磁盘空间、打印机缺纸等类型的高级错误。</li></ul><h3 id="1-6-表示层"><a href="#1-6-表示层" class="headerlink" title="1.6 表示层"></a>1.6 表示层</h3><p>表示层（Presentation Layer）是OSI模型的第六层，它对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层。其主要功能是“<strong>处理用户信息的表示问题，如编码、数据格式转换和加密解密</strong>”等。</p><p>表示层的具体功能如下：</p><ul><li>数据格式处理：协商和建立数据交换的格式，解决各应用程序之间在数据格式表示上的差异。</li><li>数据的编码：处理字符集和数字的转换。例如由于用户程序中的数据类型（整型或实型、有符号或无符号等）、用户标识等都可以有不同的表示方式，因此，在设备之间需要具有在不同字符集或格式之间转换的功能。</li><li>压缩和解压缩：为了减少数据的传输量，这一层还负责数据的压缩与恢复。</li><li>数据的加密和解密：可以提高网络的安全性。</li></ul><h3 id="1-7-应用层"><a href="#1-7-应用层" class="headerlink" title="1.7 应用层"></a>1.7 应用层</h3><p>应用层（Application Layer）是OSI参考模型的最高层，它是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。它在其他6层工作的基础上，<strong>负责完成网络中应用程序与网络操作系统之间的联系，建立与结束使用者之间的联系，并完成网络用户提出的各种网络服务及应用所需的监督、管理和服务等各种协议</strong>。</p><p>此外，该层还负责协调各个应用程序间的工作。<br>应用层为用户提供的服务和协议有：文件服务、目录服务、文件传输服务（FTP）、远程登录服务（Telnet）、电子邮件服务（E-mail）、打印服务、安全服务、网络管理服务、数据库服务等。上述的各种网络服务由该层的不同应用协议和程序完成，不同的网络操作系统之间在功能、界面、实现技术、对硬件的支持、安全可靠性以及具有的各种应用程序接口等各个方面的差异是很大的。</p><p>应用层的主要功能如下：</p><ul><li>用户接口：应用层是用户与网络，以及应用程序与网络间的直接接口，使得用户能够与网络进行交互式联系。</li><li>实现各种服务：该层具有的各种应用程序可以完成和实现用户请求的各种服务。</li></ul><h3 id="1-8-OSI7层模型小结"><a href="#1-8-OSI7层模型小结" class="headerlink" title="1.8 OSI7层模型小结"></a>1.8 OSI7层模型小结</h3><p>由于OSI是一个理想的模型，因此一般网络系统只涉及其中的几层，很少有系统能够具有所有的7层，并完全遵循它的规定。</p><p>在7层模型中，每一层都提供一个特殊的网络功能。从网络功能的角度观察：下面4层（物理层、数据链路层、网络层和传输层）主要提供数据传输和交换功能，即以节点到节点之间的通信为主；第4层作为上下两部分的桥梁，是整个网络体系结构中最关键的部分；而上3层（会话层、表示层、应用层）则以提供用户与应用程序之间的信息和数据处理功能为主。</p><blockquote><p>简言之：下4层主要完成通信子网的功能，上3层主要完成资源子网的功能。</p></blockquote><h3 id="1-9-TCP-IP分层模型"><a href="#1-9-TCP-IP分层模型" class="headerlink" title="1.9 TCP/IP分层模型"></a>1.9 TCP/IP分层模型</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/02/TCP_IP-1564755221704.jpg" alt="TCP_IP"></p><p>TCP/IP分层模型的四个协议层分别完成以下的功能：</p><ul><li><p>第一层，链路层：包括用于协作IP数据在已有网络介质上传输的协议。实际上TCP/IP标准并不定义与ISO数据链路层和物理层相对应的功能。相反，它定义像地址解析协议(Address Resolution Protocol,ARP)这样的协议，提供TCP/IP协议的数据结构和实际物理硬件之间的接口。</p></li><li><p>第二层，网络层：对应于OSI七层参考模型的网络层。本层包含IP协议、RIP协议(Routing Information Protocol，路由信息协议)，负责数据的包装、寻址和路由。同时还包含网间控制报文协议(Internet Control Message Protocol,ICMP)用来提供网络诊断信息。</p></li><li>第三层，传输层：对应于OSI七层参考模型的传输层，它提供两种端到端的通信服务。其中TCP协议(Transmission Control Protocol)提供可靠的数据流运输服务，UDP协议(Use Datagram Protocol)提供不可靠的用户数据报服务。</li><li>第四层，应用层：对应于OSI七层参考模型的应用层和表达层。因特网的应用层协议包括Finger、Whois、FTP(文件传输协议)、Gopher、HTTP(超文本传输协议)、Telent(远程终端协议)、SMTP(简单邮件传送协议)、IRC(因特网中继会话)、NNTP（网络新闻传输协议）等。</li></ul><h2 id="2-三次握手和四次挥手"><a href="#2-三次握手和四次挥手" class="headerlink" title="2. 三次握手和四次挥手"></a>2. 三次握手和四次挥手</h2><ul><li>TCP概述：</li></ul><p>TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种端点我们叫作套接字(socket)，它的定义为端口号拼接到IP地址即构成了套接字。例如，假设IP地址为<code>192.3.4.15</code>，端口号为80，那么得到的套接字为<code>192.3.4.15:80</code>。</p><h3 id="2-1-TCP的三次握手"><a href="#2-1-TCP的三次握手" class="headerlink" title="2.1 TCP的三次握手"></a>2.1 TCP的三次握手</h3><p>所谓三次握手，即建立TCP连接，就是指建立一个TCP连接时，需要客户端和服务端总共发送3个包以确认连接的建立。</p><h4 id="2-1-1-传输控制协议TCP简介"><a href="#2-1-1-传输控制协议TCP简介" class="headerlink" title="2.1.1 传输控制协议TCP简介"></a>2.1.1 传输控制协议TCP简介</h4><ul><li>面向连接的、可靠的、基于字节流的传输层通信协议</li><li>将应用层的数据流分割成报文段并发送给目标节点的TCP层</li><li>数据包都有序号，对方收到则发送ACK确认，未收到则重传</li><li>使用<strong>校验和</strong>来校验数据在传输过程中是否有误</li></ul><h4 id="2-1-2-TCP报文结构详解"><a href="#2-1-2-TCP报文结构详解" class="headerlink" title="2.1.2 TCP报文结构详解"></a>2.1.2 TCP报文结构详解</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/02/TCP-1564755257344.jpg" alt="TCP"></p><p>TCP报文由首部和数据两部分组成。首部一般由20-60字节(Byte)构成，长度可变。其中前20B格式固定，后40B为可选。</p><p>因为，TCP报文还得传给下层网络层，封装成IP包，而一个IP包最大长度为65535，同时IP包首部也包含最少20B，所以一个IP包或TCP包可以包含的数据部分最多为65535-20-20=65495B。</p><p>TCP报文中数据部分是可选的，即TCP报文可以不包含数据（同理IP包也可以不包含数据）。不含数据的TCP报文通常是一些确认和控制信息类的报文，如TCP建立连接时的三次握手和TCP终止时的四次挥手等。</p><p>参数详解：</p><ol><li>源端口号（Source Port）：长度为16位占2个字节，指明发送数据的进程。</li><li>目的端口号（Destination Port）：长度为16位占2个字节，指明目的主机接收数据的进程。</li><li>序号（Sequence Number）：也称为序列号，长度为32位占4个字节。<strong>TCP连接中传送的字节流中的每个字节都按顺序编号</strong>。例如，一段报文的序号字段是301，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始。</li><li>确认号（Acknowledgement Number）：长度为32位占4个字节，<strong>是期望收到对方下一个报文的第一个数据字节的序号</strong>。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，<strong>这表明B正确的收到了A发送的到序号700为止的数据</strong>。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701。确认号只有在ACK标志为1时才有效。</li><li>数据偏移：占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远。</li><li>首部长度：长度为4位，用于表示TCP报文首部的长度。用4位(bit)表示，十进制值就是[0,15]，一个TCP报文前20个字节是必有的，后40个字节根据情况可有可无。如果TCP报文首部是20个字节，则该位应是20/4=5。</li><li>保留位（Reserved）：长度为6位，必须是0，它是为将来定义新用途保留的。</li><li>标志（Code Bits）：长度为6位，在TCP报文中不管是挥手还是传数据等，这6位标志都很重要。6位从左到右依次为：<ul><li>URG：紧急标志位，当URG=1时，表明紧急指针有效。告诉系统此报文段中有紧急数据。</li><li>ACK：确认标志位，仅当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置为1。</li><li>PSH：推标志位，当两个应用程序进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时就可以将PSH=1。</li><li>RST：复位标志，用于重建一个已经混乱的连接。当RST=1时，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接。</li><li>SYN：同步标志，在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1,ACK=1。</li><li>FIN：结束标志，带该标志位的数据包用于结束一个TCP会话。当FIN=1,时，表明此报文的发送方数据已经发送完毕，并且要求释放。</li></ul></li><li>窗口大小（Window Size）：长度为16位占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接收。</li><li>校验和（Checksum）：长度为16位占2字节，该字段覆盖整个TCP报文端，是个强制性的字段，是由发送端计算和存储，到接收端后，由接收端进行验证。主要检验首部和数据这两部分。</li><li>紧急指针（Urgent Pointer）：长度为16位占2字节，指出本报文段中的紧急数据的字节数，该字段在URG标志置位时有效。</li><li>选型（Options）：长度可变，定义一些其他的可选参数。通常包含：最长报文大小（Maximum Segment Size，MSS）、窗口扩大选项、时间戳选项、选择性确认（Selective ACKnowlegement，SACK）等。</li><li>数据：TCP 报文段中的数据部分是可选的。</li></ol><blockquote><ul><li>单工数据传输只支持数据在一个方向上传输；</li><li>半双工数据传输允许数据在两个方向上传输，但在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；</li><li>全双工数据通信允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都具有独立的接收和发送能力。</li></ul></blockquote><h4 id="2-1-3-TCP三次握手流程图"><a href="#2-1-3-TCP三次握手流程图" class="headerlink" title="2.1.3 TCP三次握手流程图"></a>2.1.3 TCP三次握手流程图</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/02/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B-1564755271685.gif" alt="三次握手"></p><p><strong>整个流程为</strong>：</p><ol><li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态。</li><li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这时报文首部中的同步位SYN=1，同时选择一个初始序列号Seq=x，此时TCP客户端进程进入了SYN-SENT(同步已发送)状态。TCP规定，SYN报文段(SYN=1的报文段)不能携带数据，但需要消耗掉一个序号。</li><li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该ACK=1,SYN=1,确认号是ack=x+1，同时也要为自己初始化一个序列号Seq=y。此时，TCP服务器进程进入了SYN-RCVD(同步收到)状态。这个报文也不能携带数据，但是同样要消耗一个序号。</li><li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号Seq=x+1。此时，TCP连接建立，客户端进入ESTABLISHED(已建立连接)状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</li><li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</li></ol><blockquote><p>TCB：传输控制块，它是协议栈的核心数据结构，一个套接字在TCP、IP层的代表就是一个传输控制块，它包含了一个套接字所需要的所有信息。</p></blockquote><p><a href="https://www.cnblogs.com/lipengfei159263/p/9745986.html" target="_blank" rel="noopener">内容详见文章</a></p><p><strong>流程小结</strong>：</p><p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。</p><p>第一次握手：建立连接时，客户端发送SYN包{syn=x}到服务器，并进入SYN_SEND(同步已发送)状态，等待服务器确认。</p><p>第二次握手：服务器收到SYN包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包(syn=y)，即SYN+ACK包，此时服务器进入SYN_RECV(同步收到)状态。</p><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK{ack=y+1}，此包发送完毕，客户端和服务器进入ESTABLISHED（已建立连接）状态，完成三次握手。</p><h4 id="2-1-4-SYN攻击"><a href="#2-1-4-SYN攻击" class="headerlink" title="2.1.4 SYN攻击"></a>2.1.4 SYN攻击</h4><p>在三次握手过程中，服务端发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接，此时服务端处于SYN-RCVD(同步收到)状态。当收到ACK后，服务端才会进入ESTABLISHED（已建立连接）状态。SYN攻击就是客户端在短时间内伪造大量不存在的IP地址，并向服务端不断发送SYN包，服务端回复确认包，并等待客户端的确认，由于源地址IP是不存在的，因此，服务端需要不断重发直至SYN超时。这些伪造的SYN包将占用未连接队列，导致正常的SYN请求因队列满而被丢弃，从而引起网络阻塞甚至系统瘫痪。SYN攻击是一种典型的DDOS攻击，检测SYN攻击的方式非常简单，即当服务端上有大量半连接状态且源IP地址是随机的，则可以断定遭到SYN攻击了。使用如下命令可以让其现行：<code>netstat -nap | grep SYN_RECV</code></p><h3 id="2-2-TCP的四次挥手"><a href="#2-2-TCP的四次挥手" class="headerlink" title="2.2  TCP的四次挥手"></a>2.2  TCP的四次挥手</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/02/TCP_%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B-1564755288068.gif" alt="四次挥手"></p><blockquote><p>数据传输完毕后，双方都可释放连接。最开始时，客户端和服务端都是处于ESTABLISHED状态，然后客户端主动关闭，服务端被动关闭。</p></blockquote><p><strong>具体流程</strong>：</p><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1）。此时，客户端进入FIN-WAIT-1（终止等待1）状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务端收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v。此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<strong>TCP服务器通知高层应用进程，客户端要释放向服务器的通信连接了，这时处于半关闭状态，即客户端已经无数据要发送了，但服务器若发送数据，客户端依然要接受。</strong>这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li><li>客户端收到服务器的确认请求后，此时，客户端进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1。由于处在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，那么此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1。此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2MSL（最长报文段寿命）的时间后，当客户端撤销响应的TCB后，才会进入CLOSED状态。</li><li>服务器只要收到了客户端发出的确认，会立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li></ol><p><strong>挥手小结</strong>：</p><p>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态；</p><p>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态，Client进入FIN-WAIT-2状态；</p><p>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态；</p><p>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，Client在经过2MSL后也会进入CLOSED状态，完成四次挥手；</p><h2 id="3-计算机网络相关面试题"><a href="#3-计算机网络相关面试题" class="headerlink" title="3. 计算机网络相关面试题"></a>3. 计算机网络相关面试题</h2><h4 id="3-1-为什么TCP客户端最后还要发送一次确认呢？为什么需要三次握手才能建立起连接？"><a href="#3-1-为什么TCP客户端最后还要发送一次确认呢？为什么需要三次握手才能建立起连接？" class="headerlink" title="3.1 为什么TCP客户端最后还要发送一次确认呢？为什么需要三次握手才能建立起连接？"></a>3.1 为什么TCP客户端最后还要发送一次确认呢？为什么需要三次握手才能建立起连接？</h4><p>主要为了防止已经失效的连接请求报文突然又传送到了服务端，因而产生错误。</p><p>如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</p><p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p><h4 id="3-2-为什么在四次挥手时客户端最后还要等待2MSL？"><a href="#3-2-为什么在四次挥手时客户端最后还要等待2MSL？" class="headerlink" title="3.2 为什么在四次挥手时客户端最后还要等待2MSL？"></a>3.2 为什么在四次挥手时客户端最后还要等待2MSL？</h4><blockquote><p>MSL（Maximum Segment Lifetime）最长报文段寿命，TCP允许不同的实现可以设置不同的MSL值。</p></blockquote><p>第一：<strong>保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失</strong>。站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p><p>第二：<strong>防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中</strong>。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p><h4 id="3-3-为什么建立连接是三次握手，关闭连接却是四次挥手呢？"><a href="#3-3-为什么建立连接是三次握手，关闭连接却是四次挥手呢？" class="headerlink" title="3.3 为什么建立连接是三次握手，关闭连接却是四次挥手呢？"></a>3.3 为什么建立连接是三次握手，关闭连接却是四次挥手呢？</h4><p>建立连接时，服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。</p><p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接。因此，己方ACK和FIN一般都会分开发送，从而导致多一次数据包传递。</p><h4 id="3-4-如果已经建立了连接，但客户端突然出现故障了怎么办？"><a href="#3-4-如果已经建立了连接，但客户端突然出现故障了怎么办？" class="headerlink" title="3.4 如果已经建立了连接，但客户端突然出现故障了怎么办？"></a>3.4 如果已经建立了连接，但客户端突然出现故障了怎么办？</h4><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h4 id="3-5-TCP和UDP的区别"><a href="#3-5-TCP和UDP的区别" class="headerlink" title="3.5 TCP和UDP的区别"></a>3.5 TCP和UDP的区别</h4><table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>面向连接</td><td>无连接</td></tr><tr><td>可靠性高，利用握手确认和重传机制保证数据不丢失</td><td>可靠性不高，可能会丢失数据</td></tr><tr><td>有序性：利用序列号保证消息包的顺序交互</td><td>无有序性</td></tr><tr><td>需要创建连接，保证消息的可靠性和有序性，导致速度较慢</td><td>无需考虑连接和可靠，速度较快</td></tr><tr><td>消息头20字节，重量级</td><td>消息头只需8字节，轻量级</td></tr></tbody></table><h4 id="3-6-在浏览器地址栏键入URL，按下回车之后经历的流程"><a href="#3-6-在浏览器地址栏键入URL，按下回车之后经历的流程" class="headerlink" title="3.6 在浏览器地址栏键入URL，按下回车之后经历的流程"></a>3.6 在浏览器地址栏键入URL，按下回车之后经历的流程</h4><ol><li><strong>DNS解析</strong>：首先浏览器会依据URL逐层查询DNS服务器缓存，解析URL中的域名所对应的IP地址。DNS缓存从近到远依次是：浏览器缓存→系统缓存→路由器缓存→IPS服务器缓存→根域名服务器缓存→顶级域名服务器缓存。找到IP则直接返回，不查询后续缓存。</li><li><strong>TCP连接</strong>：根据IP地址和默认端口(80)来和服务器建立TCP连接(三次握手)。</li><li><strong>发送HTTP请求</strong>：浏览器发出读取文件的HTTP请求，该请求将发送给服务器。</li><li><strong>服务器处理请求并返回HTTP报文</strong>：服务器对浏览器请求作出响应，并把对应的带有HTML文本的HTTP响应报文发送给浏览器。</li><li><strong>浏览器解析渲染页面</strong>：浏览器接收到HTML，并在显示窗口内渲染它。</li><li><strong>连接结束</strong>：浏览器释放TCP连接(四次挥手)。</li></ol><h4 id="3-7-说说常见的HTTP状态码"><a href="#3-7-说说常见的HTTP状态码" class="headerlink" title="3.7 说说常见的HTTP状态码"></a>3.7 说说常见的HTTP状态码</h4><ul><li><p><strong>200 OK：</strong>正常返回信息</p></li><li><p><strong>400 Bad Request：</strong>客户端请求有语法错误，不能被服务器所理解</p></li><li><p><strong>401 Unauthorized：</strong>请求未经授权，这个状态码必须和<code>WWW-Authenticate</code>报头域一起使用</p></li><li><p><strong>403 Forbidden：</strong>服务器收到请求，但是拒绝提供服务</p></li><li><p><strong>404 Not Found：</strong>请求资源不存在，eg：输入了错误的URL</p></li><li><p><strong>500 Internal Server Error：</strong>服务器发生不可预期的错误</p></li><li><p><strong>501 Server Unavailable：</strong>服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p></li></ul><h4 id="3-8-GET请求和POST请求的区别"><a href="#3-8-GET请求和POST请求的区别" class="headerlink" title="3.8 GET请求和POST请求的区别"></a>3.8 GET请求和POST请求的区别</h4><p>从以下几个层面来解答</p><ul><li>Http报文层面：GET将请求信息放在URL后面，请求信息与URL以？隔开，请求信息的格式为键值对；POST将请求信息放在报文体中，获取请求信息必须解析报文，因此安全性较GET要高一些。 </li><li>长度方面：GET请求信息放在URL后面，浏览器会限制URL长度，故GET请求长度有限；POST请求消息放在报文体中，所以长度没有限制。</li><li>数据库层面：GET符合幂等性(对数据库的一次操作和多次操作的结果是一致的)和安全性(对数据库的操作没有改变数据库中的数据)，POST不符合。</li><li>其他层面：GET可以被缓存、被存储，可以保存在浏览器的浏览记录中，而POST不行。</li></ul><h4 id="3-9-Cookie和Session的区别"><a href="#3-9-Cookie和Session的区别" class="headerlink" title="3.9 Cookie和Session的区别"></a>3.9 Cookie和Session的区别</h4><h5 id="3-9-1-Cookie简介"><a href="#3-9-1-Cookie简介" class="headerlink" title="3.9.1 Cookie简介"></a>3.9.1 Cookie简介</h5><ul><li>是由服务器发送给客户端的特殊信息，以文本的形式存放在客户端</li><li>客户端再次请求时，会把Cookie放在请求头中回发</li><li>服务器接收到后，会解析Cookie生成与客户端相对应的内容(记住密码功能)</li><li>Cookie的设置及发送过程如下图：</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/08/02/cookie-1564755310096.jpg" alt="cookie"></p><h5 id="3-9-2-Session简介"><a href="#3-9-2-Session简介" class="headerlink" title="3.9.2 Session简介"></a>3.9.2 Session简介</h5><ul><li>服务器端的机制，在服务器上保存的信息</li><li>解析客户端请求并操作<code>session id</code>，按需保存状态信息。当服务器需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否包含的session标识(<code>即session id</code>)，如果已包含<code>session id</code>，则说明以前已经为此客户端创建过session了，服务器就根据这个<code>session id</code>把session检索出来使用。如果检索不到，会新建一个。如果客户端不包含<code>session id</code>，则会为此客户端创建一个session，并创建一个与此session相关的<code>session id</code>，这个id会在本次请求中回发给客户端进行保存。</li></ul><h5 id="3-9-3-三点主要区别"><a href="#3-9-3-三点主要区别" class="headerlink" title="3.9.3 三点主要区别"></a>3.9.3 三点主要区别</h5><ul><li><p>Cookie数据存放在客户的浏览器上，Session数据放在服务器上</p></li><li><p>Session相对于Cookie更安全</p></li><li><p>因Session存放在服务器端，大量存放会造成服务器负担，如考虑到减轻服务器负担，应当使用Cookie</p></li></ul><h4 id="3-10-HTTP和HTTPS的区别"><a href="#3-10-HTTP和HTTPS的区别" class="headerlink" title="3.10 HTTP和HTTPS的区别"></a>3.10 HTTP和HTTPS的区别</h4><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer 或 Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的HTTP传输协议。</p><ul><li>SSL（Security Sockets Layer，安全套接层）<ul><li>为网络通信提供安全及数据完整性的一种安全协议</li><li>是操作系统对外的API，SSL3.0后更名为TLS</li><li>采用身份验证和数据加密保证网络通信的安全和数据的完整性</li></ul></li></ul><h5 id="3-10-1-主要区别如下"><a href="#3-10-1-主要区别如下" class="headerlink" title="3.10.1 主要区别如下"></a>3.10.1 主要区别如下</h5><ul><li>HTTPS需到CA申请证书，HTTP不需要</li><li>HTTPS密文传输，HTTP明文传输</li><li>连接方式不同，HTTPS默认使用443端口，HTTP使用80端口</li><li>HTTPS=HTTP+SSL加密+身份认证+完整性保护，较HTTP安全</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;travel项目开发日志&#39;</title>
      <link href="/2019/07/29/javaweb/travel-xiang-mu-kai-fa-ri-zhi/"/>
      <url>/2019/07/29/javaweb/travel-xiang-mu-kai-fa-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="1-项目简介"><a href="#1-项目简介" class="headerlink" title="1. 项目简介"></a>1. 项目简介</h3><p>黑马旅游网是一个前后端分离的Web项目，后端采用了MVC设计模式。前端通过<code>Ajax</code>来请求后端服务器，获取<code>json</code>数据，然后填充到前端页面，部分不经常变动数据(如导航栏数据)，使用到了<code>redis</code>来做数据缓存以减少对数据库的访问。</p><a id="more"></a><h3 id="2-项目进度"><a href="#2-项目进度" class="headerlink" title="2. 项目进度"></a>2. 项目进度</h3><p>截止7月28日，目前已完成的模块为：</p><ol><li>登录注册</li><li>国内游功能及其内附加功能，如查看详情，收藏等。</li><li>线路搜索功能</li></ol><p>待完成功能：</p><ol><li>首页数据展示功能，包括人气旅游，最新旅游等。</li><li>导航栏功能的添加</li><li>我的收藏功能</li><li>热门推荐</li><li>前端部分样式修改</li><li>记住密码功能</li><li>收藏排行榜</li><li>整体细节方面，如登录后登录按钮消失等。</li></ol><h3 id="3-项目展示"><a href="#3-项目展示" class="headerlink" title="3. 项目展示"></a>3. 项目展示</h3><p><a href="http://www.luoxiansen.cn/travel/index.html" target="_blank" rel="noopener">旅游网项目</a></p><blockquote><p>无法访问多刷新几次试试</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅游网项目03</title>
      <link href="/2019/07/27/javaweb/lu-you-wang-xiang-mu-03/"/>
      <url>/2019/07/27/javaweb/lu-you-wang-xiang-mu-03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今日内容为旅游网项目的旅游线路名称查询，详情页展示，线路收藏功能。</p><a id="more"></a><h2 id="1-旅游线路名称查询功能"><a href="#1-旅游线路名称查询功能" class="headerlink" title="1. 旅游线路名称查询功能"></a>1. 旅游线路名称查询功能</h2><h3 id="1-1-查询参数的传递"><a href="#1-1-查询参数的传递" class="headerlink" title="1.1 查询参数的传递"></a>1.1 查询参数的传递</h3><p>在<code>header.html</code>中添加如下js</p><pre><code class="javascript">// 给搜索按钮绑定单击事件，获取搜索输入框的内容$("#search_btn").click(function () {    // 用户输入的线路名称    var rname = $("#search_input").val();    var cid = getParameter("cid");    // 跳转路径  http://localhost/travel/route_list.html?cid=5, 拼接上rname=xxx    location.href = "http://localhost/travel/route_list.html?cid="+cid+"&amp;rname="+rname;});</code></pre><p>在<code>route_list.html</code>中添加代码</p><pre><code class="javascript">$(function () {    // 获取cid的参数值    var cid = getParameter("cid");    // 获取rname的参数值    var rname = getParameter("rname");    // 判断rname不为null    if (rname){        // url 解码        rname = window.decodeURIComponent(rname);    }});</code></pre><h3 id="1-2-后台代码修改"><a href="#1-2-后台代码修改" class="headerlink" title="1.2 后台代码修改"></a>1.2 后台代码修改</h3><p>主要就是重构查询总记录数方法和查询当前页数据集合方法，添加一个模糊查询的参数<code>rname</code></p><p>设计到重构的模块及方法：</p><ol><li><code>RouteServlet</code>部分代修改及添加</li></ol><pre><code class="java">// 添加以下代码// 接受rname 参数String rname = request.getParameter("rname"); rname = new String(rname.getBytes("iso-8859-1"),"utf-8"); // 重新编码rnmae，解决get请求乱码问题// 修改查询方法，添加rname参数// 3. 调用service查询PageBean对象PageBean&lt;Route&gt; pb = routeService.pageQuery(cid, currentPage, pageSize,rname);</code></pre><ol start="2"><li><code>RouteServiceImpl</code>代码修改</li></ol><pre><code class="java">// 添加rname参数public PageBean&lt;Route&gt; pageQuery(int cid, int currentPage, int pageSize, String rname) {}// 以下方法均添加rname参数int totalCount = routeDao.findTotalCount(cid,rname);List&lt;Route&gt; list = routeDao.findByPage(cid, start, pageSize,rname);</code></pre><ol start="3"><li><code>RouteDaoImpl</code>代码修改</li></ol><pre><code class="java">@Overridepublic int findTotalCount(int cid, String rname) {    // String sql = "select count(*) from tab_route where cid = ?";    // 1. 定义sql模板,拼接sql时注意空格    String sql = "select count(*) from tab_route where 1 = 1 ";    StringBuilder sb = new StringBuilder(sql);    List params = new ArrayList(); // 条件参数    // 2. 判断参数是否有值    if (cid != 0){        sb.append(" and cid = ? ");        params.add(cid); // 添加？对应值    }    if (rname != null &amp;&amp; rname.length() &gt; 0){        sb.append(" and rname like ? ");        params.add("%"+rname+"%");    }    sql = sb.toString(); // 转换为字符串    return template.queryForObject(sql,Integer.class,params.toArray()); // params.toArray() 集合转换为数组}@Overridepublic List&lt;Route&gt; findByPage(int cid, int start, int pageSize, String rname) {    // String sql = "select * from tab_route where cid = ? limit ? , ?";    // 1. 定义sql模板    String sql = "select * from tab_route where 1 = 1 ";    StringBuilder sb = new StringBuilder(sql);    List params = new ArrayList(); // 条件参数集合    // 2. 判断参数是否有值    if (cid != 0){        sb.append(" and cid = ? ");        params.add(cid); // 添加？对应值    }    if (rname != null &amp;&amp; rname.length() &gt; 0){        sb.append(" and rname like ? ");        params.add("%"+rname+"%");    }    sb.append(" limit ? , ? "); // 分页条件限制    sql = sb.toString();    // 加入分页条件参数    params.add(start);    params.add(pageSize);    return template.query(sql,new BeanPropertyRowMapper&lt;Route&gt;(Route.class),params.toArray());}</code></pre><h3 id="1-3-前台代码修改"><a href="#1-3-前台代码修改" class="headerlink" title="1.3 前台代码修改"></a>1.3 前台代码修改</h3><p>主要将<code>rname</code>参数添加入<code>load</code>方法中，并且修改所有的跳转页面标签，加上<code>rname</code>参数。</p><blockquote><p>注意在标签处添加<code>rname</code>参数时，该参数是一个字符串，故需使用“\”进行转义。</p></blockquote><pre><code class="javascript">&lt;script&gt;        $(function () {            // var search = location.search;            // // alert(search);            // // 切割字符串，拿到第二个值            // var cid = search.split("=")[1];            // 获取cid的参数值            var cid = getParameter("cid");            // 获取rname的参数值            var rname = getParameter("rname");            // 判断rname不为null            if (rname){                // url 解码                rname = window.decodeURIComponent(rname);            }            // 当页码加载完毕后，调用load方法，            load(cid,null,rname);        })    function load(cid, currentPage,rname) {    // 发送ajax请求，请求route/pageQuery，传递cid    $.get("route/pageQuery",{cid:cid,currentPage:currentPage,rname:rname},function (pb) {        // 解析PageBean数据，展示到页面上        // 1. 分页工具条数据展示        // 1.1 展示总页码和总记录数        $("#totalPage").html(pb.totalPage);        $("#totalCount").html(pb.totalCount);        var lis = "";        var fristPage = '&lt;li onclick="javascript:load('+cid+',1,\''+rname+'\')"&gt;&lt;a href="javascript:void(0)"&gt;首页&lt;/a&gt;&lt;/li&gt;';        // 计算上一页的页码        var beforeNum = pb.currentPage - 1;        if (beforeNum &lt;= 0){            beforeNum = 1;        }        var beforePage = '&lt;li onclick="javascript:load('+cid+','+beforeNum+',\''+rname+'\')" class="threeword"&gt;&lt;a href="javascript:void(0)"&gt;上一页&lt;/a&gt;&lt;/li&gt;';        lis += fristPage;        lis += beforePage;        // 1.2 展示分页页码        /*                    仿百度分页样式：前五后四                    1. 一共展示10个页码，能够达到前5后4的效果                    2. 如果前边不足5个，后边补齐10个                    3. 如果后边不足4个，前边补齐10个                 */        // 定义开始位置begin和结束位置end        var begin; // 开始位置        var end; // 结束位置        // 1. 显示10个页码        if(pb.totalPage &lt; 10){            // 总页码不足10页            begin = 1;            end = pb.totalPage;        }else{            // 总页码超过10页            // 实现前5后4效果            begin = pb.currentPage - 5;            end = pb.currentPage + 4;            // 进行数据修正            // 2. 如果前边不够5个，后边补齐10个            if (begin &lt; 1){                begin = 1;                end = begin + 9;            }            // 3. 如果后边不足4个，前边补齐10个            if (end &gt; pb.totalPage){                end = pb.totalPage;                begin = end - 9;            }        }        for (var i = begin; i &lt;= end; i++) {            var li;            // 判断当前页码是否等于i            if (pb.currentPage == i){                li = '&lt;li class="curPage" onclick="javascript:load('+cid+','+i+',\''+rname+'\')"&gt;&lt;a href="javascript:void(0)"&gt;'+i+'&lt;/a&gt;&lt;/li&gt;';            }else{                // 创建页码的li                li = '&lt;li onclick="javascript:load('+cid+','+i+',\''+rname+'\')"&gt;&lt;a href="javascript:void(0)"&gt;'+i+'&lt;/a&gt;&lt;/li&gt;';            }            // 拼接进字符串            lis += li;        }        // 计算下一页页码        var nextNum = pb.currentPage + 1;        if(nextNum &gt;= pb.totalPage){            nextNum = pb.totalPage;        }        var nextPage = '&lt;li onclick="javascript:load('+cid+','+nextNum+',\''+rname+'\')" class="threeword"&gt;&lt;a href="javascript:void(0);"&gt;下一页&lt;/a&gt;&lt;/li&gt;';        var lastPage = '&lt;li onclick="javascript:load('+cid+','+pb.totalPage+',\''+rname+'\')" class="threeword"&gt;&lt;a href="javascript:;"&gt;末页&lt;/a&gt;&lt;/li&gt;';        lis += nextPage;        lis += lastPage;        // 将lis内容设置到ul中        $("#pageNum").html(lis);        // 2. 列表数据展示        var route_lis = "";        for (var i = 0; i &lt; pb.list.length; i++) {            // 获取数据 {rid": 1,"rname": "xxx","price": 999.0,xxxx}            var route = pb.list[i];            var li = '&lt;li&gt;\n' +                '                &lt;div class="img"&gt;&lt;img src="'+route.rimage+'" style="width: 299px"&gt;&lt;/div&gt;\n' +                '                    &lt;div class="text1"&gt;\n' +                '                    &lt;p&gt;'+route.rname+'&lt;/p&gt;\n' +                '                    &lt;br/&gt;\n' +                '                    &lt;p&gt;'+route.routeIntroduce+'&lt;/p&gt;\n' +                '                &lt;/div&gt;\n' +                '                &lt;div class="price"&gt;\n' +                '                    &lt;p class="price_num"&gt;\n' +                '                    &lt;span&gt;&amp;yen;&lt;/span&gt;\n' +                '                &lt;span&gt;'+route.price+'&lt;/span&gt;\n' +                '                &lt;span&gt;起&lt;/span&gt;\n' +                '                &lt;/p&gt;\n' +                '                &lt;p&gt;&lt;a href="route_detail.html"&gt;查看详情&lt;/a&gt;&lt;/p&gt;\n' +                '                &lt;/div&gt;\n' +                '             &lt;/li&gt;';            route_lis += li;        }        $("#route").html(route_lis);        // 每次点击翻页后，定位到页面顶部        window.scrollTo(0,0);    });}&lt;/script&gt;</code></pre><p>​    </p><h2 id="2-旅游线路的详情展示"><a href="#2-旅游线路的详情展示" class="headerlink" title="2. 旅游线路的详情展示"></a>2. 旅游线路的详情展示</h2><h3 id="2-1-分析"><a href="#2-1-分析" class="headerlink" title="2.1 分析"></a>2.1 分析</h3><p><img src="D:\资料\Java\img\route_info.jpg" alt="route_info"></p><p><img src="D:\资料\Java\img\route_info2.jpg" alt="route_info2"></p><h3 id="2-2-后台代码实现"><a href="#2-2-后台代码实现" class="headerlink" title="2.2 后台代码实现"></a>2.2 后台代码实现</h3><ul><li>在<code>RouteServlet</code>中创建一个<code>findOne</code>方法，查询<code>route</code>对象并返回给客户端</li></ul><pre><code class="java">/** * @Description: 根据id查询一个旅游线路的详细信息 * @Author: zero * @param request * @param response * @return void * @Date 2019/7/26 20:56 */public void findOne(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    // 1. 接收id    String rid = request.getParameter("rid");    // 2. 调用service查询route对象    Route route = routeService.findOne(Integer.parseInt(rid));    // 3. 转为json返回客户端    writeValue(route,response);}</code></pre><ul><li>在<code>RouteServiceImpl</code>中新建<code>findOne</code>方法，根据<code>rid</code>查询三表数据，封装进<code>route</code>对象</li></ul><pre><code class="java">/** * @Description: 根据rid查询三个表数据，封装进route对象 * @Author: zero * @param rid * @return 封装好的route对象 * @Date 2019/7/26 21:16 */@Overridepublic Route findOne(int rid) {    // 1. 根据id查询route对象 routeDao    Route route = routeDao.findOne(rid);    // 2. 根据rid线路id查询tab_route_img，将集合设置到route对象中    List&lt;RouteImg&gt; img = routeImgDao.findImg(rid);    // 2.1 将img集合设置到route对象中    route.setRouteImgList(img);    // 3. 根据sid卖家id查询tab_seller查询卖家信息，设置到route对象中    Seller seller = sellerDao.findSeller(route.getSid());    // 3.1 设置到route对象中    route.setSeller(seller);    return route;}</code></pre><ul><li>修改<code>RouteDao</code>层，添加<code>findOne</code>方法，新建两个Dao及其对应实现类，分别是<code>RouteImgDao</code>和<code>SellerDao</code>，查询图片信息和卖家信息。</li></ul><pre><code class="java">// RouteDaoImpl/** * 根据id查询 * @param rid * @return */@Overridepublic Route findOne(int rid) {    return template.queryForObject("select * from tab_route where rid = ?",                                   new BeanPropertyRowMapper&lt;Route&gt;(Route.class),rid);}// RouteImgDaoImpl/** * 根据rid查询图片信息 * @param rid * @return */@Overridepublic List&lt;RouteImg&gt; findImg(int rid) {    return template.query("select * from tab_route_img where rid = ?",                          new BeanPropertyRowMapper&lt;RouteImg&gt;(RouteImg.class),rid);}// SellerDaoImpl/** * 根据sid查询卖家信息 * @param sid * @return */@Overridepublic Seller findSeller(int sid) {    return template.queryForObject("select * from tab_seller where sid = ?",                                   new BeanPropertyRowMapper&lt;Seller&gt;(Seller.class),sid);}</code></pre><h3 id="2-3-前台代码实现"><a href="#2-3-前台代码实现" class="headerlink" title="2.3 前台代码实现"></a>2.3 前台代码实现</h3><p>在<code>Route_detail.html</code>中加载后获取rid，然后发送ajax请求，获取route对象，解析对象数据，填充入html中</p><pre><code class="javascript">&lt;script&gt;$(document).ready(function() {    goImg();});function goImg() {    //焦点图效果    //点击图片切换图片    $('.little_img').on('mousemove', function() {        $('.little_img').removeClass('cur_img');        var big_pic = $(this).data('bigpic');        $('.big_img').attr('src', big_pic);        $(this).addClass('cur_img');    });    //上下切换    var picindex = 0;    var nextindex = 4;    $('.down_img').on('click',function(){        var num = $('.little_img').length;        if((nextindex + 1) &lt;= num){            $('.little_img:eq('+picindex+')').hide();            $('.little_img:eq('+nextindex+')').show();            picindex = picindex + 1;            nextindex = nextindex + 1;        }    });    $('.up_img').on('click',function(){        var num = $('.little_img').length;        if(picindex &gt; 0){            $('.little_img:eq('+(nextindex-1)+')').hide();            $('.little_img:eq('+(picindex-1)+')').show();            picindex = picindex - 1;            nextindex = nextindex - 1;        }    });    //自动播放    // var timer = setInterval("auto_play()", 5000);}//自动轮播方法function auto_play() {    var cur_index = $('.prosum_left dd').find('a.cur_img').index();    cur_index = cur_index - 1;    var num = $('.little_img').length;    var max_index = 3;    if ((num - 1) &lt; 3) {        max_index = num - 1;    }    if (cur_index &lt; max_index) {        var next_index = cur_index + 1;        var big_pic = $('.little_img:eq(' + next_index + ')').data('bigpic');        $('.little_img').removeClass('cur_img');        $('.little_img:eq(' + next_index + ')').addClass('cur_img');        $('.big_img').attr('src', big_pic);    } else {        var big_pic = $('.little_img:eq(0)').data('bigpic');        $('.little_img').removeClass('cur_img');        $('.little_img:eq(0)').addClass('cur_img');        $('.big_img').attr('src', big_pic);    }}$(function () {    // 1. 获取id    var rid = getParameter("rid");    // 2. 发送请求， route/findOne    $.get("route/findOne",{rid:rid},function (route) {        // 3. 解析数据填充html        $("#rname").html(route.rname);        $("#routeIntroduce").html(route.routeIntroduce);        $("#price").html(route.price);        $("#sname").html(route.seller.sname);        $("#consphone").html(route.seller.consphone);        $("#address").html(route.seller.address);        // 图片展示        var dd_str = '&lt;a class="up_img up_img_disable"&gt;&lt;/a&gt;';        // 遍历routeImgList        for (var i = 0; i &lt; route.routeImgList.length; i++) {            var a_str;            // 判断图片是否大于4，将大于4的图片设置为display:none            if (i &gt;= 4) {                a_str = '&lt;a title="" class="little_img" data-bigpic="'+route.routeImgList[i].bigPic+'" style="display:none;"&gt;\n' +                    '                        &lt;img src="'+route.routeImgList[i].smallPic+'"&gt;\n' +                    '                    &lt;/a&gt;';            } else {                a_str = '&lt;a title="" class="little_img" data-bigpic="'+route.routeImgList[i].bigPic+'"&gt;\n' +                    '                        &lt;img src="'+route.routeImgList[i].smallPic+'"&gt;\n' +                    '                    &lt;/a&gt;';            }            dd_str += a_str;        }        dd_str += '&lt;a class="down_img down_img_disable" style="margin-bottom: 0;"&gt;&lt;/a&gt;';        $("#dd").html(dd_str);        // 图片展示和切换代码的调用        goImg();    });});&lt;/script&gt;</code></pre><blockquote><p>需注意：在<code>route_list.html</code>中的查看详情URL处修改代码，传递rid值：<code>&lt;p&gt;&lt;a href="route_detail.html?rid='+route.rid+'"&gt;查看详情&lt;/a&gt;&lt;/p&gt;\n'</code></p></blockquote><h2 id="3-旅游线路收藏功能"><a href="#3-旅游线路收藏功能" class="headerlink" title="3. 旅游线路收藏功能"></a>3. 旅游线路收藏功能</h2><h3 id="3-1-分析"><a href="#3-1-分析" class="headerlink" title="3.1 分析"></a>3.1 分析</h3><ul><li>表结构信息：</li></ul><p><img src="D:\资料\Java\img\table.jpg" alt="table"></p><h4 id="3-1-1-判断当前登录用户是否收藏过该线路"><a href="#3-1-1-判断当前登录用户是否收藏过该线路" class="headerlink" title="3.1.1 判断当前登录用户是否收藏过该线路"></a>3.1.1 判断当前登录用户是否收藏过该线路</h4><p>当页面加载完成后，发送ajax请求，获取用户是否收藏的标记，根据此标记展示不同的按钮样式。</p><p><img src="D:\资料\Java\img\favorite.jpg" alt="favorite"></p><h3 id="3-2-后台代码编写"><a href="#3-2-后台代码编写" class="headerlink" title="3.2 后台代码编写"></a>3.2 后台代码编写</h3><ul><li>修改<code>RouteServlet</code>，添加<code>isFavorite</code>方法</li></ul><pre><code class="java">/**     * @Description: 根据线路id和用户id，判断用户是否收藏了该线路     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/27 23:11     */public void isFavorite(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    // 1. 获取rid，线路id    String rid = request.getParameter("rid");    // 2. 获取udi，通过当前登录用户对象，session    User user = (User) request.getSession().getAttribute("user");    // 2.1 如果user对象为null，则表示未登录，设置uid=0    int uid; // 用户id    if (user == null){        // 用户未登录        uid = 0;    }else{        // 用户已登录        uid = user.getUid();    }    // 3. 调用FavoriteService查询，传递rid，uid    boolean flag = favoriteService.isFavorite(Integer.parseInt(rid), uid);    // 4. 写回客户端flag标记    writeValue(flag,response);}</code></pre><ul><li><code>FavoriteServiceImpl</code>添加<code>isFavorite</code>方法</li></ul><pre><code class="java">@Overridepublic boolean isFavorite(int rid, int uid) {    Favorite favorite = favoriteDao.findFavorite(rid, uid);    return favorite != null ? true : false; // 如果对象有值，则表示收藏过了，返回true，反之表示未收藏过返回false。}</code></pre><ul><li><code>FavoriteDaoImpl</code>添加<code>findFavorite</code>方法</li></ul><pre><code class="java">/**     * @Description: 根据线路id和用户id查询数据     * @Author: zero     * @param rid     * @param uid     * @return 查询到的Favorite对象     * @Date 2019/7/27 22:34     */@Overridepublic Favorite findFavorite(int rid, int uid) {    Favorite favorite = null;    try{        favorite = template.queryForObject("select * from tab_favorite where rid = ? and uid = ? ",                                           new BeanPropertyRowMapper&lt;Favorite&gt;(Favorite.class), rid, uid);    }catch (DataAccessException e){        e.printStackTrace();    }    return favorite;}</code></pre><h3 id="3-3-前台代码编写"><a href="#3-3-前台代码编写" class="headerlink" title="3.3 前台代码编写"></a>3.3 前台代码编写</h3><p>在<code>route.detail.html</code>中添加<code>isFavorite</code>的js方法，在页面加载完毕后请求。</p><pre><code class="javascript">function isFavorite() {    // 发送请求，判断用户是否收藏过该线路    var rid = getParameter("rid");    $.get("route/isFavorite",{rid:rid},function (flag) {        if (flag){            // 用户已经收藏过了            // &lt;a  class="btn already" disabled="disabled"&gt;            // 设置收藏按钮的样式            $("#favorite").addClass("already");            $("#favorite").attr("disabled","disabled");            // 删除按钮的点击事件            $("#favorite").removeAttr("onclick");        } else {            // 用户没有收藏过        }    });};</code></pre><h3 id="3-4-收藏次数的动态展示"><a href="#3-4-收藏次数的动态展示" class="headerlink" title="3.4 收藏次数的动态展示"></a>3.4 收藏次数的动态展示</h3><p>前台代码：</p><pre><code class="javascript">// 设置收藏次数$("#favoriteNumber").html("已收藏"+route.count+"次");</code></pre><p>后台添加一个查询次数方法即可</p><pre><code class="java">// RouteService, 在加载页面时调用findOne方法，同时将收藏次数也封装进Route对象中// 4. 查询收藏次数int count = favoriteDao.findFavoriteCount(route.getRid());route.setCount(count);// FavoriteDao/** * @Description: 根据rid查询收藏次数 * @Author: zero * @param rid * @return 收藏次数 * @Date 2019/7/27 23:20 */@Overridepublic int findFavoriteCount(int rid) {    return template.queryForObject("select count(*) from tab_favorite where rid = ?", Integer.class,rid);}</code></pre><h3 id="3-5-点击按钮收藏线路"><a href="#3-5-点击按钮收藏线路" class="headerlink" title="3.5 点击按钮收藏线路"></a>3.5 点击按钮收藏线路</h3><h4 id="3-5-1-分析"><a href="#3-5-1-分析" class="headerlink" title="3.5.1 分析"></a>3.5.1 分析</h4><p><img src="D:\资料\Java\img\clickFavorite.jpg" alt="clickFavorite"></p><h4 id="3-5-2-代码实现"><a href="#3-5-2-代码实现" class="headerlink" title="3.5.2 代码实现"></a>3.5.2 代码实现</h4><ul><li>前台代码</li></ul><pre><code class="javascript">// 点击收藏按钮触发的方法function addFavorite() {    var rid = getParameter("rid");    // 1. 判断用户是否登录    $.get("user/findOne",{},function (user) {        if (user){            // 用户登录了            // 调用添加功能            $.get("route/addFavorite",{rid:rid},function () {});            // 刷新页面            location.reload();        } else{            // 用户未登录            alert("您未登录，请登录");            location.href = "http://localhost/travel/login.html";        }    });};</code></pre><ul><li>后台代码，在<code>RouteServlet</code>中添加<code>addFavorite</code>方法</li></ul><pre><code class="java">/**     * @Description: 添加收藏功能     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/27 23:46     */public void addFavorite(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {    // 1. 获取线路id rid    String rid = request.getParameter("rid");    // 2. 获取用户对象 uid    User user = (User) request.getSession().getAttribute("user");    int uid; // 用户id    if (user == null){        // 用户未登录        return;    }else{        // 用户已登录        uid = user.getUid();    }    // 3. 调用service添加    favoriteService.add(Integer.parseInt(rid), uid);}</code></pre><ul><li><p>在<code>FavoriteServiceImpl</code>中添加<code>add</code>方法</p><pre><code class="java">@Overridepublic void add(int rid, int uid) {    favoriteDao.add(rid,uid);}</code></pre></li><li><p>在<code>FavoriteDaoImpl</code>中添加<code>add</code>方法</p><pre><code class="java">/**     * @Description: 添加收藏功能     * @Author: zero     * @param rid     * @param uid     * @return void     * @Date 2019/7/27 23:54     */@Overridepublic void add(int rid, int uid) {    template.update("insert into tab_favorite values(?,?,?)",rid,new Date(),uid);}</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅游网项目02</title>
      <link href="/2019/07/23/javaweb/lu-you-wang-xiang-mu-02/"/>
      <url>/2019/07/23/javaweb/lu-you-wang-xiang-mu-02/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>旅游网项目，今日内容主要为优化Servlet、分类数据查询和分页查询。</p><a id="more"></a><h2 id="2-优化Servlet"><a href="#2-优化Servlet" class="headerlink" title="2. 优化Servlet"></a>2. 优化<code>Servlet</code></h2><h3 id="2-1-目的"><a href="#2-1-目的" class="headerlink" title="2.1 目的"></a>2.1 目的</h3><p>为了减少Servlet的数量，现在是一个功能一个Servlet，将其优化为相同功能的Servlet为一个模块。相当于在数据库中一张表对应一个Servlet，在Servlet中提供不同的方法，完成用户的请求。</p><h3 id="2-2-BaseServlet编写"><a href="#2-2-BaseServlet编写" class="headerlink" title="2.2 BaseServlet编写"></a>2.2 <code>BaseServlet</code>编写</h3><p>主要进行方法的分发，利用反射机制，获取请求路径和方法名称，再获取方法对象然后执行。</p><pre><code class="java">package cn.itcast.travel.web.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;/** * 使用反射机制，完成方法的分发 */public class BaseServlet extends HttpServlet {    @Override    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        System.out.println("baseServlet的service方法被执行");        // 完成方法分发        // 1. 获取请求路径        String uri = req.getRequestURI(); // uri = /travel/user/add        System.out.println("请求uri："+uri);        // 2. 获取方法名称        String methodName = uri.substring(uri.lastIndexOf('/') + 1);// 为何+1？        System.out.println("方法名称"+methodName);        // 3. 获取方法对象Method        System.out.println(this); // this表示当前调用service的对象，谁调用我我表示谁        try {            // 获取方法            Method method = this.getClass().getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);            // 4.执行方法            method.invoke(this,req,resp);        } catch (NoSuchMethodException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }    }}</code></pre><h3 id="2-3-UserServlet改写"><a href="#2-3-UserServlet改写" class="headerlink" title="2.3 UserServlet改写"></a>2.3 <code>UserServlet</code>改写</h3><p>继承自<code>BaseServlet</code>，所有用户相关的方法都抽取在内。只需访问<code>user/对应方法</code>即可完成相应功能。</p><pre><code class="java">package cn.itcast.travel.web.servlet;import cn.itcast.travel.domain.ResultInfo;import cn.itcast.travel.domain.User;import cn.itcast.travel.service.UserService;import cn.itcast.travel.service.impl.UserServiceImpl;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.commons.beanutils.BeanUtils;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.util.Map;@WebServlet("/user/*")public class UserServlet extends BaseServlet {    // 声明UserService业务对象    private UserService service = new UserServiceImpl();    /**     * @Description: 用户注册功能     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/23 21:35     */    public void regist(HttpServletRequest request, HttpServletResponse response) throws IOException {        // 获取用户输入的验证码        String check = request.getParameter("check");        // 从session中获取生成的验证码        HttpSession session = request.getSession();        String checkcode_server = (String)session.getAttribute("CHECKCODE_SERVER");        session.removeAttribute("CHECKCODE_SERVER"); // 确保验证码只能使用一次        // 如果验证码错误，直接注册失败        if (checkcode_server == null || !checkcode_server.equalsIgnoreCase(check)){            // 验证码错误            ResultInfo info = new ResultInfo();            // 注册失败            info.setFlag(false);            info.setErrorMsg("验证码错误");            // 将info对象序列化为json            ObjectMapper mapper = new ObjectMapper();            String json = mapper.writeValueAsString(info);            response.setContentType("application/json;charset=utf-8");            response.getWriter().write(json);            return; // todo:为何return?        }        // 验证通过        // 1. 获取前台表单数据        Map&lt;String, String[]&gt; map = request.getParameterMap();        // 2. 封装为user对象        User user = new User();        try {            BeanUtils.populate(user,map);        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        // 3. 调用service完成注册        service = new UserServiceImpl();        boolean flag = service.regist(user);        ResultInfo info = new ResultInfo();        // 4. 响应结果        if (flag){            // 注册成功            info.setFlag(true);        }else{            // 注册失败            info.setFlag(false);            info.setErrorMsg("注册失败！");        }        // 将info对象序列化为json        ObjectMapper mapper = new ObjectMapper();        String json = mapper.writeValueAsString(info);        // 将json数据回写客户端        // 设置content-type        response.setContentType("application/json;charset=utf-8");        response.getWriter().write(json);    }    /**     * @Description: 邮箱激活功能     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/23 21:36     */    public void active(HttpServletRequest request, HttpServletResponse response) throws IOException {        // 1. 获取激活码        String code = request.getParameter("code");        if (code != null){            // 2. 调用service完成激活            service = new UserServiceImpl();            boolean flag = service.active(code);            // 3. 判断标记            String msg = null;            if (flag){                // 激活成功                msg = "激活成功，请&lt;a href='login.html'&gt;登录&lt;/a&gt;";            }else{                // 激活失败                msg = "激活失败，请联系管理员！";            }            // 回写数据            response.setContentType("text/html;charset=utf-8");            response.getWriter().write(msg);        }    }    /**     * @Description: 用户登录功能     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/23 21:37     */    public void login(HttpServletRequest request, HttpServletResponse response) throws IOException {        // 1. 获取用户名和密码        Map&lt;String, String[]&gt; map = request.getParameterMap();        // 2. 封装User对象        User user = new User();        try {            BeanUtils.populate(user,map);        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        // 3. 调用service查询        service = new UserServiceImpl();        User u = service.login(user);        ResultInfo info = new ResultInfo();        // 4. 判断用户对象是否为null        if (u == null){            // 用户名或密码错误            info.setFlag(false);            info.setErrorMsg("用户名或密码错误");        }        // 5. 判断用户账户是否激活        if (u != null &amp;&amp; !"Y".equals(u.getStatus())){            // 用户未激活            info.setFlag(false);            info.setErrorMsg("您的账户尚未激活，请激活");        }        // 6. 判断登录成功        if (u != null &amp;&amp; "Y".equals(u.getStatus())){            // 登录成功            info.setFlag(true);            // 将登陆用户信息存入session中            request.getSession().setAttribute("user",u);        }        // 响应数据        ObjectMapper mapper = new ObjectMapper();        response.setContentType("application/json;charset=utf-8");        mapper.writeValue(response.getOutputStream(),info);    }    /**     * @Description: 查询单个用户，前台显示登录用户功能     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/23 21:38     */    public void findOne(HttpServletRequest request, HttpServletResponse response) throws IOException {        // 从session中获取登录用户        Object user = request.getSession().getAttribute("user");        // 将user回写客户端        ObjectMapper mapper = new ObjectMapper();        response.setContentType("application/json;charset=utf-8");        mapper.writeValue(response.getOutputStream(),user);    }    /**     * @Description: 用户退出功能     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/23 21:38     */    public void exit(HttpServletRequest request, HttpServletResponse response) throws IOException {        // 1. 销毁session        request.getSession().invalidate();        // 2. 跳转到登录页面        response.sendRedirect(request.getContextPath()+"/login.html");    }}</code></pre><h3 id="2-4-页面路径改写"><a href="#2-4-页面路径改写" class="headerlink" title="2.4 页面路径改写"></a>2.4 页面路径改写</h3><p>将所有用户相关的请求路径改为<code>user/对应方法</code>。例登录路径：<code>user/login</code></p><p>激活功能URL：<code>String content = "&lt;a href='http://localhost/travel/user/active?code="+user.getCode()+"'&gt;点击激活账户&lt;/a&gt;";</code></p><h2 id="3-分类数据展示"><a href="#3-分类数据展示" class="headerlink" title="3. 分类数据展示"></a>3. 分类数据展示</h2><h3 id="3-1-分析"><a href="#3-1-分析" class="headerlink" title="3.1 分析"></a>3.1 分析</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/25/1.%E5%88%86%E7%B1%BB%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2-1564023806439.bmp" alt="title"></p><h3 id="3-2-后台代码实现"><a href="#3-2-后台代码实现" class="headerlink" title="3.2 后台代码实现"></a>3.2 后台代码实现</h3><h4 id="3-2-1-CategoryServlet代码"><a href="#3-2-1-CategoryServlet代码" class="headerlink" title="3.2.1 CategoryServlet代码"></a>3.2.1 <code>CategoryServlet</code>代码</h4><pre><code class="java">package cn.itcast.travel.web.servlet;import cn.itcast.travel.domain.Category;import cn.itcast.travel.service.CategoryService;import cn.itcast.travel.service.impl.CategoryServiceImpl;import com.fasterxml.jackson.databind.ObjectMapper;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.List;/** * @Author: zero * @Description: Date:Create: in 2019/7/23 22:51 * Modified By: */@WebServlet("/category/*")public class CategoryServlet extends BaseServlet {    private CategoryService service = new CategoryServiceImpl();    /**     * @Description:查询所有     * @Author: zero     * @param request     * @param response     * @return void     * @Date 2019/7/23 22:52     */    public void findAll(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 调用servvice查询所有        List&lt;Category&gt; categories = service.findAll();        // 2. 序列化为json返回        writeValue(categories,response);    }}</code></pre><h4 id="3-2-2-CategoryService代码"><a href="#3-2-2-CategoryService代码" class="headerlink" title="3.2.2 CategoryService代码"></a>3.2.2 <code>CategoryService</code>代码</h4><pre><code class="java">package cn.itcast.travel.service.impl;import cn.itcast.travel.dao.CategoryDao;import cn.itcast.travel.dao.impl.CategoryDaoImpl;import cn.itcast.travel.domain.Category;import cn.itcast.travel.service.CategoryService;import java.util.List;/** * @Author: zero * @Description: Date:Create: in 2019/7/23 22:49 * Modified By: */public class CategoryServiceImpl implements CategoryService {    private CategoryDao categoryDao = new CategoryDaoImpl();    @Override    public List&lt;Category&gt; findAll() {        return categoryDao.findAll();    }}</code></pre><h4 id="3-2-3-CategoryDao代码"><a href="#3-2-3-CategoryDao代码" class="headerlink" title="3.2.3 CategoryDao代码"></a>3.2.3 <code>CategoryDao</code>代码</h4><pre><code class="java">package cn.itcast.travel.dao;import cn.itcast.travel.domain.Category;import java.util.List;/** * @Author: zero * @Description: Date:Create: in 2019/7/23 22:42 * Modified By: */public interface CategoryDao {    /**     * @Description: 查询所有     * @Author: zero     * @param     * @return List集合     * @Date 2019/7/23 22:44     */    List&lt;Category&gt; findAll();}</code></pre><h4 id="3-2-4-优化部分代码"><a href="#3-2-4-优化部分代码" class="headerlink" title="3.2.4 优化部分代码"></a>3.2.4 优化部分代码</h4><p>将序列化<code>json</code>方法封装在<code>BaseServlet</code>，减少代码冗余</p><pre><code class="java">/**     * @Description: 直接将传入的对象序列化为json，并且写回客户端     * @Author: zero     * @param obj     * @param response     * @return void     * @Date 2019/7/23 23:16     */public void writeValue(Object obj,HttpServletResponse response) throws IOException{    ObjectMapper mapper = new ObjectMapper();    response.setContentType("application/json;charset=utf-8");    mapper.writeValue(response.getOutputStream(),obj);}/**     * @Description: 将传入的对象序列化为json后返回     * @Author: zero     * @param obj     * @return String     * @Date 2019/7/23 23:18     */public String writeValueAsString(Object obj) throws JsonProcessingException {    return new ObjectMapper().writeValueAsString(obj);}</code></pre><h3 id="3-3-前台代码实现"><a href="#3-3-前台代码实现" class="headerlink" title="3.3 前台代码实现"></a>3.3 前台代码实现</h3><pre><code class="javascript">// 查询分类数据$.get("category/findAll",{},function (data) {    // [{cid:1,cname:xxx},{cid:2,cname:xxx},]    var lis = '&lt;li class="nav-active"&gt;&lt;a href="index.html"&gt;首页&lt;/a&gt;&lt;/li&gt;';    // 遍历数组，拼接字符串（&lt;li&gt;）    for (var i = 0; i &lt; data.length; i++) {        var li = '&lt;li&gt;&lt;a href="route_list.html"&gt;'+data[i].cname+'&lt;/a&gt;&lt;/li&gt;';        lis += li;    }    // 拼接收藏排行榜的li，&lt;li&gt;&lt;a href="favoriterank.html"&gt; 收藏排行榜&lt;/a&gt;&lt;/li&gt;    lis+='&lt;li&gt;&lt;a href="favoriterank.html"&gt;收藏排行榜&lt;/a&gt;&lt;/li&gt;';    // 将lis字符串，设置到ul的html内容中    $("#category").html(lis);})</code></pre><h3 id="3-4-对分类数据进行缓存优化"><a href="#3-4-对分类数据进行缓存优化" class="headerlink" title="3.4 对分类数据进行缓存优化"></a>3.4 对分类数据进行缓存优化</h3><p>分类的数据在每一次页面加载后都会重新请求数据库来加载，对数据库的压力比较大，且分类的数据不会经常产生变化，故在此可以使用redis来缓存这个数据。</p><h3 id="3-5-优化代码实现"><a href="#3-5-优化代码实现" class="headerlink" title="3.5 优化代码实现"></a>3.5 优化代码实现</h3><pre><code class="java">/**     * @Description: 使用redis缓存，优化代码，减少对数据库的访问     * @Author: zero     * @param     * @return List     * @Date 2019/7/24 20:52     */@Overridepublic List&lt;Category&gt; findAll() {    // 初始化集合对象    List&lt;Category&gt; cs = null;    // 1. 从redis中查询数据    // 1.1 获取redis客户端连接对象    Jedis jedis = JedisUtil.getJedis();    // 1.2 使用sortedset排序查询    Set&lt;String&gt; categorys = jedis.zrange("category", 0, -1);    // 2. 判断集合是否为null    if (categorys == null || categorys.size() == 0){        // 2.1 为空，则表示第一次访问        System.out.println("redis中无数据，查询数据库...");        // 2.2 查询数据库，获取数据        cs = categoryDao.findAll();        // 2.3 将集合数据存储到redis中的category的key        for (int i = 0; i &lt; cs.size(); i++) {            jedis.zadd("category",cs.get(i).getCid(),cs.get(i).getCname());        }    }else{        // 3. 不为空，将查询到的set集合数据存入list再返回        // 因返回的是list集合，故将查询到的set集合数据转换为list数据        System.out.println("redis中有数据，查询缓存...");        cs = new ArrayList&lt;Category&gt;();        for (String name : categorys) {            Category category = new Category();            category.setCname(name);            cs.add(category);        }    }    return cs;}</code></pre><h2 id="4-旅游线路的分页展示"><a href="#4-旅游线路的分页展示" class="headerlink" title="4. 旅游线路的分页展示"></a>4. 旅游线路的分页展示</h2><h3 id="4-1-类别id的传递"><a href="#4-1-类别id的传递" class="headerlink" title="4.1  类别id的传递"></a>4.1  类别id的传递</h3><ul><li>从<code>redis</code>中查询数据是，需要将分数也查询出来；并且在返回list集合里，将<code>cid</code>的值设置为对应分数</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/25/cid-1564023861129.jpg" alt="title"></p><ul><li>前台页面传递对应<code>cid</code>，修改<code>header.html</code>，加上<code>data[i].cid</code>即可。</li></ul><pre><code class="javascript">var li = '&lt;li&gt;&lt;a href="route_list.html?cid='+data[i].cid+'"&gt;'+data[i].cname+'&lt;/a&gt;&lt;/li&gt;';</code></pre><ul><li>获取<code>cid</code></li></ul><pre><code class="javascript">$(function(){    var search = location.search;    // alert(search);    // 切割字符串，拿到第二个值    var cid = search.split("=")[1];});</code></pre><h3 id="4-2-根据id查询不同类别的旅游线路"><a href="#4-2-根据id查询不同类别的旅游线路" class="headerlink" title="4.2  根据id查询不同类别的旅游线路"></a>4.2  根据id查询不同类别的旅游线路</h3><h4 id="4-2-1-分析"><a href="#4-2-1-分析" class="headerlink" title="4.2.1  分析"></a>4.2.1  分析</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/25/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2-1564023971902.png" alt="title"></p><h4 id="4-2-2-后台代码实现"><a href="#4-2-2-后台代码实现" class="headerlink" title="4.2.2  后台代码实现"></a>4.2.2  后台代码实现</h4><h5 id="4-2-2-1-PageBean对象"><a href="#4-2-2-1-PageBean对象" class="headerlink" title="4.2.2.1 PageBean对象"></a>4.2.2.1 <code>PageBean</code>对象</h5><p>后台返回给前台的对象</p><pre><code class="java">public class PageBean&lt;T&gt; {    private int totalCount; // 总记录数    private int totalPage; // 总页数    private int currentPage; // 当前页码    private int pageSize; // 每页显示的条数    private List&lt;T&gt; list; // 每页显示的数据集合    // 省略getset方法}</code></pre><h5 id="4-2-2-2-RouteServlet控制器代码"><a href="#4-2-2-2-RouteServlet控制器代码" class="headerlink" title="4.2.2.2 RouteServlet控制器代码"></a>4.2.2.2 <code>RouteServlet</code>控制器代码</h5><p>负责接收前台传递的参数并处理，调用<code>service</code>查询到<code>PageBean</code>对象后序列化为<code>json</code>再返回给前端。</p><pre><code class="java">package cn.itcast.travel.web.servlet;import cn.itcast.travel.domain.PageBean;import cn.itcast.travel.domain.Route;import cn.itcast.travel.service.RouteService;import cn.itcast.travel.service.impl.RouteServiceImpl;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * @Author: zero * @Description: Date:Create: in 2019/7/24 21:52 * Modified By: */@WebServlet("/route/*")public class RouteServlet extends BaseServlet {    private RouteService routeService = new RouteServiceImpl();    public void pageQuery(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 接受参数        String currentPageStr = request.getParameter("currentPage");        String pageSizeStr = request.getParameter("pageSize");        String cidStr = request.getParameter("cid");        // 2. 处理参数        int cid = 0; // 类别id        if (cidStr != null &amp;&amp; cidStr.length() &gt; 0){            cid = Integer.parseInt(cidStr);        }        int currentPage = 0; // 当前页码，如果不传递，则默认为第一页        if (currentPageStr != null &amp;&amp; currentPageStr.length() &gt; 0){            currentPage = Integer.parseInt(currentPageStr);        }else {            currentPage = 1;        }        int pageSize = 0; // 每页显示条数，默认为5        if (pageSizeStr != null &amp;&amp; pageSizeStr.length() &gt; 0){            pageSize = Integer.parseInt(pageSizeStr);        }else {            pageSize = 5;        }        // 3. 调用service查询PageBean对象        PageBean&lt;Route&gt; pb = routeService.pageQuery(cid, currentPage, pageSize);        // 4. 将pageBean对象序列化为json，返回        writeValue(pb,response);    }}</code></pre><h5 id="4-2-2-3-RouteServiceImpl代码"><a href="#4-2-2-3-RouteServiceImpl代码" class="headerlink" title="4.2.2.3 RouteServiceImpl代码"></a>4.2.2.3 <code>RouteServiceImpl</code>代码</h5><p>根据当前页码，类别信息等，从数据库中查询出当前类别对应数据集合，封装<code>PageBean</code>对象后返回</p><pre><code class="java">package cn.itcast.travel.service.impl;import cn.itcast.travel.dao.RouteDao;import cn.itcast.travel.dao.impl.RouteDaoImpl;import cn.itcast.travel.domain.PageBean;import cn.itcast.travel.domain.Route;import cn.itcast.travel.service.RouteService;import java.util.List;/** * @Author: zero * @Description: Date:Create: in 2019/7/24 22:04 * Modified By: */public class RouteServiceImpl implements RouteService {    private RouteDao routeDao = new RouteDaoImpl();    /**     * @Description: 查询当前页数据集合并封装为PageBean对象后返回     * @Author: zero     * @param cid     * @param currentPage     * @param pageSize     * @return 封装好的PageBean对象     * @Date 2019/7/24 22:50     */    @Override    public PageBean&lt;Route&gt; pageQuery(int cid, int currentPage, int pageSize) {        // 封装PageBean        PageBean&lt;Route&gt; pb = new PageBean&lt;&gt;();        // 设置当前页码        pb.setCurrentPage(currentPage);        // 设置每页显示的条数        pb.setPageSize(pageSize);        // 设置总记录数        int totalCount = routeDao.findTotalCount(cid);        pb.setTotalCount(totalCount);        // 设置当前页显示的数据集合        int start = (currentPage - 1) * pageSize; // 开始的记录数        List&lt;Route&gt; list = routeDao.findByPage(cid, start, pageSize);        pb.setList(list);        // 设置总页数 = 总记录数 / 每页显示条数        int totalPage = totalCount % pageSize == 0 ? totalCount / pageSize : (totalCount / pageSize) + 1;        pb.setTotalPage(totalPage);        return pb;    }}</code></pre><h5 id="4-2-2-4-RouteDaoImpl，DAO实现类"><a href="#4-2-2-4-RouteDaoImpl，DAO实现类" class="headerlink" title="4.2.2.4 RouteDaoImpl，DAO实现类"></a>4.2.2.4 <code>RouteDaoImpl</code>，DAO实现类</h5><p>查询当前类别总记录数和类别当前页的数据集合</p><pre><code class="java">package cn.itcast.travel.dao.impl;import cn.itcast.travel.dao.RouteDao;import cn.itcast.travel.domain.Route;import cn.itcast.travel.util.JDBCUtils;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;import java.util.List;/** * @Author: zero * @Description: Date:Create: in 2019/7/24 22:09 * Modified By: */public class RouteDaoImpl implements RouteDao {    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());    /**     * @Description: 根据cid查询总记录数     * @Author: zero     * @param cid     * @return 总记录数     * @Date 2019/7/24 22:08     */    @Override    public int findTotalCount(int cid) {        return template.queryForObject("select count(*) from tab_route where cid = ?",Integer.class,cid);    }    /**     * @Description: 根据cid，start，pageSize查询当前页的数据集合     * @Author: zero     * @param cid     * @param start     * @param pageSize     * @return 查询到的当前页数据集合     * @Date 2019/7/24 22:08     */    @Override    public List&lt;Route&gt; findByPage(int cid, int start, int pageSize) {        String sql = "select * from tab_route where cid = ? limit ? , ?";        return template.query(sql,new BeanPropertyRowMapper&lt;Route&gt;(Route.class),cid,start,pageSize);    }}</code></pre><h4 id="4-2-3-前台代码实现"><a href="#4-2-3-前台代码实现" class="headerlink" title="4.2.3 前台代码实现"></a>4.2.3 前台代码实现</h4><pre><code class="javascript">&lt;script&gt;    $(function () {    var search = location.search;    // alert(search);    // 切割字符串，拿到第二个值    var cid = search.split("=")[1];    // 当页码加载完毕后，调用load方法，    load(cid);})function load(cid, currentPage) {    // 发送ajax请求，请求route/pageQuery，传递cid    $.get("route/pageQuery",{cid:cid,currentPage:currentPage},function (pb) {        // 解析PageBean数据，展示到页面上        // 1. 分页工具条数据展示        // 1.1 展示总页码和总记录数        $("#totalPage").html(pb.totalPage);        $("#totalCount").html(pb.totalCount);        var lis = "";        var fristPage = '&lt;li onclick="javascript:load('+cid+')"&gt;&lt;a href="javascript:void(0)"&gt;首页&lt;/a&gt;&lt;/li&gt;';        // 计算上一页的页码        var beforeNum = pb.currentPage - 1;        if (beforeNum &lt;= 0){            beforeNum = 1;        }        var beforePage = '&lt;li onclick="javascript:load('+cid+','+beforeNum+')" class="threeword"&gt;&lt;a href="javascript:void(0)"&gt;上一页&lt;/a&gt;&lt;/li&gt;';        lis += fristPage;        lis += beforePage;        // 1.2 展示分页页码        /*                    仿百度分页样式：前五后四                    1. 一共展示10个页码，能够达到前5后4的效果                    2. 如果前边不足5个，后边补齐10个                    3. 如果后边不足4个，前边补齐10个                 */        // 定义开始位置begin和结束位置end        var begin; // 开始位置        var end; // 结束位置        // 1. 显示10个页码        if(pb.totalPage &lt; 10){            // 总页码不足10页            begin = 1;            end = pb.totalPage;        }else{            // 总页码超过10页            // 实现前5后4效果            begin = pb.currentPage - 5;            end = pb.currentPage + 4;            // 进行数据修正            // 2. 如果前边不够5个，后边补齐10个            if (begin &lt; 1){                begin = 1;                end = begin + 9;            }            // 3. 如果后边不足4个，前边补齐10个            if (end &gt; pb.totalPage){                end = pb.totalPage;                begin = end - 9;            }        }        for (var i = begin; i &lt;= end; i++) {            var li;            // 判断当前页码是否等于i            if (pb.currentPage == i){                li = '&lt;li class="curPage" onclick="javascript:load('+cid+','+i+')"&gt;&lt;a href="javascript:void(0)"&gt;'+i+'&lt;/a&gt;&lt;/li&gt;';            }else{                // 创建页码的li                li = '&lt;li onclick="javascript:load('+cid+','+i+')"&gt;&lt;a href="javascript:void(0)"&gt;'+i+'&lt;/a&gt;&lt;/li&gt;';            }            // 拼接进字符串            lis += li;        }        // for (var i = 1; i &lt;= pb.totalPage ; i++) {        //     var li;        //     // 判断当前页码是否等于i        //     if (pb.currentPage == i){        //         li = '&lt;li class="curPage" onclick="javascript:load('+cid+','+i+')"&gt;&lt;a href="javascript:void(0)"&gt;'+i+'&lt;/a&gt;&lt;/li&gt;';        //     }else{        //         // 创建页码的li        //         li = '&lt;li onclick="javascript:load('+cid+','+i+')"&gt;&lt;a href="javascript:void(0)"&gt;'+i+'&lt;/a&gt;&lt;/li&gt;';        //     }        //     // 拼接进字符串        //     lis += li;        // }        // 计算下一页页码        var nextNum = pb.currentPage + 1;        if(nextNum &gt;= pb.totalPage){            nextNum = pb.totalPage;        }        var nextPage = '&lt;li onclick="javascript:load('+cid+','+nextNum+')" class="threeword"&gt;&lt;a href="javascript:void(0);"&gt;下一页&lt;/a&gt;&lt;/li&gt;';        var lastPage = '&lt;li onclick="javascript:load('+cid+','+pb.totalPage+')" class="threeword"&gt;&lt;a href="javascript:;"&gt;末页&lt;/a&gt;&lt;/li&gt;';        lis += nextPage;        lis += lastPage;        // 将lis内容设置到ul中        $("#pageNum").html(lis);        // 2. 列表数据展示        var route_lis = "";        for (var i = 0; i &lt; pb.list.length; i++) {            // 获取数据 {rid": 1,"rname": "xxx","price": 999.0,xxxx}            var route = pb.list[i];            var li = '&lt;li&gt;\n' +                '                &lt;div class="img"&gt;&lt;img src="'+route.rimage+'" style="width: 299px"&gt;&lt;/div&gt;\n' +                '                    &lt;div class="text1"&gt;\n' +                '                    &lt;p&gt;'+route.rname+'&lt;/p&gt;\n' +                '                    &lt;br/&gt;\n' +                '                    &lt;p&gt;'+route.routeIntroduce+'&lt;/p&gt;\n' +                '                &lt;/div&gt;\n' +                '                &lt;div class="price"&gt;\n' +                '                    &lt;p class="price_num"&gt;\n' +                '                    &lt;span&gt;&amp;yen;&lt;/span&gt;\n' +                '                &lt;span&gt;'+route.price+'&lt;/span&gt;\n' +                '                &lt;span&gt;起&lt;/span&gt;\n' +                '                &lt;/p&gt;\n' +                '                &lt;p&gt;&lt;a href="route_detail.html"&gt;查看详情&lt;/a&gt;&lt;/p&gt;\n' +                '                &lt;/div&gt;\n' +                '             &lt;/li&gt;';            route_lis += li;        }        $("#route").html(route_lis);        // 每次点击翻页后，定位到页面顶部        window.scrollTo(0,0);    });}&lt;/script&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旅游网项目01</title>
      <link href="/2019/07/21/javaweb/lu-you-wang-xiang-mu-01/"/>
      <url>/2019/07/21/javaweb/lu-you-wang-xiang-mu-01/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>为了巩固web基础知识，提升综合运用能力，故编写此项目，以做练习。</p><p>今日内容为登录注册内容。</p><a id="more"></a><h2 id="2-技术选型"><a href="#2-技术选型" class="headerlink" title="2. 技术选型"></a>2. 技术选型</h2><h3 id="2-1-Web层"><a href="#2-1-Web层" class="headerlink" title="2.1 Web层"></a>2.1 <code>Web</code>层</h3><ol><li><code>Servlet</code>：前端控制器</li><li><code>html</code>：视图</li><li><code>Filter</code>：过滤器</li><li><code>BeanUtils</code>：数据封装</li><li><code>Jackson</code>：json序列化工具</li></ol><h3 id="2-2-Service层"><a href="#2-2-Service层" class="headerlink" title="2.2 Service层"></a>2.2 <code>Service</code>层</h3><ol><li><code>Javamail</code>：java发送邮件工具</li><li><code>Redis</code>：nosql内存数据库</li><li><code>Jedis</code>：java的Redis客户端</li></ol><h3 id="2-3-Dao层"><a href="#2-3-Dao层" class="headerlink" title="2.3  Dao层"></a>2.3  <code>Dao</code>层</h3><ol><li><code>MySQL</code>：后台数据库</li><li><code>Druid</code>：数据库连接池</li><li><code>JdbcTemplate</code>：jdbc的工具</li></ol><h2 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3. 创建数据库"></a>3. 创建数据库</h2><pre><code class="sql">-- 创建数据库create database travel;-- 使用数据库use travel;-- 创建表/*==============================================================*//* DBMS name:      MySQL 5.0                                    *//* Created on:     2019/7/21 20:13:29                           *//*==============================================================*/set names utf8;drop table if exists tab_favorite;drop table if exists tab_route_img;drop table if exists tab_route;drop table if exists tab_category;drop table if exists tab_seller;drop table if exists tab_user;/*==============================================================*//* Table: tab_category                                          *//*==============================================================*/create table tab_category(   cid                  int not null auto_increment,   cname                varchar(100) not null,   primary key (cid),   unique key AK_nq_categoryname (cname));/*==============================================================*//* Table: tab_favorite                                          *//*==============================================================*/create table tab_favorite(   rid                  int not null,   date                 date not null,   uid                  int not null,   primary key (rid, uid));/*==============================================================*//* Table: tab_route                                             *//*==============================================================*/create table tab_route(   rid                  int not null auto_increment,   rname                varchar(500) not null,   price                double not null,   routeIntroduce       varchar(1000),   rflag                char(1) not null,   rdate                varchar(19),   isThemeTour          char(1) not null,   count                int default 0,   cid                  int not null,   rimage               varchar(200),   sid                  int,   sourceId             varchar(50),   primary key (rid),   unique key AK_nq_sourceId (sourceId));/*==============================================================*//* Table: tab_route_img                                         *//*==============================================================*/create table tab_route_img(   rgid                 int not null auto_increment,   rid                  int not null,   bigPic               varchar(200) not null,   smallPic             varchar(200),   primary key (rgid));/*==============================================================*//* Table: tab_seller                                            *//*==============================================================*/create table tab_seller(   sid                  int not null auto_increment,   sname                varchar(200) not null,   consphone            varchar(20) not null,   address              varchar(200),   primary key (sid),   unique key AK_Key_2 (sname));/*==============================================================*//* Table: tab_user                                              *//*==============================================================*/create table tab_user(   uid                  int not null auto_increment,   username             varchar(100) not null,   password             varchar(32) not null,   name                 varchar(100),   birthday             date,   sex                  char(1),   telephone            varchar(11),   email                varchar(100),   status               char(1) ,   code                    varchar(50),   primary key (uid),   unique key AK_nq_username (username),   unique key AK_nq_code (code));-- 建立表连接alter table tab_favorite add constraint FK_route_favorite foreign key (rid)      references tab_route (rid) on delete restrict on update restrict;alter table tab_favorite add constraint FK_user_favorite foreign key (uid)      references tab_user (uid) on delete restrict on update restrict;alter table tab_route add constraint FK_category_route foreign key (cid)      references tab_category (cid) on delete restrict on update restrict;alter table tab_route add constraint FK_seller_route foreign key (sid)      references tab_seller (sid) on delete restrict on update restrict;alter table tab_route_img add constraint FK_route_routeimg foreign key (rid)      references tab_route (rid) on delete restrict on update restrict;-- 修改表默认字符集,解决1366问题alter table tab_category convert to character set utf8 collate utf8_general_ci;alter table tab_favorite convert to character set utf8 collate utf8_general_ci;alter table tab_route convert to character set utf8 collate utf8_general_ci;alter table tab_route_img convert to character set utf8 collate utf8_general_ci;alter table tab_seller convert to character set utf8 collate utf8_general_ci;alter table tab_user convert to character set utf8 collate utf8_general_ci;</code></pre><p>关于报错1366问题：<a href="https://blog.csdn.net/weixin_40539892/article/details/80227981" target="_blank" rel="noopener">详见文章</a></p><h2 id="4-注册功能"><a href="#4-注册功能" class="headerlink" title="4. 注册功能"></a>4. 注册功能</h2><h3 id="4-1-功能分析"><a href="#4-1-功能分析" class="headerlink" title="4.1 功能分析"></a>4.1 功能分析</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/22/register-1563759463469.bmp" alt="title"></p><h3 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h3><h4 id="4-2-1-表单校验"><a href="#4-2-1-表单校验" class="headerlink" title="4.2.1 表单校验"></a>4.2.1 表单校验</h4><pre><code class="javascript">// 使用Jquery完成表单校验// 定义校验方法// 用户名校验function checkUsername() {    // 1. 获取用户名值    var username = $("#username").val();    // 2. 定义正则    var reg_username = /^[\u4e00-\u9fa5]|[0-9a-zA-Z]{2,20}$/;    // 3. 判断，给出提示信息    var flag = reg_username.test(username);    if (flag){        // 用户名合法        $("#username").css("border","");    }else {        // 用户名非法，加红色边框        $("#username").css("border","1px solid red");    }    return flag;}// 密码校验function checkPwd() {    // 1. 获取值    var password = $("#password").val();    // 2. 定义正则    var reg_password = /^[\w_-]{6,20}$/;    // 3. 判断，返回信息    var flag = reg_password.test(password);    if (flag){        // 密码合法        $("#password").css("border","");    } else {        // 非法，加红色边框        $("#password").css("border","1px solid red");    }    return flag;}// 邮箱校验function checkEmail() {    var email = $("#email").val();    var reg_email = /^\w+@\w+\.\w+$/;    var flag = reg_email.test(email);    if(flag){        $("#email").css("border","");    }else {        $("#email").css("border","1px solid red");    }    return flag;}$(function () {    // 当表单提交时，调用所有校验方法    $("#registerForm").submit(function () {        return checkUsername() &amp;&amp; checkPwd() &amp;&amp; checkEmail();    });    // 当某一组件失去焦点时，调用对应的校验方法    $("#username").blur(checkUsername);    $("#password").blur(checkPwd);    $("#email").blur(checkEmail);});</code></pre><h4 id="4-2-2-异步提交表单"><a href="#4-2-2-异步提交表单" class="headerlink" title="4.2.2 异步提交表单"></a>4.2.2 异步提交表单</h4><p>使用异步提交表单是为了获取服务器响应的数据。因为前台使用的是html作为视图层，不能够直接从servlet相关的域对象获取值，只能通过ajax获取响应数据。</p><pre><code class="javascript">$(function () {    // 当表单提交时，调用所有校验方法    $("#registerForm").submit(function () {        // 1. 发送数据到服务器        if ( checkUsername() &amp;&amp; checkPwd() &amp;&amp; checkEmail()){            // 校验通过，发送ajax请求，提交表单数据            $.post("registUserServlet",$(this).serialize(),function (data) {                // 处理服务器响应的数据 data  {flag:true,errorMsg:"注册失败"}                if (data.flag){                    // 注册成功，跳转到成功页面                    location.href = "register_ok.html";                }else{                    // 注册失败，给errorMsg添加提示信息                    $("#errorMsg").html(data.errorMsg);                }            })        }        // 2. 不让页面跳转，不提交        return false;    });    // 当某一组件失去焦点时，调用对应的校验方法    $("#username").blur(checkUsername);    $("#password").blur(checkPwd);    $("#email").blur(checkEmail);});</code></pre><h3 id="4-3-后台代码实现"><a href="#4-3-后台代码实现" class="headerlink" title="4.3 后台代码实现"></a>4.3 后台代码实现</h3><h4 id="4-3-1-注册用户控制器：RegistUserServlet"><a href="#4-3-1-注册用户控制器：RegistUserServlet" class="headerlink" title="4.3.1 注册用户控制器：RegistUserServlet"></a>4.3.1 注册用户控制器：<code>RegistUserServlet</code></h4><pre><code class="java">package cn.itcast.travel.web.servlet;import cn.itcast.travel.domain.ResultInfo;import cn.itcast.travel.domain.User;import cn.itcast.travel.service.UserService;import cn.itcast.travel.service.impl.UserServiceImpl;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.commons.beanutils.BeanUtils;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.util.Map;@WebServlet("/registUserServlet")public class RegistUserServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 获取用户输入的验证码        String check = request.getParameter("check");        // 从session中获取生成的验证码        HttpSession session = request.getSession();        String checkcode_server = (String)session.getAttribute("CHECKCODE_SERVER");        session.removeAttribute("CHECKCODE_SERVER"); // 确保验证码只能使用一次        // 如果验证码错误，直接注册失败        if (checkcode_server == null || !checkcode_server.equalsIgnoreCase(check)){            // 验证码错误            ResultInfo info = new ResultInfo();            // 注册失败            info.setFlag(false);            info.setErrorMsg("验证码错误");            // 将info对象序列化为json            ObjectMapper mapper = new ObjectMapper();            String json = mapper.writeValueAsString(info);            response.setContentType("application/json;charset=utf-8");            response.getWriter().write(json);            return; // todo:为何return?        }        // 验证通过        // 1. 获取前台表单数据        Map&lt;String, String[]&gt; map = request.getParameterMap();        // 2. 封装为user对象        User user = new User();        try {            BeanUtils.populate(user,map);        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        // 3. 调用service完成注册        UserService service = new UserServiceImpl();        boolean flag = service.regist(user);        ResultInfo info = new ResultInfo();        // 4. 响应结果        if (flag){            // 注册成功            info.setFlag(true);        }else{            // 注册失败            info.setFlag(false);            info.setErrorMsg("注册失败！");        }        // 将info对象序列化为json        ObjectMapper mapper = new ObjectMapper();        System.out.println(info);        String json = mapper.writeValueAsString(info);        // 将json数据回写客户端        // 设置content-type        response.setContentType("application/json;charset=utf-8");        response.getWriter().write(json);    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><h4 id="4-3-2-用户服务业务层以及对应实现类"><a href="#4-3-2-用户服务业务层以及对应实现类" class="headerlink" title="4.3.2 用户服务业务层以及对应实现类"></a>4.3.2 用户服务业务层以及对应实现类</h4><p>服务层接口</p><pre><code class="java">package cn.itcast.travel.service;import cn.itcast.travel.domain.User;public interface UserService {    boolean regist(User user);}</code></pre><p>实现类</p><pre><code class="java">package cn.itcast.travel.service.impl;import cn.itcast.travel.dao.UserDao;import cn.itcast.travel.dao.impl.UserDaoImpl;import cn.itcast.travel.domain.User;import cn.itcast.travel.service.UserService;public class UserServiceImpl implements UserService {    private UserDao userDao = new UserDaoImpl();    /**     * 注册用户服务     * @param user     * @return 是否注册成功     */    @Override    public boolean regist(User user) {        // 1. 根据用户名查询用户对象        User u = userDao.findByUsername(user.getUsername());        // 判断是否为null        if (u != null){            // 不为空，说明用户名存在，注册失败            return false;        }        // 2. 保存用户信息        userDao.save(user);        return true;    }}</code></pre><h4 id="4-3-3-数据操作层及对应实现类"><a href="#4-3-3-数据操作层及对应实现类" class="headerlink" title="4.3.3 数据操作层及对应实现类"></a>4.3.3 数据操作层及对应实现类</h4><p>Dao</p><pre><code class="java">package cn.itcast.travel.dao;import cn.itcast.travel.domain.User;public interface UserDao {    User findByUsername(String username);    void save(User user);}</code></pre><p>实现类</p><pre><code class="java">package cn.itcast.travel.dao.impl;import cn.itcast.travel.dao.UserDao;import cn.itcast.travel.domain.User;import cn.itcast.travel.util.JDBCUtils;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcTemplate;public class UserDaoImpl implements UserDao {    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());    /**     * 查询用户是否存在     * @param username     * @return 返回查询到的用户     */    @Override    public User findByUsername(String username) {        /*            queryForObject()方法            如果查询结果条数为0或者大于1)都会返回异常，我们希望没查到直接返回null         */        User user = null;        try{            user = template.queryForObject("select * from tab_user where username = ? ",                    new BeanPropertyRowMapper&lt;User&gt;(User.class),username);        }catch (Exception e){            System.out.println("用户未查询到");        }        return user;    }    @Override    public void save(User user) {        // 1. 定义sql        String sql = "insert into tab_user(username,password,name,birthday,sex,telephone,email) values(?,?,?,?,?,?,?)";        // 2. 执行sql        template.update(sql,user.getUsername(),user.getPassword(),user.getName(),                            user.getBirthday(),user.getSex(),user.getTelephone(),user.getEmail());    }}</code></pre><h4 id="4-3-4-邮件激活"><a href="#4-3-4-邮件激活" class="headerlink" title="4.3.4 邮件激活"></a>4.3.4 邮件激活</h4><p>为什么要进行邮件激活？为了保证用户填写的邮箱是正确的。将来可以推广一些宣传信息，到用户邮箱中。</p><h4 id="4-3-5-发送邮件"><a href="#4-3-5-发送邮件" class="headerlink" title="4.3.5 发送邮件"></a>4.3.5 发送邮件</h4><ol><li>打开邮箱</li><li>开启授权码，并生成一个</li><li>在<code>MailUtils</code>中设置自己的邮箱账号和密码(授权码)</li></ol><blockquote><p><code>MailUtils</code>是邮箱工具类，调用其中的<code>sendMail</code>方法可以完成邮件发送</p></blockquote><h4 id="4-3-6-用户点击邮件激活"><a href="#4-3-6-用户点击邮件激活" class="headerlink" title="4.3.6 用户点击邮件激活"></a>4.3.6 用户点击邮件激活</h4><h5 id="4-3-6-1-功能分析"><a href="#4-3-6-1-功能分析" class="headerlink" title="4.3.6.1 功能分析"></a>4.3.6.1 功能分析</h5><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/22/sendEmail-1563759504470.png" alt="title"></p><h5 id="4-3-6-2-发送邮件代码实现"><a href="#4-3-6-2-发送邮件代码实现" class="headerlink" title="4.3.6.2 发送邮件代码实现"></a>4.3.6.2 发送邮件代码实现</h5><pre><code class="java">@Overridepublic boolean regist(User user) {    // 1. 根据用户名查询用户对象    User u = userDao.findByUsername(user.getUsername());    // 判断是否为null    if (u != null){        // 不为空，说明用户名存在，注册失败        return false;    }    // 2. 保存用户信息    // 2.1 设置激活码，唯一字符串    String uuid = UuidUtil.getUuid();    System.out.println(uuid);    user.setCode(uuid);    // 2.2 设置激活状态    user.setStatus("N"); // 默认未激活    userDao.save(user);    // 3. 激活邮件发送，邮件正文    // 邮件正文 todo:后期项目部署需要将href改为服务器域名    String content = "&lt;a href='http://localhost/travel/activeUserServlet?code="+user.getCode()+"'&gt;点击激活账户&lt;/a&gt;";    // 发送邮件    MailUtils.sendMail(user.getEmail(),content,"激活邮件");    return true;}</code></pre><h5 id="4-3-6-3-修改保存Dao代码，以及存储status和code代码逻辑"><a href="#4-3-6-3-修改保存Dao代码，以及存储status和code代码逻辑" class="headerlink" title="4.3.6.3 修改保存Dao代码，以及存储status和code代码逻辑"></a>4.3.6.3 修改保存Dao代码，以及存储<code>status</code>和<code>code</code>代码逻辑</h5><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/22/update-1563759516887.png" alt="title"></p><h5 id="4-3-6-4-激活Servlet实现"><a href="#4-3-6-4-激活Servlet实现" class="headerlink" title="4.3.6.4 激活Servlet实现"></a>4.3.6.4 激活<code>Servlet</code>实现</h5><pre><code class="java">package cn.itcast.travel.web.servlet;import cn.itcast.travel.service.impl.UserServiceImpl;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/activeUserServlet")public class ActiveUserServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 获取激活码        String code = request.getParameter("code");        if (code != null){            // 2. 调用service完成激活            UserServiceImpl service = new UserServiceImpl();            boolean flag = service.active(code);            // 3. 判断标记            String msg = null;            if (flag){                // 激活成功                msg = "激活成功，请&lt;a href='login.html'&gt;登录&lt;/a&gt;";            }else{                // 激活失败                msg = "激活失败，请联系管理员！";            }            // 回写数据            response.setContentType("text/html;charset=utf-8");            response.getWriter().write(msg);        }    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><h5 id="4-3-6-5-激活Service代码"><a href="#4-3-6-5-激活Service代码" class="headerlink" title="4.3.6.5 激活Service代码"></a>4.3.6.5 激活<code>Service</code>代码</h5><pre><code class="java">@Overridepublic boolean active(String code) {    // 1. 根据激活码查询用户对象    User user = userDao.findByCode(code);    if (user != null){        // 2. 调用dao的修改激活状态的方法        userDao.updateStatus(user);        return true;    }else{        return false;    }}</code></pre><h5 id="4-3-6-6-激活Dao代码：findByCode-amp-updateStatus"><a href="#4-3-6-6-激活Dao代码：findByCode-amp-updateStatus" class="headerlink" title="4.3.6.6 激活Dao代码：findByCode&amp;updateStatus"></a>4.3.6.6 激活Dao代码：<code>findByCode&amp;updateStatus</code></h5><pre><code class="java">/** * 根据激活码查询用户对象* @param code* @return 查询到的对象*/@Overridepublic User findByCode(String code) {    User user = null;    try{        String sql = "select * from tab_user where code = ?";        user = template.queryForObject(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class), code);    }catch (DataAccessException e){        e.printStackTrace();    }    return user;}/*** 修改指定用户激活状态* @param user*/@Overridepublic void updateStatus(User user) {    template.update("update tab_user set status = 'Y' where uid = ?",user.getUid());}</code></pre><h2 id="5-登录"><a href="#5-登录" class="headerlink" title="5. 登录"></a>5. 登录</h2><h3 id="5-1-分析"><a href="#5-1-分析" class="headerlink" title="5.1 分析"></a>5.1 分析</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/22/login-1563759530918.bmp" alt="title"></p><h3 id="5-2-前台代码实现"><a href="#5-2-前台代码实现" class="headerlink" title="5.2 前台代码实现"></a>5.2 前台代码实现</h3><pre><code class="javascript">&lt;script&gt;    $(function () {    // 1. 给登录按钮绑定单击事件    $("#btn_sub").click(function () {        // 2. 发送ajax请求，提交表单数据        $.post("loginServlet",$("#loginForm").serialize(),function (data) {            // data: {flag:false,errorMsg:""}            if (data.flag){                // 登录成功                location.href = "index.html";            } else{                // 登录失败                $("#errorMsg").html(data.errorMsg);            }        });    });});&lt;/script&gt;</code></pre><h3 id="5-3-后台代码实现"><a href="#5-3-后台代码实现" class="headerlink" title="5.3 后台代码实现"></a>5.3 后台代码实现</h3><h4 id="5-3-1-登录控制器：LoginServlet"><a href="#5-3-1-登录控制器：LoginServlet" class="headerlink" title="5.3.1 登录控制器：LoginServlet"></a>5.3.1 登录控制器：<code>LoginServlet</code></h4><pre><code class="java">package cn.itcast.travel.web.servlet;import cn.itcast.travel.domain.ResultInfo;import cn.itcast.travel.domain.User;import cn.itcast.travel.service.impl.UserServiceImpl;import com.fasterxml.jackson.databind.ObjectMapper;import org.apache.commons.beanutils.BeanUtils;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.util.Map;@WebServlet("/loginServlet")public class LoginServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 获取用户名和密码        Map&lt;String, String[]&gt; map = request.getParameterMap();        // 2. 封装User对象        User user = new User();        try {            BeanUtils.populate(user,map);        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        // 3. 调用service查询        UserServiceImpl service = new UserServiceImpl();        User u = service.login(user);        ResultInfo info = new ResultInfo();        // 4. 判断用户对象是否为null        if (u == null){            // 用户名或密码错误            info.setFlag(false);            info.setErrorMsg("用户名或密码错误");        }        // 5. 判断用户账户是否激活        if (u != null &amp;&amp; !"Y".equals(u.getStatus())){            // 用户未激活            info.setFlag(false);            info.setErrorMsg("您的账户尚未激活，请激活");        }        // 6. 判断登录成功        if (u != null &amp;&amp; "Y".equals(u.getStatus())){            // 登录成功            info.setFlag(true);            // 将登陆用户信息存入session中            request.getSession().setAttribute("user",u);        }        // 响应数据        ObjectMapper mapper = new ObjectMapper();        response.setContentType("application/json;charset=utf-8");        mapper.writeValue(response.getOutputStream(),info);    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><h4 id="5-3-2-服务层代码"><a href="#5-3-2-服务层代码" class="headerlink" title="5.3.2 服务层代码"></a>5.3.2 服务层代码</h4><pre><code class="java">/*** 进行登录操作* @param user* @return User对象*/@Overridepublic User login(User user) {    return userDao.findByUsernameAndPassword(user.getUsername(),user.getPassword());}</code></pre><h4 id="5-3-3-Dao层代码"><a href="#5-3-3-Dao层代码" class="headerlink" title="5.3.3 Dao层代码"></a>5.3.3 Dao层代码</h4><pre><code class="java">/*** 根据用户名和密码，查询是否有此用户* @param username* @param password* @return user对象*/@Overridepublic User findByUsernameAndPassword(String username, String password) {    User user = null;    try{        String sql = "select * from tab_user where username = ? and password = ?";        user = template.queryForObject(sql, new BeanPropertyRowMapper&lt;User&gt;(User.class), username,password);    }catch (DataAccessException e){        e.printStackTrace();    }    return user;}</code></pre><h4 id="5-3-4-用户登录后，主页显示登录用户名功能"><a href="#5-3-4-用户登录后，主页显示登录用户名功能" class="headerlink" title="5.3.4 用户登录后，主页显示登录用户名功能"></a>5.3.4 用户登录后，主页显示登录用户名功能</h4><p><code>header.html</code>代码</p><pre><code class="javascript">&lt;script&gt;    $(function () {       $.get("findUserServlet",{},function (data) {           var msg = "欢迎回来，"+data.name;           $("#span_username").html(msg);       })    });&lt;/script&gt;</code></pre><p>控制器代码</p><pre><code class="java">package cn.itcast.travel.web.servlet;import com.fasterxml.jackson.databind.ObjectMapper;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/findUserServlet")public class FindUserServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 从session中获取登录用户        Object user = request.getSession().getAttribute("user");        // 将user回写客户端        ObjectMapper mapper = new ObjectMapper();        response.setContentType("application/json;charset=utf-8");        mapper.writeValue(response.getOutputStream(),user);    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><h2 id="6-退出"><a href="#6-退出" class="headerlink" title="6. 退出"></a>6. 退出</h2><p>什么情况下算登录了？答：session中有user对象。</p><ul><li>实现步骤：<ul><li>访问servlet，将session销毁</li><li>跳转到登录页面</li></ul></li><li>前台代码实现：</li></ul><pre><code class="javascript">&lt;a href="javascript:location.href='exitServlet';"&gt;退出&lt;/a&gt;</code></pre><ul><li>后台代码实现：</li></ul><pre><code class="java">package cn.itcast.travel.web.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/exitServlet")public class ExitServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 销毁session        request.getSession().invalidate();        // 2. 跳转到登录页面        response.sendRedirect(request.getContextPath()+"/login.html");    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2019/07/16/javaweb/maven/"/>
      <url>/2019/07/16/javaweb/maven/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Maven基础概念和配置"><a href="#1-Maven基础概念和配置" class="headerlink" title="1. Maven基础概念和配置"></a>1. <code>Maven</code>基础概念和配置</h2><p>Maven是一个项目管理工具，它包含了一个项目对象模型(<code>POM:Project Object Model</code>)，一组标准集合，一个项目生命周期(<code>Project Lifecycle</code>)，一个依赖管理系统(<code>Dependency Management System</code>)，和用来运行定义在生命周期阶段(<code>phase</code>)中插件(<code>plugin</code>)目标(<code>goal</code>)的逻辑。</p><a id="more"></a><h3 id="1-1-Maven能解决的问题"><a href="#1-1-Maven能解决的问题" class="headerlink" title="1.1 Maven能解决的问题"></a>1.1 <code>Maven</code>能解决的问题</h3><ol><li>依赖管理</li><li>编译代码</li><li>单元测试</li><li>打包项目</li></ol><h3 id="1-2-安装与配置"><a href="#1-2-安装与配置" class="headerlink" title="1.2 安装与配置"></a>1.2 安装与配置</h3><h4 id="1-2-1-官网下载Maven"><a href="#1-2-1-官网下载Maven" class="headerlink" title="1.2.1 官网下载Maven"></a>1.2.1 官网下载<code>Maven</code></h4><p>官网下载<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">链接</a></p><p>点击<code>apache-maven-3.6.1-bin.zip</code>下载</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/downloadMaven-1563321026172.png" alt="title"></p><h4 id="1-2-2-解压"><a href="#1-2-2-解压" class="headerlink" title="1.2.2 解压"></a>1.2.2 解压</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/jieya-1563321057082.png" alt="title"></p><h4 id="1-2-3-配置环境变量"><a href="#1-2-3-配置环境变量" class="headerlink" title="1.2.3 配置环境变量"></a>1.2.3 配置环境变量</h4><blockquote><p>注意：安装maven之前，确保电脑中已安装JDK，如安装Maven3则必须是JDK1.7以上。</p></blockquote><p>新建一个系统变量，变量名：<code>MAVEN_HOME</code>，变量值为你解压的文件路径，例我的路径是：<code>D:\Maven\apache-maven-3.6.1</code></p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/add_variable-1563321074839.png" alt="title"></p><p>添加到系统路径中：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/addToPath-1563321084507.png" alt="title"></p><p>完成后打开<code>cmd</code>输入<code>mvn -v</code>，显示版本信息则配置正确。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/mvn-1563321095966.png" alt="title"></p><h3 id="1-3-本地仓库配置"><a href="#1-3-本地仓库配置" class="headerlink" title="1.3 本地仓库配置"></a>1.3 本地仓库配置</h3><p>仓库分三类：本地仓库，远程仓库[私服]，中央仓库。</p><ul><li>本地仓库：用于存储从远程仓库或中央仓库下载的插件和jar包，项目使用的一些插件或jar包。优先从本地仓库查找，默认本地仓库位置在<code>${user.home}/.m2/repository</code>，<code>${user.home}</code>表示windows用户目录。</li></ul><p>在<code>maven</code>的<code>conf</code>文件夹下的<code>settings.xml</code>文件中配置本地仓库。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/settings-1563321177548.png" alt="title"></p><ul><li>远程仓库：又叫私服仓库，如果私服仓库存在，且在本地仓库所需的插件或jar包没有的情况下，会从当前仓库下载。</li><li>中央仓库：在maven软件中内置一个远程仓库地址<code>http://repo1.maven.org/maven2</code>。它是中央仓库(<code>Central Repository</code>)，服务于整个互联网，由Maven官方团队维护，里面存储了非常全面的jar包，包含了世界上大部分主流的开源项目构件。</li></ul><h2 id="2-Maven工程的认识"><a href="#2-Maven工程的认识" class="headerlink" title="2. Maven工程的认识"></a>2. <code>Maven</code>工程的认识</h2><h3 id="2-1-Maven工程的目录结构"><a href="#2-1-Maven工程的目录结构" class="headerlink" title="2.1 Maven工程的目录结构"></a>2.1 <code>Maven</code>工程的目录结构</h3><ul><li>工程目录结构：</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/mavenProject-1563321204302.png" alt="title"><br>作为一个<code>Maven</code>工程，它的<code>src</code>目录和<code>pom.xml</code>是必备的。</p><ul><li><code>target</code>：项目输出位置，编译后的<code>class</code>文件会输出到此目录。</li><li><p><code>pom.xml</code>：<code>maven</code>项目核心配置文件。</p></li><li><p><code>src</code>目录结构：</p></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/src-1563321214987.png" alt="title"></p><ul><li><p>标准<code>src</code>目录结构：</p><ul><li><code>src/main/java</code>：存放项目的<code>.java</code>文件。</li><li><code>src/main/resources</code>：存放项目资源文件，如<code>spring,hibernate</code>配置文件。</li><li><code>src/test/java</code>：存放所有单元测试<code>.java</code>文件，如<code>Junit</code>测试类。</li><li><code>src/test/resources</code>：测试资源文件。</li></ul></li></ul><ul><li>运行项目：进入maven工程目录(当前目录有<code>pom.xml</code>)，打开<code>cmd</code>，运行<code>mvn tomcat:run</code>命令即可。</li></ul><h2 id="3-Maven常用命令"><a href="#3-Maven常用命令" class="headerlink" title="3. Maven常用命令"></a>3. <code>Maven</code>常用命令</h2><p>我们可以在<code>cmd</code>中通过一系列的<code>maven</code>命令来对我们的<code>maven</code>工程进行编译、测试、运行、打包、安装、部署。</p><h3 id="3-1-compile"><a href="#3-1-compile" class="headerlink" title="3.1 compile"></a>3.1 <code>compile</code></h3><p><code>compile</code>是<code>maven</code>工程的编译命令，作用是将<code>src/main/java</code>下的文件编译为<code>class</code>文件输出到<code>target</code>目录下。</p><h3 id="3-2-test"><a href="#3-2-test" class="headerlink" title="3.2 test"></a>3.2 <code>test</code></h3><p><code>test</code>是<code>maven</code>工程的测试命令，执行<code>mvn test</code>命令，会执行<code>src/test/java</code>下的单元测试类。</p><h3 id="3-3-clean"><a href="#3-3-clean" class="headerlink" title="3.3 clean"></a>3.3 <code>clean</code></h3><p><code>clean</code>是<code>maven</code>工程的清理命令，执行<code>mvn clean</code>命令会删除<code>target</code>目录及内容。</p><h3 id="3-4-package"><a href="#3-4-package" class="headerlink" title="3.4 package"></a>3.4 <code>package</code></h3><p><code>package</code>是<code>maven</code>工程的打包命令，对于<code>java</code>工程执行该命令会打包成<code>jar</code>包，<code>web</code>工程则会打包成<code>war</code>包。</p><h3 id="3-5-install"><a href="#3-5-install" class="headerlink" title="3.5 install"></a>3.5 <code>install</code></h3><p><code>install</code>是<code>maven</code>工程的安装命令，执行该命令会将<code>maven</code>打包成<code>jar</code>包或<code>war</code>包发布到本地仓库。</p><h3 id="3-6-Maven指令的生命周期"><a href="#3-6-Maven指令的生命周期" class="headerlink" title="3.6 Maven指令的生命周期"></a>3.6 <code>Maven</code>指令的生命周期</h3><p><code>maven</code>对项目构建过程分为三套相互独立的生命周期，请注意是<strong><em>三套</em></strong>且<strong><em>相互独立</em></strong>的。</p><p>这三套生命周期分别是：</p><ol><li><code>Clean Lifecycle</code>：在进行真正的构建之前进行一些清理工作。</li><li><code>Default Lifecycle</code>：构建的核心部分，进行编译、测试、打包、部署等等。</li><li><code>Site Lifecycle</code>：生成项目报告、站点，发布站点。</li></ol><h3 id="3-7-maven的概念模型"><a href="#3-7-maven的概念模型" class="headerlink" title="3.7 maven的概念模型"></a>3.7 <code>maven</code>的概念模型</h3><p><code>Maven</code>包含了一个项目对象模型(<code>POM:Project Object Model</code>)，一组标准集合，一个项目生命周期(<code>Project Lifecycle</code>)，一个依赖管理系统(<code>Dependency Management System</code>)，和用来运行定义在生命周期阶段(<code>phase</code>)中插件(<code>plugin</code>)目标(<code>goal</code>)的逻辑。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/maven_model-1563321257756.png" alt="title"></p><ul><li><p>项目对象模型：一个<code>maven</code>工程都有一个<code>pom.xml</code>文件，通过该文件定义项目的坐标、项目依赖、项目信息、插件目标等。</p></li><li><p>依赖管理系统：通过maven的依赖管理对项目所依赖的jar包进行统一管理。</p><ul><li>如：项目依赖<code>junit4.9</code>，通过在<code>pom.xml</code>中定义<code>junit4.9</code>的依赖即使用<code>junit4.9</code>，如下所示<code>junit4.9</code>的依赖定义：</li></ul><pre><code class="xml">&lt;dependencies&gt;    &lt;!-- 此项目运行使用junit，所以此项目依赖junit --&gt;    &lt;dependency&gt;        &lt;!-- junit的项目名称 --&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;!-- junit的模块名称 --&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;!-- junit版本 --&gt;        &lt;version&gt;4.9&lt;/version&gt;        &lt;!-- 依赖范围：单元测试时使用junit --&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre></li><li><p>一个项目生命周期：使用maven完成项目的构建，项目构建包括：清理、编译、测试、部署等过程。maven将这些过程规范为一个生命周期，如下所示：</p></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/lifecycle-1563321277883.png" alt="title"></p><ul><li>一组标准集合：maven将整个项目管理过程定义一组标准，比如：通过maven构建工程有标准的目录结构，标准的生命周期阶段、依赖管理和标准的坐标定义等。</li><li>插件(<code>plugin</code>)目标(<code>goal</code>)：maven管理项目生命周期过程都是基于插件完成的。</li></ul><h2 id="4-IDEA开发maven项目"><a href="#4-IDEA开发maven项目" class="headerlink" title="4. IDEA开发maven项目"></a>4. IDEA开发<code>maven</code>项目</h2><h3 id="4-1-IDEA的maven配置"><a href="#4-1-IDEA的maven配置" class="headerlink" title="4.1 IDEA的maven配置"></a>4.1 IDEA的<code>maven</code>配置</h3><p>打开<code>--&gt;File--&gt;Settings</code>，搜索maven，配置如下内容：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/IDEASettingMaven-1563321323464.png" alt="title"></p><h3 id="4-2-在IDEA中创建一个maven的web工程"><a href="#4-2-在IDEA中创建一个maven的web工程" class="headerlink" title="4.2 在IDEA中创建一个maven的web工程"></a>4.2 在IDEA中创建一个<code>maven</code>的<code>web</code>工程</h3><p>新建工程，选择IDEA提供好的maven的web工程模板</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/create_project-1563321341204.png" alt="title"></p><p>点击<code>Next</code>填写项目信息</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/create_project02-1563321355572.png" alt="title"></p><p>点击<code>Next</code>，配置相关属性，此处不做改动。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/create_project03-1563321363619.png" alt="title"></p><p>再点击<code>Next</code>选择项目所在目录，最后点击<code>Finish</code>，等待项目构建。显示如下信息则构建成功。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/create_project04-1563321374779.png" alt="title"></p><p>最终目录结构并不完整，需手动补齐。手动添加<code>src/main/java</code>目录，将<code>java</code>目录设置为<code>Sources Root</code>。</p><h4 id="4-2-1-创建一个Servlet"><a href="#4-2-1-创建一个Servlet" class="headerlink" title="4.2.1 创建一个Servlet"></a>4.2.1 创建一个Servlet</h4><pre><code class="java">package com.zero.servlet;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebServlet("/testServlet")public class TestServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        request.getRequestDispatcher("/hello.jsp").forward(request,response);    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><h4 id="4-2-2-配置pom-xml"><a href="#4-2-2-配置pom-xml" class="headerlink" title="4.2.2  配置pom.xml"></a>4.2.2  配置<code>pom.xml</code></h4><p>此时编译器会提示servlet相关包不存在，需要在<code>pom.xml</code>中添加坐标。添加jar包坐标时，还可指定该jar包的作用范围。</p><pre><code class="xml">&lt;dependencies&gt;&lt;!--    放置项目运行所依赖的jar包--&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.11&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;        &lt;version&gt;2.5&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;        &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;        &lt;version&gt;2.0&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;        &lt;version&gt;3.1.0&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>依赖范围表：</p><table><thead><tr><th>依赖范围</th><th>编译时有效</th><th>测试时有效</th><th>运行时有效</th><th>例</th></tr></thead><tbody><tr><td><code>compile</code></td><td>Y</td><td>Y</td><td>Y</td><td><code>spring-core</code></td></tr><tr><td><code>test</code></td><td>-</td><td>Y</td><td>-</td><td><code>Junit</code></td></tr><tr><td><code>provided</code></td><td>Y</td><td>Y</td><td>-</td><td><code>servlet-api</code></td></tr><tr><td><code>runtime</code></td><td>-</td><td>Y</td><td>Y</td><td>JDBC驱动</td></tr><tr><td><code>system</code></td><td>Y</td><td>Y</td><td>-</td><td>本地的，Maven仓库之外的类库</td></tr></tbody></table><p><code>scope</code>范围依赖小结：</p><ul><li>默认引入的jar包使用<code>compile</code>[默认范围，可不写,编译、测试、运行都有效]</li><li><code>servlet-api、jsp-api</code>使用<code>provided</code>[编译、测试有效，运行时无效，防止和tomcat下jar包冲突]</li><li>JDBC驱动包使用<code>runtime</code>[测试、运行有效]</li><li><code>Junit</code>使用<code>test</code>[仅测试有效]</li></ul><p>依赖范围由强到弱的顺序是：<code>compile&gt;provided&gt;runtime&gt;test</code></p><h4 id="4-2-3-运行"><a href="#4-2-3-运行" class="headerlink" title="4.2.3 运行"></a>4.2.3 运行</h4><p>点击<code>M</code>图标，输入<code>tomcat7:run</code>运行maven项目。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/pom-1563321412176.png" alt="title"></p><h4 id="4-2-4-配置断点调试"><a href="#4-2-4-配置断点调试" class="headerlink" title="4.2.4 配置断点调试"></a>4.2.4 配置断点调试</h4><p>在项目配置中添加maven项目，设置操作命令。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/debug-1563321428242.png" alt="title"><br>点击小虫子，即可启动<code>debug</code>模式。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/17/debug2-1563321435566.png" alt="title"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><h3 id="5-1-maven仓库"><a href="#5-1-maven仓库" class="headerlink" title="5.1 maven仓库"></a>5.1 <code>maven</code>仓库</h3><ol><li><code>maven</code>仓库的类型有哪些？</li><li><code>maven</code>工程查找仓库的流程是什么？</li><li>本地仓库如何配置？</li></ol><h3 id="5-2-常用的maven命令"><a href="#5-2-常用的maven命令" class="headerlink" title="5.2 常用的maven命令"></a>5.2 常用的<code>maven</code>命令</h3><ul><li><code>compile</code>：编译</li><li><code>clean</code>：清理</li><li><code>test</code>：测试</li><li><code>package</code>：打包</li><li><code>install</code>：安装</li></ul><h3 id="5-3-坐标定义"><a href="#5-3-坐标定义" class="headerlink" title="5.3 坐标定义"></a>5.3 坐标定义</h3><p>在<code>pom.xml</code>中定义坐标，内容包括：<code>groupId、artifactld、version</code>，示例如下：</p><pre><code class="xml">&lt;!--项目名称，定义为组织名+项目名，类似包名--&gt;&lt;groupId&gt;com.zero.maven&lt;/groupId&gt;&lt;!--模块名称--&gt;&lt;artifactId&gt;maven-first&lt;/artifactId&gt;&lt;!--当前项目版本号，snapshot为快照版本即非正式版本，release为正式发布版本--&gt;&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&lt;!--打包类型--&gt;&lt;packaging&gt;war&lt;/packaging&gt;    &lt;!--        jar:执行package会打包成jar包         war：执行package会打包成war包        pom：用于maven工程的继承，通常父工程设置为pom    --&gt;</code></pre><h3 id="5-4-pom基本配置"><a href="#5-4-pom基本配置" class="headerlink" title="5.4 pom基本配置"></a>5.4 <code>pom</code>基本配置</h3><p><code>pom.xml</code>是<code>Maven</code>项目的核心配置文件，位于每个工程的根目录，基本配置如下：</p><pre><code class="xml">&lt;project&gt;文件的根节点&lt;/project&gt;&lt;modelversion&gt;pom.xml使用的对象模型版本&lt;/modelversion&gt;&lt;groupId&gt;项目名称，一般写项目的域名&lt;/groupId&gt;&lt;artifactld&gt;模块名称或子项目名&lt;/artifactld&gt;&lt;version&gt;产品的版本号&lt;/version&gt;&lt;packaging&gt;打包类型，有jar、war、pom等&lt;/packaging&gt;&lt;name&gt;项目的显示名，常用于Maven生成的文档&lt;/name&gt;&lt;description&gt;项目描述，常用于Maven生成的文档&lt;/description&gt;&lt;dependencies&gt;项目依赖构件配置，配置项目依赖构件的坐标&lt;/dependencies&gt;&lt;build&gt;项目构建配置，配置编译、运行插件等&lt;/build&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据库</title>
      <link href="/2019/07/14/database/redis/"/>
      <url>/2019/07/14/database/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p><code>Redis</code>是一款高性能的NOSQL系列的非关系型数据库，完全开源免费的数据库，key-value型数据库，遵守BSD协议。</p><a id="more"></a><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><h3 id="1-1-什么是NOSQL"><a href="#1-1-什么是NOSQL" class="headerlink" title="1.1 什么是NOSQL"></a>1.1 什么是NOSQL</h3><p><code>NoSQL(NoSQL = Not Only SQL)</code>，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</p><p>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h4 id="1-1-1-NoSQL和关系型数据库比较"><a href="#1-1-1-NoSQL和关系型数据库比较" class="headerlink" title="1.1.1 NoSQL和关系型数据库比较"></a>1.1.1 NoSQL和关系型数据库比较</h4><ul><li>优点：<ul><li>成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>查询速度：nosql数据库将数据存储在缓存中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</li><li>存储数据的格式： nosql存储格式是key-value形式、文档形式，图片形式等等，所以可以存储基础类型以及对象或是集合等各种格式，而数据库则只支持基础类型。</li><li>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很难。</li></ul></li><li>缺点：<ul><li>维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库十几年的技术同日而语。</li><li>不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定的用户学习成本和使用成本。</li><li>不提供关系型数据库对事务的处理。</li></ul></li></ul><h4 id="1-1-2-关系型数据库的优势"><a href="#1-1-2-关系型数据库的优势" class="headerlink" title="1.1.2 关系型数据库的优势"></a>1.1.2 关系型数据库的优势</h4><ol><li>复杂查询可以用SQL语句方便的在单表或多表之间做非常<strong>复杂的数据查询</strong>。</li><li><strong>事务支持</strong>使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</li></ol><h4 id="1-1-3-非关系型数据库的优势"><a href="#1-1-3-非关系型数据库的优势" class="headerlink" title="1.1.3 非关系型数据库的优势"></a>1.1.3 非关系型数据库的优势</h4><ol><li>NoSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所有<strong>性能非常高</strong>。</li><li>同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平<strong>扩展</strong>。</li></ol><h4 id="1-1-4-总结"><a href="#1-1-4-总结" class="headerlink" title="1.1.4 总结"></a>1.1.4 总结</h4><ol><li>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL时使用NoSQL数据库。</li><li>使用NoSQL数据库对关系型数据库的不足进行弥补。</li><li>一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据。</li></ol><h3 id="1-2-主流的NoSQL产品"><a href="#1-2-主流的NoSQL产品" class="headerlink" title="1.2 主流的NoSQL产品"></a>1.2 主流的NoSQL产品</h3><ul><li>键值存储数据库<ul><li>相关产品：Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</li><li>典型应用：内容缓存，主要用于处理大量数据的高访问负载。</li><li>数据模型：一系列键值对</li><li>优势：快速查询</li><li>劣势：存储的数据缺少结构化</li></ul></li><li>列存储数据库<ul><li>相关产品：Cassandra, HBase, Riak</li><li>典型应用：分布式的文件系统</li><li>数据模型：以列簇式存储，将同一列数据存在一起</li><li>优势：查找速度快，可扩展性强，更容易进行分布式扩展</li><li>劣势：功能相对局限</li></ul></li><li>文档性数据库<ul><li>相关产品：CouchDB、MongoDB</li><li>典型应用：Web应用（与Key-Value类似，Value是结构化的）</li><li>数据模型：一系列键值对</li><li>优势：数据结构要求不严格</li><li>劣势：查询性能不高，且缺乏统一的查询语法</li></ul></li><li>图形(Graph)数据库<ul><li>相关数据库：Neo4J、InfoGrid、Infinite Graph</li><li>典型应用：社交网络</li><li>数据模型：图结构</li><li>优势：利用图结构相关算法</li><li>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</li></ul></li></ul><h3 id="1-3-什么是Redis"><a href="#1-3-什么是Redis" class="headerlink" title="1.3 什么是Redis"></a>1.3 什么是Redis</h3><p>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</p><ol><li>字符串类型：string</li><li>哈希类型：hash</li><li>列表类型：list</li><li>集合类型：set</li><li>有序集合类型：sortedset</li></ol><h4 id="1-3-1-redis的应用场景"><a href="#1-3-1-redis的应用场景" class="headerlink" title="1.3.1 redis的应用场景"></a>1.3.1 redis的应用场景</h4><p>缓存（数据查询、短连接、新闻内容、商品内容等等）</p><ul><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ul><h2 id="2-下载与安装"><a href="#2-下载与安装" class="headerlink" title="2. 下载与安装"></a>2. 下载与安装</h2><ol><li>官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></li><li>中文网：<a href="https://www.redis.net.cn/" target="_blank" rel="noopener">https://www.redis.net.cn/</a></li><li>windows下载地址：<a href="https://github.com/dmajkic/redis/downloads" target="_blank" rel="noopener">https://github.com/dmajkic/redis/downloads</a></li><li>安装与使用：解压即可直接使用<ul><li><code>redis.windows.conf</code>：配置文件</li><li><code>redis-cli.exe</code>：redis的客户端</li><li><code>redis-server.exe</code>：redis服务器端</li></ul></li><li>Redis桌面管理工具：<a href="https://redisdesktop.com/download" target="_blank" rel="noopener">下载地址</a></li><li>安装为windows服务：<code>redis-server.exe --service-install redis.windows.conf</code><ul><li>启动服务：<code>redis-server --service-start</code></li><li>停止服务：<code>redis-server --service-stop</code></li><li>卸载服务：<code>redis-server --service-uninstall</code></li><li>连接客户端：<code>redis-cli</code>&amp;<code>redis-cli -h [服务器地址] -p [指定端口号] -a [连接数据库的密码,在conf中配置，默认无]</code></li></ul></li></ol><p>安装与部署服务参考<a href="https://www.cnblogs.com/dingguofeng/p/8709476.html" target="_blank" rel="noopener">文章</a></p><h2 id="3-命令操作"><a href="#3-命令操作" class="headerlink" title="3. 命令操作"></a>3. 命令操作</h2><h3 id="3-1-redis的数据结构"><a href="#3-1-redis的数据结构" class="headerlink" title="3.1 redis的数据结构"></a>3.1 redis的数据结构</h3><ul><li>redis存储的是：<code>key-value</code>格式的数据，其中key都是字符串，value有5种不同的数据结构。</li></ul><h4 id="value的五种数据结构"><a href="#value的五种数据结构" class="headerlink" title="value的五种数据结构"></a>value的五种数据结构</h4><ol><li>字符串类型：<code>string</code></li><li>哈希类型<code>hash</code>：<code>ma</code>p格式</li><li>列表类型 <code>list</code>：<code>linkedlis</code>t格式。支持重复元素</li><li>集合类型 <code>set</code>：不允许重复元素</li><li>有序集合类型<code>sortedset</code>：不允许重复元素，且元素有顺序</li></ol><h3 id="3-2-字符串类型-String"><a href="#3-2-字符串类型-String" class="headerlink" title="3.2 字符串类型:String"></a>3.2 字符串类型:<code>String</code></h3><ul><li>存储：<code>set key value</code></li><li>获取：<code>get key</code></li><li>删除：<code>del key</code></li></ul><pre><code class="powershell">127.0.0.1:6379&gt; set ts teststringOK127.0.0.1:6379&gt; get ts"teststring"127.0.0.1:6379&gt; del ts(integer) 1</code></pre><h3 id="3-3-哈希类型-Hash"><a href="#3-3-哈希类型-Hash" class="headerlink" title="3.3 哈希类型:Hash"></a>3.3 哈希类型:<code>Hash</code></h3><ul><li>存储：<code>hset key field value</code></li><li>获取：<ul><li><code>hget key field</code>：获取指定的<code>field</code>对应的值</li><li><code>hgetall key</code>：获取所有的<code>field</code>和<code>value</code></li></ul></li><li>删除：<code>hdel key field</code></li></ul><pre><code class="powershell">127.0.0.1:6379&gt; hset myhash username shangsan(integer) 1127.0.0.1:6379&gt; hset myhash password 123(integer) 1127.0.0.1:6379&gt; hget myhash username"shangsan"127.0.0.1:6379&gt; hgetall myhash1) "username"2) "shangsan"3) "password"4) "123"127.0.0.1:6379&gt; hdel myhash username(integer) 1127.0.0.1:6379&gt; hdel myhash password(integer) 1</code></pre><h3 id="3-4-列表类型-List"><a href="#3-4-列表类型-List" class="headerlink" title="3.4 列表类型:List"></a>3.4 列表类型:<code>List</code></h3><p>可以添加一个元素到列表的头部(左边)或尾部(右边)</p><ul><li>添加：<ul><li><code>lpush key value</code>：将元素加入列表左边。</li><li><code>rpush key value</code>：将元素加入列表右边</li></ul></li><li>获取：<code>lrange key start end</code>，获取指定范围的元素数据</li><li>删除：<ul><li><code>lpop key</code>：删除列表最左边的元素，并将元素返回。从左出栈</li><li><code>rpop key</code>：删除列表最右边的元素，并返回。从右出栈</li></ul></li></ul><pre><code class="powershell">127.0.0.1:6379&gt; lpush mylist c(integer) 9998127.0.0.1:6379&gt; lpush mylist b(integer) 9999127.0.0.1:6379&gt; lpush mylist a(integer) 10000127.0.0.1:6379&gt; lrange mylist 0 21) "a"2) "b"3) "c"127.0.0.1:6379&gt; lpop mylist"a"127.0.0.1:6379&gt; lpop mylist"b"127.0.0.1:6379&gt; lpop mylist"c"</code></pre><h3 id="3-5-集合类型-set"><a href="#3-5-集合类型-set" class="headerlink" title="3.5 集合类型:set"></a>3.5 集合类型:<code>set</code></h3><p>不允许重复元素</p><ul><li>存储：<code>add key value</code></li><li>获取：<code>smembers key</code>，获取集合中所有元素</li><li>删除：<code>srem key value</code>，删除集合中的某个元素</li></ul><pre><code class="powershell">127.0.0.1:6379&gt; sadd myset a(integer) 1127.0.0.1:6379&gt; sadd myset a(integer) 0127.0.0.1:6379&gt; smembers myset1) "a"127.0.0.1:6379&gt; srem myset a(integer) 1</code></pre><h3 id="3-6-有序集合类型-sortedset"><a href="#3-6-有序集合类型-sortedset" class="headerlink" title="3.6 有序集合类型:sortedset"></a>3.6 有序集合类型:<code>sortedset</code></h3><p>不允许重复元素，且元素有顺序。每个元素都会关联一个<code>double</code>类型的分数。<code>redis</code>正是通过分数来为集合中的成员进行从小到大的排序。</p><ul><li>存储：<code>zadd key score vlaue</code></li><li>获取：<code>zrange key start end [withscores]</code>，withscores可以在获取时同时获取分数。</li><li>删除：<code>zrem key value</code></li></ul><pre><code class="powershell">127.0.0.1:6379&gt; zadd mysort 50 zhangsan(integer) 1127.0.0.1:6379&gt; zadd mysort 36 lisi(integer) 1127.0.0.1:6379&gt; zadd mysort 88 wangwu(integer) 1127.0.0.1:6379&gt; zrange mysort 0 -11) "lisi"2) "zhangsan"3) "wangwu"127.0.0.1:6379&gt; zrem mysort lisi(integer) 1127.0.0.1:6379&gt; zrange mysort 0 -11) "zhangsan"2) "wangwu"</code></pre><h3 id="3-7-通用命令"><a href="#3-7-通用命令" class="headerlink" title="3.7 通用命令"></a>3.7 通用命令</h3><ol><li><code>keys *</code>：查询所有的键</li><li><code>type key</code>：获取键对应的<code>value</code>类型</li><li><code>del key</code>：删除指定的<code>key valu</code></li></ol><pre><code class="powershell">127.0.0.1:6379&gt; keys *1) "counter:__rand_int__"2) "mylist"3) "key:__rand_int__"4) "mysort"127.0.0.1:6379&gt; type mylistlist127.0.0.1:6379&gt; type mysortzset127.0.0.1:6379&gt; del mylist(integer) 1</code></pre><h2 id="4-持久化"><a href="#4-持久化" class="headerlink" title="4. 持久化"></a>4. 持久化</h2><p><code>redis</code>是一个内存数据库，当<code>redis</code>服务器重启或电脑重启时，数据会丢失。我们可以将<code>redis</code>内存中的数据持久化保存到硬盘的文件中。</p><h4 id="4-1-redis持久化机制"><a href="#4-1-redis持久化机制" class="headerlink" title="4.1 redis持久化机制"></a>4.1 redis持久化机制</h4><ul><li><p>RDB：默认方式，不需要进行配置。在一定的间隔时间中，检测key的变化情况，然后持久化数据。</p><ul><li><p>编辑<code>redis.windows.conf</code>文件</p><pre><code class="properties">#   after 900 sec (15 min) if at least 1 key changedsave 900 1#   after 300 sec (5 min) if at least 10 keys changedsave 300 10#   after 60 sec if at least 10000 keys changedsave 60 10000</code></pre></li><li><p>重启redis服务器，并指定配置文件名称：<code>redis-server.exe redis.windows.conf</code></p></li></ul></li><li><p>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据。</p><ul><li><p>编辑<code>redis.windows.conf</code>文件</p><pre><code class="properties"># 开启AOFappendonly yes# 三种同步方式:# 1. 每一次操作都进行持久化# appendfsync always # 2. 每隔一秒进行一次持久化，缺省值appendfsync everysec# 3. 不进行持久化# appendfsync no</code></pre></li><li><p>重启服务器，指定配置文件。</p></li></ul></li></ul><h2 id="5-Java客户端：Jedis"><a href="#5-Java客户端：Jedis" class="headerlink" title="5. Java客户端：Jedis"></a>5. Java客户端：<code>Jedis</code></h2><p><code>Jedis</code>是一款java操作redis数据库的工具。</p><h3 id="5-1Jedis操作各种Redis中的数据结构"><a href="#5-1Jedis操作各种Redis中的数据结构" class="headerlink" title="5.1Jedis操作各种Redis中的数据结构"></a>5.1<code>Jedis</code>操作各种<code>Redis</code>中的数据结构</h3><h4 id="5-1-1-字符串类型："><a href="#5-1-1-字符串类型：" class="headerlink" title="5.1.1 字符串类型："></a>5.1.1 字符串类型：</h4><pre><code class="java">@Testpublic void test2(){    // 1. 获取连接    Jedis jedis = new Jedis(); // 如果使用空参构造，默认值'localhost',6379    // 2. 操作    // 存储    jedis.set("username","wangwu");    // 获取    String username = jedis.get("username");    System.out.println(username);    // 可以使用setex()方法存储指定过期时间的 key value    jedis.setex("activecode",20,"gj8a"); //将activecode：gj8a键值对存入redis，并且20秒后自动删除该键值对    // 3. 关闭连接    jedis.close();}</code></pre><h4 id="5-1-2-哈希类型："><a href="#5-1-2-哈希类型：" class="headerlink" title="5.1.2 哈希类型："></a>5.1.2 哈希类型：</h4><pre><code class="java">@Testpublic void test3(){    // 1. 获取连接    Jedis jedis = new Jedis();    // 2. 操作    // 存储hash    jedis.hset("user","name","lisi");    jedis.hset("user","age","23");    jedis.hset("user","gender","female");    // 获取hash    String name = jedis.hget("user", "name");    System.out.println(name);    // 获取hash的所有map中的数据    Map&lt;String, String&gt; user = jedis.hgetAll("user");    Set&lt;String&gt; keySet = user.keySet();    for (String key:keySet) {        String value = user.get(key);        System.out.println(key+":"+value);    }    // 3. 关闭连接    jedis.close();}</code></pre><h4 id="5-1-3-列表类型："><a href="#5-1-3-列表类型：" class="headerlink" title="5.1.3 列表类型："></a>5.1.3 列表类型：</h4><pre><code class="java">@Testpublic void test4() {    // 1. 获取连接    Jedis jedis = new Jedis();    // 2. 操作    jedis.del("mylist");    // list存储    jedis.lpush("mylist","a","b","c"); // 从左边存    jedis.rpush("mylist","a","b","c"); // 从右边存    // 获取    List&lt;String&gt; mylist = jedis.lrange("mylist", 0, -1);    System.out.println(mylist); // [c, b, a, a, b, c]    // 弹出    String element1 = jedis.lpop("mylist");    System.out.println(element1);    String element2 = jedis.rpop("mylist");    System.out.println(element2);    List&lt;String&gt; mylist２ = jedis.lrange("mylist", 0, -1);    System.out.println(mylist２);    // 3.关闭连接    jedis.close();}</code></pre><h4 id="5-1-4-集合类型："><a href="#5-1-4-集合类型：" class="headerlink" title="5.1.4 集合类型："></a>5.1.4 集合类型：</h4><pre><code class="java">@Testpublic void test5() {    // 1. 获取连接    Jedis jedis = new Jedis();    // 2. 操作    // 存储    jedis.sadd("myset","java","php","c");    // 获取    Set&lt;String&gt; myset = jedis.smembers("myset");    System.out.println(myset);    jedis.close();}</code></pre><h4 id="5-1-5-有序集合类型："><a href="#5-1-5-有序集合类型：" class="headerlink" title="5.1.5 有序集合类型："></a>5.1.5 有序集合类型：</h4><pre><code class="java">@Testpublic void test6() {    // 1. 获取连接    Jedis jedis = new Jedis();    // 2. 操作    // 存储    jedis.zadd("mysortedset",8,"亚索");    jedis.zadd("mysortedset",6,"剑圣");    jedis.zadd("mysortedset",3,"vn");    // 获取    Set&lt;String&gt; mysortedset = jedis.zrange("mysortedset", 0, -1);    System.out.println(mysortedset); // [vn, 剑圣, 亚索]    jedis.close();}</code></pre><h3 id="5-2-Jedis连接池：JedisPool"><a href="#5-2-Jedis连接池：JedisPool" class="headerlink" title="5.2 Jedis连接池：JedisPool"></a>5.2 <code>Jedis</code>连接池：<code>JedisPool</code></h3><ul><li>使用方法：<ul><li>创建<code>JedisPool</code>连接池对象</li><li>调用方法<code>getResource()</code>方法获取<code>Jedis</code>连接</li></ul></li></ul><h4 id="5-2-1-jedis详细配置"><a href="#5-2-1-jedis详细配置" class="headerlink" title="5.2.1 jedis详细配置"></a>5.2.1 <code>jedis</code>详细配置</h4><pre><code class="properties">#最大活动对象数     redis.pool.maxTotal=1000    #最大能够保持idel状态的对象数      redis.pool.maxIdle=100  #最小能够保持idel状态的对象数   redis.pool.minIdle=50    #当池内没有返回对象时，最大等待时间    redis.pool.maxWaitMillis=10000    #当调用borrow Object方法时，是否进行有效性检查    redis.pool.testOnBorrow=true    #当调用return Object方法时，是否进行有效性检查    redis.pool.testOnReturn=true  #“空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.  redis.pool.timeBetweenEvictionRunsMillis=30000  #向调用者输出“链接”对象时，是否检测它的空闲超时；redis.pool.testWhileIdle=true  # 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3.  redis.pool.numTestsPerEvictionRun=50  #redis服务器的IP    redis.ip=xxxxxx  #redis服务器的Port    redis1.port=6379   </code></pre><h4 id="5-2-2-自定义jedis工具类"><a href="#5-2-2-自定义jedis工具类" class="headerlink" title="5.2.2 自定义jedis工具类"></a>5.2.2 自定义<code>jedis</code>工具类</h4><pre><code class="java">package cn.zero.jedis.util;import redis.clients.jedis.Jedis;import redis.clients.jedis.JedisPool;import redis.clients.jedis.JedisPoolConfig;import java.io.IOException;import java.io.InputStream;import java.util.Properties;/** * JedisPool工具类 *  加载配置文件，配置连接池参数 *  提供获取连接的方法 */public class JedisPoolUtils {    private static JedisPool jedisPool;    static {        // 读取配置文件        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");        // 创建Properties对象        Properties pro = new Properties();        // 关联文件        try {            pro.load(is);        } catch (IOException e) {            e.printStackTrace();        }        // 获取数据，设置到JedisPoolConfig中        JedisPoolConfig config = new JedisPoolConfig();        config.setMaxTotal(Integer.parseInt(pro.getProperty("maxTotal")));        config.setMaxIdle(Integer.parseInt(pro.getProperty("maxIdle")));        // 初始化JedisPool        jedisPool = new JedisPool(config, pro.getProperty("host"), Integer.parseInt(pro.getProperty("port")));    }    /**     * 获取连接方法     * @return     */    public static Jedis getJedis(){        return jedisPool.getResource();    }}</code></pre><h2 id="6-练习"><a href="#6-练习" class="headerlink" title="6. 练习"></a>6. 练习</h2><h3 id="6-1-需求"><a href="#6-1-需求" class="headerlink" title="6.1 需求"></a>6.1 需求</h3><ol><li>提供index.html页面，页面中有一个省份下拉列表</li><li>当 页面加载完毕后 发送ajax请求，加载所有省份。</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/14/4.%E6%A1%88%E4%BE%8B-1563119468012.bmp" alt="title"></p><ul><li>注意：使用redis缓存一些不经常发生变化的数据。<ul><li>数据库的数据一旦发生改变，则需要更新缓存。<ul><li>数据库的表执行 <strong>增删改</strong>的相关操作，需要将redis缓存数据清空，再次存入。</li><li>在service对应的增删改方法中，将redis数据删除。</li></ul></li></ul></li></ul><h3 id="6-2-代码实现"><a href="#6-2-代码实现" class="headerlink" title="6.2 代码实现"></a>6.2 代码实现</h3><p>后端service实现类核心代码：</p><pre><code class="java">    /**     * 使用redis缓存     * @return     */    @Override    public String findAllJson() {        // 1. 先从redis中查询数据        // 1.1 获取redis客户端连接对象        Jedis jedis = JedisPoolUtils.getJedis();        // 1.2 查询数据        String province_json = jedis.get("province");        // 2. 判断province_json 是否为null        if (province_json == null || province_json.length() == 0){            // redis中无数据            System.out.println("redis中无数据，查询数据库...");            // 2.1 从数据库中查询            List&lt;Province&gt; ps = dao.findAll();            // 2.2 将list序列化为json            ObjectMapper mapper = new ObjectMapper();            try {                province_json = mapper.writeValueAsString(ps);            } catch (JsonProcessingException e) {                e.printStackTrace();            }            // 2.3 将json数据存入redis中            jedis.set("province",province_json);            // 归还连接            jedis.close();        }else {            System.out.println("redis中有数据，查询缓存...");            System.out.println(province_json);        }        return province_json;    }</code></pre><p>后端servlet代码：</p><pre><code class="java">package cn.zero.web.servlet;import cn.zero.domain.Province;import cn.zero.service.impl.ProvinceServiceImpl;import com.fasterxml.jackson.databind.ObjectMapper;import javax.servlet.annotation.WebServlet;import java.io.IOException;import java.util.List;@WebServlet("/provinceServlet")public class ProvinceServlet extends javax.servlet.http.HttpServlet {    protected void doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws javax.servlet.ServletException, IOException {//        // 1. 调用service查询//        ProvinceServiceImpl service = new ProvinceServiceImpl();//        List&lt;Province&gt; list = service.findAll();//        // 2. 序列化list为json//        ObjectMapper mapper = new ObjectMapper();//        String json = mapper.writeValueAsString(list);        ProvinceServiceImpl service = new ProvinceServiceImpl();        String json = service.findAllJson();        System.out.println(json);        // 3. 响应结果        response.setContentType("application/json;charset=utf-8");        response.getWriter().write(json);    }    protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws javax.servlet.ServletException, IOException {        this.doPost(request, response);    }}</code></pre><p>前端代码：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Province&lt;/title&gt;    &lt;script src="js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        $(function () {            // 发送ajax请求，加载所有省份数据            $.get("provinceServlet",{},function (data) {                // data = [{"id":1,"name":"北京"},{"id":2,"name":"上海"},{"id":3,"name":"广州"},{"id":4,"name":"深圳"}]                // 1. 获取select                var province = $("#province");                // 2. 遍历json数组                $(data).each(function () {                    // 3. 创建&lt;option&gt;                    var option = "&lt;option name='"+this.id+"'&gt;"+this.name+"&lt;/option&gt;"                    // 4. 调用select的append追加option                    province.append(option);                });            });        });    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;select name="" id="province"&gt;        &lt;option value=""&gt;--请选择省份--&lt;/option&gt;    &lt;/select&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AJAX和Json</title>
      <link href="/2019/07/10/javaweb/ajax-he-json/"/>
      <url>/2019/07/10/javaweb/ajax-he-json/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>Ajax 即“<strong>A</strong>synchronous <strong>J</strong>avascript <strong>A</strong>nd <strong>X</strong>ML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。</p><a id="more"></a><p> <strong>同步和异步</strong>：在客户端和服务器端相互通信的基础上。</p><ul><li>同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他操作。</li></ul><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><p>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p><p>Ajax可以<strong>提升用户的体验</strong>。</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="1-原生的JS实现方式"><a href="#1-原生的JS实现方式" class="headerlink" title="1. 原生的JS实现方式"></a>1. 原生的JS实现方式</h4><pre><code class="javascript">&lt;script&gt;    // 定义方法    function fun() {        // 发送异步请求        // 1. 创建核心对象(固定写法)        var xmlhttp;        if (window.XMLHttpRequest)        {// code for IE7+, Firefox, Chrome, Opera, Safari            xmlhttp=new XMLHttpRequest();        }        else        {// code for IE6, IE5            xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");        }        // 2. 建立连接        /*                参数：                1. 请求方式：GET,POST                   - get方式：请求参数在URL后边拼接。send方法为空参                   - post方式：请求参数在send方法中定义                2. 请求的URL：                3. 同步还是异步请求：true异步，false同步        */        xmlhttp.open("GET","/Demo7_10/ajaxServlet?username=xiaoming",true);        // 3. 发送请求        xmlhttp.send();        // 4. 接受和处理来自服务器的响应结果        // 获取方式：xmlhttp.responseText; 什么时候获取? 当服务器响应成功后再获取        // 当xmlhttp对象的就绪状态改变时，触发事件：onreadystatechange。        xmlhttp.onreadystatechange=function()        {            // 判断readyState就绪状态是否为4，并且status状态码为200            if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)            {                // 获取服务器的响应结果                var responseText = xmlhttp.responseText;                alert(responseText);            }        }    }&lt;/script&gt;</code></pre><h4 id="2-JQuery实现方式"><a href="#2-JQuery实现方式" class="headerlink" title="2. JQuery实现方式"></a>2. JQuery实现方式</h4><ol><li><p><code>$.ajax()</code>，语法：<code>$.ajax({键值对})</code>；</p><pre><code class="javascript">&lt;script&gt;    // 定义方法    function fun() {        // 使用 $.ajax()发送异步请求        $.ajax({            url:"ajaxServlet",// 请求路径            type:"POST", // 请求方式            // data:"username=jack$age=23", // 请求参数            data:{"username":"jack","age":23},            success:function (data) {                alert(data);            }, // 响应成功后执行的函数            error:function () {                alert("出错啦...")            }, // 表示如果请求响应出现错误，会执行的回调函数            dataType:"text" // 设置接受到的响应数据的格式        });    }&lt;/script&gt;</code></pre></li><li><p><code>$.get()</code>，发送get请求，语法：<code>$.get(url,[data],[callback],[type])</code>，参数如下。</p><ul><li><code>url</code>：请求路径</li><li><code>data</code>：请求参数</li><li><code>callback</code>：回调函数</li><li><code>type</code>：响应结果的类型</li></ul><pre><code class="javascript">&lt;script&gt;    // 定义方法    function fun() {        // 使用 $.get()发送异步请求        $.get("ajaxServlet",{username:"rose"},function (data) {            alert(data);        },"text");    }&lt;/script&gt;</code></pre></li><li><p><code>$.post()</code>，发送post请求，语法：<code>$.post(url,[data],[callback],[type])</code>，参数同上。</p></li></ol><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li><p>JSON 指的是 JavaScript 对象表示法（<em>J</em>ava<em>S</em>cript <em>O</em>bject <em>N</em>otation），是一种轻量级的数据交换格式。</p></li><li><p><strong>JSON 是存储和交换文本信息的语法。</strong></p></li><li>进行数据的传输。</li><li><strong>JSON 比 XML 更小、更快，更易解析。</strong></li></ul><h3 id="2-JSON-语法规则"><a href="#2-JSON-语法规则" class="headerlink" title="2.  JSON 语法规则"></a>2.  JSON 语法规则</h3><h4 id="2-1-基本规则"><a href="#2-1-基本规则" class="headerlink" title="2.1 基本规则"></a>2.1 基本规则</h4><p>JSON 语法是 JavaScript 对象表示法语法的子集。</p><ul><li>数据在名称/值对中：json数据是由键值对构成的<ul><li>键用引号(单双都可)引起来，也可以不使用引号。</li><li>值的取值类型：<ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true或false）</li><li>数组（在方括号中），例：<code>{"persons":[{},{}]}</code></li><li>对象（在花括号中），例：<code>{"address":{"province":"杭州"...}}</code></li><li>null</li></ul></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>花括号保存对象：使用<code>{}</code>定义json格式</li><li>方括号保存数组：<code>[]</code></li></ul><h4 id="2-2-获取数据"><a href="#2-2-获取数据" class="headerlink" title="2.2 获取数据"></a>2.2 获取数据</h4><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li><li>遍历</li></ol><pre><code class="javascript"> &lt;script&gt;    // 1. 定义基本格式    var person = {name:"xiaozhang",age:23,'gender':true};    var ps = [        {name:"xiaozhang",age:23,'gender':true},        {name:"xiaoli",age:25,'gender':true},        {name:"xiaohua",age:19,'gender':false}];    // 获取person对象中的所有键和值    // for in 循环    for(var key in person){        alert(key+"："+person[key]);    }    // 获取ps数组中所有对象的键值    for (var i = 0; i &lt; ps.length; i++){        var p = ps[i];        for (var key in p){            alert(key+"："+p[key]);        }    }&lt;/script&gt;</code></pre><h4 id="2-3-JSON数据和Java对象的相互转换"><a href="#2-3-JSON数据和Java对象的相互转换" class="headerlink" title="2.3 JSON数据和Java对象的相互转换"></a>2.3 JSON数据和Java对象的相互转换</h4><ul><li>JSON解析器，常见的解析器有：<code>Jsonlib,Gson,fastjson,jackson</code></li></ul><h5 id="2-3-1-JSON转为Java对象"><a href="#2-3-1-JSON转为Java对象" class="headerlink" title="2.3.1 JSON转为Java对象"></a>2.3.1 JSON转为Java对象</h5><ul><li>导入<code>jackson</code>的相关jar包</li><li>创建<code>jackson</code>核心对象：<code>ObjectMapper</code></li><li>调用<code>ObjectMapper</code>的相关方法进行转换：<code>readValue(json字符串数据，Class)</code></li></ul><pre><code class="java">// 演示JSON字符串转换为Java对象@Testpublic void test5() throws Exception {    // 1. 初始化JSON字符串    String json = "{\"gender\":\"男\",\"name\":\"张三\",\"age\":23}";    // 2. 创建ObjectMapper对象    ObjectMapper mapper = new ObjectMapper();    // 3. 转为Java对象 Person    Person person = mapper.readValue(json, Person.class);    System.out.println(person); // Person{name='张三', age=23, gender='男', birthday=null}}</code></pre><h5 id="2-3-2-Java对象转为JSON"><a href="#2-3-2-Java对象转为JSON" class="headerlink" title="2.3.2 Java对象转为JSON"></a>2.3.2 Java对象转为JSON</h5><ol><li>导入<code>jackson</code>的相关jar包</li><li>创建<code>jackson</code>核心对象：<code>ObjectMapper</code></li><li>调用<code>ObjectMapper</code>的相关方法进行转换</li></ol><p><strong>转换方法</strong>：</p><ul><li><code>writeValue(参数，obj)</code></li><li>常用参数：<ul><li><code>File</code>：将obj对象转换为json字符串，并保存到指定的文件中。</li><li><code>Writer</code>：将obj对象转换为json字符串，并将json数据填充到字符输出流中。</li><li><code>OutputStream</code>：将obj对象转换为json字符串，并将json数据填充到字节输出流中。</li></ul></li><li><code>writeValueAsString(obj)</code>：将对象转换为json字符串</li></ul><pre><code class="java">public void test1() throws Exception {        // 1. 创建Person对象    Person person = new Person();    person.setName("张三");    person.setAge(23);    person.setGender("男");    // 2. 创建Jackson核心对象 ObjectMapper    ObjectMapper mapper = new ObjectMapper();    // 3. 调用方法转换    String json = mapper.writeValueAsString(person);    System.out.println(json); // {"name":"张三","age":23,"gender":"男"}    // writeValue,将数据写到d://json.txt中    mapper.writeValue(new File("d://json.txt"),person);    // writeValue,将数据关联到Writer中    mapper.writeValue(new FileWriter("d://json2.txt"),person);}</code></pre><p><strong>注解</strong>：</p><ul><li><p><code>@JsonIgnore</code>：排除属性</p></li><li><p><code>@JsonFormat</code>：属性值格式化</p><ul><li><code>@JsonFormat(pattern = "yyyy-MM-dd")</code></li></ul></li></ul><p><strong>复杂Java对象转换</strong>：</p><ul><li><code>List</code>：数组</li><li><code>Map</code>：对象格式一致</li></ul><h3 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h3><p>用户注册页面，输入用户名，异步请求数据库验证用户名是否存在。</p><ul><li>服务器响应的数据，在客户端使用时，要想当做json数据格式使用，方法有如下：<ul><li><code>$.get(type);</code>将最后一个参数type指定为“json”；</li><li>在服务器端设置MIME类型：<code>response.setContentType("application/json;charset=utf-8");</code></li></ul></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li>前端部分：</li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;用户注册&lt;/title&gt;    &lt;script src="js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        // 在页面加载完成后        $(function () {            // 给username绑定blur(离焦)事件            $("#username").blur(function () {                // 获取username文本框输入的值                var username = $(this).val();                // 发送ajax请求                // 期望服务器响应会的数据格式：{"userExsit":true,"msg":"用户名已存在！"}                //                        {"userExsit":false,"msg":"用户名可用！"}                $.get("regUserServlet",{username:username},function (data) {                    var span = $("#s_username");                    if (data["userExsit"] == true){                        // 用户名已存在                        span.css("color","red");                        span.html(data.msg);                    }else{                        // 用户名不存在                        span.css("color","green");                        span.html(data.msg);                    }                })            });        })    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=""&gt;        &lt;input type="text" id="username" name="username" placeholder="请输入用户名"&gt;        &lt;span id="s_username"&gt;&lt;/span&gt;        &lt;br&gt;        &lt;input type="password" name="password" placeholder="请输入密码"&gt;&lt;br&gt;        &lt;input type="submit" value="注册"&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>后端部分：</li></ul><pre><code class="java">package cn.zero.web.servlet;import com.fasterxml.jackson.databind.ObjectMapper;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.HashMap;import java.util.Map;@WebServlet("/regUserServlet")public class RegUserServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 获取用户名        String username = request.getParameter("username");        String json = "{\"userExsit\":true,\"msg\":\"用户名已存在！\"}";        // 2. 调用service层判断用户名是否存在        // 期望服务器响应会的数据格式：{"userExsit":true,"msg":"用户名已存在！"}        //                        {"userExsit":false,"msg":"用户名可用！"}        // 设置响应的数据格式为json        response.setContentType("application/json;charset=utf-8"); // 解决乱码问题        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        if ("张三".equals(username)) {            map.put("userExsit",true);            map.put("msg","用户名已存在，请更换！");        }else{            map.put("userExsit",false);            map.put("msg","用户名可用");        }        // 将map转为json，并传递给客户端        ObjectMapper mapper = new ObjectMapper();        mapper.writeValue(response.getWriter(),map);    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JQuery高级</title>
      <link href="/2019/07/09/javaweb/jquery-gao-ji/"/>
      <url>/2019/07/09/javaweb/jquery-gao-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="JQuery高级"><a href="#JQuery高级" class="headerlink" title="JQuery高级"></a>JQuery高级</h2><p>JQuery进阶内容，包括图片显示和隐藏方式、遍历方式、事件绑定方法以及自定义插件。</p><a id="more"></a><h2 id="1-动画"><a href="#1-动画" class="headerlink" title="1. 动画"></a>1. 动画</h2><p>主要有三种方式显示和隐藏元素</p><h3 id="1-1-默认显示和隐藏方式"><a href="#1-1-默认显示和隐藏方式" class="headerlink" title="1.1 默认显示和隐藏方式"></a>1.1 默认显示和隐藏方式</h3><ol><li><code>show([speed,[easing],[fn]])</code></li><li><code>hide([speed,[easing],[fn]])</code></li><li><code>toggle([speed,[easing],[fn]])</code></li></ol><p><strong>通用参数概述</strong>：</p><ol><li><code>speed</code>：动画的速度。三个预定义的值<code>("slow","normal","fast")</code>或表示动画时长的毫秒数值(如：1000)</li><li><code>easing</code>：用来指定切换效果，默认是<code>"swing"</code>(动画执行时效果是：先慢，中间快，最后再慢)，可用参数<code>"linear"</code>(动画执行时速度是匀速的)</li><li><code>fn</code>：在动画完成时执行的函数，每个元素执行一次。</li></ol><h3 id="1-2-滑动显示和隐藏方式"><a href="#1-2-滑动显示和隐藏方式" class="headerlink" title="1.2 滑动显示和隐藏方式"></a>1.2 滑动显示和隐藏方式</h3><ol><li><code>slideDown([speed,[easing],[fn]])</code></li><li><code>slideUp([speed,[easing],[fn]])</code></li><li><code>slideToggle([speed,[easing],[fn]])</code></li></ol><h3 id="1-3-淡入淡出显示和隐藏方式"><a href="#1-3-淡入淡出显示和隐藏方式" class="headerlink" title="1.3 淡入淡出显示和隐藏方式"></a>1.3 淡入淡出显示和隐藏方式</h3><ol><li><code>fadeIn([speed,[easing],[fn]])</code></li><li><code>fadeOut([speed,[easing],[fn]])</code></li><li><code>fadeToggle([speed,[easing],[fn]])</code></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code class="javascript">&lt;script&gt;    // 隐藏div    function hideFn() {    // 默认方式    // $("#showDiv").hide(5000,"swing");    // 滑动方式    // $("#showDiv").slideUp("slow");    // 淡入淡出方式    $("#showDiv").fadeOut("slow");}// 显示divfunction showFn() {    // 默认方式    // $("#showDiv").show("slow","swing");    // 滑动方式    // $("#showDiv").slideDown("slow");    // 淡入淡出方式    $("#showDiv").fadeIn("slow");}// 切换显示和隐藏divfunction toggleFn() {    // 默认方式    // $("#showDiv").toggle("slow");    // 滑动方式    // $("#showDiv").slideToggle("slow");    // 淡入淡出方式    $("#showDiv").fadeToggle("slow");}&lt;/script&gt;</code></pre><h2 id="2-遍历"><a href="#2-遍历" class="headerlink" title="2. 遍历"></a>2. 遍历</h2><h3 id="2-1-JS的遍历方式"><a href="#2-1-JS的遍历方式" class="headerlink" title="2.1 JS的遍历方式"></a>2.1 JS的遍历方式</h3><ul><li><code>for(初始值;循环结束条件;步长)</code></li></ul><h3 id="2-2-JQuery的遍历方式"><a href="#2-2-JQuery的遍历方式" class="headerlink" title="2.2 JQuery的遍历方式"></a>2.2 JQuery的遍历方式</h3><h4 id="1-JQ对象-each-callback"><a href="#1-JQ对象-each-callback" class="headerlink" title="1. JQ对象.each(callback)"></a>1. <code>JQ对象.each(callback)</code></h4><ul><li>语法：<code>jquery对象.each(function(index,element){});</code><ul><li><code>index</code>：就是元素在集合中的索引</li><li><code>element</code>：就是集合中的每一个元素对象</li><li><code>this</code>：集合中的每一个元素对象（当前元素对象）</li></ul></li><li>回调函数返回值<ul><li><code>true</code>：如果当前<code>function</code>返回<code>false</code>，则结束循环<code>(相当于break)</code>。</li><li><code>false</code>：如果当前<code>function</code>返回<code>true</code>，则结束本次循环，继续下次循环<code>(相当于continue)</code>。</li></ul></li></ul><h4 id="2-each-object-callback"><a href="#2-each-object-callback" class="headerlink" title="2. $.each(object,[callback])"></a>2. <code>$.each(object,[callback])</code></h4><h4 id="3-for-of"><a href="#3-for-of" class="headerlink" title="3. for..of"></a>3. <code>for..of</code></h4><p>3.0版本之后提供的方式，使用方法：<code>for(元素对象 of 容器对象)</code></p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {    // 1. js方法遍历    // 获取所有ul下的li    var citys = $("#city li");    // 遍历li    for (var i = 0; i &lt; citys.length; i++){        if ("上海" == citys[i].innerHTML ){            break;            continue;        }        alert(i+":"+citys[i].innerHTML);    }    // 2. jq方法遍历，JQ对象.each(callback)    citys.each(function (index,element) {        // 获取li对象,使用this        // alert(this.innerHTML);        // 获取li对象，在回调函数中定义参数，index,element        // 判断如果是上海，则结束循环        if ("上海" == $(element).html()){            // 如果当前function返回为false，则结束循环(break);            // 如果返回为true，则结束本次循环，继续下次循环(continue);            return true;        }        alert(index+":"+$(element).html());    })    // 3. $.each(object,[callback]);    $.each(citys,function () {        alert($(this).html());    })    // 4. for..of(jquery3.0之后提供的方式)    for (li of citys){        alert(li.innerHTML);    }})&lt;/script&gt;</code></pre><h2 id="3-事件绑定"><a href="#3-事件绑定" class="headerlink" title="3. 事件绑定"></a>3. 事件绑定</h2><h3 id="3-1-JQuery标准的绑定方式"><a href="#3-1-JQuery标准的绑定方式" class="headerlink" title="3.1 JQuery标准的绑定方式"></a>3.1 <code>JQuery标准的绑定方式</code></h3><ul><li><code>JQuery对象.事件方法(回调函数)</code></li></ul><blockquote><p>如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。</p></blockquote><ul><li><code>表单对象.submit();</code>  ： 让表单提交</li></ul><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {    // 1. 获取name对象，表单click事件    $("#name").click(function () {        alert("我被点击了")    });    // 给name绑定聚焦离焦事件    $("#name").mouseover(function () {        alert("鼠标来了...")    })    $("#name").mouseout(function () {        alert("鼠标走了...")    })    // 简化操作，链式编程    $("#name").mouseover(function () {        alert("鼠标来了...");    }).mouseout(function () {        alert("鼠标走了")    });    $("#name").focus(); // 浏览器默认行为：让文本输入框获得焦点})&lt;/script&gt;</code></pre><h3 id="3-2-on绑定事件-off解除绑定"><a href="#3-2-on绑定事件-off解除绑定" class="headerlink" title="3.2 on绑定事件/off解除绑定"></a>3.2 <code>on绑定事件/off解除绑定</code></h3><ul><li><code>JQuery对象.on("事件名称",回调函数)</code></li><li><code>JQuery对象.off("事件名称")</code><ul><li>如果<code>off</code>方法不传递任何参数，则会将组件上的所有事件全部解绑。</li></ul></li></ul><pre><code class="javascript">&lt;script type="text/javascript"&gt;     $(function () {     // 1. 使用on绑定点击事件     $("#btn").on("click",function () {         alert("我被点击了...")     })     $("#btn2").click(function () {         alert("解除了单击事件...")         // 解绑btn单击事件         // $("#btn").off("click");         $("#btn").off();// 将组件上的所有事件全部解绑     }) })&lt;/script&gt;</code></pre><h3 id="3-3-事件切换：toggle"><a href="#3-3-事件切换：toggle" class="headerlink" title="3.3 事件切换：toggle"></a>3.3 事件切换：<code>toggle</code></h3><ul><li><code>JQuery对象.toggle(fn1,fu2...)</code>：当单击JQ对象对应的组件后，会执行<code>fn1</code>，第二次点击会执行<code>fn2...</code></li></ul><blockquote><p>Notice：1.9版本之后<code>.toggle()</code>方法删除，使用<code>JQuery Migrate</code>(迁移)插件可恢复此功能。</p></blockquote><pre><code class="java">&lt;script src="../js/jquery-migrate-1.0.0.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;    $(function () {    // 获取按钮，调用toggle方法    $("#btn").toggle(function () {        $("#myDiv").css("backgroundColor","green");    },function () {        $("#myDiv").css("backgroundColor","pink");    })})&lt;/script&gt;</code></pre><h2 id="4-综合案例"><a href="#4-综合案例" class="headerlink" title="4. 综合案例"></a>4. 综合案例</h2><h4 id="4-1-广告图片自动显示与隐藏"><a href="#4-1-广告图片自动显示与隐藏" class="headerlink" title="4.1 广告图片自动显示与隐藏"></a>4.1 广告图片自动显示与隐藏</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;广告的自动显示与隐藏&lt;/title&gt;    &lt;style&gt;        #content{width:100%;height:500px;background:#999}    &lt;/style&gt;    &lt;!--引入jquery--&gt;    &lt;script type="text/javascript" src="../js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        /*            需求：                1. 当页面加载完，3秒后，自动显示广告。                2. 广告显示5秒后，自动消失。         */        // 1. 使用定时器来完成。setTimeout(执行一次定时器)        // 2. 通过控制display属性来实现显示和隐藏        $(function () {            // 定义定时器，调用adShow方法 3秒后执行一次            setTimeout(adShow,3000);            // 定义定时器，调用adHide方法，8秒后执行一次            setTimeout(adHide,8000);        })        // 显示广告        function adShow() {            // 获取div，调用显示方法            $("#ad").show("slow");        }        // 隐藏广告        function adHide() {            $("#ad").hide("slow");        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 整体的DIV --&gt;&lt;div&gt;    &lt;!-- 广告DIV --&gt;    &lt;div id="ad" style="display: none;"&gt;        &lt;img style="width:100%" src="../img/adv.jpg" /&gt;    &lt;/div&gt;    &lt;!-- 下方正文部分 --&gt;    &lt;div id="content"&gt;        正文部分    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="4-2-抽奖"><a href="#4-2-抽奖" class="headerlink" title="4.2 抽奖"></a>4.2 抽奖</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;jquery案例之抽奖&lt;/title&gt;    &lt;script type="text/javascript" src="../js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        /*            分析：                1. 给开始按钮绑定单击事件                    1.1 定义循环定时器                    1.2 切换小相框的src属性                        - 定义数组，存放图片资源路径                        - 生成随机数，数组索引                2. 给结束按钮绑定单击事件                    1.1 停止定时器                    1.2 给大相框设置src属性                        - 等于小相框当前src属性         */        // 定义图片路径数组        var imgs = ["../img/man00.jpg",                    "../img/man01.jpg",                    "../img/man02.jpg",                    "../img/man03.jpg",                    "../img/man04.jpg",                    "../img/man05.jpg",                    "../img/man06.jpg"]        var startId;        var index; // 随机角标        $(function () {            // 处理按钮是否可以使用效果            $("#startID").prop("disabled",false);            $("#stopID").prop("disabled",true);            // 1. 给开始按钮绑定单击事件            $("#startID").click(function () {                // 1.1 定义循环定时器， 20毫秒执行一次                startId = setInterval(function () {                    // 处理按钮是否可以使用效果                    $("#startID").prop("disabled",true);                    $("#stopID").prop("disabled",false);                    // 1.2 生成随机角标 0-6                    index = Math.floor(Math.random() * 7);  // 0.000~0.999 --&gt; *7 =&gt; 0.0~6.9999                    // 1.3 小相框src属性                    $("#img1ID").prop("src",imgs[index]);                },20);            })            // 2. 给结束按钮绑定单击事件            $("#stopID").click(function () {                // 处理按钮是否可以使用效果                $("#startID").prop("disabled",false);                $("#stopID").prop("disabled",true);                // 2.1 停止定时器                clearInterval(startId);                // 2.2 给大相框设置src属性                $("#img2ID").prop("src",imgs[index]).hide();                // 1秒之后显示                $("#img2ID").show(1000);            })        })    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 小像框 --&gt;&lt;div style="border-style:dotted;width:160px;height:100px"&gt;    &lt;img id="img1ID" src="../img/man00.jpg" style="width:160px;height:100px"/&gt;&lt;/div&gt;&lt;!-- 大像框 --&gt;&lt;div        style="border-style:double;width:800px;height:500px;position:absolute;left:500px;top:10px"&gt;    &lt;img id="img2ID" src="../img/man00.jpg" width="800px" height="500px"/&gt;&lt;/div&gt;&lt;!-- 开始按钮 --&gt;&lt;input        id="startID"        type="button"        value="点击开始"        style="width:150px;height:150px;font-size:22px"&gt;&lt;!-- 停止按钮 --&gt;&lt;input        id="stopID"        type="button"        value="点击停止"        style="width:150px;height:150px;font-size:22px"&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="5-插件"><a href="#5-插件" class="headerlink" title="5. 插件"></a>5. 插件</h2><p>主要用于增强JQuery的功能，实现方式：</p><ul><li><code>$.fn.extend(object)</code>：增强通过JQuery获取的对象的功能，<code>$("#id")</code></li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;01-jQuery对象进行方法扩展&lt;/title&gt;    &lt;script src="../js/jquery-3.3.1.min.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;        // 1. 定义JQuery的对象插件        $.fn.extend({            // 定义了一个check()方法。所有的jq对象都可以调用该方法            check:function () {                // 让复选框选中                // this:调用该方法的jq对象                this.prop("checked",true);            },            uncheck:function () {              // 不选中                this.prop("checked",false);            }        });        $(function () {            $("#btn-check").click(function () {                $("input[type='checkbox']").check();            });            $("#btn-uncheck").click(function () {                $("input[type='checkbox']").uncheck();            });        })    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input id="btn-check" type="button" value="点击选中复选框" &gt;&lt;input id="btn-uncheck" type="button" value="点击取消复选框选中" &gt;&lt;br/&gt;&lt;input type="checkbox" value="football"&gt;足球&lt;input type="checkbox" value="basketball"&gt;篮球&lt;input type="checkbox" value="volleyball"&gt;排球&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><code>$.extend(object)</code>：增强JQuery对象自身的功能，<code>$/jQuery</code></li></ul><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;01-jQuery对象进行方法扩展&lt;/title&gt;    &lt;script src="../js/jquery-3.3.1.min.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;    &lt;script type="text/javascript"&gt;        //对全局方法扩展2个方法，扩展min方法：求2个值的最小值；扩展max方法：求2个值最大值        $.extend({            max:function (a,b) {                // 返回大值                return a &gt;= b ? a:b;            },            min:function (a,b) {                // 返回小值                return a &lt;= b ? a:b;            }        });        // 调用全局方法        alert($.max(4,3));        alert($.min(4,3));    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery基础</title>
      <link href="/2019/07/06/javaweb/jquery-ji-chu/"/>
      <url>/2019/07/06/javaweb/jquery-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JQuery基础"><a href="#1-JQuery基础" class="headerlink" title="1. JQuery基础"></a>1. JQuery基础</h2><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（<em>或JavaScript框架</em>）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，<strong>优化HTML文档操作</strong>、事件处理、动画设计和Ajax交互。</p><a id="more"></a><ul><li>JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已。</li></ul><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><h3 id="2-1-下载JQuery"><a href="#2-1-下载JQuery" class="headerlink" title="2.1. 下载JQuery"></a>2.1. 下载<code>JQuery</code></h3><p>目前JQuery有三个大版本：</p><p>1.x：兼容ie678，使用最为广泛的，官方只做BUG维护，功能不再新增。对于一般项目来说，使用1.x版本即可。</p><p>2.x：不兼容ie768，很少有人使用，官方只做BUG维护，功能不新增。如果不考虑兼容低版本浏览器可以使用2.x。</p><p>3.x：不兼容ie678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本，很多老的JQuery插件不支持该版本。</p><blockquote><p><code>jquery-xxx.js</code>与<code>jquery-xxx.min.js</code>的区别：</p><ol><li><code>jquery-xxx.js</code>：开发版本。供开发人员查看的，有良好的缩进和注释。体积大一些。</li><li><code>jquery-xxx.min.js</code>：生成版本。程序中使用，没有缩进。体积小巧，程序加载更快。</li></ol></blockquote><h3 id="2-2-导入JQuery的js文件：导入min-js文件"><a href="#2-2-导入JQuery的js文件：导入min-js文件" class="headerlink" title="2.2. 导入JQuery的js文件：导入min.js文件"></a>2.2. 导入<code>JQuery</code>的js文件：导入<code>min.js</code>文件</h3><h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3. 使用"></a>2.3. 使用</h3><pre><code class="javascript">&lt;script src="js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;&lt;script&gt;    var div1 = $("#div1");    alert(div1.html());&lt;/script&gt;</code></pre><h2 id="3-JQuery对象和JS对象区别和转换"><a href="#3-JQuery对象和JS对象区别和转换" class="headerlink" title="3. JQuery对象和JS对象区别和转换"></a>3. <code>JQuery</code>对象和JS对象区别和转换</h2><ol><li><code>JQuery</code>对象在操作时，更加方便。</li><li><code>JQuery</code>对象和JS对象方法不通用。</li><li>两者可以相互转换<ul><li><code>jq --- &gt; js：jq对象[索引] 或者 jq对象.get(索引)</code></li><li><code>js --- &gt; jq：$(js对象)</code></li></ul></li></ol><pre><code class="javascript">&lt;script&gt;    // 1. 通过js方式来获取元素对象    var divs = document.getElementsByTagName("div");    alert(divs.length); // 可以将其当做数组来使用    // 将divs中的所有div标签体内容修改为"aaa"    for(var i = 0;i &lt; divs.length; i++){        // divs[i].innerHTML = "aaa";        $(divs[i]).html("ccc"); // 将js对象转换为JQuery对象    }    // 2. 通过Jquery方式来获取元素对象    var $divs = $("div");    alert($divs);    // 将$divs中的所有div标签体内容修改为"bbb"    // $divs.html("bbb");    // 将JQuery对象转换为js对象    $divs[0].innerHTML = "ddd";    $divs[1].innerHTML = "ddd";&lt;/script&gt;</code></pre><h2 id="4-选择器：筛选具有相似特征的元素-标签"><a href="#4-选择器：筛选具有相似特征的元素-标签" class="headerlink" title="4. 选择器：筛选具有相似特征的元素(标签)"></a>4. 选择器：筛选具有相似特征的元素(标签)</h2><h3 id="4-1-基本操作学习"><a href="#4-1-基本操作学习" class="headerlink" title="4.1 基本操作学习"></a>4.1 基本操作学习</h3><h4 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1. 事件绑定"></a>1. 事件绑定</h4><pre><code class="javascript">$("#b1").click(function () {    alert("abc");})</code></pre><h4 id="2-入口函数"><a href="#2-入口函数" class="headerlink" title="2. 入口函数"></a>2. 入口函数</h4><pre><code class="javascript">$(function () {});/*   window.onload 和 $(function)的区别       1. window.onload只能定义一次，如定义多次，后边的会将前边的覆盖掉       2. $(function)可以定义多次*/</code></pre><h4 id="3-样式控制：CSS方法"><a href="#3-样式控制：CSS方法" class="headerlink" title="3. 样式控制：CSS方法"></a>3. 样式控制：CSS方法</h4><pre><code class="javascript">$(function () {    $("#div1").css("backgroundColor","pink");})</code></pre><h3 id="4-2-分类"><a href="#4-2-分类" class="headerlink" title="4.2 分类"></a>4.2 分类</h3><h4 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1. 基本选择器"></a>1. 基本选择器</h4><table><thead><tr><th>选择器名称</th><th>语法</th></tr></thead><tbody><tr><td>标签选择器(元素选择器)</td><td><code>$("html标签名")</code> ：获取所有匹配标签名称的元素</td></tr><tr><td>ID选择器</td><td><code>$("#id的属性值")</code>：获取与指定id属性值匹配的元素</td></tr><tr><td>类选择器</td><td><code>$(.class的属性值)</code>：获取与指定class属性值匹配的元素</td></tr></tbody></table><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        // &lt;input type="button" value="改变 id 为 one 的元素的背景色为 红色"  id="b1"/&gt;        $("#b1").click(function () {            $("#one").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变元素名为 &lt;div&gt; 的所有元素的背景色为 红色"  id="b2"/&gt;        $("#b2").click(function () {            $("div").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变 class 为 mini 的所有元素的背景色为 红色"  id="b3"/&gt;        $("#b3").click(function () {            $(".mini").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变所有的&lt;span&gt;元素和 id 为 two 的元素的背景色为红色"  id="b4"/&gt;        $("#b4").click(function () {            $("span").css("backgroundColor","pink");            $("#two").css("backgroundColor","pink");        });});&lt;/script&gt;</code></pre><h4 id="2-层级选择器"><a href="#2-层级选择器" class="headerlink" title="2. 层级选择器"></a>2. 层级选择器</h4><table><thead><tr><th>选择器名称</th><th>语法</th></tr></thead><tbody><tr><td>后代选择器</td><td><code>$("A B ")</code>：选择A元素内部的所有B元素</td></tr><tr><td>子选择器</td><td><code>$("A &gt; B")</code>：选择A元素内部的所有B子元素</td></tr></tbody></table><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        // &lt;input type="button" value=" 改变 &lt;body&gt; 内所有 &lt;div&gt; 的背景色为红色"  id="b1"/&gt;        $("#b1").click(function () {            $("body div").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变 &lt;body&gt; 内子 &lt;div&gt; 的背景色为 红色"  id="b2"/&gt;        $("#b2").click(function () {            $("body &gt; div").css("backgroundColor","pink");        });    })&lt;/script&gt;</code></pre><h4 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3. 属性选择器"></a>3. 属性选择器</h4><table><thead><tr><th>选择器名称</th><th>语法</th></tr></thead><tbody><tr><td>属性名称选择器</td><td><code>$("A[属性名]")</code>：选择包含指定属性名称的元素</td></tr><tr><td>属性选择器</td><td><code>$("A[属性名 = '值']")</code>：选择指定属性等于指定值的元素</td></tr><tr><td>复合属性选择器</td><td><code>$("A[属性名='值'][]...")</code>：包含多个属性条件的选择器</td></tr></tbody></table><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        // &lt;input type="button" value=" 含有属性title 的div元素背景色为红色"  id="b1"/&gt;        $("#b1").click(function () {            $("div[title]").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 属性title值等于test的div元素背景色为红色"  id="b2"/&gt;        $("#b2").click(function () {            $("div[title='test']").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 属性title值不等于test的div元素(没有属性title的也将被选中)背景色为红色"  id="b3"/&gt;        $("#b3").click(function () {            $("div[title != 'test']").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 属性title值 以te开始 的div元素背景色为红色"  id="b4"/&gt;        $("#b4").click(function () {            $("div[title ^= 'te']").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 属性title值 以est结束 的div元素背景色为红色"  id="b5"/&gt;        $("#b5").click(function () {            $("div[title $= 'est']").css("backgroundColor","pink");        });        // &lt;input type="button" value="属性title值 含有es的div元素背景色为红色"  id="b6"/&gt;        $("#b6").click(function () {            $("div[title*='es']").css("backgroundColor","pink");        });        // &lt;input type="button" value="选取有属性id的div元素，然后在结果中选取属性title值含有“es”的 div 元素背景色为红色"  id="b7"/&gt;        $("#b7").click(function () {            $("div[id][title*='es']").css("backgroundColor","pink");        });    })&lt;/script&gt;</code></pre><h4 id="4-过滤选择器"><a href="#4-过滤选择器" class="headerlink" title="4. 过滤选择器"></a>4. 过滤选择器</h4><table><thead><tr><th>选择器名称</th><th>语法</th></tr></thead><tbody><tr><td>首元素选择器</td><td><code>:first</code>：获得选择的元素中的第一个元素</td></tr><tr><td>尾元素选择器</td><td><code>:last</code>：获得选择的元素中的最后一个元素</td></tr><tr><td>非元素选择器</td><td><code>:not(selector)</code>：不包含指定内容的元素</td></tr><tr><td>偶数选择器</td><td><code>:even</code>：偶数，从0开始计数</td></tr><tr><td>计数选择器</td><td><code>:odd</code>：奇数，从0开始计数</td></tr><tr><td>等于索引选择器</td><td><code>:eq(index)</code>：指定索引元素</td></tr><tr><td>大于索引选择器</td><td><code>:gt(index)</code>：大于指定索引元素</td></tr><tr><td>小于索引选择器</td><td><code>:lt(index)</code>：小于指定索引元素</td></tr><tr><td>标题选择器</td><td><code>:header</code>：获取标题<code>(h1~h6)</code>元素，固定写法</td></tr></tbody></table><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        // &lt;input type="button" value=" 改变第一个 div 元素的背景色为 红色"  id="b1"/&gt;        $("#b1").click(function () {            $("div:first").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变最后一个 div 元素的背景色为 红色"  id="b2"/&gt;        $("#b2").click(function () {            $("div:last").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变class不为 one 的所有 div 元素的背景色为 红色"  id="b3"/&gt;        $("#b3").click(function () {            $("div:not(.one)").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变索引值为偶数的 div 元素的背景色为 红色"  id="b4"/&gt;        $("#b4").click(function () {            $("div:even").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变索引值为奇数的 div 元素的背景色为 红色"  id="b5"/&gt;        $("#b5").click(function () {            $("div:odd").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变索引值为大于 3 的 div 元素的背景色为 红色"  id="b6"/&gt;        $("#b6").click(function () {            $("div:gt(3)").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变索引值为等于 3 的 div 元素的背景色为 红色"  id="b7"/&gt;        $("#b7").click(function () {            $("div:eq(3)").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变索引值为小于 3 的 div 元素的背景色为 红色"  id="b8"/&gt;        $("#b8").click(function () {            $("div:lt(3)").css("backgroundColor","pink");        });        // &lt;input type="button" value=" 改变所有的标题元素的背景色为 红色"  id="b9"/&gt;        $("#b9").click(function () {            $(":header").css("backgroundColor","pink");        });    })&lt;/script&gt;</code></pre><h4 id="5-表单过滤选择器"><a href="#5-表单过滤选择器" class="headerlink" title="5. 表单过滤选择器"></a>5. 表单过滤选择器</h4><table><thead><tr><th>选择器名称</th><th>语法</th></tr></thead><tbody><tr><td>可用元素选择器</td><td><code>:enabled</code>：获取可用元素</td></tr><tr><td>不可用元素选择器</td><td><code>:disabled</code>：获取不可用元素</td></tr><tr><td>选中选择器</td><td><code>:checked</code>：获取单选/复选框选中的元素</td></tr><tr><td>选中选择器</td><td><code>:selected</code>：获取下拉框选中的元素</td></tr></tbody></table><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        // &lt;input type="button" value=" 利用 jQuery 对象的 val() 方法改变表单内可用 &lt;input&gt; 元素的值"  id="b1"/&gt;        $("#b1").click(function () {            $("input[type='text']:enabled").val("可用元素");        });        // &lt;input type="button" value=" 利用 jQuery 对象的 val() 方法改变表单内不可用 &lt;input&gt; 元素的值"  id="b2"/&gt;        $("#b2").click(function () {            $("input[type='text']:disabled").val("不可用元素");        });        // &lt;input type="button" value=" 利用 jQuery 对象的 length 属性获取复选框选中的个数"  id="b3"/&gt;        $("#b3").click(function () {            var result = $("input[type='checkbox']:checked").length;            alert(result)        });        // &lt;input type="button" value=" 利用 jQuery 对象的 length 属性获取下拉框选中的个数"  id="b4"/&gt;        $("#b4").click(function () {            alert($("#job &gt; option:selected").length);        });    })&lt;/script&gt;</code></pre><h2 id="5-DOM操作"><a href="#5-DOM操作" class="headerlink" title="5. DOM操作"></a>5. DOM操作</h2><h3 id="5-1-内容操作"><a href="#5-1-内容操作" class="headerlink" title="5.1 内容操作"></a>5.1 内容操作</h3><ol><li><code>html()</code>：获取/设置元素的标签体内容</li><li><code>text()</code>：获取/设置元素的标签体纯文本内容</li><li><code>val()</code>：获取/设置元素的value属性值</li></ol><pre><code class="javascript">&lt;script&gt;    $(function () {        // 获取myinput 的value值        alert($("#myinput").val());        // 设置值        alert($("#myinput").val("李四"));        // 获取mydiv的标签体内容        alert($("#mydiv").html());        // 设置值        alert($("#mydiv").html("&lt;h4&gt;hello&lt;/h4&gt;"));        // 获取mydiv纯文本内容        alert($("#mydiv").text());        // 设置值        alert($("#mydiv").text("aaa"));    })&lt;/script&gt;</code></pre><h3 id="5-2-属性操作"><a href="#5-2-属性操作" class="headerlink" title="5.2 属性操作"></a>5.2 属性操作</h3><h4 id="1-通用属性操作"><a href="#1-通用属性操作" class="headerlink" title="1. 通用属性操作"></a>1. 通用属性操作</h4><ol><li><code>attr()</code>：获取/设置元素的属性</li><li><code>removeAttr()</code>：删除属性</li><li><code>prop()</code>：获取/设置元素的属性</li><li><code>removeProp()</code>：删除属性</li></ol><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        //获取北京节点的name属性值        alert($("#bj").attr("name"));        //设置北京节点的name属性的值为dabeijing        $("#bj").attr("name","dabeijing");        //新增北京节点的discription属性 属性值是didu        $("#bj").attr("discription","didu");        //删除北京节点的name属性并检验name属性是否存在        $("#bj").removeAttr("name");        //获得hobby的的选中状态        alert($("#hobby").prop("checked"));    })&lt;/script&gt;</code></pre><blockquote><p><code>attr</code>和<code>prop</code>区别？</p><ol><li>如果操作的是元素的固有属性，则建议使用<code>prop</code></li><li>如果操作的是元素自定义的属性，则建议使用<code>attr</code></li></ol></blockquote><h4 id="2-对class属性操作"><a href="#2-对class属性操作" class="headerlink" title="2. 对class属性操作"></a>2. 对class属性操作</h4><ol><li><code>addClass()</code>：添加class属性值</li><li><code>removeClass()</code>：删除class属性值</li><li><code>toggleClass()</code>：切换class属性值</li><li><code>css()</code>：操作元素css样式</li></ol><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        //&lt;input type="button" value="采用属性增加样式(改变id=one的样式)"  id="b1"/&gt;        $("#b1").click(function () {            $("#one").prop("class","second");        });        //&lt;input type="button" value=" addClass"  id="b2"/&gt;        $("#b2").click(function () {            $("#one").addClass("second");        });        //&lt;input type="button" value="removeClass"  id="b3"/&gt;        $("#b3").click(function () {            $("#one").removeClass("second");        });        //&lt;input type="button" value=" 切换样式"  id="b4"/&gt;        $("#b4").click(function () {            $("#one").toggleClass("second");        });        //&lt;input type="button" value=" 通过css()获得id为one背景颜色"  id="b5"/&gt;        $("#b5").click(function () {            alert($("#one").css("backgroundColor"));        });        //&lt;input type="button" value=" 通过css()设置id为one背景颜色为绿色"  id="b6"/&gt;        $("#b6").click(function () {            $("#one").css("backgroundColor","blue");        });    })&lt;/script&gt;</code></pre><h3 id="5-3-CRUD操作"><a href="#5-3-CRUD操作" class="headerlink" title="5.3 CRUD操作"></a>5.3 CRUD操作</h3><table><thead><tr><th>方法名称</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td><code>append()</code></td><td>父元素将子元素追加到末尾</td><td><code>对象1.append(对象2)</code>：将对象2添加到对象1元素内部末尾处。</td></tr><tr><td><code>prepend()</code></td><td>父元素将子元素追加到开头</td><td><code>对象1.prepend(对象2)</code>：将对象2添加到对象1元素内部开头处。</td></tr><tr><td><code>appendTo()</code></td><td></td><td><code>对象1.appendTo(对象2)</code>：将对象1添加到对象2内部末尾处。</td></tr><tr><td><code>prependTo()</code></td><td></td><td><code>对象1.prependTo(对象2)</code>：将对象1添加到对象2内部开头处。</td></tr><tr><td><code>after()</code></td><td>添加元素到元素后边</td><td><code>对象1.after(对象2)</code>：将对象2添加到对象1后边。对象1和2是兄弟关系。</td></tr><tr><td><code>before()</code></td><td>添加元素到元素前边</td><td><code>对象1.before(对象2)</code>：将对象2添加到对象1前边。对象1和2是兄弟关系。</td></tr><tr><td><code>insertAfter()</code></td><td></td><td><code>对象1.insertAfter(对象2)</code>：将对象1添加到对象2后边。对象1和2是兄弟关系。</td></tr><tr><td><code>insertBefore()</code></td><td></td><td><code>对象1.insertBefore(对象2)</code>：将对象1添加到对象2前边。对象1和对象2是兄弟关系。</td></tr><tr><td><code>remov()</code></td><td>移除元素</td><td><code>对象.remove()</code>：将对象删除</td></tr><tr><td><code>empty()</code></td><td>清空元素的所有后代元素</td><td><code>对象.empty()</code>：将对象的后代元素全部清空，但保留当前对象及其属性节点。</td></tr></tbody></table><pre><code class="javascript">&lt;script type="text/javascript"&gt;    $(function () {        // &lt;input type="button" value="将反恐放置到city的后面"  id="b1"/&gt;        $("#b1").click(function () {            // append            // $("#city").append($("#fk"));            // appendTo            $("#fk").appendTo($("#city"));        });        // &lt;input type="button" value="将反恐放置到city的最前面"  id="b2"/&gt;        $("#b2").click(function () {            // prepend            $("#fk").prependTo($("#city"));        });        // &lt;input type="button" value="将反恐插入到天津后面"  id="b3"/&gt;        $("#b3").click(function () {            // after            // $("#tj").after($("#fk"));            // insertAfter            $("#fk").insertAfter($("#tj"));        });        // &lt;input type="button" value="将反恐插入到天津前面"  id="b4"/&gt;        $("#b4").click(function () {            $("#fk").insertBefore($("#tj"));        });        // &lt;input type="button" value="删除&lt;li id='bj' name='beijing'&gt;北京&lt;/li&gt;"  id="b1"/&gt;        $("#b1").click(function () {            $("#bj").remove();        });        // &lt;input type="button" value="删除city所有的li节点   清空元素中的所有后代节点(不包含属性节点)"  id="b2"/&gt;        $("#b2").click(function () {            $("#city").empty();        });    })&lt;/script&gt;</code></pre><h2 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h2><h3 id="1-隔行换色"><a href="#1-隔行换色" class="headerlink" title="1. 隔行换色"></a>1. 隔行换色</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset="UTF-8"&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script  src="../../js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;        &lt;script&gt;            //需求：将数据行的奇数行背景色设置为 pink，偶数行背景色设置为 yellow            $(function () {                // 1. 获取数据行的奇数行的tr，设置背景色为pink                $("tr:gt(1):odd").css("backgroundColor","pink")                // 2. 获取数据行的偶数行的tr，设置背景色为yellow                $("tr:gt(1):even").css("backgroundColor","yellow")            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;table id="tab1" border="1" width="800" align="center" &gt;            &lt;tr&gt;                &lt;td colspan="5"&gt;&lt;input type="button" value="删除"&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr style="background-color: #999999;"&gt;                &lt;th&gt;&lt;input type="checkbox"&gt;&lt;/th&gt;                &lt;th&gt;分类ID&lt;/th&gt;                &lt;th&gt;分类名称&lt;/th&gt;                &lt;th&gt;分类描述&lt;/th&gt;                &lt;th&gt;操作&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox"&gt;&lt;/td&gt;                &lt;td&gt;0&lt;/td&gt;                &lt;td&gt;手机数码&lt;/td&gt;                &lt;td&gt;手机数码类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox"&gt;&lt;/td&gt;                &lt;td&gt;1&lt;/td&gt;                &lt;td&gt;电脑办公&lt;/td&gt;                &lt;td&gt;电脑办公类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox"&gt;&lt;/td&gt;                &lt;td&gt;2&lt;/td&gt;                &lt;td&gt;鞋靴箱包&lt;/td&gt;                &lt;td&gt;鞋靴箱包类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox"&gt;&lt;/td&gt;                &lt;td&gt;3&lt;/td&gt;                &lt;td&gt;家居饰品&lt;/td&gt;                &lt;td&gt;家居饰品类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="2-全选-全不选"><a href="#2-全选-全不选" class="headerlink" title="2. 全选/全不选"></a>2. 全选/全不选</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset="UTF-8"&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script  src="../../js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;        &lt;script&gt;            // 需要保证下边的选中状态和第一个复选框的状态一致即可。            function selectAll(obj) {                // 获取下边的所有复选框                $(".itemSelect").prop("checked",obj.checked);            }        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;table id="tab1" border="1" width="800" align="center" &gt;            &lt;tr&gt;                &lt;td colspan="5"&gt;&lt;input type="button" value="删除"&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;th&gt;&lt;input type="checkbox" onclick="selectAll(this)" &gt;&lt;/th&gt;                &lt;th&gt;分类ID&lt;/th&gt;                &lt;th&gt;分类名称&lt;/th&gt;                &lt;th&gt;分类描述&lt;/th&gt;                &lt;th&gt;操作&lt;/th&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox" class="itemSelect"&gt;&lt;/td&gt;                &lt;td&gt;1&lt;/td&gt;                &lt;td&gt;手机数码&lt;/td&gt;                &lt;td&gt;手机数码类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox" class="itemSelect"&gt;&lt;/td&gt;                &lt;td&gt;2&lt;/td&gt;                &lt;td&gt;电脑办公&lt;/td&gt;                &lt;td&gt;电脑办公类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox" class="itemSelect"&gt;&lt;/td&gt;                &lt;td&gt;3&lt;/td&gt;                &lt;td&gt;鞋靴箱包&lt;/td&gt;                &lt;td&gt;鞋靴箱包类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;&lt;input type="checkbox" class="itemSelect"&gt;&lt;/td&gt;                &lt;td&gt;4&lt;/td&gt;                &lt;td&gt;家居饰品&lt;/td&gt;                &lt;td&gt;家居饰品类商品&lt;/td&gt;                &lt;td&gt;&lt;a href=""&gt;修改&lt;/a&gt;|&lt;a href=""&gt;删除&lt;/a&gt;&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="3-qq表情选择"><a href="#3-qq表情选择" class="headerlink" title="3. qq表情选择"></a>3. qq表情选择</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset="UTF-8" /&gt;    &lt;title&gt;QQ表情选择&lt;/title&gt;     &lt;script  src="../../js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;    &lt;style type="text/css"&gt;    *{margin: 0;padding: 0;list-style: none;}    .emoji{margin:50px;}    ul{overflow: hidden;}    li{float: left;width: 48px;height: 48px;cursor: pointer;}    .emoji img{ cursor: pointer; }    &lt;/style&gt;    &lt;script&gt;        //需求：点击qq表情，将其追加到发言框中        $(function () {            // 1. 给img图片添加onclick事件            $("ul img").click(function () {                // 2. 追加到p标签中即可,$(this)：将js对象转换为JQuery对象                $(".word").append($(this).clone());            });        });    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class="emoji"&gt;        &lt;ul&gt;            &lt;li&gt;&lt;img src="img/01.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/02.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/03.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/04.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/05.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/06.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/07.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/08.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/09.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/10.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/11.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="img/12.gif" height="22" width="22" alt="" /&gt;&lt;/li&gt;        &lt;/ul&gt;        &lt;p class="word"&gt;            &lt;strong&gt;请发言：&lt;/strong&gt;            &lt;img src="img/12.gif" height="22" width="22" alt="" /&gt;        &lt;/p&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="4-多选下拉列表左右移动"><a href="#4-多选下拉列表左右移动" class="headerlink" title="4. 多选下拉列表左右移动"></a>4. 多选下拉列表左右移动</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset="UTF-8"&gt;        &lt;title&gt;&lt;/title&gt;        &lt;script  src="../../js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;        &lt;style&gt;            #leftName , #btn,#rightName{                float: left;                width: 100px;                height: 300px;            }            #toRight,#toLeft{                margin-top:100px ;                margin-left:30px;                width: 50px;            }            .border{                height: 500px;                padding: 100px;            }        &lt;/style&gt;        &lt;script&gt;            //需求：实现下拉列表选择条目左右选择功能            $(function () {                $("#toRight").click(function () {                    // 获取右边的下拉列表对象，append(左边下拉列表选中的option)                    $("#rightName").append($("#leftName &gt; option:selected"));                });                $("#toLeft").click(function () {                    $("#leftName").append($("#rightName &gt; option:selected"));                });            });        &lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class="border"&gt;            &lt;select id="leftName" multiple="multiple"&gt;                &lt;option&gt;张三&lt;/option&gt;                &lt;option&gt;李四&lt;/option&gt;                &lt;option&gt;王五&lt;/option&gt;                &lt;option&gt;赵六&lt;/option&gt;            &lt;/select&gt;            &lt;div id="btn"&gt;                &lt;input type="button" id="toRight" value="--&gt;"&gt;&lt;br&gt;                &lt;input type="button" id="toLeft" value="&lt;--"&gt;            &lt;/div&gt;            &lt;select id="rightName" multiple="multiple"&gt;                &lt;option&gt;钱七&lt;/option&gt;            &lt;/select&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA打包项目</title>
      <link href="/2019/07/01/javaweb/idea-da-bao-xiang-mu/"/>
      <url>/2019/07/01/javaweb/idea-da-bao-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h3 id="如何将IDEA中的项目打包成war包？"><a href="#如何将IDEA中的项目打包成war包？" class="headerlink" title="如何将IDEA中的项目打包成war包？"></a>如何将IDEA中的项目打包成war包？</h3><a id="more"></a><h4 id="1-打开项目结构，选择Artifacts，添加一个空的web应用"><a href="#1-打开项目结构，选择Artifacts，添加一个空的web应用" class="headerlink" title="1. 打开项目结构，选择Artifacts，添加一个空的web应用"></a>1. 打开项目结构，选择<code>Artifacts</code>，添加一个空的<code>web</code>应用</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/01/1561992152052-1561995934782.png" alt="title"></p><h4 id="2-改名"><a href="#2-改名" class="headerlink" title="2. 改名"></a>2. 改名</h4><p>按需改名</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/01/1561992273664-1561995961288.png" alt="title"></p><h4 id="3-创建META-INF"><a href="#3-创建META-INF" class="headerlink" title="3. 创建META-INF"></a>3. 创建<code>META-INF</code></h4><p>点击创建，选择项目跟目录，即可创建成功。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/01/1561992318178-1561995972034.png" alt="title"></p><h4 id="4-导入项目文件"><a href="#4-导入项目文件" class="headerlink" title="4. 导入项目文件"></a>4. 导入项目文件</h4><p>选中项目，点击<code>Put into Output Root</code>，即可将项目相关的<code>lib</code>包和<code>class</code>文件全部导入。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/01/1561992419651-1561995980538.png" alt="title"></p><p>导入项目文件后，会自动生成为如下目录结构：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/01/1561992441169-1561995987803.png" alt="title"></p><h4 id="5-构建项目"><a href="#5-构建项目" class="headerlink" title="5. 构建项目"></a>5. 构建项目</h4><p>上述步骤完成后点击<code>OK</code>，返回主界面将项目构建一下。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/01/1561992635331-1561995998209.png" alt="title"></p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/07/01/1561992656642-1561996005603.png" alt="title"></p><h4 id="6-查看war包"><a href="#6-查看war包" class="headerlink" title="6. 查看war包"></a>6. 查看war包</h4><p>在你项目的<code>artifacts</code>文件夹下，有你刚刚构建的项目文件夹，里面便是构建好的<code>war</code>包。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Filter和Listener</title>
      <link href="/2019/06/27/javaweb/filter-he-listener/"/>
      <url>/2019/06/27/javaweb/filter-he-listener/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Filter：过滤器"><a href="#1-Filter：过滤器" class="headerlink" title="1. Filter：过滤器"></a>1. Filter：过滤器</h2><p>Filter也称之为过滤器，它是Servlet技术中最激动人心的技术，Web开发人员通过Filter技术，对Web服务器管理的所有Web资源：例如Jsp, Servlet, 静态图片文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p><a id="more"></a><h3 id="1-1-过滤器的作用"><a href="#1-1-过滤器的作用" class="headerlink" title="1.1 过滤器的作用"></a>1.1 过滤器的作用</h3><p>一般用于完成通用的操作。如登录验证、统一编码处理、敏感字符过滤等</p><h3 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h3><ol><li>定义一个类，实现接口Filter</li><li>复写方法</li><li>配置拦截路径。使用web.xml和注解配置。</li></ol><pre><code class="java">@WebFilter("/*") // 访问所有资源之前，都会执行该过滤器public class FilterDemo1 implements Filter {    @Override    public void init(FilterConfig filterConfig) throws ServletException {    }    @Override    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {        System.out.println("FilterDemo1执行了...");        // 放行        filterChain.doFilter(servletRequest,servletResponse);    }    @Override    public void destroy() {    }}</code></pre><h3 id="1-3-过滤器细节"><a href="#1-3-过滤器细节" class="headerlink" title="1.3 过滤器细节"></a>1.3 过滤器细节</h3><h4 id="1-3-1-web-xml配置方法"><a href="#1-3-1-web-xml配置方法" class="headerlink" title="1.3.1 web.xml配置方法"></a>1.3.1 web.xml配置方法</h4><pre><code class="xml">&lt;filter&gt;    &lt;filter-name&gt;demo1&lt;/filter-name&gt;    &lt;filter-class&gt;cn.zero.web.filter.FilterDemo1&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;demo1&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt;</code></pre><h4 id="1-3-2-过滤器执行流程"><a href="#1-3-2-过滤器执行流程" class="headerlink" title="1.3.2 过滤器执行流程"></a>1.3.2 过滤器执行流程</h4><ol><li>执行过滤器</li><li>执行放行后的资源</li><li>回来执行过滤器放行代码下面的代码</li></ol><h4 id="1-3-3-过滤器生命周期方法"><a href="#1-3-3-过滤器生命周期方法" class="headerlink" title="1.3.3 过滤器生命周期方法"></a>1.3.3 过滤器生命周期方法</h4><ol><li><code>init</code>：在服务器启动后，会创建Filter对象，然后调用init方法，只执行一次。一般用于加载资源。</li><li><code>doFilter</code>：每一次请求被拦截资源时，会执行该方法，会执行多次</li><li><code>destroy</code>：在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。一般用于释放资源。`</li></ol><h4 id="1-3-4-过滤器配置详解"><a href="#1-3-4-过滤器配置详解" class="headerlink" title="1.3.4 过滤器配置详解"></a>1.3.4 过滤器配置详解</h4><h5 id="拦截路径配置："><a href="#拦截路径配置：" class="headerlink" title="拦截路径配置："></a>拦截路径配置：</h5><ul><li>具体资源路径：<code>/index.jsp</code>   ，只有访问index.jsp资源时，过滤器才会被执行</li><li>拦截目录： <code>/user/*</code>  ，访问/user下的所有资源时，过滤器都会被执行</li><li>后缀名拦截：<code>*.jsp</code> ， 访问所有后缀名为jsp资源时，过滤器都会被执行</li><li>拦截所有资源：<code>/*</code> ， 访问所有资源时，过滤器都会被执行</li></ul><h5 id="拦截方式配置：资源被访问的方式"><a href="#拦截方式配置：资源被访问的方式" class="headerlink" title="拦截方式配置：资源被访问的方式"></a>拦截方式配置：资源被访问的方式</h5><ul><li><p>注解配置：需要设置<code>dispatcharTypes</code>属性</p><ul><li>REQUEST：默认值。浏览器直接请求资源。</li><li>FORWARD：转发访问资源。</li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ul><pre><code class="java">//@WebFilter(value = "/index.jsp",dispatcherTypes = DispatcherType.REQUEST) // 浏览器直接请求index.jsp资源时，该过滤器会被执行//@WebFilter(value = "/index.jsp",dispatcherTypes = DispatcherType.FORWARD) // 转发访问index.jsp资源时，该过滤器会被执行@WebFilter(value = "/index.jsp",dispatcherTypes = {DispatcherType.FORWARD,DispatcherType.REQUEST}) // 直接访问或转发访问index.jsp资源时，该过滤器会被执行</code></pre></li></ul><ul><li><p>web.xml</p><ul><li>设置<code>&lt;dispatcher&gt;&lt;/dispatcher&gt;</code>标签即可</li></ul></li></ul><h4 id="1-3-5-过滤器链-配置多个过滤器"><a href="#1-3-5-过滤器链-配置多个过滤器" class="headerlink" title="1.3.5 过滤器链(配置多个过滤器)"></a>1.3.5 过滤器链(配置多个过滤器)</h4><p>如果有两个过滤器：过滤器1和过滤器2，那么他们的执行顺序是</p><ol><li>过滤器1</li><li>过滤器2</li><li>资源执行</li><li>过滤器2</li><li>过滤器1</li></ol><h5 id="过滤器先后顺序问题"><a href="#过滤器先后顺序问题" class="headerlink" title="过滤器先后顺序问题"></a>过滤器先后顺序问题</h5><ol><li>注解配置：按照类名的字符串比较规则比较，值小的先执行。例：<code>AFilter和BFilter，AFilter就会先执行。</code></li><li>web.xml配置：<code>&lt;filter-mapping&gt;</code> 谁定义在上边，谁先执行。</li></ol><h3 id="1-4-案例"><a href="#1-4-案例" class="headerlink" title="1.4 案例"></a>1.4 案例</h3><h4 id="1-登录验证"><a href="#1-登录验证" class="headerlink" title="1. 登录验证"></a>1. 登录验证</h4><p>将以前做的用户信息管理系统加上访问权限控制。</p><pre><code class="java">/** * 登录过滤器,访问除了登录资源以外的所有资源，都必须先登录 */@WebFilter("/*")public class LoginFilter implements Filter {    public void destroy() {    }    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {        // 0. 强制转换        HttpServletRequest request = (HttpServletRequest) req;        // 1. 获取资源请求路径        String uri = request.getRequestURI();        // 2. 判断是否是登录相关的资源,要注意排除掉css/js/图片/验证码等资源        if (uri.contains("/login.jsp") || uri.contains("loginServlet") || uri.contains("checkCodeServlet") || uri.contains("/css/") || uri.contains("/js/") || uri.contains("/fonts/")){            // 是， 说明用户就是想登录，放行            chain.doFilter(req,resp);        }else {            // 不是登录相关资源，需验证用户是否登录才能放行            // 3. 从session中获取loginUser            Object loginUser = request.getSession().getAttribute("loginUser");            if(loginUser != null){                // 登录过了，放行                chain.doFilter(req,resp);            }else {                // 没有登录，跳转到登录页面                request.setAttribute("login_msg","你尚未登录，请登录");                request.getRequestDispatcher("/login.jsp").forward(request,resp);            }        }        // 2. 判断当前用户是否登录，通过session值是否有user来判断    }    public void init(FilterConfig config) throws ServletException {    }}</code></pre><h4 id="2-敏感词汇过滤"><a href="#2-敏感词汇过滤" class="headerlink" title="2. 敏感词汇过滤"></a>2. 敏感词汇过滤</h4><p>对用户管理系统项目的录入数据进行敏感词汇过滤，需要对request对象进行增强</p><h5 id="增强对象的功能："><a href="#增强对象的功能：" class="headerlink" title="增强对象的功能："></a>增强对象的功能：</h5><p>通过设计模式来解决。</p><blockquote><p><strong>设计模式</strong>：一些通用的解决固定问题的方式。</p></blockquote><p>这里主要使用代理模式来增强对象功能。</p><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><p>代理(Proxy)是一种设计模式，提供了对目标对象另外的访问方式；即通过<strong>代理对象</strong>访问<strong>目标对象</strong>。这样做的好处是：可以在目标对象实现的基础上，<strong>增强</strong>额外的<strong>功能</strong>操作，即扩展目标对象的功能。</p><p>详见：<a href="https://www.cnblogs.com/cenyu/p/6289209.html" target="_blank" rel="noopener">博客文章</a></p><blockquote><p>代理模式的关键点是：代理对象与目标对象。代理对象是对目标对象的扩展，并会调用目标对象，类似Python的装饰器。</p></blockquote><p>目标对象：真实的对象，被代理的对象。</p><p>代理对象：代理真实对象做一些操作。</p><p>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的。</p><h5 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h5><p>分静态代理和动态代理，这里主要讲解动态代理的使用。</p><h5 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h5><p>动态代理有以下特点：</p><ol><li>代理对象,不需要实现接口</li><li>代理对象的生成,是利用JDK的API,动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)</li><li>动态代理也叫做:JDK代理,接口代理</li></ol><h6 id="JDK生成代理对象的API"><a href="#JDK生成代理对象的API" class="headerlink" title="JDK生成代理对象的API"></a>JDK生成代理对象的API</h6><p>代理类所在包：<code>java.lang.reflect.Proxy</code></p><p>实现代理使用<code>newProxyInstance</code>方法，该方法需接收三个参数，分别是：</p><ul><li><code>ClassLoader loader</code>：指定当前目标对象使用类加载器，获取类加载器的方法是固定的。</li><li><code>Class&lt;?&gt;[] interfaces</code>：目标对象实现的接口类型，使用泛型方式确认类型</li><li><code>InvocationHandler()</code>：事件处理，执行目标对象的方法时，会触发事件处理器的方法，将当前执行目标对象的方法作为参数传入。</li></ul><p>增强方式：</p><ol><li>增强参数列表</li><li>增强返回值类型</li><li>增强方法体执行逻辑</li></ol><h5 id="代码示例：敏感词汇过滤器"><a href="#代码示例：敏感词汇过滤器" class="headerlink" title="代码示例：敏感词汇过滤器"></a>代码示例：敏感词汇过滤器</h5><pre><code class="java">public class SensitiveWordsFilter implements Filter {    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {        // 1. 创建代理对象，增强getParameter方法        ServletRequest proxy_req = (ServletRequest) Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), new InvocationHandler() {            @Override            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                // 增强getParameter方法                // 判断是否是getParameter方法                if (method.getName().equals("getParameter")){                    // 增强返回值                    // 1. 获取返回值                    String value = (String) method.invoke(req, args);                    // 2. 判断不为空                    if (value != null){                        // 3. 遍历敏感词汇数组,判断返回值是否有敏感词                        for (String str: list){                            if (value.contains(str)){                                // 有，则替换为***                                value = value.replaceAll(str, "***");                            }                        }                    }                    return value;                }                return method.invoke(req,args);            });            // 放行            chain.doFilter(proxy_req,resp);        }        private List&lt;String&gt; list = new ArrayList&lt;&gt;(); // 敏感词汇集合    public void init(FilterConfig config) throws ServletException {        try{            // 1. 获取文件真实路径            ServletContext servletContext = config.getServletContext();            String realPath = servletContext.getRealPath("/WEB-INF/classes/SensitiveWords.txt");            // 2. 读取文件            BufferedReader br = new BufferedReader(new FileReader(realPath));            // 3. 将文件的每一行数据添加到list中            String line = null;            while((line = br.readLine()) != null){                list.add(line);            }            br.close();            System.out.println(list);        }catch (Exception e){            e.printStackTrace();        }    }    public void destroy() {    }}  </code></pre><h2 id="2-Listener：监听器"><a href="#2-Listener：监听器" class="headerlink" title="2. Listener：监听器"></a>2. Listener：监听器</h2><p>web的三大组件之一。用于监听web常见对象如：<code>HttpServletRequest,HttpSession,ServletContext。</code></p><h3 id="2-1-监听器的作用"><a href="#2-1-监听器的作用" class="headerlink" title="2.1 监听器的作用"></a>2.1 监听器的作用</h3><p>监听web对象创建与销毁。</p><p>监听web对象的属性变化。</p><p>监听session绑定JavaBean操作。</p><h3 id="2-2-事件监听机制基本概念"><a href="#2-2-事件监听机制基本概念" class="headerlink" title="2.2 事件监听机制基本概念"></a>2.2 事件监听机制基本概念</h3><ul><li>事件：一件事件</li><li>事件源：产生这件事情的源头。</li><li>监听器：对某件事情进行处理监听的一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码。</li></ul><h3 id="2-3-ServletContextListener"><a href="#2-3-ServletContextListener" class="headerlink" title="2.3 ServletContextListener"></a>2.3 <code>ServletContextListener</code></h3><p>用于监听<code>SeervletContext</code>对象的创建和销毁。有如下两个方法：</p><ul><li><code>void contextDestroyed(ServletContextEvent sce)</code>：<code>ServletContext</code>对象被销毁之前会调用该方法。</li><li><code>void contextInitialized(ServletContextEvent sce)</code>：<code>ServletContext</code>对象创建后会调用该方法。</li></ul><h3 id="2-4-步骤"><a href="#2-4-步骤" class="headerlink" title="2.4 步骤"></a>2.4 步骤</h3><ol><li><p>定义一个类，实现<code>ServletContextListener</code>接口</p></li><li><p>复写方法</p></li><li><p>配置</p><ul><li><p>web.xml配置</p><pre><code class="xml">&lt;listener&gt;    &lt;listener-class&gt;cn.zero.listener.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre></li><li><p>注解配置：<code>@WebListener</code></p></li></ul></li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre><code class="java">@WebListenerpublic class ContextLoaderListener implements ServletContextListener {    /**     * 监听ServletContext对象创建的。ServletContext对象服务器启动后自动创建。     *     * 在服务器启动后自动调用     * @param servletContextEvent     */    @Override    public void contextInitialized(ServletContextEvent servletContextEvent) {        // 加载资源文件        // 1. 获取ServletContext对象        ServletContext servletContext = servletContextEvent.getServletContext();        // 2. 加载资源文件        String contextConfigLocation = servletContext.getInitParameter("contextConfigLocation");        // 3. 获取真实路径        String realPath = servletContext.getRealPath(contextConfigLocation);        // 4. 加载进内存        try {            FileInputStream fis = new FileInputStream(realPath);            System.out.println(fis);        } catch (FileNotFoundException e) {            e.printStackTrace();        }        System.out.println("ServletContext对象被创建了....");    }    /**     * 在服务器关闭后，ServletContext对象被销毁。     *     * 当服务器正常关闭后该方法被调用。     * @param servletContextEvent     */    @Override    public void contextDestroyed(ServletContextEvent servletContextEvent) {        System.out.println("ServletContext对象被销毁了....");    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用户管理系统</title>
      <link href="/2019/06/25/javaweb/zong-he-lian-xi/"/>
      <url>/2019/06/25/javaweb/zong-he-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-综合练习"><a href="#1-综合练习" class="headerlink" title="1. 综合练习"></a>1. 综合练习</h2><p>实现管理员登录，对用户信息进行增删改查的小项目</p><a id="more"></a><h3 id="1-1-简单功能"><a href="#1-1-简单功能" class="headerlink" title="1.1 简单功能"></a>1.1 简单功能</h3><h4 id="1-登录"><a href="#1-登录" class="headerlink" title="1. 登录"></a>1. 登录</h4><p>登录功能输入用户名密验证码，表单信息会提交到<code>loginServlet</code>进行登录校验，成功则跳转到首页，失败则返回失败信息。</p><h4 id="2-首页列表查询"><a href="#2-首页列表查询" class="headerlink" title="2. 首页列表查询"></a>2. 首页列表查询</h4><p>点击查询，会跳转到<code>findUserByPageServlet</code>，这个<code>Servlet</code>主要功能是查询总记录数据<code>findTotalCount()</code>和分页信息数据<code>findByPage()</code>，然后转发到前端做显示。</p><h4 id="3-添加"><a href="#3-添加" class="headerlink" title="3. 添加"></a>3. 添加</h4><p>点击添加联系人按钮，跳转到<code>add.jsp</code>页面，填写信息后点击提交，会将form表单填写的所有信息传递给<code>AddUserServlet</code>进行处理。</p><p><code>AddUserServlet</code>主要操作：</p><ol><li>设置编码<code>setCharacterEncoding("utf-8")</code></li><li>获取所有请求参数<code>request.getParameterMap()</code></li><li>使用<code>BeanUtils.populate</code>将请求参数封装成User对象</li><li>调用<code>service</code>的<code>addUser(User user)</code>方法完成保存</li><li>跳转回查询界面</li></ol><p><code>UserService</code>业务层主要进行保存操作。</p><p><code>UserDao</code>数据访问层，封装了对数据库的所有操作。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/23/3.%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD-1561276529181.bmp" alt="title"></p><h4 id="4-删除"><a href="#4-删除" class="headerlink" title="4. 删除"></a>4. 删除</h4><p>点击删除按钮，会将这条数据的ID获取，封装在请求头里面传递给后台</p><p><code>DelUserServlet</code>主要操作：</p><ol><li>获取要删除的用户ID，<code>getParameter</code></li><li>调用<code>service</code>的<code>delUser(String id)</code>方法完成删除</li><li>跳转回查询页面</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/23/4.%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD-1561276588764.bmp" alt="title"></p><h4 id="5-修改"><a href="#5-修改" class="headerlink" title="5. 修改"></a>5. 修改</h4><p>修改用到了两个<code>Servlet</code>进行处理。首先点击修改按钮，会将用户ID传递随请求头传递给<code>findUserServlet</code>。</p><p><code>findUserServlet</code>主要操作：</p><ol><li>获取用户ID</li><li>根据ID查询用户信息<code>findUser(id)</code>，返回一个User对象</li><li>将User对象存入request</li><li>转发到<code>update.jsp</code></li></ol><p><code>update.jsp</code>页面主要操作：</p><ol><li>从request域中获取User对象的数据</li><li>使用EL表达式将所有数据回写到页面里。<code>${user.xxx}</code></li><li>将获取的ID值填入隐藏域值，以确定修改用户。<code>&lt;input type="hidden" name="id" value="${user.id}"&gt;</code></li><li>点击提交，提交表单信息到<code>UpdateUserServlet</code>进行处理。</li></ol><p><code>UpdateUserServlet</code>主要操作：</p><ol><li>设置编码</li><li>获取表单数据，并封装成User对象</li><li>调用Service方法<code>updateUser(User user)</code>，将User对象传入，完成修改</li><li>跳转回查询页面</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/23/5.%E4%BF%AE%E6%94%B9%E5%8A%9F%E8%83%BD-1561276609416.bmp" alt="title"></p><h3 id="1-2-复杂功能"><a href="#1-2-复杂功能" class="headerlink" title="1.2 复杂功能"></a>1.2 复杂功能</h3><h4 id="1-删除选中"><a href="#1-删除选中" class="headerlink" title="1. 删除选中"></a>1. 删除选中</h4><p>点击删除选中按钮，主要问题就是要先获取选中的用户条目，在将这些选中条目的ID提交到后台进行批量删除操作。</p><h5 id="1-1-获取选中条目的ID-通过form表单提交到后台。"><a href="#1-1-获取选中条目的ID-通过form表单提交到后台。" class="headerlink" title="1.1 获取选中条目的ID,通过form表单提交到后台。"></a>1.1 获取选中条目的ID,通过form表单提交到后台。</h5><pre><code class="javascript">/*为删除选中按钮绑定单击事件，提交每个条目复选框的值(该值就是条目的ID)1. 给每一个条目添加checkbox,值是条目对应的ID2. 获取当前页面的所有复选框标签，然后遍历，判断其是否有checked属性，有则允许提交表单3. 提交form表单*/window.onload = function () {    // 为删除选中绑定单击事件    document.getElementById("delSelected").onclick = function () {        if (confirm("确定要删除所有选中的信息么?")){            var flag = false;            // 判断是否有选中信息            var cbs = document.getElementsByName("uid");            for (var i = 0; i &lt; cbs.length; i++) {                if(cbs[i].checked){ // 如果有任何一个信息被选中(checkbox.checked返回布尔值，表示是否被选中)                    flag = true; // 允许提交                    break;                }            }            if (flag)//判断是否允许提交                // 使用提交方法提交信息到后台                document.getElementById("form").submit();        }    }}/*全选/全不选功能JS代码1. 在表头单元格添加一个复选框2. 获取该复选框标签对象3. 为该对象绑定单击事件，点击就获取所有的复选框对象，然后遍历，设置这些复选框的checked=this.checked。(this:就是当前复选框对象,即'firstCB')*/document.getElementById("firstCB").onclick = function () {    // 获取列表所有的cb    var cbs = document.getElementsByName("uid");    // 遍历    for (var i = 0; i &lt; cbs.length; i++) {        // 设置这些cbs[i]的checked状态等于firstCB.checked        cbs[i].checked = this.checked;    }}</code></pre><h5 id="1-2-后台DelSelectedServlet主要操作"><a href="#1-2-后台DelSelectedServlet主要操作" class="headerlink" title="1.2 后台DelSelectedServlet主要操作"></a>1.2 后台<code>DelSelectedServlet</code>主要操作</h5><ol><li>获取请求参数的ID数组。<code>getParameterValues()</code></li><li>调用<code>service</code>的<code>delUser(String[] ids)</code>进行批量删除。该方法会对id数组进行遍历，然后调用<code>dao</code>的<code>delUser(Int id)</code>方法操作数据库进行删除。</li><li>全部删除完毕，跳转回查询页面。</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/23/6.%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E5%8A%9F%E8%83%BD-1561276629972.bmp" alt="title"></p><h4 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2. 分页查询"></a>2. 分页查询</h4><h4 id="2-1-好处："><a href="#2-1-好处：" class="headerlink" title="2.1 好处："></a>2.1 好处：</h4><ol><li>减轻服务器内存的开销</li><li>提升用户的体验</li></ol><h4 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h4><p>前端需要传递给后台的信息主要有两个，当前页码<code>currentPage</code>和每页显示条数<code>rows</code></p><ol><li>当前页码<code>currentPage</code>：需要查询数据库得到总记录数<code>totalCount=select count(*) from user;</code>，然后通过三元运算符<code>totalCount % rows == 0 ? totalCount / rows:totalCount / rows + 1</code>计算出<code>totalPage</code>总页码。将总页码数返回给前端页面做进一步处理</li><li>每页显示条数<code>rows</code>：自定义的条数。</li></ol><p>当第一次访问<code>findUserByPageServlet</code>时，后台会做两次SQL查询，查询总记录数和当前分页数据，然后全部封装进<code>PageBean</code>对象，存入request返回。前端接受到这个对象，会在分页查询功能区遍历该对象，进行当前页码计算，以确定有多少分页。当用户点击不同分页时，会将当前页码返回给<code>findUserByPageServlet</code>做进一步的查询操作。</p><pre><code class="jsp">&lt;%--分页查询部分代码,遍历生成li,有多少页就会生成多少li--%&gt;&lt;c:forEach begin="1" end="${userPage.totalPage}" var="i"&gt;    &lt;c:if test="${userPage.currentPage == i}"&gt; &lt;%--如果服务器返回的页码等于当前页码，则将按钮激活--%&gt;        &lt;li class="active"&gt;&lt;a href="${pageContext.request.contextPath}/findUserByPageServlet?currentPage=${i}&amp;name=${condition.name[0]}&amp;address=${condition.address[0]}&amp;email=${condition.email[0]}"&gt;${i}&lt;/a&gt;&lt;/li&gt;    &lt;/c:if&gt;    &lt;c:if test="${userPage.currentPage != i}"&gt; &lt;%--如果服务器返回的页码不等于当前页码，则正常显示--%&gt;        &lt;li&gt;&lt;a href="${pageContext.request.contextPath}/findUserByPageServlet?currentPage=${i}&amp;name=${condition.name[0]}&amp;address=${condition.address[0]}&amp;email=${condition.email[0]}"&gt;${i}&lt;/a&gt;&lt;/li&gt;    &lt;/c:if&gt;&lt;/c:forEach&gt;</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/23/7.%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD-1561276688555.bmp" alt="title"><br><code>findUserByPageServlet</code>主要操作：</p><ol><li>接受请求参数，获取当前页码和每页显示条目数</li><li>调用<code>service</code>的<code>findUserByPage(currentPage,rows,condition)</code>方法查询数据，返回<code>PageBean</code>对象，里面封装了当前分页数据对象。</li><li>将<code>PageBean</code>对象存入request域中</li><li>转发到<code>list.jsp</code>进行显示</li></ol><p><code>findUserByPage()</code>方法主要功能：</p><ol><li>创建一个空的<code>PageBean</code>对象</li><li>设置当前页码属性和显示条目属性</li><li>调用<code>dao</code>的<code>findTotalCount()</code>方法查询总记录数，并设置进<code>PageBean</code></li><li>计算开始索引<code>start = (currentPage - 1) * rows</code>，然后调用<code>dao</code>的<code>findByPage(start,rows)</code>方法查询当前分页数据集合。</li><li>计算总页码数，并设置。</li><li>返回<code>PageBean</code>对象</li></ol><p><code>findTotalCount</code>方法功能：</p><ol><li>定义模板初始化sql。<code>select count(*) from user where 1 = 1</code></li><li>遍历条件map，获取其值</li><li>如果值不为空或null，则拼接sql字符串，同时将对应值传入list集合。</li><li>使用<code>queryForObject()</code>方法查询出总记录数，并返回</li></ol><p><code>findByPage</code>方法功能：</p><ol><li>定义初始化sql。</li><li>遍历条件map，获取其值</li><li>如果值不为空或null，则拼接sql字符串，同时将对应值传入list集合。</li><li>将分页查询添加进sql字符串。<code>limit ?,?</code></li><li>将分页查询参数值添加入参数集合中。<code>params.add(start); params.add(rows);</code></li><li>使用<code>query</code>查询数据，返回分页数据对象集合。</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/23/7_2.%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%8A%9F%E8%83%BD2-1561276716927.bmp" alt="title"></p><h4 id="3-复杂条件查询"><a href="#3-复杂条件查询" class="headerlink" title="3. 复杂条件查询"></a>3. 复杂条件查询</h4><p>前端主要就是要将复杂条件查询的数据通过表单参数提交到后台，后台获取参数map后，调用方法查询数据，返回当前分页数据。将<code>PageBean</code>和条件参数map存入request，交给前端做进一步处理。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/23/%E5%A4%8D%E6%9D%82%E6%9D%A1%E4%BB%B6%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2-1561276734854.bmp" alt="title"></p><h3 id="项目成果"><a href="#项目成果" class="headerlink" title="项目成果"></a>项目成果</h3><p><a href="http://111.230.219.30/showUser/login.jsp" target="_blank" rel="noopener">用户信息管理系统</a></p><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><h4 id="6月26号"><a href="#6月26号" class="headerlink" title="6月26号"></a>6月26号</h4><p>完成了项目主体内容，前后端数据交互进行复杂条件查询，分页查询，增加用户，删除用户，批量删除等功能。</p><h4 id="6月27号"><a href="#6月27号" class="headerlink" title="6月27号"></a>6月27号</h4><ol><li>学习了filter过滤器，编写了过滤器实现访问权限控制。即访问除了登录相关页面以外的页面或者资源，会先进行判断用户是否登录，登录则放行，未登录则转发到登录页面。</li><li>将前端分页查询到的内容用户编号显示，进行了唯一操作。即查询到10个用户，第一页会显示编号1~5的用户，第二页显示5~10用户。</li></ol><h4 id="7月1号"><a href="#7月1号" class="headerlink" title="7月1号"></a>7月1号</h4><p>将复杂条件搜索框整合为了一个，实现了输入查询条件，显示符合条件的用户信息。其主要难点在于数据传递和SQL语句的编写。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;2019.6.24&#39;</title>
      <link href="/2019/06/24/jottings/2019-06-24/"/>
      <url>/2019/06/24/jottings/2019-06-24/</url>
      
        <content type="html"><![CDATA[<h3 id="咕咕咕！"><a href="#咕咕咕！" class="headerlink" title="咕咕咕！"></a>咕咕咕！</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/24/gugugu-1561391154795.jpg" alt="title"></p><a id="more"></a><p>最近一直在做一个Web端小项目：用户管理系统</p><p>昨天也买了腾讯的云服务器，打算这两天就把项目部署一下。</p><p>然后Web阶段的学习预计六月底能结束，可以开始总结知识点，复习一下了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP和MVC</title>
      <link href="/2019/06/19/javaweb/jsp/"/>
      <url>/2019/06/19/javaweb/jsp/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JSP"><a href="#1-JSP" class="headerlink" title="1. JSP"></a>1. JSP</h2><p>JSP全称<code>Java Server Pages</code>，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以<code>&lt;%开头 以%&gt;</code>结束。</p><a id="more"></a><h3 id="1-1-指令"><a href="#1-1-指令" class="headerlink" title="1.1 指令"></a>1.1 指令</h3><p>指令主要用于配置JSP页面，导入资源文件。</p><ul><li><p>格式：<code>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</code></p></li><li><p>主要有三种指令：page、include、taglib</p></li></ul><h4 id="1-1-1-page"><a href="#1-1-1-page" class="headerlink" title="1.1.1 page"></a>1.1.1 page</h4><p>主要用于配置JSP页面的</p><ol><li><code>contentType()</code>：设置响应体的mime类型以及字符集，设置当前jsp页面的编码(只有高级的IDE才能生效，如果使用低级工具，则需使用<code>pageEncoding</code>属性来设置当前页面的字符集)。</li><li><code>import</code>：导包，用法同Java中的导包。</li><li><code>errorPage</code>：当前页面发生异常后，会自动跳转到指定的错误页面</li><li><code>isErrorPage</code>：标识当前页面是否是错误页面，默认值false。设置为true代表当前页面是错误页面，就可以使用内置对象<code>exception</code>。</li></ol><h4 id="1-1-2-include"><a href="#1-1-2-include" class="headerlink" title="1.1.2 include"></a>1.1.2 include</h4><p>页面包含的，用于导入其他页面的资源文件</p><ul><li><code>&lt;%@include file="other.jsp" %&gt;</code></li></ul><h4 id="1-1-3-taglib"><a href="#1-1-3-taglib" class="headerlink" title="1.1.3 taglib"></a>1.1.3 taglib</h4><p>导入外部资源</p><ul><li><code>&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</code><ul><li><code>prefix</code>：前缀，自定义的。</li></ul></li></ul><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><ol><li>html注释<code>&lt;!--  --&gt;</code>：只能注释html代码片段。</li><li>JSP注释<code>&lt;%--  --%&gt;</code>：可以注释所有，推荐使用。</li></ol><h3 id="1-3-内置对象"><a href="#1-3-内置对象" class="headerlink" title="1.3 内置对象"></a>1.3 内置对象</h3><p>在jsp页面中不需要创建，直接使用的对象就是内置对象，一共有9个。     </p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td><code>pageContext</code></td><td><code>PageContext</code></td><td>当前页面共享数据，还可以获取其他八个内置对象</td></tr><tr><td><code>request</code></td><td><code>HttpServletRequest</code></td><td>一次请求访问的多个资源(通过转发)</td></tr><tr><td><code>session</code></td><td><code>HttpSession</code></td><td>一次会话的多个请求间</td></tr><tr><td><code>application</code></td><td><code>ServletContext</code></td><td>所有用户间共享数据</td></tr><tr><td><code>response</code></td><td><code>HttpServletResponse</code></td><td>响应对象</td></tr><tr><td><code>page</code></td><td><code>Object</code></td><td>当前页面(Servlet)的对象，<code>this</code></td></tr><tr><td><code>out</code></td><td><code>JspWriter</code></td><td>输出对象，数据输出到页面上</td></tr><tr><td><code>config</code></td><td><code>ServletConfig</code></td><td>Servlet的配置对象</td></tr><tr><td><code>exception</code></td><td><code>Throwable</code></td><td>异常对象</td></tr></tbody></table><h4 id="面试题：写出JSP中的9个内置对象"><a href="#面试题：写出JSP中的9个内置对象" class="headerlink" title="面试题：写出JSP中的9个内置对象"></a>面试题：写出JSP中的9个内置对象</h4><h2 id="2-MVC开发模式"><a href="#2-MVC开发模式" class="headerlink" title="2. MVC开发模式"></a>2. MVC开发模式</h2><h3 id="2-1-JSP演变历史"><a href="#2-1-JSP演变历史" class="headerlink" title="2.1 JSP演变历史"></a>2.1 JSP演变历史</h3><ol><li>早期只有servlet，只能使用response输出标签数据，非常麻烦</li><li>后来出现了jsp，简化了Servlet的开发，但是如果过度的使用jsp，在jsp中既写大量的java代码，又写html标签，会造成代码很难维护，也很难分工协作。</li><li>故此后Java的Web开发，借鉴了MVC开发模式，使得程序的设计更加合理性。</li></ol><h3 id="2-2-MVC"><a href="#2-2-MVC" class="headerlink" title="2.2 MVC"></a>2.2 MVC</h3><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p><ol><li>M：Model(模型)，JavaBean。主要完成具体的业务操作，如：查询数据库，封装对象等。</li><li>V：View(视图)，JSP。主要展示数据</li><li>C：Controller(控制器)，Servlet。主要功能有获取用户的输入，调用模型，将模型返回的数据交给视图进行展示。</li></ol><h4 id="2-2-1-优缺点"><a href="#2-2-1-优缺点" class="headerlink" title="2.2.1 优缺点"></a>2.2.1 优缺点</h4><p>优点：</p><ol><li>耦合性低，方便维护，有利于分工协作</li><li>复用性高</li></ol><p>缺点：</p><ol><li>使得项目架构变得复杂，对开发人员要求高</li></ol><h2 id="3-EL表达式"><a href="#3-EL表达式" class="headerlink" title="3. EL表达式"></a>3. EL表达式</h2><p> EL（Expression Language） 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。</p><ul><li>语法：<code>${表达式}</code></li><li>jsp默认支持el表达式，有两种方法可以忽略el表达式。<ol><li>忽略当前jsp页面中所有的el表达式：设置jsp中的page指令<code>isELIgnored="true"</code>即可。</li><li>忽略当前el表达式：使用<code>\${表达式}</code></li></ol></li></ul><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><h4 id="3-1-1-运算符"><a href="#3-1-1-运算符" class="headerlink" title="3.1.1 运算符"></a>3.1.1 运算符</h4><ol><li>算数运算符：<code>+ - * /(div) %(mod)</code></li><li>比较运算符：<code>&gt; &lt; = &gt;= &lt;= == !=</code></li><li>逻辑运算符：<code>&amp;&amp;(and)  ||(or)  !(not)</code></li><li>空运算符：empty<ul><li>功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0。</li><li><code>${empty list}</code>：判断list是否为null或者长度为0</li><li><code>${not empty str}</code>：表示判断str对象是否不为null并且长度&gt;0</li></ul></li></ol><h4 id="3-1-2-获取值"><a href="#3-1-2-获取值" class="headerlink" title="3.1.2 获取值"></a>3.1.2 获取值</h4><p>el表达式只能从域对象中获取值，语法如下</p><h5 id="1-域名称-键名"><a href="#1-域名称-键名" class="headerlink" title="1.${域名称.键名}"></a>1.<code>${域名称.键名}</code></h5><h5 id="表示从指定域中获取指定键的值。"><a href="#表示从指定域中获取指定键的值。" class="headerlink" title="表示从指定域中获取指定键的值。"></a>表示从指定域中获取指定键的值。</h5><p>域名称对应对象：</p><table><thead><tr><th>域名称</th><th>对象</th></tr></thead><tbody><tr><td>pageScope</td><td>pageContext</td></tr><tr><td>requestScope</td><td>request</td></tr><tr><td>sessionScope</td><td>session</td></tr><tr><td>applicationScope</td><td>application(ServletContext)</td></tr></tbody></table><p>例：在request域中存储了name=张三，使用<code>${requestScope.name}</code>即可获取值。</p><h5 id="2-键名"><a href="#2-键名" class="headerlink" title="2. ${键名"></a>2. <code>${键名</code></h5><p>表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p><h5 id="3-获取对象、List集合、Map集合的值"><a href="#3-获取对象、List集合、Map集合的值" class="headerlink" title="3. 获取对象、List集合、Map集合的值"></a>3. 获取对象、List集合、Map集合的值</h5><ul><li>获取对象：<code>${域名称.键名.属性名}</code>，其本质上会去调用对象的<code>getter</code>方法</li><li>获取List集合：<code>${域名称.键名[索引]}</code></li><li>获取Map集合：<code>${域名称.键名.key名称}</code>或者<code>${域名称.键名["key名称"]}</code></li></ul><h4 id="3-1-3-隐式对象"><a href="#3-1-3-隐式对象" class="headerlink" title="3.1.3 隐式对象"></a>3.1.3 隐式对象</h4><p>EL表达式中有11个隐式对象，常用的就pageContext</p><p><code>pageContext</code>：获取jsp其他八个内置对象</p><p>通常用它来动态获取虚拟目录：<code>${pageContext.request.contextPath}</code></p><h2 id="4-JSTL标签"><a href="#4-JSTL标签" class="headerlink" title="4. JSTL标签"></a>4. JSTL标签</h2><ul><li><code>JavaServer Pages Tag Library</code>：JSP标准标签库，是由Apache组织提供的开源免费的jsp标签</li><li>作用：用于简化和替换jsp页面上的java代码</li></ul><h3 id="4-1-使用步骤"><a href="#4-1-使用步骤" class="headerlink" title="4.1 使用步骤"></a>4.1 使用步骤</h3><ol><li>导入JSTL相关jar包</li><li>引入标签库，使用taglib指令：<code>&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;</code></li><li>使用标签</li></ol><h3 id="4-2-常用的JSTL标签"><a href="#4-2-常用的JSTL标签" class="headerlink" title="4.2 常用的JSTL标签"></a>4.2 常用的JSTL标签</h3><h4 id="4-2-1-if"><a href="#4-2-1-if" class="headerlink" title="4.2.1 if"></a>4.2.1 if</h4><p>相当于java代码的if语句，有一个必须属性<code>test</code>。</p><ul><li><code>test</code>属性：接受布尔表达式<ul><li>如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容。</li><li>一般情况下，test属性值会结合el表达式一起使用</li></ul></li><li>注意：<code>c:if</code>标签没有else情况，想要else情况，则可以再定义一个<code>c:if</code>标签</li></ul><h4 id="4-2-2-choose"><a href="#4-2-2-choose" class="headerlink" title="4.2.2 choose"></a>4.2.2 choose</h4><p>相当于java代码的switch语句</p><h4 id="4-2-3-foreach"><a href="#4-2-3-foreach" class="headerlink" title="4.2.3 foreach"></a>4.2.3 foreach</h4><p>相当于java代码的for语句，代码举例如下</p><pre><code class="jsp">&lt;%@ page import="java.util.ArrayList" %&gt;&lt;%@ page import="java.util.List" %&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;foreach标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%--    foreach:相当于java的for语句        1. 完成重复性操作            属性：                begin:开始值                end：结束值                var：临时遍历                step：步长                varStatus:循环状态对象                    index: 容器中元素的索引，从0开始                    count：循环次数，从1开始        2. 遍历容器            属性：                items：容器对象                var：容器中元素的临时变量                varStatus:循环状态对象                    index: 容器中元素的索引，从0开始                    count：循环次数，从1开始--%&gt;&lt;c:forEach begin="0" end="10" var="i" step="2" varStatus="s"&gt;    ${i} &lt;h3&gt;${s.index}&lt;/h3&gt;&lt;/c:forEach&gt;&lt;hr&gt;&lt;%    List list = new ArrayList();    list.add("a");    list.add("b");    list.add("c");    list.add("d");    request.setAttribute("list",list);%&gt;&lt;c:forEach items="${list}" var="str" varStatus="s"&gt;    ${s.index} ${s.count} ${str}&lt;br&gt;&lt;/c:forEach&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="4-3-综合练习"><a href="#4-3-综合练习" class="headerlink" title="4.3 综合练习"></a>4.3 综合练习</h3><p>在request域中有一个存有User对象的List集合。需要使用jstl+el将List集合数据展示到jsp页面的表格table中。</p><pre><code class="jsp">&lt;%@ page import="java.util.ArrayList" %&gt;&lt;%@ page import="java.util.List" %&gt;&lt;%@ page import="cn.zero.domain.User" %&gt;&lt;%@ page import="java.util.Date" %&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;综合练习&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%--    在request域中有一个存有User对象的List集合。    请使用jstl+el将List集合数据展示到jsp页面的表格table中。--%&gt;&lt;%    List list = new ArrayList();    list.add(new User("小张",21,new Date()));    list.add(new User("小王",22,new Date()));    list.add(new User("小李",23,new Date()));    request.setAttribute("list",list);%&gt;&lt;table border="1" width="500" align="center"&gt;    &lt;tr&gt;        &lt;th&gt;编号&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;        &lt;th&gt;年龄&lt;/th&gt;        &lt;th&gt;生日&lt;/th&gt;    &lt;/tr&gt;    &lt;c:forEach items="${list}" var="user" varStatus="s"&gt;        &lt;c:if test="${s.count % 2 == 0}"&gt;            &lt;tr bgcolor="#f08080"&gt;                &lt;td&gt;${s.count}&lt;/td&gt;                &lt;td&gt;${user.name}&lt;/td&gt;                &lt;td&gt;${user.age}&lt;/td&gt;                &lt;td&gt;${user.birStr}&lt;/td&gt;            &lt;/tr&gt;        &lt;/c:if&gt;        &lt;c:if test="${s.count % 2 != 0}"&gt;            &lt;tr bgcolor="#00bfff"&gt;                &lt;td&gt;${s.count}&lt;/td&gt;                &lt;td&gt;${user.name}&lt;/td&gt;                &lt;td&gt;${user.age}&lt;/td&gt;                &lt;td&gt;${user.birStr}&lt;/td&gt;            &lt;/tr&gt;        &lt;/c:if&gt;    &lt;/c:forEach&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="5-三层架构"><a href="#5-三层架构" class="headerlink" title="5. 三层架构"></a>5. 三层架构</h2><p>三层架构(3-tier architecture) 通常意义上的三层架构就是将整个业务应用划分为：界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer）。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/19/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84-1560957316811.png" alt="title"></p><ul><li>界面层(表示层)：用户看的界面。用户可以通过界面上的组件和服务器进行交互。</li><li>业务逻辑层：处理业务逻辑的。</li><li>数据访问层：操作数据存储文件。</li></ul><h2 id="6-综合案例：用户信息列表展示"><a href="#6-综合案例：用户信息列表展示" class="headerlink" title="6. 综合案例：用户信息列表展示"></a>6. 综合案例：用户信息列表展示</h2><h3 id="6-1-需求"><a href="#6-1-需求" class="headerlink" title="6.1 需求"></a>6.1 需求</h3><p>用户点击查询，显示所有用户，可以对数据进行增删改查操作</p><h3 id="6-2-设计"><a href="#6-2-设计" class="headerlink" title="6.2 设计"></a>6.2 设计</h3><h4 id="6-2-1-技术选型"><a href="#6-2-1-技术选型" class="headerlink" title="6.2.1 技术选型"></a>6.2.1 技术选型</h4><p><code>Servlet+JSP+MySQL+JDBCTemplate+Duird+BeanUtils+tomcat</code></p><h4 id="6-2-2-数据库设计"><a href="#6-2-2-数据库设计" class="headerlink" title="6.2.2 数据库设计"></a>6.2.2 数据库设计</h4><pre><code class="sql">create database Users; -- 创建数据库use Users;create table user( -- 创建表    id int primary key auto_increment,    name varchar(20) not null,    gender varchar(5),    age int,    address varchar(32),    qq varchar(20),    email varchar(50))</code></pre><h4 id="6-2-3-开发阶段"><a href="#6-2-3-开发阶段" class="headerlink" title="6.2.3 开发阶段"></a>6.2.3 开发阶段</h4><ol><li>环境搭建<ol><li>创建数据库环境</li><li>创建项目，导入所需jar包</li></ol></li><li>编码</li></ol><h4 id="6-2-4-测试"><a href="#6-2-4-测试" class="headerlink" title="6.2.4 测试"></a>6.2.4 测试</h4><h4 id="6-2-5-部署运维"><a href="#6-2-5-部署运维" class="headerlink" title="6.2.5 部署运维"></a>6.2.5 部署运维</h4><h3 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h3><h3 id="6-3-1-分析图"><a href="#6-3-1-分析图" class="headerlink" title="6.3.1 分析图"></a>6.3.1 分析图</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/19/1560959814288-1560959814341.png" alt="title"></p><p>代码后续见GitHub</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>会话技术Cookie和Session</title>
      <link href="/2019/06/16/javaweb/cookie-he-session/"/>
      <url>/2019/06/16/javaweb/cookie-he-session/</url>
      
        <content type="html"><![CDATA[<h2 id="1-会话技术"><a href="#1-会话技术" class="headerlink" title="1. 会话技术"></a>1. 会话技术</h2><p>会话是浏览器和服务器之间的多次请求和响应，在一次会话中往往会产生一些数据，可以通过会话技术(Session和Cookie)保存会话中产生的数据</p><a id="more"></a><p>一次会话中包含多次请求和响应</p><ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止。</li><li>主要功能：在一次会话的范围内的多次请求之间，共享数据</li><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ul><h2 id="2-Cookie"><a href="#2-Cookie" class="headerlink" title="2. Cookie"></a>2. Cookie</h2><p>客户端会话技术，将数据保存到客户端</p><h3 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h3><ol><li>创建Cookie对象，绑定数据：<code>new Cookie(String name, String value)</code></li><li>发送Cookie对象：<code>response.addCookie(Cookie cookie)</code></li><li>获取Cookie，拿到数据：<code>Cookie[] request.getCookies()</code></li></ol><h3 id="2-2-实现原理"><a href="#2-2-实现原理" class="headerlink" title="2.2 实现原理"></a>2.2 实现原理</h3><p>基于响应头<code>set-cookie</code>和请求头<code>cookie</code>实现 </p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/16/Cookie%E5%8E%9F%E7%90%86-1560669241487.bmp" alt="title"></p><h3 id="2-3-cookie的细节"><a href="#2-3-cookie的细节" class="headerlink" title="2.3 cookie的细节"></a>2.3 cookie的细节</h3><ol><li><p>一次可不可以发送多个cookie？</p><p>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可</p></li><li><p>cookie在浏览器中保存多长时间？</p><p>默认情况下，当浏览器关闭后，Cookie数据被销毁。可以通过设置<code>setMaxAge(int seconds)</code>来进行持久化存储，参数填写正数：将Cookie数据写到硬盘的文件中，持久化存储，并指定cookie存活时间，时间到后，cookie文件自动失效；负数是默认值，即浏览器关闭自动销毁；零表示删除cookie信息。</p></li><li><p>cookie能不能存储中文？</p><p>在tomcat8之前cookie中不能直接存储中文数据，需要将中文数据进行转码(一般采用URL编码，使用<code>URLEncoder</code>和<code>URLDecoder</code>来编解码)；在tomcat8之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，方便URL解码解析。</p></li><li><p>假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享呢？</p><p>默认情况下cookie不能共享。可以通过<code>setPath(String path)</code>方法设置cookie的获取范围，默认情况下设置当前虚拟目录，如果要共享，将path设置为<code>"/"</code>即可。</p></li><li><p>在不同的tomcat服务器之间cookie能否共享？</p><p>可以通过<code>setDomain(String path)</code>方法设置域名，如果设置的一级域名相同，那么多个服务器之间cookie可以共享，例：<code>setDomain(".baidu.com")</code>，那么<code>tieba.baidu.com</code>和<code>news.baidu.com</code>中的cookie可以共享。</p></li></ol><blockquote><p>一级域名：一级域名中只含有一个<code>.</code>，且<code>.</code>左边要没有内容。最后一个点的右边被称为一级域名，一级域名又被称为顶级域名。一级域名左边有内容的是二级域名。例<code>tieba.baidu.com</code>中，<code>.baodu.com</code>就是一级域名。</p></blockquote><h3 id="2-4-Cookie的特点和作用"><a href="#2-4-Cookie的特点和作用" class="headerlink" title="2.4 Cookie的特点和作用"></a>2.4 Cookie的特点和作用</h3><ol><li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie的大小有限制(4kb)，以及对同一个域名下的总cookie数量也有限制(20个)</li><li>cookie一般用于存储少量的不敏感数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别(记住我)</li></ol><h3 id="2-5-案例："><a href="#2-5-案例：" class="headerlink" title="2.5 案例："></a>2.5 案例：</h3><p>记住上一次访问时间</p><h4 id="2-5-1-需求"><a href="#2-5-1-需求" class="headerlink" title="2.5.1 需求"></a>2.5.1 需求</h4><ol><li>访问一个Servlet，如果是第一次访问，则提示：你好，欢迎你首次访问</li><li>如果不是第一次访问，则提示：欢迎回来，你上次访问时间是：xxxx</li></ol><h4 id="2-5-2-需求分析"><a href="#2-5-2-需求分析" class="headerlink" title="2.5.2 需求分析"></a>2.5.2 需求分析</h4><ol><li>采用cookie来完成</li><li>在服务器中的Servlet判断是否有一个名为lastTime的cookie<ul><li>有：代表不是第一次访问，先响应数据：欢迎回来，你上次访问时间是：xxxx。在回写cookie：将lasttime更新</li><li>没有：代表是第一次访问，响应数据：你好，欢迎首次访问。回写cookie：设置一个lasttime为当前时间。</li></ul></li></ol><h4 id="2-5-3-代码实现"><a href="#2-5-3-代码实现" class="headerlink" title="2.5.3 代码实现"></a>2.5.3 代码实现</h4><pre><code class="java">@WebServlet("/CookieExercise")public class CookieExercise extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 设置响应的消息体的数据格式以及编码        response.setContentType("text/html;charset=utf-8");        // 1. 获取所有cookie        Cookie[] cookies = request.getCookies();        boolean flag = false; // 默认cookie没有lastTime        // 如果有cookie，则进行遍历        if (cookies != null &amp;&amp; cookies.length &gt; 0){            // 2. 遍历cookie数据            for (Cookie cookie : cookies) {                // 3. 获取cookie的名称                String name = cookie.getName();                // 4. 判断名称是否是：lastTime                if ("lastTime".equals(name)){                    // 有，则代表不是第一次访问                    flag = true; // 代表有lastTime                    // 设置cookie的value                    // 获取当前时间的字符串，重新设置cookie的值，然后发送                    Date date = new Date();                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");                    String str_date = sdf.format(date);                    System.out.println("编码前："+str_date);                    // url编码                    str_date = URLEncoder.encode(str_date,"utf-8");                    System.out.println("编码后："+str_date);                    // 设置cookie的存活时间一个月                    cookie.setMaxAge(60 * 60 * 24 * 30);                    response.addCookie(cookie); // 将cookie值添加                    // 5. 响应数据                    // 获取cookie的value值                    String value = cookie.getValue();                    System.out.println("解码前："+value);                    // url解码                    value = URLDecoder.decode(value,"utf-8");                    System.out.println("解码后："+value);                    // 将数据响应                    response.getWriter().write("&lt;h3&gt;欢迎回来,你的上次访问时是"+value+"&lt;/h3&gt;");                    break;                }            }        }        // 如果没有cookie信息或者没有lastTime        if (cookies == null || cookies.length == 0 || flag == false){            // 没有，代表是第一次访问            // 获取当前时间字符串，设置cookie值发送            Date date = new Date();            SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");            String str_date = sdf.format(date);            System.out.println("编码前："+str_date);            // url编码            str_date = URLEncoder.encode(str_date,"utf-8");            System.out.println("编码后："+str_date);            // 新建cookie对象，设置lastTime            Cookie cookie = new Cookie("lastTime", str_date);            // 设置cookie存活时间            cookie.setMaxAge(60 * 60 * 24 * 30);            // 发送cookie            response.addCookie(cookie);            // 响应数据            response.getWriter().write("&lt;h3&gt;你好，欢迎首次访问&lt;/h3&gt;");        }    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><h2 id="3-JSP简单入门"><a href="#3-JSP简单入门" class="headerlink" title="3. JSP简单入门"></a>3. JSP简单入门</h2><p>Java Server Pages（Java服务器端页面），简称JSP。可以理解为一个特殊的页面，其中既可以定义html标签，又可以定义java代码。主要用于简化书写。</p><h3 id="3-1-原理"><a href="#3-1-原理" class="headerlink" title="3.1 原理"></a>3.1 原理</h3><ul><li>JSP本质上就是一个Servlet，通过<code>HttpJspBase</code>来生成Servlet。</li></ul><p><code>public abstract class HttpJspBase extends HttpServlet implements HttpJspPage</code></p><h3 id="3-2-JSP的脚本"><a href="#3-2-JSP的脚本" class="headerlink" title="3.2 JSP的脚本"></a>3.2 JSP的脚本</h3><p>就是JSP定义Java代码的方式</p><ol><li><code>&lt;% 代码 %&gt;</code>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</li><li><code>&lt;!% 代码 %&gt;</code>：定义的java代码，JSP转换后在java类的成员位置(成员变量、成员方法等)</li><li><code>&lt;%= 代码 %&gt;</code>：定义的java代码，会输出到页面上。 输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol><h3 id="3-3-JSP的内置对象"><a href="#3-3-JSP的内置对象" class="headerlink" title="3.3 JSP的内置对象"></a>3.3 JSP的内置对象</h3><p>内置对象就是在JSP页面中不需要获取和创建，可以直接使用的对象。JSP一共有9个内置对象。今天简单学习3个。</p><ul><li>request</li><li>response</li><li>out：字符输出流对象。可以将数据输出到页面上。和<code>response.getWriter()</code>类似</li><li><code>response.getWriter()</code>和<code>out.write()</code>的区别<ol><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据</li><li><code>response.getWriter()</code>数据输出永远在<code>out.write()</code>的之前</li></ol></li></ul><h2 id="4-Session"><a href="#4-Session" class="headerlink" title="4. Session"></a>4. Session</h2><p> 服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象(<code>HttpSession</code>)中。</p><h3 id="4-1-HttpSession对象"><a href="#4-1-HttpSession对象" class="headerlink" title="4.1 HttpSession对象"></a>4.1 <code>HttpSession</code>对象</h3><ol><li>获取<code>HttpSession</code>对象：<code>HttpSession session = request.getSession();</code></li><li>使用<code>HttpSession</code>对象，有三个常用方法<ul><li><code>Object getAttribute(String name)</code></li><li><code>void setAttribute(String name, Object value)</code></li><li><code>void removeAttribute(String name)</code></li></ul></li></ol><h3 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2 原理"></a>4.2 原理</h3><ul><li>服务器如何确保在一次会话范围内，多次获取的Session对象是同一个？</li></ul><p>Session的实现是依赖于Cookie的。当客户端第一次向服务器发起请求时，没有cookie。会在内存中创建一个新的Session对象，并通过响应头<code>set-cookie</code>将<code>JSESSIONID=xxxxx</code>传递给客户端，客户端保存在cookie信息中。第二次向服务器发起请求时，请求头中会携带这个<code>JSESSIONID=xxxxx</code>，服务器自动获取后会查找内存中是否有这个ID的session对象，能找到就说明是同一个session对象。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/16/Session%E5%8E%9F%E7%90%86-1560647657175.bmp" alt="title"></p><h3 id="4-3-细节问题"><a href="#4-3-细节问题" class="headerlink" title="4.3 细节问题"></a>4.3 细节问题</h3><h4 id="1-当客户端关闭后，服务器不关闭，两次获取的session是否为同一个？"><a href="#1-当客户端关闭后，服务器不关闭，两次获取的session是否为同一个？" class="headerlink" title="1. 当客户端关闭后，服务器不关闭，两次获取的session是否为同一个？"></a>1. 当客户端关闭后，服务器不关闭，两次获取的session是否为同一个？</h4><ul><li><p>默认情况下，不是</p></li><li><p>如果需要两次相同，可以创建Cookie，键为JSESSIONID，并设置cookie存活时间。在服务器不关闭的情况下，在存活时间内，只要是同一个cookie访问，两次获取的session对象就是同一个。</p><pre><code class="java">// 1. 获取sessionHttpSession session = request.getSession();// 2. 期望客户端关闭后，session也相同Cookie c = new Cookie("JSESSIONID", session.getId()); // 手动设置sessionid为当前的session对象idc.setMaxAge(60 * 60); // 设置cookie最大存活时间response.addCookie(c); // 发送cookie</code></pre></li></ul><h4 id="2-客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"><a href="#2-客户端不关闭，服务器关闭后，两次获取的session是同一个吗？" class="headerlink" title="2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"></a>2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</h4><ul><li>不是同一个，但是我们要确保数据不丢失。</li><li>session的钝化：在服务器正常关闭之前，将session对象序列化到硬盘上。</li><li>session的活化：在服务器启动后，将session文件转化为内存中的session对象即可。</li></ul><h4 id="3-session什么时候被销毁"><a href="#3-session什么时候被销毁" class="headerlink" title="3. session什么时候被销毁"></a>3. session什么时候被销毁</h4><ol><li>服务器被关闭</li><li>session对象调用<code>invalidate()</code>方法</li><li>session默认失效时间是 30分钟，可以在web.xml中配置<code>session-config</code></li></ol><h3 id="4-4-session的特点"><a href="#4-4-session的特点" class="headerlink" title="4.4 session的特点"></a>4.4 session的特点</h3><ol><li>session用于存储一次会话的多次请求的数据，存储在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol><h4 id="session与cookie的区别"><a href="#session与cookie的区别" class="headerlink" title="session与cookie的区别"></a>session与cookie的区别</h4><ol><li>session存储数据在服务器端，cookie在客户端</li><li>session没有数据大小限制，cookie有限制(4kb)</li><li>session数据安全，cookie相对而言不安全</li></ol><h2 id="5-案例"><a href="#5-案例" class="headerlink" title="5. 案例"></a>5. 案例</h2><h3 id="5-1-需求"><a href="#5-1-需求" class="headerlink" title="5.1 需求"></a>5.1 需求</h3><ol><li>访问带有验证码的登陆页面login.jsp</li><li>用户输入用户名，密码以及验证码<ul><li>如果用户名和密码输入错误，跳转登陆页面，提示：用户名或密码错误</li><li>如果验证码输入有误，跳转登陆页面，提示：验证码错误</li><li>如果全部输入正确，则跳转主页success.jsp，显示：用户名，欢迎你</li></ul></li></ol><h3 id="5-2-分析"><a href="#5-2-分析" class="headerlink" title="5.2 分析"></a>5.2 分析</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/16/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B-1560651918633.bmp" alt="title"></p><h3 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h3><ol><li>登陆的Servlet</li></ol><pre><code class="java">@WebServlet("/loginServlet")public class LoginServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 设置request编码        request.setCharacterEncoding("utf-8");        // 2. 获取参数        // todo：改进，获取参数Map,封装进User对象        Map&lt;String, String[]&gt; map = request.getParameterMap();        User loginUser = new User();        try {            BeanUtils.populate(loginUser,map);        } catch (IllegalAccessException e) {            e.printStackTrace();        } catch (InvocationTargetException e) {            e.printStackTrace();        }        // 获取用户输入的验证码        String checkCode = request.getParameter("checkCode");        // 3. 获取生成的验证码        HttpSession session = request.getSession();        String checkCode_session = (String) session.getAttribute("checkCode_session");        // 3.1 删除session中存储的验证码        session.removeAttribute("checkCode_session");        // 4. 判断验证码是否正确        if (checkCode_session != null &amp;&amp; checkCode_session.equalsIgnoreCase(checkCode)){// 忽略大小写比较            // 验证码正确，调用UserDao的login方法进行登陆操作            UserDao dao = new UserDao();            User user = dao.login(loginUser);            // 判断用户名是否成功登陆            if (user != null ){ // todo: 需要调用UserDao查询数据库，进行数据对比                // 登陆成功                // 存储用户信息                session.setAttribute("User",user.getUsername());                // 重定向到success.jsp                response.sendRedirect(request.getContextPath() + "/success.jsp");            }else {                // 登陆失败                // 存储信息到request                request.setAttribute("login_error","用户名或密码错误！");                // 转发到登陆页面                request.getRequestDispatcher("/login.jsp").forward(request,response);            }        }else {            // 验证码不一致            // 存储信息到request            request.setAttribute("cc_error","验证码错误！");            // 转发到登陆页面            request.getRequestDispatcher("/login.jsp").forward(request,response);        }    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }}</code></pre><ol start="2"><li>登陆的前端页面</li></ol><pre><code class="jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Login&lt;/title&gt;    &lt;script&gt;        window.onload = function () {            document.getElementById("img").onclick = function () {                this.src = "/Demo6_14/checkCodeServlet?time=" + new Date().getTime();            }        }    &lt;/script&gt;    &lt;style&gt;        div{            color: red;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;form action="/Demo6_14/loginServlet" method="post"&gt;    &lt;table&gt;        &lt;tr&gt;            &lt;td&gt;用户名&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="username"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;密码&lt;/td&gt;            &lt;td&gt;&lt;input type="password" name="password"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;验证码&lt;/td&gt;            &lt;td&gt;&lt;input type="text" name="checkCode"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan="2"&gt;&lt;img src="/Demo6_14/checkCodeServlet" id="img"&gt;&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td colspan="2"&gt;&lt;input type="submit" value="登陆"&gt;&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/form&gt;    &lt;div&gt;&lt;%= request.getAttribute("cc_error") == null ? "" : request.getAttribute("cc_error") %&gt;&lt;/div&gt;    &lt;div&gt;&lt;%= request.getAttribute("login_error") == null ? "" : request.getAttribute("login_error") %&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ol start="3"><li>Dao类</li></ol><pre><code class="java">// 操作数据库中User表的类，主要查询数据public class UserDao {    // 声明JDBCTemplate对象共用    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());    // 登陆方法    public User login(User loginUser){        try{            String sql = "select * from user where username = ? and password = ?";            User user = template.queryForObject(sql,                    new BeanPropertyRowMapper&lt;User&gt;(User.class),                    loginUser.getUsername(), loginUser.getPassword());            return user;        }catch (DataAccessException e){            // 登陆失败，打印异常，返回null            e.printStackTrace();            return null;        }    }}</code></pre><ol start="4"><li>验证码生成类在上一篇文章</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议和Response</title>
      <link href="/2019/06/13/javaweb/http-he-response-dui-xiang/"/>
      <url>/2019/06/13/javaweb/http-he-response-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTP协议"><a href="#1-HTTP协议" class="headerlink" title="1. HTTP协议"></a>1. HTTP协议</h2><p>HTTP协议分为<strong>请求消息</strong>和<strong>响应消息</strong>两部分。请求消息是客户端发送给服务器端的数据，数据格式由请求行、请求头、请求空行、请求体4部分组成。下面讲解响应消息格式。</p><a id="more"></a><h2 id="1-1-响应消息"><a href="#1-1-响应消息" class="headerlink" title="1.1 响应消息"></a>1.1 响应消息</h2><p>响应消息是服务器端发送给客户端的数据，具体数据格式如下4部分。</p><h4 id="1-1-1-响应行"><a href="#1-1-1-响应行" class="headerlink" title="1.1.1 响应行"></a>1.1.1 响应行</h4><ol><li>格式：HTTP/1.1(协议/版本)  200(响应状态码)  OK(状态码描述)</li><li>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态，状态码都是3位数字，具体分类如下。<ul><li>1xx：服务器接收客户端消息，但没有接收完毕，等待一段时间后，服务器会发送1xx状态码询问客户端是否还要继续发送数据。比较特殊的情况，了解即可。</li><li>2xx：成功。例：200表示成功</li><li>3xx：重定向。例：302(重定向)，304(访问缓存)</li><li>4xx：客户端错误。例：404(请求路径没有对应的资源或没权限访问)，405(请求方式没有对应的doXxx方法)</li><li>5xx：服务器端错误。例：500(服务器内部出现异常)</li></ul></li></ol><h4 id="1-1-2-响应头"><a href="#1-1-2-响应头" class="headerlink" title="1.1.2 响应头"></a>1.1.2 响应头</h4><ol><li>格式：头名称：值</li><li>常见响应头：<ul><li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</li><li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据。默认值<code>in-line</code>：在当前页面内打开。<code>attachment;filename=xxx</code>：以附件形式打开响应体(用于文件下载)。</li></ul></li></ol><h4 id="1-1-3-响应空行"><a href="#1-1-3-响应空行" class="headerlink" title="1.1.3 响应空行"></a>1.1.3 响应空行</h4><h4 id="1-1-4-响应体"><a href="#1-1-4-响应体" class="headerlink" title="1.1.4 响应体"></a>1.1.4 响应体</h4><p>就是传输的数据。</p><h4 id="响应字符串格式"><a href="#响应字符串格式" class="headerlink" title="响应字符串格式"></a>响应字符串格式</h4><pre><code>HTTP/1.1 200 OK        &lt;-----响应行Content-Type: text/html;charset=UTF-8        &lt;-----响应头Content-Length: 90Date: Thu, 13 Jun 2019 10:01:19 GMT        &lt;-----响应空行&lt;html&gt;        &lt;-----响应体  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  hello,response  &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="2-Response对象"><a href="#2-Response对象" class="headerlink" title="2. Response对象"></a>2. Response对象</h2><p>主要功能是设置响应消息</p><h3 id="2-1-设置响应行"><a href="#2-1-设置响应行" class="headerlink" title="2.1 设置响应行"></a>2.1 设置响应行</h3><ul><li>设置状态码：<code>setStatus(int sc)</code></li></ul><h3 id="2-2-设置响应头"><a href="#2-2-设置响应头" class="headerlink" title="2.2 设置响应头"></a>2.2 设置响应头</h3><ul><li>设置响应头：<code>setHeader(String name,String value)</code></li></ul><h3 id="2-3-设置响应体数据"><a href="#2-3-设置响应体数据" class="headerlink" title="2.3 设置响应体数据"></a>2.3 设置响应体数据</h3><p>使用步骤有以下两步</p><h4 id="2-3-1-获取输出流"><a href="#2-3-1-获取输出流" class="headerlink" title="2.3.1 获取输出流"></a>2.3.1 获取输出流</h4><ul><li>字符输出流：<code>PrintWriter getWriter()</code></li><li>字节输出流：<code>ServletOutputStream getOutputSteam()</code></li></ul><h4 id="2-3-2-使用输出流"><a href="#2-3-2-使用输出流" class="headerlink" title="2.3.2 使用输出流"></a>2.3.2 使用输出流</h4><p>将数据输出到客户端浏览器</p><h3 id="2-4-小案例"><a href="#2-4-小案例" class="headerlink" title="2.4 小案例"></a>2.4 小案例</h3><h4 id="2-4-1-完成重定向"><a href="#2-4-1-完成重定向" class="headerlink" title="2.4.1 完成重定向"></a>2.4.1 完成重定向</h4><ul><li><p>重定向：资源的跳转方式</p></li><li><p>代码实现</p><pre><code class="java">// 1. 设置状态码为302response.setStatus(302);// 2. 设置响应头locationresponse.setHeader("location","/Demo6_13/responseDemo2");// 简单的重定向方法response.sendRedirect("/Demo6_13/responseDemo2");</code></pre></li><li><p>重定向(<code>redirect</code>)的特点</p><ul><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。所以不能使用request对象来共享数据</li></ul></li><li><p>转发(<code>forward</code>)的特点</p><ul><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求。故可以使用request对象来共享数据</li></ul></li><li><p>路径的写法分类</p><ul><li><p>相对路径：通过相对路径不可以确定唯一资源</p><ul><li>例：<code>./index.html</code>。不以<code>/</code>开头，而是以<code>.</code>开头的路径</li><li>规则：找到当前资源和目标资源之间的相对位置关系。例：<code>./</code>表示当前目录，<code>../</code>表示上一级目录。</li></ul></li><li><p>绝对路径：通过绝对路径可以确定唯一资源</p><ul><li>例：<code>http://localhost/Demo6_13/responseDemo2</code>或<code>/Demo6_13/responseDemo2</code>。这种以<code>/</code>开头的路径</li><li>规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出。给客户端浏览器使用需要加虚拟目录(项目的访问路径)，给服务器使用不需要加虚拟目录。</li></ul><blockquote><p>虚拟目录建议使用<code>request.getContextPath()</code>来动态获取</p></blockquote></li></ul></li></ul><h4 id="2-4-2-服务器输出字符数据到浏览器"><a href="#2-4-2-服务器输出字符数据到浏览器" class="headerlink" title="2.4.2 服务器输出字符数据到浏览器"></a>2.4.2 服务器输出字符数据到浏览器</h4><p>先获取字符输出流，再输出数据。</p><pre><code class="java">// 3.1 获取流对象之前，将流的默认编码ISO-8859-1设置为utf-8response.setCharacterEncoding("utf-8");// 3.2 告诉浏览器服务器发送的消息体数据的编码，建议浏览器使用该编码来解码response.setHeader("Content-type","text/html;charset=utf-8");// 3.3 可以使用简化的形式，设置编码response.setContentType("text/html;charset=utf-8");// Notice: 3.1步骤可以省略，推荐使用3.3方法// 1. 获取字符输出流PrintWriter pw = response.getWriter();// 2. 输出数据pw.write("&lt;h1&gt;hello response&lt;/h1&gt;");// 3. 解决中文乱码问题pw.write("你好，response");/*     乱码原因是：PrintWriter pw = response.getWriter(); 获取的流默认编码是ISO-8859-1    故需在获取流之前，设置该流的默认编码，或者直接告诉浏览器响应体使用的编码，推荐其解码方式。*/</code></pre><h4 id="2-4-3-服务器输出字节数据到浏览器"><a href="#2-4-3-服务器输出字节数据到浏览器" class="headerlink" title="2.4.3 服务器输出字节数据到浏览器"></a>2.4.3 服务器输出字节数据到浏览器</h4><p>获取字节输出流输出数据，一般用于获取图片字节数据然后输出到浏览器显示图片</p><pre><code class="java">// 1. 获取字节输出流ServletOutputStream sos = response.getOutputStream();// 2. 输出数据sos.write("你好".getBytes());sos.write("hello".getBytes());</code></pre><h4 id="2-4-4-验证码"><a href="#2-4-4-验证码" class="headerlink" title="2.4.4 验证码"></a>2.4.4 验证码</h4><p>本质就是一张图片，主要作用是防止恶意表单注册</p><pre><code class="java">@WebServlet("/checkCodeServlet")public class CheckCodeServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 创建一个对象，在内存中画图片(验证码图片对象)        int width = 100;        int height = 50;        BufferedImage image = new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);        // 2. 美化图片        // 2.1 填充背景色        Graphics g = image.getGraphics(); // 获取画笔对象        g.setColor(Color.PINK); // 设置画笔颜色        g.fillRect(0,0,width,height); // 填充颜色        // 2.2 画边框        g.setColor(Color.blue);        g.drawRect(0,0,width-1, height-1);        // 2.3 写验证码        String str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";        // 2.3.1 生产随机角标        Random ran = new Random();        for (int i = 1; i &lt;= 4; i++) {            int index = ran.nextInt(str.length());            // 2.3.2 获取字符            char ch = str.charAt(index);            g.drawString(ch+"" ,width/5*i,height/2);        }        // 2.4 画干扰线        g.setColor(Color.GREEN);        for (int i = 0; i &lt; 10; i++) {            // 2.4.1 随机生产坐标点            int x1 = ran.nextInt(width);            int x2 = ran.nextInt(width);            int y1 = ran.nextInt(height);            int y2 = ran.nextInt(height);            // 根据坐标点画线            g.drawLine(x1,y1,x2,y2);        }        // 3. 将图片输出到页面展示        ImageIO.write(image,"jpg",response.getOutputStream());    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request,response);    }}</code></pre><h4 id="在网页中使用验证码"><a href="#在网页中使用验证码" class="headerlink" title="在网页中使用验证码"></a>在网页中使用验证码</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;验证码&lt;/title&gt;    &lt;script&gt;        // 1.给超链接和图片绑定单击事件        // 2. 重新设置图片的src属性值        window.onload = function () {            // 1. 获取图片对象            var img = document.getElementById("checkCode");            // 2. 创建单击事件            changeimg = function () {                // 获取时间戳                var date = new Date().getTime();                img.src = "/Demo6_13/checkCodeServlet?"+date;            }            // 3. 绑定单击事件            img.onclick = changeimg;            document.getElementById("change").onclick = changeimg;        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;img src="/Demo6_13/checkCodeServlet" id="checkCode"&gt;&lt;a href="#" id="change" &gt;看不清？换一张&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="3-ServletContext对象"><a href="#3-ServletContext对象" class="headerlink" title="3. ServletContext对象"></a>3. ServletContext对象</h2><p>这个对象代表整个Web应用，可以和程序的容器(服务器)来进行通信</p><h3 id="3-1-获取"><a href="#3-1-获取" class="headerlink" title="3.1 获取"></a>3.1 获取</h3><ol><li>通过request对象获取：<code>request.getServletContext();</code></li><li>通过HttpServlet获取：<code>this.getServletContext();</code></li></ol><h3 id="3-2-功能"><a href="#3-2-功能" class="headerlink" title="3.2 功能"></a>3.2 功能</h3><h4 id="3-2-1-获取MIME类型"><a href="#3-2-1-获取MIME类型" class="headerlink" title="3.2.1 获取MIME类型"></a>3.2.1 获取MIME类型</h4><ul><li>MIME类型：在互联网通信过程中定义的一种文件数据类型，存储在服务器的<code>web.xml</code>文件中</li><li>格式：大类型/小类型，例：<code>text/html</code>，<code>image/jpeg</code></li><li>获取方法：<code>String getMimeType(String file)</code></li></ul><h4 id="3-2-2-域对象：共享数据"><a href="#3-2-2-域对象：共享数据" class="headerlink" title="3.2.2 域对象：共享数据"></a>3.2.2 域对象：共享数据</h4><p>常用方法如下：</p><ol><li><code>setAttribute(String name,Object value)</code></li><li><code>getAttribute(String name)</code></li><li><code>removeAttribute(String name)</code></li></ol><ul><li>ServletContext对象范围：所有用户所有请求的数据</li></ul><h4 id="3-2-3-获取文件的真实-服务器-路径"><a href="#3-2-3-获取文件的真实-服务器-路径" class="headerlink" title="3.2.3 获取文件的真实(服务器)路径"></a>3.2.3 获取文件的真实(服务器)路径</h4><ul><li><code>String getRealPath(String path)</code></li></ul><pre><code class="java">// 获取文件的服务器路径String c = context.getRealPath("/c.txt"); // web目录下的资源访问String b = context.getRealPath("/WEB-INF/b.txt"); // WEB-INF目录下的资源访问String a = context.getRealPath("/WEB-INF/classes/a.txt"); // src目录下的资源访问</code></pre><h2 id="4-综合案例：文件下载"><a href="#4-综合案例：文件下载" class="headerlink" title="4. 综合案例：文件下载"></a>4. 综合案例：文件下载</h2><h3 id="4-1-案例需求"><a href="#4-1-案例需求" class="headerlink" title="4. 1 案例需求"></a>4. 1 案例需求</h3><ol><li>页面显示超链接</li><li>点击超链接后弹出下载提示框</li><li>完成图片文件下载</li></ol><h3 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2 分析"></a>4.2 分析</h3><ol><li>浏览器默认超链接指向的资源如果能够被解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求！</li><li>任何资源都必须弹出下载提示框</li><li>使用响应头设置资源的打开方式：<code>content-disposition:attachment;filename=xxx</code></li></ol><h3 id="4-3-步骤"><a href="#4-3-步骤" class="headerlink" title="4.3 步骤"></a>4.3 步骤</h3><ol><li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</li><li>定义Servlet<ol><li>获取文件名称</li><li>使用字节输入流加载文件进内存</li><li>指定response的响应头：<code>content-disposition:attachment;filename=xxx</code></li><li>将数据写出到response输出流，返回给客户端</li></ol></li></ol><h3 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h3><p><code>downloadServlet</code>代码，主要实现文件的输入输出</p><pre><code class="java">@WebServlet("/downloadServlet")public class DownloadServlet extends HttpServlet {    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        // 1. 获取请求参数，文件名称        String filename = request.getParameter("filename");        // 2. 使用字节输入流加载文件进内存        // 2.1 找到文件服务器路径        ServletContext context = this.getServletContext();        String realPath = context.getRealPath("/img/" + filename);        // 2.2 用字节流关联文件对象        FileInputStream fis = new FileInputStream(realPath);        // 3. 设置response响应头        // 3.1 设置响应头类型        String mimeType = context.getMimeType(filename); // 获取文件的mime类型        response.setHeader("content-type",mimeType);        // 3.2 解决中文文件名问题        // 3.2.1 获取user-agent请求头        String agent = request.getHeader("user-agent");        // 3.2.2 使用工具类方法编码文件名        filename = DownLoadUtils.getFileName(agent, filename);        response.setHeader("content-disposition","attachment;filename="+filename);        // 4. 将输入流的数据写出到输出流中，将文件输出到浏览器中        ServletOutputStream sos = response.getOutputStream();        byte[] buff = new byte[1024 * 8];        int len = 0;        while ((len = fis.read(buff)) != -1){            sos.write(buff,0,len);        }        fis.close();    }    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request,response);    }}</code></pre><p>前端html页面，提供了文件下载的超链接</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;下载文件&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h2&gt;文件下载&lt;/h2&gt;&lt;br&gt;&lt;a href="/Demo6_13/downloadServlet?filename=九尾.jpg"&gt;九尾&lt;/a&gt;&lt;a href="/Demo6_13/downloadServlet?filename=2.jpg"&gt;图片2&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>DownLoadUtils工具类，主要功能获取客户端的浏览器版本信息，然后根据不同的版本信息，设置filename的编码方式</p><pre><code class="java">public class DownLoadUtils {    public static String getFileName(String agent, String filename) throws UnsupportedEncodingException {        if (agent.contains("MSIE")) {            // IE浏览器            filename = URLEncoder.encode(filename, "utf-8");            filename = filename.replace("+", " ");        } else if (agent.contains("Firefox")) {            // 火狐浏览器            BASE64Encoder base64Encoder = new BASE64Encoder();            filename = "=?utf-8?B?" + base64Encoder.encode(filename.getBytes("utf-8")) + "?=";        } else {            // 其它浏览器            filename = URLEncoder.encode(filename, "utf-8");        }        return filename;    }    public static void getFileName(String agent) {    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议和Request对象</title>
      <link href="/2019/06/10/javaweb/http-xie-yi-he-request-dui-xiang/"/>
      <url>/2019/06/10/javaweb/http-xie-yi-he-request-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HTTP协议"><a href="#1-HTTP协议" class="headerlink" title="1. HTTP协议"></a>1. HTTP协议</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><p><strong>HTTP协议</strong>：超文本传输协议(Hyper Text Transfer Protocol)</p><p><strong>传输协议</strong>：定义了客户端和服务器端通信时，发送数据的格式，特点如下：</p><ol><li>基于TCP/IP的高级协议</li><li>默认端口号：80</li><li>基于请求/响应模型的：一次请求对应一次响应</li><li>无状态的：每次请求之间相互独立，不能交互数据</li></ol><a id="more"></a><h3 id="1-2-请求消息数据格式"><a href="#1-2-请求消息数据格式" class="headerlink" title="1.2 请求消息数据格式"></a>1.2 请求消息数据格式</h3><h4 id="1-2-1-请求行"><a href="#1-2-1-请求行" class="headerlink" title="1.2.1 请求行"></a>1.2.1 请求行</h4><p><code>POST(请求方式) /login.html(请求URL)  HTTP/1.1(请求协议/版本)</code></p><p>HTTP协议有7种请求方式，常用的有2种</p><ul><li>GET：请求参数在请求行中，在URL后；请求的URL长度是有限制的；且不太安全。</li><li>POST：请求参数在请求体中；请求的URL长度没有限制；相对安全。</li></ul><h4 id="1-2-2-请求头"><a href="#1-2-2-请求头" class="headerlink" title="1.2.2 请求头"></a>1.2.2 请求头</h4><p>客户端浏览器告诉服务器一些信息</p><p>常见请求头：</p><ul><li>User-Agent：浏览器告诉服务器，我们访问你使用的浏览器版本信息；可以在服务器端获取该头的信息，解决浏览器兼容性问题</li><li><code>Referer: http://192.168.1.6/login.html</code>，告诉服务器，我(当前请求)从哪里来？一般用于防盗链和统计工作。</li></ul><h4 id="1-2-3-请求空行"><a href="#1-2-3-请求空行" class="headerlink" title="1.2.3 请求空行"></a>1.2.3 请求空行</h4><p>空行，就是用于分隔POST请求的请求头和请求体的</p><h4 id="1-2-4-请求体-正文"><a href="#1-2-4-请求体-正文" class="headerlink" title="1.2.4 请求体(正文)"></a>1.2.4 请求体(正文)</h4><p>封装POST请求消息的请求参数的</p><h4 id="请求消息字符串格式："><a href="#请求消息字符串格式：" class="headerlink" title="请求消息字符串格式："></a>请求消息字符串格式：</h4><pre><code>POST /login.html  HTTP/1.1Host: 192.168.1.6User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://192.168.1.6/login.htmlContent-Type: application/x-www-form-urlencodedContent-Length: 10Connection: keep-aliveUpgrade-Insecure-Requests: 1uname=aaaa</code></pre><h2 id="2-Request"><a href="#2-Request" class="headerlink" title="2. Request"></a>2. Request</h2><h3 id="2-1-request对象和response对象的原理"><a href="#2-1-request对象和response对象的原理" class="headerlink" title="2.1 request对象和response对象的原理"></a>2.1 request对象和response对象的原理</h3><ul><li>request和response对象是由服务器创建的，我们来使用它们。</li><li>request对象是来获取请求消息的，response对象是来设置响应消息的。</li></ul><p>插入原理图解</p><h3 id="2-2-request对象继承体系结构"><a href="#2-2-request对象继承体系结构" class="headerlink" title="2.2 request对象继承体系结构"></a>2.2 request对象继承体系结构</h3><pre><code>ServletRequest  -- 接口    |    继承HttpServletRequest -- 接口    |    实现org.apache.catalina.connector.RequestFacade 类(Tomcat实现的类)</code></pre><h3 id="2-3-request的功能"><a href="#2-3-request的功能" class="headerlink" title="2.3 request的功能"></a>2.3 request的功能</h3><h4 id="2-3-1-获取请求消息数据"><a href="#2-3-1-获取请求消息数据" class="headerlink" title="2.3.1 获取请求消息数据"></a>2.3.1 获取请求消息数据</h4><h4 id="2-3-1-1-获取请求行数据"><a href="#2-3-1-1-获取请求行数据" class="headerlink" title="2.3.1.1 获取请求行数据"></a>2.3.1.1 获取请求行数据</h4><ul><li>请求行：<code>GET /reqdemo/demo1?name=zero  HTTP/1.1</code></li><li>方法：<ul><li>获取请求方式(GET)：<code>String getMethod()</code></li><li><strong>获取虚拟目录</strong>(/reqdemo)：<code>String getContextPath()</code></li><li>获取Servlet路径(/demo1)：<code>String getServletPath()</code></li><li>获取get方式请求参数(name=zero):<code>String getQueryString()</code></li><li><strong>获取请求URI</strong>(<code>/reqdemo/demo1</code>)：<code>String getRequestURI()</code></li><li>获取请求URL(<code>http://localhost/reqdemo/demo1</code>)：<code>String getRequestURL()</code></li><li>获取协议及版本号(HTTP/1.1)：<code>String getProtocol()</code></li><li>获取客户端的IP地址：<code>String getRemoteAddr()</code></li></ul></li></ul><blockquote><p>URI：统一资源标识符</p></blockquote><h4 id="2-3-1-2-获取请求头数据"><a href="#2-3-1-2-获取请求头数据" class="headerlink" title="2.3.1.2 获取请求头数据"></a>2.3.1.2 获取请求头数据</h4><p>主要方法：</p><ol><li><code>String getHeader(String name)</code>：通过请求头的名称获取请求头的值，常用。</li><li><code>Enumeration&lt;String&gt; getHeaderNames()</code>：获取所有的请求头名称；返回值是一个枚举类，可以当做迭代器使用。</li></ol><h4 id="2-3-1-3-获取请求体数据"><a href="#2-3-1-3-获取请求体数据" class="headerlink" title="2.3.1.3 获取请求体数据"></a>2.3.1.3 获取请求体数据</h4><p>只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p><p>步骤：</p><ul><li>1.获取流对象<ul><li><code>BufferedReader getReader()</code> ：获取字符输入流，只能操作字符数据。</li><li><code>ServletInputStream getInputStream()</code>：获取字节输入流，可以操作所有类型数据</li></ul></li><li>2.从流对象中拿数据</li></ul><h4 id="2-3-2-其他功能"><a href="#2-3-2-其他功能" class="headerlink" title="2.3.2 其他功能"></a>2.3.2 其他功能</h4><h4 id="2-3-2-1-获取请求参数通用方式"><a href="#2-3-2-1-获取请求参数通用方式" class="headerlink" title="2.3.2.1 获取请求参数通用方式"></a>2.3.2.1 获取请求参数通用方式</h4><p>不论是get还是post请求方式，都可以使用下列方法来获取请求参数</p><ol><li><code>String getParameter(String name)</code>：根据参数名称获取参数值</li><li><code>String[] getParameterValues(String name)</code>：根据参数名称获取参数值的数组，一般用于复选框</li><li><code>Enumeration&lt;String&gt; getParameterNames()</code>：获取所有请求从参数名称</li><li><code>Map&lt;String,String[]&gt; getParameterMap()</code>：获取所有参数的map集合</li></ol><blockquote><p>中文乱码问题：Tomcat8已解决get方式乱码问题，但post方式还是会乱码。需要在获取参数前，设置request的编码<code>request.setCharacterEncoding("utf-8");</code></p></blockquote><h4 id="2-3-2-2-请求转发"><a href="#2-3-2-2-请求转发" class="headerlink" title="2.3.2.2 请求转发"></a>2.3.2.2 请求转发</h4><p>一种在服务器内部的资源跳转方式</p><p>使用步骤：</p><ol><li>通过request对象获取请求转发器对象：<code>RequestDispatcher getRequestDispatcher(String path);</code></li><li>使用RequestDispatcher对象来进行转发：<code>forward(ServletRequest request, ServletResponse response)</code></li></ol><p>特点：</p><ol><li>浏览器地址栏路径不会发生变化</li><li>只能转发到当前服务器内部资源中</li><li>转发是一次请求</li></ol><h4 id="2-3-2-3-共享数据"><a href="#2-3-2-3-共享数据" class="headerlink" title="2.3.2.3 共享数据"></a>2.3.2.3 共享数据</h4><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ul><li><code>void setAttribute(String name, Object obj)</code>：存储数据(键值对形式)。</li><li><code>Object getAttibute(String name)</code>：通过键获取值</li><li><code>void removeAttribute(String name)</code>：通过键移除键值对</li></ul></li></ul><h4 id="2-2-2-4-获取ServletContext"><a href="#2-2-2-4-获取ServletContext" class="headerlink" title="2.2.2.4 获取ServletContext"></a>2.2.2.4 获取ServletContext</h4><p><code>ServletContext getServletContext()</code></p><h2 id="3-综合案例：用户登录"><a href="#3-综合案例：用户登录" class="headerlink" title="3. 综合案例：用户登录"></a>3. 综合案例：用户登录</h2><h3 id="3-1-需求"><a href="#3-1-需求" class="headerlink" title="3.1 需求"></a>3.1 需求</h3><ol><li>编写login.html登录页面，有用户名和密码两个输入框</li><li>使用Druid数据库连接池技术，操作mysql</li><li>使用JdbcTemplate技术封装JDBC</li><li>登录成功跳转SuccessServlet展示：登录成功！用户名，欢迎你</li><li>登录失败跳转FailServlet展示：登录失败，用户名或密码错误。</li></ol><h3 id="3-2-开发步骤"><a href="#3-2-开发步骤" class="headerlink" title="3.2 开发步骤"></a>3.2 开发步骤</h3><ol><li><p>创建项目，导入html页面、配置文件、jar包。</p></li><li><p>创建数据库环境，创建user表</p></li><li><p>创建包domain，创建类User</p><pre><code class="java">// 用户实体类public class User{    private int id;    private String username;    private String password;    // 生成get/set方法    ...    // 生成toString方法    ...}</code></pre></li><li><p>创建util包，编写工具类JDBCUtils</p><pre><code class="java">// JDBC工具类，使用Druid连接池public class JDBCUtils{    private static DataSource ds = null;    static{ // 使用静态代码块来加载配置文件等内容        try{            // 1. 加载配置文件            Properties pro = new Properties();            // 1.1 使用ClassLoader加载配置文件，获取字节输入流            InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties");            pro.load(is);            // 2. 使用Druid连接池技术，初始化连接池对象            ds = DruidDataSourceFactory.createDataSource(pro);        }catch(IOException e){            e.printStackTrace();        }catch(Exception e){            e.printStackTrace();        }    }    // 获取连接池对象    public static DataSource getDataSource(){        return ds;    }    // 获取连接Connection对象    public static Connection getConnection() throws SQLException{        return ds.getConnection();    }}</code></pre></li><li><p>创建dao包，创建类UserDao，提供login方法</p><pre><code class="java">// 操作数据库中User表的类public class UserDao{    // 声明JDBCTemplate对象共用    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());    // 定义登录方法    public User login(User loginUser){        try{            // 1. 编写sql            String sql = "select * form user where username = ? and password = ?";            // 2. 调用query方法,查询数据            User user = template.queryForObject(sql,                     new BeanPropertyRowMaper&lt;User&gt;(User.class),                     loginUser.getUsername(),loginUser.getPassword());            return user; // 返回查询到的数据对象        }catch{DataAccessException e}{            e.printStackTrace(); // 一般做记录日志文件处理            return null;        }    }}</code></pre></li><li><p>编写Servelt.LoginServlet类</p><pre><code class="java">// 主要Servlet类,负责处理登录验证操作，登录成功失败后的转发操作@WebServlet("/loginServlet") // 设置资源路径public class LoginServlet extends HttpServlet{    @Override    protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws Servlet Exception,IOException{        // 1. 设置编码        req.setCharacterEncoding("utf-8");        // 2. 获取请求参数        String username = req.getParameter("username");        String password = req.getParameter("password");        // 3. 将数据封装成user对象        User loginUser = new User();        loginUser.setUsername(username);        loginUser.setPassword(password);        // 4. 调用UserDao的login方法           UserDao dao = new UserDao();        User user = dao.login(loginUser); // 进行用户数据验证，返回一个User对象的完整数据        // 5. 判断是否正常登录        if(user == null){            // 登录失败，转发向失败页面            req.getRequestDispatcher("/failServlet").forward(req,resp);        }else{            // 登录成功，跳转成功页面            // 将user对象放入request域中            req.setAttribute("user",user);            // 转发            req.getRequestDispatcher("/successServlet").forward(req,resp);        }    }    @Override    protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws Servlet Exception,IOException{        this.doGet(req,resp);    }}</code></pre></li><li><p>编写FailServlet和SuccessServlet类</p><pre><code class="java">// 失败处理页面,直接返回一句话@WebServlet("/failServlet")public class FailServlet extends HttpServlet{    protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws Servlet Exception,IOException{        // 设置编码        resp.setContentType("text/html;charset=utf-8");        // 输出        resp.getWriter().write("登录失败，用户名或密码错误");    }    protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws Servlet Exception,IOException{        this.doPost(req,resp);    }}// 成功页面@WebServlet("/successServlet")public class SuccessServlet extends HttpServlet{    protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws Servlet Exception,IOException{        // 获取request域中共享的user对象        User user = (User)request.getAttibute("user");        if(user != null){            // 设置编码            resp.setContentType("text/html;charset=utf-8");            // 输出            resp.getWriter().write("登录成功！"+user.getUsername()+"欢迎你");        }    }    protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws Servlet Exception,IOException{        this.doPost(req,resp);    }}</code></pre></li><li><p>将login.html中form表单的action路径设置为虚拟目录+Servlet的资源路径</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;登录页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action="/LoginDemo/loginServlet" method="post"&gt;        用户名：&lt;input type="text" name="username"&gt;&lt;br&gt;        密码：&lt;input type="password" name="password"&gt;&lt;br&gt;        &lt;input type="submit" value="登录"&gt;    &lt;/form&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre></li></ol><h4 id="3-2-1-BeanUtils"><a href="#3-2-1-BeanUtils" class="headerlink" title="3.2.1 BeanUtils"></a>3.2.1 BeanUtils</h4><p>apache提供的一个工具类，使用BeanUtils工具类，可以简化数据的封装，主要用于封装JavaBean</p><ul><li><p>JavaBean：标准的Java类，有以下要求</p><ul><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共setter和getter方法</li></ul></li><li><p>功能：封装数据</p></li><li>概念：<ul><li>成员变量</li><li>属性：</li></ul></li><li>方法<ul><li><code>setProperty()</code>：设置值</li><li><code>getProperty()</code>：获取值</li><li><code>populate(Object obj, Map map)</code>：将map集合的键值对信息，封装到对应的JavaBean对象中</li></ul></li></ul><h4 id="3-2-2-简化LoginServlet"><a href="#3-2-2-简化LoginServlet" class="headerlink" title="3.2.2 简化LoginServlet"></a>3.2.2 简化LoginServlet</h4><p>将上述例子中的LoginServlet类中<strong>获取请求参数</strong>和<strong>封装User对象</strong>步骤进行简化</p><pre><code class="java">protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws Servlet Exception,IOException{        // 1. 设置编码        req.setCharacterEncoding("utf-8");        // 2. 获取所有请求参数           Map&lt;String, String[]&gt; map = req.getParameterMap();        // 3. 创建User对象        User loginUser = new User();        // 3.1 使用populate方法将数据封装进loginUser对象        try{            BeanUtils.populate(loginUser,map);        }catch(Exception e){            e.printStackTrace();        }        // 4. 调用UserDao的login方法           UserDao dao = new UserDao();        User user = dao.login(loginUser); // 进行用户数据验证，返回一个User对象的完整数据        // 5. 判断是否正常登录        if(user == null){            // 登录失败，转发向失败页面            req.getRequestDispatcher("/failServlet").forward(req,resp);        }else{            // 登录成功，跳转成功页面            // 将user对象放入request域中            req.setAttribute("user",user);            // 转发            req.getRequestDispatcher("/successServlet").forward(req,resp);        }    }</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet接口</title>
      <link href="/2019/06/09/javaweb/servlet/"/>
      <url>/2019/06/09/javaweb/servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1. Servlet"></a>1. Servlet</h2><p>Java Servlet是运行在服务器端的小程序，它是作为来自web浏览器或其他HTTP客户端的请求和HTTP服务器上的数据库或应用程序之间的中间层</p><a id="more"></a><h3 id="1-1-创建"><a href="#1-1-创建" class="headerlink" title="1.1 创建"></a>1.1 创建</h3><p>Servlet有三种创建方式：</p><ol><li>实现Servlet接口</li><li>继承GenericServlet类</li><li>继承HttpServlet方法</li></ol><h4 id="1-1-1-实现Servlet接口"><a href="#1-1-1-实现Servlet接口" class="headerlink" title="1.1.1 实现Servlet接口"></a>1.1.1 实现Servlet接口</h4><pre><code class="java">/*Servlet的生命周期：从Servlet被创建到Servlet被销毁的过程。一次创建，到处服务一个Servlet只会有一个对象，服务所有的请求1. 实例化 (使用构造方法创建对象)2. 初始化 执行init方法3. 服务 执行service方法4. 销毁 执行destroy方法*/@WebServlet("/demo1") // 添加注解，设置虚拟访问路径public class ServletDemo1 implements Servlet{ // 实现Servlet接口，重写其全部方法    // 生命周期方法：当Servlet第一次被创建对象时执行该方法，该方法在整个生命周期中只执行一次    @Override    public void init(ServletConfig servletConfig) throws ServletException{        System.out.println("====Servlet初始化了====");    }    // 生命周期方法：对客户端响应的方法，该方法会被多次执行，每次请求该servlet都会执行该方法    @Override    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException{        System.out.println("====Servlet服务中====");    }    // 生命周期方法： 当Servlet被销毁时执行该方法    @Override    public void destroy(){        System.out.println("====Servlet销毁了====");    }    // 当停止Tomcat时也就会销毁的Servlet    @Override    public ServletConfig getServletConfig(){        return null;    }    @Override    public String getServletInfo(){        return null;    }}</code></pre><h4 id="1-1-2-继承GenericServlet类"><a href="#1-1-2-继承GenericServlet类" class="headerlink" title="1.1.2 继承GenericServlet类"></a>1.1.2 继承GenericServlet类</h4><p><code>GenericServlet</code>类默认将Servlet接口中其他方法做了默认空实现，只将<code>service()</code>方法作为抽象方法，在定义Servlet类时，可以继承<code>GenericeSerlvet</code>类，实现<code>service()</code>方法即可。</p><pre><code class="java">public class ServletDemo2 extends GenericServlet{    @Override    public void service(ServletRequest arg0, ServletResponse arg1) throws ServletException,IOException{        System.out.println("创建方法2")    }}</code></pre><h4 id="1-1-3-继承HttpServlet方法"><a href="#1-1-3-继承HttpServlet方法" class="headerlink" title="1.1.3 继承HttpServlet方法"></a>1.1.3 继承HttpServlet方法</h4><p>HttpServlet是对HTTP协议的一种封装，简化操作</p><ol><li>定义类继承HttpServlet</li><li>复写doGet/doPost方法</li></ol><pre><code class="java">public class ServletDemo3 extends HttpServlet{    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{        System.out.println("get方法执行");    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{        System.out.println("post方法执行");        doGet(req,resp);}</code></pre><h4 id="1-1-4-配置Servlet"><a href="#1-1-4-配置Servlet" class="headerlink" title="1.1.4 配置Servlet"></a>1.1.4 配置Servlet</h4><p>在web.xml中配置</p><pre><code class="xml">&lt;!--配置servlet--&gt;&lt;servlet&gt;    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;    &lt;servlet-class&gt;servlet.ServletDemo1&lt;/servlet-class&gt; &lt;!--全类名--&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;    &lt;url-pattern&gt;/demo1&lt;/url-pattern&gt; &lt;!--servlet访问路径--&gt;&lt;/servlet-mapping&gt;</code></pre><p><code>urlpartten</code>：Servlet访问路径</p><ol><li>一个Servlet可以定义多个访问路径：<code>@WebServlet({"/d4","/dd4","/ddd4"})</code></li><li>路径定义规则：<ul><li><code>/xxx</code>：路径匹配</li><li><code>/xxx/xxx</code>：多层路径，类似目录结构</li><li><code>*.do</code>：扩展名匹配</li></ul></li></ol><p><strong>Servlet执行原理</strong>：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查询web.xml文件，是否有对应的<code>&lt;url-pattern&gt;</code>标签体内容</li><li>如果有，则在找到对应的<code>&lt;servlet-class&gt;</code>全类名</li><li>tomcat会将字节码文件加载进内存，并创建其对象</li><li>调用其方法</li></ol><blockquote><p>Notice：<code>Servlet3.0</code>以后可以使用注解配置，在类上使用<code>@WebServlet("资源路径")</code>，即可完成配置。</p></blockquote><h3 id="1-2-Servlet中的生命周期方法"><a href="#1-2-Servlet中的生命周期方法" class="headerlink" title="1.2 Servlet中的生命周期方法"></a>1.2 Servlet中的生命周期方法</h3><h4 id="1-2-1-被创建：执行init方法，只执行一次"><a href="#1-2-1-被创建：执行init方法，只执行一次" class="headerlink" title="1.2.1. 被创建：执行init方法，只执行一次"></a>1.2.1. 被创建：执行init方法，只执行一次</h4><p>默认情况下，第一次被访问时，Servlet被创建。可以在xml中配置执行Servlet的创建时机。</p><ul><li>在<code>&lt;servlet&gt;</code>标签下配置<ul><li>初次访问时就创建：<code>&lt;load-on-startup&gt;</code>的值为负数</li><li>在服务器启动时就创建：<code>&lt;load-on-startup&gt;</code>的值为0或正整数</li></ul></li></ul><p>Server的init方法只被执行一次，故一个Servlet在内存中只存在一个对象，Servlet是单例的</p><ul><li>多个用户同时访问时，可能存在线程安全问题</li><li>解决方式：尽量不要在Servlet中定义成员变量，即使定义了成员变量，也不要对其修改值。</li></ul><h4 id="1-2-2-提供服务：执行service方法，执行多次"><a href="#1-2-2-提供服务：执行service方法，执行多次" class="headerlink" title="1.2.2 提供服务：执行service方法，执行多次"></a>1.2.2 提供服务：执行service方法，执行多次</h4><ul><li>每次访问Servlet时，service方法都会被调用一次</li></ul><h4 id="1-2-3-被销毁：执行destroy方法，只执行一次"><a href="#1-2-3-被销毁：执行destroy方法，只执行一次" class="headerlink" title="1.2.3 被销毁：执行destroy方法，只执行一次"></a>1.2.3 被销毁：执行destroy方法，只执行一次</h4><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁。</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat服务器</title>
      <link href="/2019/06/08/javaweb/tomcat/"/>
      <url>/2019/06/08/javaweb/tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Web服务器软件"><a href="#1-Web服务器软件" class="headerlink" title="1. Web服务器软件"></a>1. Web服务器软件</h2><ul><li><p>安装了服务器软件的计算机就是<strong>服务器</strong></p></li><li><p>服务器软件：接收用户的请求，处理请求，返回响应</p></li><li>Web服务器软件：接收用户的请求，处理请求，做出响应。在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li></ul><a id="more"></a><h3 id="1-1-常见的Java相关的Web服务器软件"><a href="#1-1-常见的Java相关的Web服务器软件" class="headerlink" title="1.1 常见的Java相关的Web服务器软件"></a>1.1 常见的Java相关的Web服务器软件</h3><ol><li>WebLogic：Oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>WebSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOOS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范Servlet/jsp。开源免费的</li></ol><blockquote><p>Tips：<strong>JavaEE</strong>是Java语言在企业开发中使用的技术规范的总和，一共规定了13项大的规范。</p></blockquote><h3 id="1-2-Tomcat"><a href="#1-2-Tomcat" class="headerlink" title="1.2 Tomcat"></a>1.2 Tomcat</h3><h4 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1 下载"></a>1.2.1 下载</h4><ol><li>前往Tomcat官网<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">下载</a>安装版：<code>Windows Service Installer</code>，也可以下载解压版。</li></ol><h4 id="1-2-2-安装"><a href="#1-2-2-安装" class="headerlink" title="1.2.2 安装"></a>1.2.2 安装</h4><ol><li>安装版点击安装即可，软件会自动注册服务</li><li>解压版解压即可使用</li></ol><h5 id="Tomcat目录结构："><a href="#Tomcat目录结构：" class="headerlink" title="Tomcat目录结构："></a>Tomcat目录结构：</h5><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/06/08/tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-1560005163914.png" alt="path"></p><blockquote><p>Notice：注意，安装或解压的路径不要有中文</p></blockquote><h4 id="1-2-3-卸载"><a href="#1-2-3-卸载" class="headerlink" title="1.2.3 卸载"></a>1.2.3 卸载</h4><ol><li>安装版进入文件夹点击<code>Uninstall.exe</code>即可卸载软件</li><li>解压版直接删除文件夹即可</li></ol><h4 id="1-2-4-启动"><a href="#1-2-4-启动" class="headerlink" title="1.2.4 启动"></a>1.2.4 启动</h4><p>安装版会自动注册并启动服务，无需手动启动</p><p>解压版启动方式：</p><ol><li>进入解压后的文件夹，进入bin目录，双击<code>startup.bat</code>运行该文件</li><li>访问：浏览器输入：<code>http://localhost:8080</code> 即可本地访问</li></ol><h4 id="1-2-5-关闭"><a href="#1-2-5-关闭" class="headerlink" title="1.2.5 关闭"></a>1.2.5 关闭</h4><p>解压版关闭</p><ol><li><code>bin/shutdows.bat</code>，双击即可关闭服务</li><li>直接关闭窗口或者<code>ctrl+c</code></li></ol><p>根据进程PID关闭</p><ol><li><code>cmd</code>输入<code>netstat -ano</code>，打印当前运行进程PID等信息，找到本地地址端口号8080的，查看其PID。</li><li>打开任务管理器，进程显示PID，然后根据PID号直接结束进程。</li></ol><blockquote><p> Tips: windows下删除服务命令：<code>sc delete 服务名称</code></p></blockquote><p><a href="https://blog.csdn.net/u011982967/article/details/80999552" target="_blank" rel="noopener">安装参考文章</a></p><h4 id="1-2-6-配置"><a href="#1-2-6-配置" class="headerlink" title="1.2.6 配置"></a>1.2.6 配置</h4><h5 id="项目部署的方式"><a href="#项目部署的方式" class="headerlink" title="项目部署的方式"></a>项目部署的方式</h5><ol><li>直接将项目文件夹放在webapps目录下即可，也可将项目打包成一个war包，再将war包放入wabapps目录下，war包会自动解压。</li><li><p>配置<code>conf/server.xml</code>文件完成部署，在<code>&lt;Host&gt;</code>标签体中配置：<code>&lt;Context docBase="D:\Project" path="/index" /&gt;</code>；docBase：项目存放的本地路径，path：虚拟目录。</p></li><li><p>在<code>conf\Catalina\localhost\</code>下创建任意名称(文件名称即虚拟路径)的xml文件。在文件中编写<code>&lt;Context docBase="D:\Project /&gt;"</code></p></li></ol><h5 id="静态项目和动态项目"><a href="#静态项目和动态项目" class="headerlink" title="静态项目和动态项目"></a>静态项目和动态项目</h5><pre><code>Java动态项目目录结构：-- 项目名称    -- WEB-INF        -- web.xml：该项目的核心配置文件        -- classes目录：放置字节码文件        -- lib目录：放置项目依赖的jar包</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XML简单入门</title>
      <link href="/2019/06/07/javaweb/xml-jian-shu/"/>
      <url>/2019/06/07/javaweb/xml-jian-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-XML基础"><a href="#1-XML基础" class="headerlink" title="1. XML基础"></a>1. XML基础</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>XML指可扩展标记语言(Extensible Markup Language)，是一种<strong>标记语言</strong>，类似HTML。xml被设计用于<strong>传输和存储数据</strong>，而不是显示数据，标签都是自定义的。</p><a id="more"></a><h3 id="1-2-功能"><a href="#1-2-功能" class="headerlink" title="1.2 功能"></a>1.2 功能</h3><ul><li>存储数据：项目配置文件</li><li>传输数据：在网络中传输</li></ul><h3 id="1-3-xml与html的区别"><a href="#1-3-xml与html的区别" class="headerlink" title="1.3 xml与html的区别"></a>1.3 xml与html的区别</h3><ol><li>xml标签都是自定义的，html标签是预定义</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据</li></ol><blockquote><p>W3C：万维网联盟，是Web技术领域最具权威和影响力的国际中立性技术标准机构</p></blockquote><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><ol><li>xml文档的后缀名 <code>.xml</code></li><li>xml第一行必须定义为文档声明：<code>&lt;?xml version='1.0' ?&gt;</code></li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol><h4 id="2-1-1-快速入门"><a href="#2-1-1-快速入门" class="headerlink" title="2.1.1 快速入门"></a>2.1.1 快速入门</h4><pre><code class="xml">&lt;?xml version='1.0' ?&gt;&lt;users&gt;    &lt;user id="1"&gt;        &lt;name&gt;张三&lt;/name&gt;        &lt;age&gt;20&lt;/age&gt;        &lt;gender&gt;男&lt;/gender&gt;    &lt;/user&gt;    &lt;user id="2"&gt;        &lt;name&gt;李四&lt;/name&gt;        &lt;age&gt;21&lt;/age&gt;        &lt;gender&gt;男&lt;/gender&gt;    &lt;/user&gt;&lt;/users&gt;</code></pre><h3 id="2-2-组成部分"><a href="#2-2-组成部分" class="headerlink" title="2.2 组成部分"></a>2.2 组成部分</h3><h4 id="2-2-1-文档声明"><a href="#2-2-1-文档声明" class="headerlink" title="2.2.1 文档声明"></a>2.2.1 文档声明</h4><ol><li>格式：<code>&lt;?xml 属性列表 ?&gt;</code></li><li>属性列表：<ul><li><code>version</code>：版本号。必须的属性</li><li><code>encoding</code>：编码方式。告知解析引擎当前文档使用的字符集，默认值<code>ISO-8859-1</code></li><li><code>standalone</code>：是否独立。<code>yes</code>表示不依赖其他文件，<code>no</code>表示依赖其他文件</li></ul></li></ol><h4 id="2-2-2-指令-了解即可"><a href="#2-2-2-指令-了解即可" class="headerlink" title="2.2.2 指令(了解即可)"></a>2.2.2 指令(了解即可)</h4><p>可以结合css样式，解析页面，需加入声明：<code>&lt;?xml-stylesheet type="text/css" href="style.css" ?&gt;</code></p><h4 id="2-2-3-标签"><a href="#2-2-3-标签" class="headerlink" title="2.2.3 标签"></a>2.2.3 标签</h4><p>标签名称都是自定义的，不过有以下几点规则：</p><ol><li>名称可以包含字母、数字及其他的字符</li><li>名称不能以数字或者标点符号开始</li><li>名称不能以字母xml(或者XML、XmL等等)开始</li><li>名称不能包含空格</li></ol><h4 id="2-2-4-属性"><a href="#2-2-4-属性" class="headerlink" title="2.2.4 属性"></a>2.2.4 属性</h4><p>id属性值唯一</p><h4 id="2-2-5-文本"><a href="#2-2-5-文本" class="headerlink" title="2.2.5 文本"></a>2.2.5 文本</h4><ul><li>CDATA区：在该区域中的数据会被原样展示，格式：<code>&lt;![CDATA[ 数据]]&gt;</code></li></ul><h3 id="2-3-约束"><a href="#2-3-约束" class="headerlink" title="2.3 约束"></a>2.3 约束</h3><p>规定xml文档的书写规则，作为框架的使用者，我们只要能够在xml中引入约束文档，并能简单的读懂约束文档即可。</p><h4 id="2-3-1-分类"><a href="#2-3-1-分类" class="headerlink" title="2.3.1 分类"></a>2.3.1 分类</h4><ol><li>DTO：一种简单的约束技术</li><li>Schema：一种复杂的约束技术</li></ol><h4 id="2-3-2-DTD"><a href="#2-3-2-DTD" class="headerlink" title="2.3.2 DTD"></a>2.3.2 DTD</h4><p>引入dtd文档到xml文档中</p><ul><li>内部dtd：将约束规则直接定义在xml文档中</li><li>外部dtd：将约束规则定义在外部的dtd文件中<ul><li>引入<strong>本地dtd</strong>文档：<code>&lt;!DOCTYPE 根标签名 SYSTEM "dtd文件位置"</code></li><li>引入<strong>网络dtd</strong>文档：<code>&lt;!DOCTYPE 根标签名 PUBLIC "dtd文件名" "dtd文件URL"</code></li></ul></li></ul><h4 id="2-3-3-Schema"><a href="#2-3-3-Schema" class="headerlink" title="2.3.3 Schema"></a>2.3.3 Schema</h4><p>引入</p><ol><li>填写xml文档的根元素</li><li>引入xsi前缀：<code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</code></li><li>引入xsd文件命名空间：<code>xsi:schemaLocation="http://www.zero.cn/xml  student.xsd"</code></li><li>为每一个xsd约束声明一个前缀，作为标识：<code>xmlns:z1="http://www.zero.cn/xml"</code></li></ol><h2 id="3-解析"><a href="#3-解析" class="headerlink" title="3. 解析"></a>3. 解析</h2><p>操作xml文档，将文档中的数据读取到内存中</p><h4 id="3-1-主要操作"><a href="#3-1-主要操作" class="headerlink" title="3.1 主要操作"></a>3.1 主要操作</h4><ol><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化存储</li></ol><h4 id="3-2-解析xml的方式"><a href="#3-2-解析xml的方式" class="headerlink" title="3.2 解析xml的方式"></a>3.2 解析xml的方式</h4><ol><li>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul></li><li>SAX：逐行读取，基于事件驱动的。<ul><li>优点：不占内存</li><li>缺点：只能读取，不能增删改</li></ul></li></ol><h4 id="3-3-xml常见的解析器"><a href="#3-3-xml常见的解析器" class="headerlink" title="3.3 xml常见的解析器"></a>3.3 xml常见的解析器</h4><ol><li>JAXP：sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：一款Java的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于JQuery的操作方法来取出和操作数据。</li><li>PULL：Android操作系统内置的解析器，sax方式。</li></ol><h4 id="3-4-Jsoup解析器"><a href="#3-4-Jsoup解析器" class="headerlink" title="3.4 Jsoup解析器"></a>3.4 Jsoup解析器</h4><p>使用步骤：</p><ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol><h4 id="3-4-1-代码示例"><a href="#3-4-1-代码示例" class="headerlink" title="3.4.1 代码示例"></a>3.4.1 代码示例</h4><pre><code class="java">public class DemoJsoup01 {    public static void main(String[] args) throws IOException {        // 1.获取Document对象，根据xml文档获取        // 1.1 获取users.xml的path        String path = DemoJsoup01.class.getClassLoader().getResource("Demo6_7/users.xml").getPath();        // 1.2 解析xml文档，加载文档进内存，获取dom树---&gt; Document        Document document = Jsoup.parse(new File(path), "utf-8");        // 2. 获取所有name元素对象        Elements elements = document.getElementsByTag("name");        System.out.println(elements.size()); // 2        // 2.1 获取第一个name的element对象        Element element = elements.get(0);        String name = element.text();        System.out.println(name);    }}</code></pre><h4 id="3-4-2-对象的使用"><a href="#3-4-2-对象的使用" class="headerlink" title="3.4.2 对象的使用"></a>3.4.2 对象的使用</h4><ul><li><p>Jsoup：工具类，可以解析html或xml文档，返回document</p><ul><li>主要方法：<code>parse</code>，解析html和xml文档，返回document<ul><li><code>parse(File in, String charsetName)</code>：解析xml或html文件的，最常用方法。</li><li><code>parse(String html)</code>：解析xml或html字符串</li><li><code>parse(URL url,int timeoutMillis)</code>：通过网络路径获取指定的html或xml的文档对象。</li></ul></li></ul></li><li><p>Document：文档对象。代表内存中的dom树</p><ul><li><p>获取Element对象常用方法</p><ul><li><code>getElementById(String id)</code>：根据id属性值获取唯一的element对象</li><li><code>getElementsByTag(String tagName)</code>：根据标签名称获取元素对象集合</li><li><code>getElementsByAttribute(String key)</code>：根据属性名称获取元素对象集合</li><li><code>getElementsByAttributeValue(String key, String value)</code>：根据对应的属性名和属性值获取元素对象集合</li></ul><p><strong>代码示例</strong>：</p><pre><code class="java">public class DemoJsoup02 {    public static void main(String[] args) throws IOException {        // 1. 获取users.xml的path        String path = DemoJsoup02.class.getClassLoader().getResource("Demo6_7/users.xml").getPath();        // 1.1 解析xml文档，加载文档进内存，获取dom树        Document document = Jsoup.parse(new File(path), "utf-8");        // 2. 获取所有的user元素对象        Elements users = document.getElementsByTag("user");        System.out.println(users);        System.out.println("----------------------------");        // 3.获取属性名为id的元素对象们        Elements ids = document.getElementsByAttribute("id");        System.out.println(ids);        System.out.println("----------------------------");        // 4. 获取uid属性值为1的元素对象们        Elements uid = document.getElementsByAttributeValue("uid", "1");        System.out.println(uid);        System.out.println("----------------------------");        // 5. 获取id属性值为“z1”的元素对象        Element z1 = document.getElementById("z1");        System.out.println(z1);    }}</code></pre></li></ul></li><li><p>Elements：元素Element对象的集合。可以当做<code>ArrayList&lt;Element&gt;</code>来使用</p></li><li><p>Element：元素对象</p><ol><li>获取子元素对象<ul><li><code>getElementById(String id)</code>：根据id属性值获取唯一的element对象</li><li><code>getElementsByTag(String tagName)</code>：根据标签名称获取元素对象集合</li><li><code>getElementsByAttribute(String key)</code>：根据属性名称获取元素对象集合</li><li><code>getElementsByAttributeValue(String key, String value)</code>：根据对应的属性名和属性值获取元素对象集合</li></ul></li><li>获取属性值<ul><li><code>String attr(String key)</code>：根据属性名称获取属性值</li></ul></li><li><p>获取文本内容</p><ul><li><code>String text()</code>：获取文本内容</li><li><code>String html()</code>：获取标签体的所有内容(包括子标签的字符串内容)</li></ul><p><strong>代码示例</strong>:</p><pre><code class="java">public class DemoJsoup03 { public static void main(String[] args) throws IOException {     // 1. 获取student.xml的path     String path = DemoJsoup03.class.getClassLoader().getResource("Demo6_7/users.xml").getPath();     // 1.1 解析xml文档，加载文档进内存，获取dom树---&gt; Document     Document document = Jsoup.parse(new File(path), "utf-8");     // 2. 获取第一个user元素对象     Element user = document.getElementsByTag("user").get(0);     // 2.1 根据元素对象获取下面的子元素name     Elements name = user.getElementsByTag("name");     // 2.2 根据属性名称获取属性值     String id = name.attr("id");     System.out.println(id); // z1     // 2.3 获取name元素的文本内容     System.out.println(name.text()); // 张三     // 2.4 获取第一个user元素对象下面的所有标签体内容     System.out.println(user.html()); }}</code></pre></li></ol></li><li><p>Node：节点对象</p><ul><li>是Document和Element的父类</li></ul></li></ul><h4 id="3-4-3-快捷查询方式"><a href="#3-4-3-快捷查询方式" class="headerlink" title="3.4.3 快捷查询方式"></a>3.4.3 快捷查询方式</h4><ul><li><p>selector：选择器</p><ul><li><p><code>Elements select(String cssQuery)</code>：语法类似CSS的元素选择器，具体使用参考<a href="https://jsoup.org/apidocs/org/jsoup/select/Selector.html" target="_blank" rel="noopener">Selector类</a>中定义的语法</p><pre><code class="java">public class DemoJsoup04 {  public static void main(String[] args) throws IOException {      // 1. 获取student.xml的path      String path = DemoJsoup04.class.getClassLoader().getResource("Demo6_7/users.xml").getPath();      // 2. 解析xml文档，加载文档进内存，获取dom树      Document document = Jsoup.parse(new File(path), "utf-8");      // 3. 查询name标签      Elements names = document.select("name");      System.out.println(names);      // 4. 查询id值为“z1”的元素      Elements ids = document.select("#z1");      System.out.println(ids);      // 5. 获取user标签且uid属性值为1的age子标签      Elements age = document.select("user[uid='1'] &gt; age");      System.out.println(age);  }}</code></pre></li></ul></li><li><p>XPath：</p></li></ul><p>XPath即为XML路径语言，它是一种用来确定XML(标准通用标记语言的子集)文档中某部分位置的语言</p><ul><li>使用Jsoup的Xpath需额外导入jar包</li><li>Xpath使用语法查询w3cshool的<a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">参考手册</a></li></ul><p><strong>代码示例</strong>：</p><pre><code class="java">public class DemoJsoup05 {    public static void main(String[] args) throws IOException, XpathSyntaxErrorException {        // 1. 获取student.xml的path        String path = DemoJsoup05.class.getClassLoader().getResource("Demo6_7/users.xml").getPath();        // 2. 解析xml文档，加载文档进内存，获取dom树        Document document = Jsoup.parse(new File(path), "utf-8");        // 3. 根据document，创建JXDocument对象        JXDocument jxDocument = new JXDocument(document);        // 4. 结合xpath语法查询        // 4.1 查询所有的user标签        List&lt;JXNode&gt; jxNodes = jxDocument.selN("//user");        for (JXNode jxNode : jxNodes) {            System.out.println(jxNode);        }        // 4.2 所有user标签下的name标签        List&lt;JXNode&gt; jxNames = jxDocument.selN("//user/name");        for (JXNode jxName : jxNames) {            System.out.println(jxName);        }        // 4.3 查询user标签下带有id属性的name标签        List&lt;JXNode&gt; jxId = jxDocument.selN("//user/name[@id]");        for (JXNode jxNode : jxId) {            System.out.println(jxNode);        }        // 4.4 查询user标签下id属性值为“z1”的name标签        List&lt;JXNode&gt; jxIdisz1 = jxDocument.selN("//user/name[@id='z1']");        for (JXNode jxNode : jxIdisz1) {            System.out.println(jxNode);        }    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap简单入门</title>
      <link href="/2019/06/06/javaweb/bootstrap-jian-dan-ru-men/"/>
      <url>/2019/06/06/javaweb/bootstrap-jian-dan-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Bootstrap概述"><a href="#1-Bootstrap概述" class="headerlink" title="1. Bootstrap概述"></a>1. Bootstrap概述</h2><p>Bootstrap是一个前端开发框架，来自Twitter。Bootstrap是基于HTML、CSS、JavaScript的，它简洁灵活，使得Web开发更加快捷。</p><a id="more"></a><ul><li>框架：一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</li></ul><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><h3 id="2-1-Bootstrap环境安装"><a href="#2-1-Bootstrap环境安装" class="headerlink" title="2.1 Bootstrap环境安装"></a>2.1 Bootstrap环境安装</h3><ol><li>从<a href="https://v3.bootcss.com" target="_blank" rel="noopener">https://v3.bootcss.com</a>上下载Bootstrap的最新版本</li><li>将解压后的三个文件夹复制进项目</li></ol><h3 id="2-2-基本模板"><a href="#2-2-基本模板" class="headerlink" title="2.2 基本模板"></a>2.2 基本模板</h3><p>创建html页面，引入必要的资源文件</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;    &lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;    &lt;!-- Bootstrap --&gt;    &lt;link href="css/bootstrap.min.css" rel="stylesheet"&gt;    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;    &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;你好，世界！&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="3-响应式布局"><a href="#3-响应式布局" class="headerlink" title="3. 响应式布局"></a>3. 响应式布局</h2><p>同一套页面能够兼容多个终端，不同分辨率的设备。其实现依赖于<a href="https://v3.bootcss.com/css/#grid" target="_blank" rel="noopener">栅格系统</a>：将一行平均分成12个格子，可以指定元素占几个格子。</p><h3 id="3-1-使用步骤"><a href="#3-1-使用步骤" class="headerlink" title="3.1 使用步骤"></a>3.1 使用步骤</h3><h4 id="3-1-1-定义容器"><a href="#3-1-1-定义容器" class="headerlink" title="3.1.1 定义容器"></a>3.1.1 定义容器</h4><p>相当于之前的table，容器分类：</p><ol><li><code>container</code>：固定宽度，两边留白</li><li><code>container-fluid</code>：每一种设备都是100%宽度</li></ol><h4 id="3-1-2-定义行"><a href="#3-1-2-定义行" class="headerlink" title="3.1.2 定义行"></a>3.1.2 定义行</h4><p>相当于之前的tr</p><h4 id="3-1-3-定义元素"><a href="#3-1-3-定义元素" class="headerlink" title="3.1.3 定义元素"></a>3.1.3 定义元素</h4><p>指定该元素在不同设备上，所占的格子数目。样式：col-设备代号-格子数目</p><p>设备代号：</p><ol><li>xs：超小屏幕(手机，&lt;768px)：col-xs-12</li><li>sm：小屏幕(平板电脑，≥768px)</li><li>md：中等屏幕(笔记本电脑，≥992px)</li><li>lg：大屏幕(桌面显示器，≥1200px)</li></ol><blockquote><p>Notice：</p><ol><li>一行中如果格子数目超过12，则超出部分自动换行。</li><li>栅格类属性可以向上兼容。栅格类适用于屏幕宽度大于或等于分界点大小的设备。</li><li>如果真实设备宽度小于了设置栅格类属性的设备代码最小值，将会一个元素占满一整行。</li></ol></blockquote><h2 id="4-CSS样式和JS插件"><a href="#4-CSS样式和JS插件" class="headerlink" title="4. CSS样式和JS插件"></a>4. CSS样式和JS插件</h2><h3 id="4-1-全局CSS样式"><a href="#4-1-全局CSS样式" class="headerlink" title="4.1 全局CSS样式"></a>4.1 全局CSS样式</h3><p><a href="https://v3.bootcss.com/css/" target="_blank" rel="noopener">全局CSS样式</a>可查阅网站</p><ul><li><p>按钮：<code>class="btn btn-default</code></p></li><li><p>图片：</p><ul><li><code>class="img-responsive"</code>：图片在任意尺寸都占100%</li><li>图片形状</li></ul><pre><code class="html">&lt;img src="..." alt="..." class="img-rounded"&gt; :方形&lt;img src="..." alt="..." class="img-circle"&gt; :圆形&lt;img src="..." alt="..." class="img-thumbnail"&gt; :相框</code></pre></li><li><p>表格</p><ul><li>为任意 <code>&lt;table&gt;</code> 标签添加 <code>class="table"</code> 可以为其赋予基本的样式 </li><li>添加 <code>class="table-bordered"</code> 为表格和其中的每个单元格增加边框。</li><li>通过添加 <code>class="table-hover"</code> 类可以让 <code>&lt;tbody&gt;</code> 中的每一行对鼠标悬停状态作出响应。</li></ul></li><li><p>表单</p><ul><li>给表单项添加<code>class="form-control"</code>可以获得更好的表单显示效果</li></ul></li></ul><h3 id="4-2-组件"><a href="#4-2-组件" class="headerlink" title="4.2 组件"></a>4.2 组件</h3><p><a href="https://v3.bootcss.com/components/" target="_blank" rel="noopener">组件查阅网站</a></p><ul><li>导航条</li><li>分页条</li></ul><h3 id="4-3-插件"><a href="#4-3-插件" class="headerlink" title="4.3 插件"></a>4.3 插件</h3><p><a href="https://v3.bootcss.com/javascript/" target="_blank" rel="noopener">JS插件查阅</a></p><ul><li>轮播图</li></ul><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;    &lt;title&gt;综合案例_旅游网&lt;/title&gt;    &lt;!-- Bootstrap --&gt;    &lt;link href="css/bootstrap.min.css" rel="stylesheet"&gt;    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;    &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt;    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;    &lt;script src="js/bootstrap.min.js"&gt;&lt;/script&gt;    &lt;style&gt;        .paddtop{            padding-top: 15px;        }        .search-btn{            float: left;            border: 1px solid #ffc900;            width: 90px;            height: 35px;            background-color: #ffc900;            text-align: center;            line-height: 35px;            margin-top: 15px;        }        .search-input{            float: left;            border: 2px solid #ffc900;            width: 400px;            height: 35px;            padding-left: 5px;            margin-top: 15px;        }        .jingxuan{            border-bottom: 2px solid #ffc900;            padding: 5px;        }        .company{            height: 40px;            background-color: #ffc900;            text-align: center;            line-height: 40px;            font-size: 8px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--1. 页眉部分--&gt;    &lt;header class="container-fluid"&gt;        &lt;div class="row"&gt;            &lt;img src="img/top_banner.jpg" class="img-responsive"&gt;        &lt;/div&gt;        &lt;div class="row paddtop"&gt;            &lt;div class="col-md-3"&gt;                &lt;img src="img/logo.jpg" class="img-responsive"&gt;            &lt;/div&gt;            &lt;div class="col-md-5"&gt;                &lt;input class="search-input" type="text" placeholder="请输入线路名称"&gt;                &lt;a class="search-btn" href="#"&gt;搜索&lt;/a&gt;            &lt;/div&gt;            &lt;div class="col-md-4"&gt;                &lt;img src="img/hotel_tel.png" class="img-responsive"&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;!--导航栏--&gt;        &lt;div class="row"&gt;            &lt;nav class="navbar navbar-default"&gt;                &lt;div class="container-fluid"&gt;                    &lt;!-- Brand and toggle get grouped for better mobile display --&gt;                    &lt;div class="navbar-header"&gt;                        &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt;                            &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;                            &lt;span class="icon-bar"&gt;&lt;/span&gt;                            &lt;span class="icon-bar"&gt;&lt;/span&gt;                            &lt;span class="icon-bar"&gt;&lt;/span&gt;                        &lt;/button&gt;                        &lt;a class="navbar-brand" href="#"&gt;首页&lt;/a&gt;                    &lt;/div&gt;                    &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;                    &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt;                        &lt;ul class="nav navbar-nav"&gt;                            &lt;li class="active"&gt;&lt;a href="#"&gt;Link &lt;span class="sr-only"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href="#"&gt;Link&lt;/a&gt;&lt;/li&gt;                        &lt;/ul&gt;                    &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;                &lt;/div&gt;&lt;!-- /.container-fluid --&gt;            &lt;/nav&gt;        &lt;/div&gt;        &lt;!--轮播图--&gt;        &lt;div class="row"&gt;            &lt;div id="carousel-example-generic" class="carousel slide" data-ride="carousel"&gt;                &lt;!-- Indicators --&gt;                &lt;ol class="carousel-indicators"&gt;                    &lt;li data-target="#carousel-example-generic" data-slide-to="0" class="active"&gt;&lt;/li&gt;                    &lt;li data-target="#carousel-example-generic" data-slide-to="1"&gt;&lt;/li&gt;                    &lt;li data-target="#carousel-example-generic" data-slide-to="2"&gt;&lt;/li&gt;                &lt;/ol&gt;                &lt;!-- Wrapper for slides --&gt;                &lt;div class="carousel-inner" role="listbox"&gt;                    &lt;div class="item active"&gt;                        &lt;img src="img/banner_1.jpg" alt="..."&gt;                        &lt;div class="carousel-caption"&gt;                        &lt;/div&gt;                    &lt;/div&gt;                    &lt;div class="item"&gt;                        &lt;img src="img/banner_2.jpg" alt="..."&gt;                        &lt;div class="carousel-caption"&gt;                        &lt;/div&gt;                    &lt;/div&gt;                    &lt;div class="item"&gt;                        &lt;img src="img/banner_3.jpg" alt="..."&gt;                        &lt;div class="carousel-caption"&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;!-- Controls --&gt;                &lt;a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev"&gt;                    &lt;span class="glyphicon glyphicon-chevron-left" aria-hidden="true"&gt;&lt;/span&gt;                    &lt;span class="sr-only"&gt;Previous&lt;/span&gt;                &lt;/a&gt;                &lt;a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next"&gt;                    &lt;span class="glyphicon glyphicon-chevron-right" aria-hidden="true"&gt;&lt;/span&gt;                    &lt;span class="sr-only"&gt;Next&lt;/span&gt;                &lt;/a&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/header&gt;    &lt;!--1. 主体部分--&gt;    &lt;div class="container"&gt;        &lt;div class="row jingxuan"&gt;            &lt;img src="img/icon_5.jpg" alt=""&gt;            &lt;span&gt;旅游精选&lt;/span&gt;        &lt;/div&gt;        &lt;div class="row paddtop"&gt;            &lt;div class="col-md-3"&gt;                &lt;div class="thumbnail"&gt;                    &lt;img src="img/jiangxuan_3.jpg" alt=""&gt;                    &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                    &lt;font color="red"&gt;¥ 699&lt;/font&gt;                &lt;/div&gt;            &lt;/div&gt;            &lt;div class="col-md-3"&gt;                &lt;div class="thumbnail"&gt;                    &lt;img src="img/jiangxuan_3.jpg" alt=""&gt;                    &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                    &lt;font color="red"&gt;¥ 699&lt;/font&gt;                &lt;/div&gt;            &lt;/div&gt;            &lt;div class="col-md-3"&gt;                &lt;div class="thumbnail"&gt;                    &lt;img src="img/jiangxuan_3.jpg" alt=""&gt;                    &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                    &lt;font color="red"&gt;¥ 699&lt;/font&gt;                &lt;/div&gt;            &lt;/div&gt;            &lt;div class="col-md-3"&gt;                &lt;div class="thumbnail"&gt;                    &lt;img src="img/jiangxuan_3.jpg" alt=""&gt;                    &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                    &lt;font color="red"&gt;¥ 699&lt;/font&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class="row jingxuan"&gt;            &lt;img src="img/icon_6.jpg" alt=""&gt;            &lt;span&gt;国内游&lt;/span&gt;        &lt;/div&gt;        &lt;div class="row paddtop"&gt;            &lt;div class="col-md-4"&gt;                &lt;img src="img/guonei_1.jpg" alt=""&gt;            &lt;/div&gt;            &lt;div class="col-md-8"&gt;                &lt;div class="row"&gt;                    &lt;div class="col-md-4"&gt;                        &lt;div class="thumbnail"&gt;                            &lt;img src="img/jiangxuan_5.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                            &lt;font color="red"&gt;¥ 699&lt;/font&gt;                        &lt;/div&gt;                    &lt;/div&gt;                    &lt;div class="col-md-4"&gt;                        &lt;div class="thumbnail"&gt;                            &lt;img src="img/jiangxuan_5.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                            &lt;font color="red"&gt;¥ 699&lt;/font&gt;                        &lt;/div&gt;                    &lt;/div&gt;                    &lt;div class="col-md-4"&gt;                        &lt;div class="thumbnail"&gt;                            &lt;img src="img/jiangxuan_5.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                            &lt;font color="red"&gt;¥ 699&lt;/font&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;                &lt;div class="row"&gt;                    &lt;div class="col-md-4"&gt;                        &lt;div class="thumbnail"&gt;                            &lt;img src="img/jiangxuan_5.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                            &lt;font color="red"&gt;¥ 699&lt;/font&gt;                        &lt;/div&gt;                    &lt;/div&gt;                    &lt;div class="col-md-4"&gt;                        &lt;div class="thumbnail"&gt;                            &lt;img src="img/jiangxuan_5.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                            &lt;font color="red"&gt;¥ 699&lt;/font&gt;                        &lt;/div&gt;                    &lt;/div&gt;                    &lt;div class="col-md-4"&gt;                        &lt;div class="thumbnail"&gt;                            &lt;img src="img/jiangxuan_5.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚五天4晚自由行(春节销售+亲子+蜜月+自由行)&lt;/p&gt;                            &lt;font color="red"&gt;¥ 699&lt;/font&gt;                        &lt;/div&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;!--1. 页脚部分--&gt;    &lt;footer class="container-fluid"&gt;        &lt;div class="row paddtop"&gt;            &lt;img src="img/footer_service.png" alt="" class="img-responsive"&gt;        &lt;/div&gt;        &lt;div class="row company"&gt;            浙江零度科技股份有限公司 版权所&amp;Copyright; 2026-2036, All Rights Reserved 浙ICP备16007882        &lt;/div&gt;    &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript进阶</title>
      <link href="/2019/06/04/javaweb/javascript-jin-jie/"/>
      <url>/2019/06/04/javaweb/javascript-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-DOM概述"><a href="#1-DOM概述" class="headerlink" title="1. DOM概述"></a>1. DOM概述</h2><p>DOM (Document Object Model) 译为<strong>文档对象模型</strong>，是 HTML 和 XML 文档的编程接口。HTML DOM 定义了访问和操作 HTML 文档的标准方法。</p><a id="more"></a><ul><li>功能：将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作。</li><li>获取页面标签(元素Element)对象。例：<code>document.getElementById("id值")</code>，通过元素id获取元素对象。</li></ul><h3 id="1-1-DOM的3个部分"><a href="#1-1-DOM的3个部分" class="headerlink" title="1.1 DOM的3个部分"></a>1.1 DOM的3个部分</h3><p>W3C的DOM标准被分为3个同的部分：</p><ul><li>核心DOM(针对任何结构化文档的标准模型)<ul><li><code>Document</code>：文档对象</li><li><code>Element</code>：元素对象</li><li><code>Attribute</code>：属性对象</li><li><code>Text</code>：文本对象</li><li><code>Comment</code>：注释对象</li><li><code>Node</code>：节点对象，上述5个对象的父对象</li></ul></li><li>XML DOM(针对XML文档的标准模型)</li><li>HTML DOM(针对HTML文档的标准模型)</li></ul><h3 id="1-2-核心DOM模型"><a href="#1-2-核心DOM模型" class="headerlink" title="1.2 核心DOM模型"></a>1.2 核心DOM模型</h3><h4 id="1-2-1-Document：文档对象"><a href="#1-2-1-Document：文档对象" class="headerlink" title="1.2.1 Document：文档对象"></a>1.2.1 Document：文档对象</h4><h5 id="1-2-1-1-创建-获取"><a href="#1-2-1-1-创建-获取" class="headerlink" title="1.2.1.1 创建(获取)"></a>1.2.1.1 创建(获取)</h5><p>在html dom模型中可以使用window对象来获取</p><ol><li><code>window.document</code></li><li><code>document</code></li></ol><h5 id="1-2-1-2-方法"><a href="#1-2-1-2-方法" class="headerlink" title="1.2.1.2 方法"></a>1.2.1.2 方法</h5><p>获取Element对象：</p><ul><li><code>getElementById()</code>：根据id属性值获取元素对象。id属性一般唯一</li><li><code>getElementByTagName()</code>：根据元素名称获取元素对象们。返回值是一个数组</li><li><code>getElementByClassName()</code>：根据Class属性值获取元素对象们。返回值是一个数组</li><li><code>getElementsByName()</code>：根据name属性值获取元素对象们。返回值是一个数组</li></ul><p>创建其他DOM对象：</p><ul><li><code>createAttribute(name)</code></li><li><code>createComment()</code></li><li><code>createElement()</code></li><li><code>createTextNode()</code></li></ul><h5 id="1-2-1-3-属性"><a href="#1-2-1-3-属性" class="headerlink" title="1.2.1.3 属性"></a>1.2.1.3 属性</h5><p>Element：元素对象</p><ol><li>获取/创建：通过document来获取和创建</li><li>方法：<ol><li><code>removeAttribute()</code>：删除属性</li><li><code>setAttribute()</code>：设置属性</li></ol></li></ol><p>Node：节点对象，其他5个的父对象</p><ul><li>特点：所有dom对象都可以被认为是一个节点</li><li>方法：<ul><li><code>appendChild()</code>：向节点的子节点列表的结尾添加新的子节点</li><li><code>removeChild()</code>：删除(并返回)当前节点的指定子节点。</li><li><code>replaceChild()</code>：用新节点替换一个子节点。</li></ul></li><li>属性：<ul><li><code>parentNode</code>：返回节点的父节点</li></ul></li></ul><h5 id="表格增删案例"><a href="#表格增删案例" class="headerlink" title="表格增删案例"></a>表格增删案例</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;动态表格&lt;/title&gt;    &lt;style&gt;        table{            border: 1px solid;            margin: auto;            width: 500px;        }        td,th{            text-align: center;            border: 1px solid;        }        div{            text-align: center;            margin: 50px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt;    &lt;input type="text" id="id" placeholder="请输入编号"&gt;    &lt;input type="text" id="name"  placeholder="请输入姓名"&gt;    &lt;input type="text" id="gender"  placeholder="请输入性别"&gt;    &lt;input type="button" value="添加" id="btn_add"&gt;&lt;/div&gt;&lt;table&gt;    &lt;caption&gt;学生信息表&lt;/caption&gt;    &lt;tr&gt;        &lt;th&gt;编号&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;        &lt;th&gt;性别&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;钢铁侠&lt;/td&gt;        &lt;td&gt;男&lt;/td&gt;        &lt;td&gt;&lt;a href="javascript:void(0);" onclick="deltr(this)"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;2&lt;/td&gt;        &lt;td&gt;蜘蛛侠&lt;/td&gt;        &lt;td&gt;男&lt;/td&gt;        &lt;td&gt;&lt;a href="javascript:void(0);" onclick="deltr(this)"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;3&lt;/td&gt;        &lt;td&gt;绿巨人&lt;/td&gt;        &lt;td&gt;男&lt;/td&gt;        &lt;td&gt;&lt;a href="javascript:void(0);" onclick="deltr(this)"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;script&gt;    // 1. 获取按钮    var btn_add = document.getElementById("btn_add");    btn_add.onclick = function () {        // 2. 获取文本框内容        var id = document.getElementById("id").value;        var name = document.getElementById("name").value;        var gender = document.getElementById("gender").value;        // 3. 创建td，赋值td的标签体        // id的td        var td_id = document.createElement("td"); // 创建一个td元素        var text_id = document.createTextNode(id); // 将获取的id标签内容字符串转换为文本节点        td_id.appendChild(text_id); // 将节点添加进td中        // name的td        var td_name = document.createElement("td");        td_name.appendChild(document.createTextNode(name));        // gender的td        var td_gender = document.createElement("td");        td_gender.appendChild(document.createTextNode(gender));        // 删除操作        var del_td = document.createElement("td"); // 创建td        var del_a = document.createElement("a"); // 创建a标签        del_a.setAttribute("href","javascript:void(0);"); // 设置a标签属性        del_a.setAttribute("onclick","deltr(this)"); // 绑定onclick事件        var text_a = document.createTextNode("删除"); // 创建一个文本节点，并设置内容        del_a.appendChild(text_a); // 将文本节点添加进a标签中        del_td.appendChild(del_a); // 将a标签添加进td中        // 创建tr，将td添加进去        var tr = document.createElement("tr");        tr.appendChild(td_id);        tr.appendChild(td_name);        tr.appendChild(td_gender);        tr.appendChild(del_td);        // 获取table，将tr添加到table中        var table = document.getElementsByTagName("table")[0]; // 返回一个数组列表，故取第一个        table.appendChild(tr);    }    // 可使用innerHTML优化上述内容    btn_add.onclick = function ·() {        // 2. 获取文本框内容        var id = document.getElementById("id").value;        var name = document.getElementById("name").value;        var gender = document.getElementById("gender").value;        var table = document.getElementsByTagName("table")[0];        table.innerHTML += "&lt;tr&gt;\n" +            "        &lt;td&gt;"+id+"&lt;/td&gt;\n" +            "        &lt;td&gt;"+name+"&lt;/td&gt;\n" +            "        &lt;td&gt;"+gender+"&lt;/td&gt;\n" +            "        &lt;td&gt;&lt;a href=\"javascript:void(0);\" onclick=\"deltr(this)\"&gt;删除&lt;/a&gt;&lt;/td&gt;\n" +            "    &lt;/tr&gt;"    }    function deltr(obj) {        var table = obj.parentNode.parentNode.parentNode; // 获取当前a标签的父父父级元素table        var tr = obj.parentNode.parentNode; // 获取父父级tr        table.removeChild(tr);    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="1-3-HTML-DOM"><a href="#1-3-HTML-DOM" class="headerlink" title="1.3 HTML DOM"></a>1.3 HTML DOM</h3><ul><li><p>标签体的设置和获取：<code>innerHTML</code></p></li><li><p>使用html元素对象的属性，详见<a href="http://www.w3school.com.cn/jsref/index.asp" target="_blank" rel="noopener">W3C参考书</a></p></li><li><p>控制元素样式：</p><ul><li>使用元素的<code>style</code>属性来设置<pre><code class="javascript">div1.style.border = "1px solid red";div1.style.width = "200px";div1.style.fontSize = "20px"; // font-size = fontSize</code></pre></li><li>提前定义好类选择器的样式，通过元素的<code>className</code>属性来设置class属性值。</li></ul><pre><code class="html">&lt;style&gt;    .d1{        border: 1px solid red;        width: 100px;        height: 100px;    }&lt;/style&gt;&lt;script&gt;    var div2 = document.getElementById("div2");    div2.onclick = function () {        div2.className = "d1";    }&lt;/script&gt;</code></pre></li></ul><h2 id="2-BOM"><a href="#2-BOM" class="headerlink" title="2. BOM"></a>2. BOM</h2><p>BOM(Browser Object Model)浏览器对象模型，将浏览器的各个组成部分封装成对象</p><h3 id="2-1-主要组成"><a href="#2-1-主要组成" class="headerlink" title="2.1 主要组成"></a>2.1 主要组成</h3><ul><li>Window：窗口对象</li><li>Navigator：浏览器对象</li><li>Screen：显示器屏幕对象</li><li>History：历史记录对象</li><li>Location：地址栏对象</li></ul><p>主要学习窗口对象，历史记录对象和地址栏对象，属性方法可参考：<a href="http://www.w3school.com.cn/jsref/index.asp" target="_blank" rel="noopener">W3School</a></p><h3 id="2-2-Window对象"><a href="#2-2-Window对象" class="headerlink" title="2.2 Window对象"></a>2.2 Window对象</h3><h4 id="2-2-1-创建"><a href="#2-2-1-创建" class="headerlink" title="2.2.1 创建"></a>2.2.1 创建</h4><p>window对象无需创建，可直接使用。</p><h4 id="2-2-2-方法"><a href="#2-2-2-方法" class="headerlink" title="2.2.2 方法"></a>2.2.2 方法</h4><h5 id="2-2-2-1-与弹出框有关的方法"><a href="#2-2-2-1-与弹出框有关的方法" class="headerlink" title="2.2.2.1 与弹出框有关的方法"></a>2.2.2.1 与弹出框有关的方法</h5><ul><li><code>alert()</code>：显示带有一段信息和一个确认按钮的警告框。</li><li><code>confirm()</code>：显示带有一段消息以及确认按钮和取消按钮的对话框。返回一个布尔值。</li><li><code>prompt()</code>：显示可提示用户输入的对话框。返回值是用户输入的值。</li></ul><h5 id="2-2-2-2-与打开关闭有关的方法"><a href="#2-2-2-2-与打开关闭有关的方法" class="headerlink" title="2.2.2.2 与打开关闭有关的方法"></a>2.2.2.2 与打开关闭有关的方法</h5><ul><li><code>close()</code>：关闭浏览器窗口，谁调用关闭谁。</li><li><code>open()</code>：打开一个新的浏览器窗口。返回值是新的窗口对象。</li></ul><h5 id="2-2-2-3-与定时器有关的方法"><a href="#2-2-2-3-与定时器有关的方法" class="headerlink" title="2.2.2.3 与定时器有关的方法"></a>2.2.2.3 与定时器有关的方法</h5><ul><li><code>setTimeout()</code>：在指定的毫秒数后调用函数或计算表达式。<ul><li>参数1：js代码或者方法对象</li><li>参数2：毫秒值</li><li>返回值：唯一标识，用于取消定时器</li></ul></li><li><code>clearTimeout()</code>：取消由<code>setTimeout()</code>方法设置的timeout。</li><li><code>setInterval()</code>：按照指定的周期来循环调用函数或计算表达式。</li><li><code>clearInterval()</code>：取消由setInterval()设置的timeout。</li></ul><h5 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h5><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;轮播图&lt;/title&gt;    &lt;script&gt;        var number = 1;        function fun() {            number++;            var banner = document.getElementById("banner");            banner.src = "img/banner_"+number+".jpg";            if (number==3){                number = 0;            }        }        setInterval(fun,3000);    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;img src="img/banner_1.jpg" id="banner" width="100%"&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-2-3-属性"><a href="#2-2-3-属性" class="headerlink" title="2.2.3 属性"></a>2.2.3 属性</h4><p>获取其他BOM对象：</p><p><code>window.history</code>，<code>window.localtion</code>，<code>window.Navigator</code>，<code>window.Screen</code></p><p>获取DOM对象：<code>window.document</code></p><h4 id="2-2-4-特点"><a href="#2-2-4-特点" class="headerlink" title="2.2.4 特点"></a>2.2.4 特点</h4><ul><li>Window对象不需要创建可以直接使用。例：<code>window.方法名();</code></li><li>window引用<strong>可以省略</strong>。直接<code>方法名();</code>即可</li></ul><h3 id="2-3-Location对象"><a href="#2-3-Location对象" class="headerlink" title="2.3 Location对象"></a>2.3 Location对象</h3><ol><li>创建(获取)：<code>window.location</code></li><li>方法：<code>reload()</code>：重新加载当前页面(刷新)。</li><li>属性：<code>href</code>：设置或返回完整的URL</li></ol><h4 id="地址栏对象案例"><a href="#地址栏对象案例" class="headerlink" title="地址栏对象案例"></a>地址栏对象案例</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;自动跳转&lt;/title&gt;    &lt;style&gt;        p{            text-align: center;        }        span{            color: red;        }    &lt;/style&gt;    &lt;script&gt;        var t = 5;        function fun() {            t--;            if (t&lt;=0){                clearInterval();                location.href = "https://www.baidu.com";            }            var times = document.getElementById("time");            times.innerHTML = t;        }        setInterval(fun,1000);    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;span id="time"&gt;5&lt;/span&gt;秒之后自动跳转页面&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="2-4-History对象"><a href="#2-4-History对象" class="headerlink" title="2.4 History对象"></a>2.4 History对象</h3><ol><li>创建(获取)：<code>window.histtory</code></li><li>方法<ul><li><code>back()</code>：加载历史列表中的前一个URL。</li><li><code>forward()</code>：加载历史列表中的下一个URL。</li><li><code>go(参数)</code>：加载历史列表中的某个具体页面。参数是正负数，代表前进/后退几个历史记录。</li></ul></li><li>属性：<code>length</code>，返回当前窗口历史列表中的URL数量。</li></ol><h2 id="3-事件监听机制"><a href="#3-事件监听机制" class="headerlink" title="3. 事件监听机制"></a>3. 事件监听机制</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>某些组件被执行了某些操作后，触发某些代码的执行。</p><ul><li>事件：某些操作。如单击、双击，键盘按下，鼠标移动等</li><li>事件源：组件。如按钮、文本输入框…</li><li>监听器：js代码</li><li>注册监听：将事件，事件源，监听器结合在一起。当事件源上发生了某个事件，则触发执行某个监听器代码。</li></ul><h3 id="3-2-常见的事件"><a href="#3-2-常见的事件" class="headerlink" title="3.2 常见的事件"></a>3.2 常见的事件</h3><h4 id="3-2-1-点击事件"><a href="#3-2-1-点击事件" class="headerlink" title="3.2.1 点击事件"></a>3.2.1 点击事件</h4><ol><li><code>onclick</code>：单击事件</li><li><code>ondblclick</code>：双击事件</li></ol><h4 id="3-2-2-焦点事件"><a href="#3-2-2-焦点事件" class="headerlink" title="3.2.2 焦点事件"></a>3.2.2 焦点事件</h4><ol><li><code>onblur</code>：失去焦点，一般用于表单校验</li><li><code>onfocus</code>：元素获得焦点</li></ol><h4 id="3-2-3-加载事件"><a href="#3-2-3-加载事件" class="headerlink" title="3.2.3 加载事件"></a>3.2.3 加载事件</h4><p><code>onload</code>：一张页面或一副图像完成加载。</p><h4 id="3-2-4-鼠标事件"><a href="#3-2-4-鼠标事件" class="headerlink" title="3.2.4 鼠标事件"></a>3.2.4 鼠标事件</h4><ol><li><code>onmousedown</code>：鼠标按钮被按下。可以定义形参接收<code>event</code>对象，使用<code>event.button</code>，返回点击的鼠标值：左键0，中键1，右键2</li><li><code>onmouseup</code>：鼠标按钮被松开。</li><li><code>onmousemove</code>：鼠标被移动。</li><li><code>onmouseover</code>：鼠标移到某元素之上。</li><li><code>onmouseout</code>：鼠标从某元素移开。</li></ol><h4 id="3-2-5-键盘事件"><a href="#3-2-5-键盘事件" class="headerlink" title="3.2.5 键盘事件"></a>3.2.5 键盘事件</h4><ol><li><code>onkeydown</code>：某个键盘按键被按下。</li><li><code>onkeyup</code>：某个键盘按键被松开。</li><li><code>onkeypress</code>：某个键盘按键被按下并松开。</li></ol><h4 id="3-2-6-选择和改变"><a href="#3-2-6-选择和改变" class="headerlink" title="3.2.6 选择和改变"></a>3.2.6 选择和改变</h4><ol><li><code>onchange</code>：域的内容被改变</li><li><code>onselect</code>：文本被选中</li></ol><h4 id="3-2-7-表单事件"><a href="#3-2-7-表单事件" class="headerlink" title="3.2.7 表单事件"></a>3.2.7 表单事件</h4><ol><li><code>onsubmit</code>：确认按钮被点击，一般用于表单校验</li><li><code>onreset</code>：重置按钮被点击</li></ol><h3 id="3-3-表格全选案例"><a href="#3-3-表格全选案例" class="headerlink" title="3.3 表格全选案例"></a>3.3 表格全选案例</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;表格全选&lt;/title&gt;    &lt;style&gt;        table{            border: 1px solid;            width: 500px;            margin-left: 30%;        }        td,th{            text-align: center;            border: 1px solid;        }        div{            margin-top: 10px;            margin-left: 30%;        }        .out{            background-color: white;        }        .over{            background-color: pink;        }    &lt;/style&gt;    &lt;script&gt;        // 在页面加载完成后绑定事件        window.onload = function () {            // 给全选按钮绑定单击事件            document.getElementById("selectAll").onclick = function () {                // 1.获取所有的checkbox                var cbs = document.getElementsByName("cb");                // 2. 遍历                for(var i = 0; i &lt; cbs.length; i++){                    // 3. 设置每一个cb的状态为选中                    cbs[i].checked = true;                }            }            // 给全不选绑定事件            document.getElementById("unSelectAll").onclick = function () {                // 1.获取所有的checkbox                var cbs = document.getElementsByName("cb");                // 2. 遍历                for(var i = 0; i &lt; cbs.length; i++){                    // 3. 设置每一个cb的状态为未选中                    cbs[i].checked = false;                }            }            //给反选绑定事件            document.getElementById("selectRev").onclick = function () {                // 1.获取所有的checkbox                var cbs = document.getElementsByName("cb");                // 2. 遍历                for(var i = 0; i &lt; cbs.length; i++){                    // 3. 获取当前cb的状态，直接取反赋值                    cbs[i].checked = !cbs[i].checked;                }            }            // 第一个cb            document.getElementById("firstCb").onclick = function () {                // 1.获取所有的checkbox                var cbs = document.getElementsByName("cb");                // 2. 遍历                for(var i = 0; i &lt; cbs.length; i++){                    // 3. 获取每一个cb的状态和第一个cb的状态一致                    cbs[i].checked = this.checked;                }            }            // 给所有tr绑定鼠标移到元素上和移出元素事件            var trs = document.getElementsByTagName("tr");            // 遍历            for (var i = 0; i &lt; trs.length; i++){                // 移到元素上事件                trs[i].onmouseover = function () {                    this.className = "over";                }                // 移出元素事件                trs[i].onmouseout = function () {                    this.className = "out";                }            }        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;    &lt;caption&gt;学生信息表&lt;/caption&gt;    &lt;tr&gt;        &lt;th&gt;&lt;input type="checkbox" name="cb" id="firstCb"&gt;&lt;/th&gt;        &lt;th&gt;编号&lt;/th&gt;        &lt;th&gt;姓名&lt;/th&gt;        &lt;th&gt;性别&lt;/th&gt;        &lt;th&gt;操作&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;input type="checkbox"  name="cb"&gt;&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;钢铁侠&lt;/td&gt;        &lt;td&gt;男&lt;/td&gt;        &lt;td&gt;&lt;a href="javascript:void(0);"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;input type="checkbox"  name="cb"&gt;&lt;/td&gt;        &lt;td&gt;2&lt;/td&gt;        &lt;td&gt;绿巨人&lt;/td&gt;        &lt;td&gt;男&lt;/td&gt;        &lt;td&gt;&lt;a href="javascript:void(0);"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;&lt;input type="checkbox"  name="cb"&gt;&lt;/td&gt;        &lt;td&gt;3&lt;/td&gt;        &lt;td&gt;雷神&lt;/td&gt;        &lt;td&gt;?&lt;/td&gt;        &lt;td&gt;&lt;a href="javascript:void(0);"&gt;删除&lt;/a&gt;&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;&lt;div&gt;    &lt;input type="button" id="selectAll" value="全选"&gt;    &lt;input type="button" id="unSelectAll" value="全不选"&gt;    &lt;input type="button" id="selectRev" value="反选"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="3-4-表单检验案例"><a href="#3-4-表单检验案例" class="headerlink" title="3.4 表单检验案例"></a>3.4 表单检验案例</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;注册页面&lt;/title&gt;&lt;style&gt;    *{        margin: 0px;        padding: 0px;        box-sizing: border-box;    }    body{        background: url("img/register_bg.png") no-repeat center;        padding-top: 25px;    }    .rg_layout{        width: 900px;        height: 500px;        border: 8px solid #EEEEEE;        background-color: white;        /*让div水平居中*/        margin: auto;    }    .rg_left{        /*border: 1px solid red;*/        float: left;        margin: 15px;    }    .rg_left &gt; p:first-child{        color:#FFD026;        font-size: 20px;    }    .rg_left &gt; p:last-child{        color:#A6A6A6;        font-size: 20px;    }    .rg_center{        float: left;       /* border: 1px solid red;*/    }    .rg_right{        /*border: 1px solid red;*/        float: right;        margin: 15px;    }    .rg_right &gt; p:first-child{        font-size: 15px;    }    .rg_right p a {        color:pink;    }    .td_left{        width: 100px;        text-align: right;        height: 45px;    }    .td_right{        padding-left: 50px ;    }    #username,#password,#email,#name,#tel,#birthday,#checkcode{        width: 251px;        height: 32px;        border: 1px solid #A6A6A6 ;        /*设置边框圆角*/        border-radius: 5px;        padding-left: 10px;    }    #checkcode{        width: 110px;    }    #img_check{        height: 32px;        vertical-align: middle;    }    #btn_sub{        width: 150px;        height: 40px;        background-color: #FFD026;        border: 1px solid #FFD026 ;    }    .error{        color: red;    }    #td_sub{        padding-left: 150px;    }&lt;/style&gt;&lt;script&gt;    // 1. 给表单绑定submit事件。监听器中判断每个方法校验的结果。如果都为true中返回true,有一项false则返回false    // 2. 定义一些方法分别校验各个表单项    // 3. 给各个表单项绑定失去焦点onblur事件    window.onload = function () {        // 1. 给表单绑定submit事件。        document.getElementById("form").onsubmit = function () {            // 调用用户名校验方法 checkName();            // 调用密码校验方法 checkPwd();            return checkName() &amp;&amp; checkPwd() &amp;&amp; checkEmail() &amp;&amp; checkTname() &amp;&amp; checkPhone();        }        // 给各个表单项分别绑定离焦事件        document.getElementById("username").onblur = checkName;        document.getElementById("password").onblur = checkPwd;        document.getElementById("email").onblur = checkEmail;        document.getElementById("name").onblur = checkTname;        document.getElementById("tel").onblur = checkPhone;        // 校验用户名方法        function checkName() {            // 1. 获取用户名值            var username = document.getElementById("username").value;            // 2. 定义正则表达式            var reg_username = /^\w{6,12}$/;            // 3. 判断值是否符合正则规则            var flag = reg_username.test(username);            // 4. 提示信息            var s_username = document.getElementById("s_username");            if (flag){                // 提示绿色对勾                s_username.innerHTML = "&lt;img width='30' height='20' src='img/gou.png'/&gt;"            } else{                // 提示红色用户名错误                s_username.innerHTML = "用户名格式错误！"            }            return flag;        }        // 校验密码        function checkPwd() {            // 1. 获取密码值            var password = document.getElementById("password").value;            // 2. 定义正则表达式            var reg_password = /^(?![^a-zA-Z]+$)(?!\D+$)/;            // 3. 判断值是否符合正则规则            var flag = reg_password.test(password);            // 4. 提示信息            var s_pwd = document.getElementById("s_pwd");            if (flag){                // 提示绿色对勾                s_pwd.innerHTML = "&lt;img width='30' height='20' src='img/gou.png'/&gt;"            } else{                // 提示红色密码错误                s_pwd.innerHTML = "密码格式错误！"            }            return flag;        }        // 校验邮箱        function checkEmail() {            var reg_email = /^([a-zA-Z]|[0-9])(\w|\-)+@[a-zA-Z0-9]+\.([a-zA-Z]{2,4})$/;            var flag = reg_email.test(document.getElementById("email").value);            var s_email = document.getElementById("s_email");            if (flag){                s_email.innerHTML = "&lt;img width='30' height='20' src='img/gou.png'/&gt;";            }else{                s_email.innerHTML = "邮箱格式错误";            }        }        // 校验姓名        function checkTname() {            var flag = /^[\u4E00-\u9FA5\uf900-\ufa2d]{2,4}$/.test(document.getElementById("name").value);            var s_name = document.getElementById("s_name");            if (flag){                s_name.innerHTML = "&lt;img width='30' height='20' src='img/gou.png'/&gt;";            }else{                s_name.innerHTML = "姓名格式错误";            }        }        // 校验手机号        function checkPhone() {            var flag = /^1[3|4|5|8][0-9]\d{4,8}$/.test(document.getElementById("tel").value);            var s_phone = document.getElementById("s_phone");            if (flag){                s_phone.innerHTML = "&lt;img width='30' height='20' src='img/gou.png'/&gt;";            } else{                s_phone.innerHTML = "手机号码格式错误"            }        }    }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="rg_layout"&gt;    &lt;div class="rg_left"&gt;        &lt;p&gt;新用户注册&lt;/p&gt;        &lt;p&gt;USER REGISTER&lt;/p&gt;    &lt;/div&gt;    &lt;div class="rg_center"&gt;        &lt;div class="rg_form"&gt;            &lt;!--定义表单 form--&gt;            &lt;form action="#" method="post" id="form"&gt;                &lt;table&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="username"&gt;用户名&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="text" name="username" id="username" placeholder="请输入用户名"&gt;                            &lt;span id="s_username" class="error"&gt;&lt;/span&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="password"&gt;密码&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="password" name="password" id="password" placeholder="请输入密码"&gt;                            &lt;span id="s_pwd" class="error"&gt;&lt;/span&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="email"&gt;Email&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="email" name="email" id="email" placeholder="请输入邮箱"&gt;                            &lt;span id="s_email" class="error"&gt;&lt;/span&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="name"&gt;姓名&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="text" name="name" id="name" placeholder="请输入姓名"&gt;                            &lt;span id="s_name" class="error"&gt;&lt;/span&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="tel"&gt;手机号&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="text" name="tel" id="tel" placeholder="请输入手机号"&gt;                            &lt;span id="s_phone" class="error"&gt;&lt;/span&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label&gt;性别&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="radio" name="gender" value="male" checked&gt; 男                            &lt;input type="radio" name="gender" value="female"&gt; 女                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="birthday"&gt;出生日期&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="date" name="birthday" id="birthday" placeholder="请输入出生日期"&gt;&lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="checkcode" &gt;验证码&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="text" name="checkcode" id="checkcode" placeholder="请输入验证码"&gt;                            &lt;img id="img_check" src="img/verify_code.jpg"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td colspan="2" id="td_sub"&gt;&lt;input type="submit" id="btn_sub" value="注册"&gt;&lt;/td&gt;                    &lt;/tr&gt;                &lt;/table&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="rg_right"&gt;        &lt;p&gt;已有账号?&lt;a href="#"&gt;立即登录&lt;/a&gt;&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2019/05/28/javaweb/javascript-ji-chu/"/>
      <url>/2019/05/28/javaweb/javascript-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JavaScript概述"><a href="#1-JavaScript概述" class="headerlink" title="1. JavaScript概述"></a>1. JavaScript概述</h2><p>JavaScript是一种运行在浏览器中的解释型的编程语言。每一个浏览器都有JavaScript的解析引擎，不需要编译就可以直接被浏览器解析执行了。</p><a id="more"></a><ul><li>功能：主要用来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</li></ul><h2 id="2-ECMAScript"><a href="#2-ECMAScript" class="headerlink" title="2. ECMAScript"></a>2. ECMAScript</h2><p>1997年，ECMA(欧洲计算机制造商协会)，制定出<strong>客户端脚本语言的标准</strong>：<code>ECMAScript</code>，就是统一了所有客户端脚本语言的编码方式。</p><ul><li><code>JavaScript = ECMAScript + JavaScript自己特有的东西(BOM+DOM)</code></li></ul><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><h4 id="2-1-1-与html结合方式"><a href="#2-1-1-与html结合方式" class="headerlink" title="2.1.1 与html结合方式"></a>2.1.1 与html结合方式</h4><ol><li>内部JS：定义<code>&lt;script&gt;</code>，标签体内容就是js代码</li><li>外部JS：定义<code>&lt;script&gt;</code>，通过<code>src</code>属性引入外部的js文件</li></ol><blockquote><p>Tips: <code>script</code>可以定义在html页面的任何地方，但定义的文字会影响执行顺序。且可以定义多个。</p></blockquote><h4 id="2-1-2-注释"><a href="#2-1-2-注释" class="headerlink" title="2.1.2 注释"></a>2.1.2 注释</h4><ol><li>单行注释：<code>// 注释内容</code></li><li>多行注释：<code>/*注释内容*/</code></li></ol><h4 id="2-1-3-数据类型"><a href="#2-1-3-数据类型" class="headerlink" title="2.1.3 数据类型"></a>2.1.3 数据类型</h4><ol><li>原始数据类型<ol><li><code>number</code>：<code>JavaScript</code>不区分整数和浮点数，统一用<code>number</code>表示。可以表示整数/小数/NaN(NaN表示Not a Number，当无法计算结果时用NaN表示)。</li><li><code>string</code>：字符串。可以使用单双引号。</li><li><code>boolean</code>：布尔值。true和false。</li><li><code>null</code>：一个对象为空的占位符。</li><li><code>undefined</code>：表示值未定义。</li></ol></li><li>引用数据类型：对象，<code>JavaScript</code>的对象是一组由键-值组成的无序集合。</li></ol><pre><code class="javascript">&lt;script&gt;        var num = 123; // 定义一个整数123        var float = 0.456; // 定义一个浮点数0.456        var str = "abc"; // 定义一个字符串abc        var flag = true; // 定义一个布尔值true        var a = null; // 定义对象a为空        var b = undefined; // 表示值b未定义        var person = { // 定义了一个person对象            name:'xiaozhang',            age:20,            city:'hangzhou'        }&lt;/script&gt;</code></pre><h4 id="2-1-4-变量"><a href="#2-1-4-变量" class="headerlink" title="2.1.4 变量"></a>2.1.4 变量</h4><p>变量是一小块存储数据的内存空间。Java语言是强类型语言，而JavaScript是弱类型语言。</p><ul><li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li><li>弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</li><li>语法：<code>var 变量名 = 初始化值;</code></li></ul><blockquote><p>Tips: 可以使用<code>typeof</code>运算符获取变量的类型。null运算后得到的是object类型。</p></blockquote><pre><code class="javascript">document.write(num+"--&gt;"+typeof(num)+"&lt;br&gt;"); // 123--&gt;numberdocument.write(str+"--&gt;"+typeof(str)+"&lt;br&gt;"); // abc--&gt;stringdocument.write(flag+"--&gt;"+typeof(flag)+"&lt;br&gt;"); // true--&gt;booleandocument.write(a+"--&gt;"+typeof(a)+"&lt;br&gt;"); // null--&gt;objectdocument.write(b+"--&gt;"+typeof(b)+"&lt;br&gt;"); // undefined--&gt;undefineddocument.write("person--&gt;"+typeof(person)+"&lt;br&gt;"); // person--&gt;object</code></pre><h4 id="2-1-5-运算符"><a href="#2-1-5-运算符" class="headerlink" title="2.1.5 运算符"></a>2.1.5 运算符</h4><ol><li>一元运算符：只有一个运算数的运算符。例：<code>++,--</code></li><li>算数运算符：<code>+ - * / % ...</code></li><li>赋值运算符：<code>=,+=,-=...</code></li><li>比较运算符：<code>&gt;,&lt;,&gt;=,&lt;=,==,===(全等于)</code>，全等于在比较之前先判断类型，如果类型不一样，直接返回false。</li><li>逻辑运算符：<code>&amp;&amp;,||,!</code>。</li><li>三元运算符：<code>表达式?值1:值2;</code>，判断表达式的值，如果是true则取值1，反之取值2。</li></ol><pre><code class="javascript">var a = 1;document.write(++a+"&lt;br&gt;"); // 一元运算符var b = 2;document.write(a+b+"&lt;br&gt;"); // 二元运算符: +-*/%document.write(b+=1+"&lt;br&gt;"); // 3, 赋值运算符// document.write(a&gt;b+"&lt;br&gt;"); // false,比较运算符var str = '1';document.write((a==str)+"&lt;br&gt;"); // true，string类型转number，按照字面值转换为1，1==1，故truedocument.write(a===str+"&lt;br&gt;"); // false,全等于会先进行类型判断，类型不同直接返回falsedocument.write(a&gt;false); // a&gt;0 , truedocument.write(a&gt;0?1:0); // 三元运算符/*在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换* 其他类型转number：     * string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）     * boolean转number：true转为1，false转为0逻辑运算符类型转换：    1. number：0或NaN为假，其他都为真    2. string：除了空字符串("")，其他都是true    3. null&amp;undefined:都是false    4. 对象：所有对象都是true*/</code></pre><h4 id="2-1-6-流程控制语句"><a href="#2-1-6-流程控制语句" class="headerlink" title="2.1.6 流程控制语句"></a>2.1.6 流程控制语句</h4><ol><li><code>if...else...</code></li><li><code>switch(变量)：case 值:具体内容;break;</code>，在JS中，switch语句可以接受任意的原始数据类型</li><li><code>while</code></li><li><code>do...while</code></li><li><code>for</code></li></ol><pre><code class="javascript">var a = 4;var b = 7;if (a&gt;b){    document.write("a&gt;b")} else{    document.write("b&gt;a")}var day = 3;switch (day) {    case 1:        document.write("Monday");        break;    case 2:        document.write("Tuesday");        break;    case 3:        document.write("Wednesday");        break;    case 4:        document.write("Thursday");        break;    case 5:        document.write("Friday");        break;    case 6:        document.write("Saturday");        break;    case 7:        document.write("Sunday");        break;}var c = 1;while (c&lt;=5){    document.write(c+"&lt;br&gt;");    c++;}for (i=1;i&lt;=5;i++){    document.write(i+"&lt;br&gt;")}</code></pre><h4 id="2-1-7-JS特殊语法"><a href="#2-1-7-JS特殊语法" class="headerlink" title="2.1.7 JS特殊语法"></a>2.1.7 JS特殊语法</h4><ol><li>语句以<code>;</code>结尾，如果一行只有一条语句则可省略<code>;</code>(不建议)</li><li>变量的定义使用<code>var</code>关键字，也可以不使用。<ol><li>使用：定义的变量是局部变量</li><li>不用：定义的变量是全局变量(不建议)</li></ol></li></ol><h4 id="2-1-8-小练习：99乘法表"><a href="#2-1-8-小练习：99乘法表" class="headerlink" title="2.1.8 小练习：99乘法表"></a>2.1.8 小练习：99乘法表</h4><pre><code class="javascript">document.write("&lt;table&gt;")for (i=1;i&lt;=9;i++){    document.write("&lt;tr&gt;")    for (j=1;j&lt;=i;j++){        document.write("&lt;td&gt;")        document.write(j+"*"+i+"="+j*i)        document.write("&lt;/td&gt;")    }    document.write("&lt;/tr&gt;")}document.write("&lt;/table&gt;")</code></pre><h2 id="3-基本对象"><a href="#3-基本对象" class="headerlink" title="3. 基本对象"></a>3. 基本对象</h2><h3 id="3-1-Function：函数对象"><a href="#3-1-Function：函数对象" class="headerlink" title="3.1 Function：函数对象"></a>3.1 Function：函数对象</h3><pre><code class="javascript">    &lt;script&gt;        /*            1.创建函数对象：                1. function 方法名称(形参列表){                    方法体                }                2. var 方法名 = function(形参列表){                    方法体                }            2. 属性：                length：返回形参的个数            3. 特点：                1. 方法定义时形参的类型不用写                2. 方法是一个对象，如果定义名称相同的方法，会覆盖                3. 在JS中，方法的调用只与方法名称有关                4. 在方法声明中有一个隐藏的内置关键字：argument,用于接收所有形参，封装成了一个数组            4. 调用：                方法名称(参数列表);         */        function fun(a,b) {            document.write(a+b);        }        // fun(3,4); // 7        var fun2 = function (a,b) {            document.write(a+b);        }        document.write(fun2.length); // 2        fun2(3) // NaN,原因b是undefined        /*            定义一个求和函数         */        function add() {            var sum = 0;            for (i=0;i&lt;arguments.length;i++){                sum+=arguments[i];            }            return sum;        }        document.write(add(1,2,3,4,5)); // 15    &lt;/script&gt;</code></pre><h3 id="3-2-Array：数组对象"><a href="#3-2-Array：数组对象" class="headerlink" title="3.2 Array：数组对象"></a>3.2 Array：数组对象</h3><h4 id="3-2-1-创建"><a href="#3-2-1-创建" class="headerlink" title="3.2.1 创建"></a>3.2.1 创建</h4><ol><li><code>var arr = new Array(元素列表);</code></li><li><code>var arr = new Array(默认长度);</code></li><li><code>var arr = [元素列表];</code></li></ol><h4 id="3-2-2-方法"><a href="#3-2-2-方法" class="headerlink" title="3.2.2 方法"></a>3.2.2 方法</h4><ol><li><code>join(参数)</code>：将数组中的元素按照指定的分隔符拼接为字符串</li><li><code>push()</code>：向数组的末尾添加一个或更多元素，并返回新的长度。</li></ol><h4 id="3-2-3-属性"><a href="#3-2-3-属性" class="headerlink" title="3.2.3 属性"></a>3.2.3 属性</h4><p><code>length</code>：数组长度</p><h4 id="3-2-4-特点"><a href="#3-2-4-特点" class="headerlink" title="3.2.4 特点"></a>3.2.4 特点</h4><ol><li>在JS中，数组可以存储不同的类型元素</li><li>JS中，数组长度是可变的。</li></ol><h4 id="3-2-5-示例"><a href="#3-2-5-示例" class="headerlink" title="3.2.5 示例"></a>3.2.5 示例</h4><pre><code class="javascript">var arr1 = new Array(1,2,3);var arr2 = new Array(5);var arr3 = [1,"abc",true]; // 数组可以存储不同的类型元素document.write(arr1.join("--&gt;")); // 1--&gt;2--&gt;3arr1.push(4,5);document.write(arr1); // 1,2,3,4,5document.write(arr2.length); // 5</code></pre><h3 id="3-3-Date：日期对象"><a href="#3-3-Date：日期对象" class="headerlink" title="3.3 Date：日期对象"></a>3.3 Date：日期对象</h3><ol><li>创建：<code>var date = new Date();</code></li><li>方法：<ul><li><code>toLocaleString()</code>：返回当前date对象对应的时间本地字符串格式。</li><li><code>getTime()</code>：获取毫秒值。返回当前日期对象描述的时间到1970年1月1日零点的毫秒值差。</li></ul></li></ol><h3 id="3-4-Math：数学对象"><a href="#3-4-Math：数学对象" class="headerlink" title="3.4 Math：数学对象"></a>3.4 Math：数学对象</h3><ol><li>创建：Math对象不用创建，可以直接使用。例：<code>Math.方法名();</code></li><li>方法：<ul><li><code>random()</code>：返回0~1之间的随机数。含0不含1</li><li><code>ceil(x)</code>：对数进行上舍入(向上取整)</li><li><code>floor(x)</code>：对数进行下舍入(向下取整)</li><li><code>round(x)</code>：把数四舍五入为最接近的整数</li></ul></li><li>属性：<code>PI</code></li></ol><pre><code class="javascript">document.write(Math.PI+"&lt;br&gt;"); // 3.141592653589793document.write(Math.random()+"&lt;br&gt;"); // 0.16764969291724752document.write(Math.ceil(3.14)+"&lt;br&gt;"); // 4document.write(Math.floor(3.14)+"&lt;br&gt;"); // 3document.write(Math.round(3.14)+"&lt;br&gt;"); // 3// 取一个0~100之间的随机整数var number = Math.floor(Math.random()*100+1);document.write(number);</code></pre><h3 id="3-5-RegExp：正则表达式对象"><a href="#3-5-RegExp：正则表达式对象" class="headerlink" title="3.5 RegExp：正则表达式对象"></a>3.5 RegExp：正则表达式对象</h3><ol><li>创建：<ul><li><code>var reg = new RegExp("正则表达式");</code></li><li><code>var reg = /正则表达式/;</code></li></ul></li><li>方法：test(参数)：验证指定的字符串是否符合正则定义的规范</li></ol><pre><code class="javascript">var reg1 = new RegExp("\\d");var reg2 = /[a-z]/;document.write(reg1.test("a")); // falsedocument.write(reg1.test(2)); // truedocument.write(reg2.test("b")); // true</code></pre><h3 id="3-6-Global"><a href="#3-6-Global" class="headerlink" title="3.6 Global"></a>3.6 Global</h3><h4 id="3-6-1-特点"><a href="#3-6-1-特点" class="headerlink" title="3.6.1 特点"></a>3.6.1 特点</h4><p>全局对象，这个Global中封装的方法不需要对象就可以直接调用。例：<code>方法名();</code></p><h4 id="3-6-2-方法"><a href="#3-6-2-方法" class="headerlink" title="3.6.2 方法"></a>3.6.2 方法</h4><ul><li><code>encodeURI()</code>：url编码</li><li><code>encodeURI()</code>：url编码</li><li><code>encodeURIComponent()</code>：url编码，能编码的字符更多</li><li><code>decodeURIComponent()</code>：url解码</li><li><code>parseInt()</code>：将字符串转为数字。逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number类型。</li><li><code>isNaN()</code>：判断一个值是否是NaN。NaN参与的==比较全部为false。</li><li><code>eval()</code>：将可执行的<code>JavaScript</code>字符串转换为JS脚本来执行。</li></ul><pre><code class="javascript">var str = "零度科技"; // UTF8编码转换中文，一个中文代表3个字节,即'零= %E9%9B%B6'var encode = encodeURI(str);document.write(encode); // %E9%9B%B6%E5%BA%A6%E7%A7%91%E6%8A%80document.write(decodeURI(encode)); // 零度科技var number = "123木头人321";document.write(parseInt(number)); // 123var a = NaN;document.write(isNaN(number)); // falsedocument.write(isNaN(a)); // truevar b = "alert(123)";eval(b); // 将会执行alert(123)这段js代码，在浏览器弹出123</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础</title>
      <link href="/2019/05/27/javaweb/css-ji-chu/"/>
      <url>/2019/05/27/javaweb/css-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-CSS基础"><a href="#1-CSS基础" class="headerlink" title="1. CSS基础"></a>1. CSS基础</h2><p>概念：Cascading Style Sheets(层叠样式表)。功能强大，可以将内容展示和样式控制分离。</p><blockquote><p>层叠：多个样式可以作用在用一个html的元素上，同时生效</p></blockquote><a id="more"></a><h3 id="1-1-CSS的使用：CSS与HTML结合方式"><a href="#1-1-CSS的使用：CSS与HTML结合方式" class="headerlink" title="1.1 CSS的使用：CSS与HTML结合方式"></a>1.1 CSS的使用：CSS与HTML结合方式</h3><ol><li>内联样式：在标签内使用<code>style</code>属性指定css代码，例<code>&lt;div style="color:red;"&gt;this is css style&lt;/div&gt;</code></li><li>内部样式：在head标签内，定义style标签，style标签体内容就是css代码<pre><code class="html">&lt;style&gt; div{     color:blue; }&lt;/style&gt;&lt;div&gt; this is inner style&lt;/div&gt;</code></pre></li><li>外部样式：定义css资源文件，在head标签内，定义link标签，引入外部的资源文件。</li></ol><pre><code class="html">1. 新建一个a.css的文件，内容如下div{    color:red;}2. head标签内使用link标签引入&lt;head&gt;    &lt;link rel="stylesheet" href="css/a.css"&gt;&lt;/head&gt;&lt;div&gt;     this is outer style&lt;/div&gt;</code></pre><h2 id="2-CSS语法"><a href="#2-CSS语法" class="headerlink" title="2. CSS语法"></a>2. CSS语法</h2><pre><code class="html">格式如下：    选择器{        属性名1：属性值1;        属性名2：属性值2;        ....    }</code></pre><ul><li>选择器：筛选具有相似特征的元素</li></ul><blockquote><p>Notice：每一对属性需要使用;分隔开，最后一对属性可以不加;</p></blockquote><h2 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3. 选择器"></a>3. 选择器</h2><p>分类有：基础选择器和扩展选择器</p><h3 id="3-1-基础选择器"><a href="#3-1-基础选择器" class="headerlink" title="3.1 基础选择器"></a>3.1 基础选择器</h3><h4 id="3-1-1-ID选择器"><a href="#3-1-1-ID选择器" class="headerlink" title="3.1.1 ID选择器"></a>3.1.1 ID选择器</h4><p>选择具体的id属性值的元素，建议在一个html页面中id值唯一</p><ul><li>语法：<code>#id属性值{css}</code></li></ul><h4 id="3-1-2-元素选择器"><a href="#3-1-2-元素选择器" class="headerlink" title="3.1.2 元素选择器"></a>3.1.2 元素选择器</h4><p>选择具有相同标签名称的元素</p><ul><li><p>语法：<code>标签名称{css}</code></p></li><li><p>注意：id选择器优先级高于元素选择器</p></li></ul><h4 id="3-1-3-类选择器"><a href="#3-1-3-类选择器" class="headerlink" title="3.1.3 类选择器"></a>3.1.3 类选择器</h4><p>选择具有相同的class属性值的元素</p><ul><li>语法：<code>.class属性值{css}</code></li><li>注意：类选择器优先级高于元素选择器</li></ul><h3 id="3-2-扩展选择器"><a href="#3-2-扩展选择器" class="headerlink" title="3.2 扩展选择器"></a>3.2 扩展选择器</h3><h4 id="3-2-1-选择所有元素"><a href="#3-2-1-选择所有元素" class="headerlink" title="3.2.1 选择所有元素"></a>3.2.1 选择所有元素</h4><ul><li>语法： <code>*{}</code></li></ul><h4 id="3-2-2-并集选择器"><a href="#3-2-2-并集选择器" class="headerlink" title="3.2.2 并集选择器"></a>3.2.2 并集选择器</h4><ul><li>语法：<code>选择器1,选择器2{}</code></li></ul><h4 id="3-2-3-子选择器"><a href="#3-2-3-子选择器" class="headerlink" title="3.2.3 子选择器"></a>3.2.3 子选择器</h4><p>筛选选择器1元素下的选择器2元素</p><ul><li>语法：<code>选择器1 选择器2{}</code></li></ul><h4 id="3-2-4-父选择器"><a href="#3-2-4-父选择器" class="headerlink" title="3.2.4 父选择器"></a>3.2.4 父选择器</h4><p>筛选选择器2的父元素选择器1</p><ul><li>语法：<code>选择器1&gt;选择器2{}</code></li></ul><h4 id="3-2-5-属性选择器"><a href="#3-2-5-属性选择器" class="headerlink" title="3.2.5 属性选择器"></a>3.2.5 属性选择器</h4><p>选择元素名称，属性名=属性值的元素</p><ul><li>语法：<code>元素名称[属性名=“属性值”]{}</code></li></ul><h4 id="3-2-6-伪类选择器"><a href="#3-2-6-伪类选择器" class="headerlink" title="3.2.6 伪类选择器"></a>3.2.6 伪类选择器</h4><p>选择一些元素具体的状态</p><ul><li>语法：<code>元素:状态{}</code></li><li>例：</li></ul><pre><code class="html">&lt;a&gt;&lt;/a&gt;标签状态有：    1. link：初始化的状态    2. visited：被访问过的状态    3. active：正在访问状态    4. hover：鼠标悬浮状态</code></pre><h2 id="4-属性"><a href="#4-属性" class="headerlink" title="4. 属性"></a>4. 属性</h2><h3 id="4-1-字体、文本"><a href="#4-1-字体、文本" class="headerlink" title="4.1 字体、文本"></a>4.1 字体、文本</h3><ol><li><code>font-size</code>：字体大小</li><li><code>color</code>：文本颜色</li><li><code>text-align</code>：对齐方式</li><li><code>line-heigh</code>t：行高</li></ol><h3 id="4-2背景"><a href="#4-2背景" class="headerlink" title="4.2背景"></a>4.2背景</h3><ul><li><code>background</code></li></ul><h3 id="4-3-边框"><a href="#4-3-边框" class="headerlink" title="4.3 边框"></a>4.3 边框</h3><ul><li><code>border</code>：设置边框，符合属性</li></ul><h3 id="4-4-尺寸"><a href="#4-4-尺寸" class="headerlink" title="4.4 尺寸"></a>4.4 尺寸</h3><ul><li><code>width</code>：宽度</li><li><code>height</code>：高度</li></ul><h3 id="4-5-盒子模型"><a href="#4-5-盒子模型" class="headerlink" title="4.5 盒子模型"></a>4.5 盒子模型</h3><p>主要用于控制布局</p><ul><li><code>margin</code>：外边距</li><li><code>padding</code>：内边距<ul><li>默认情况下内边距会影响整个盒子的大小</li><li><code>box-sizing: border-box;</code>，设置盒子的属性，让<code>width</code>和<code>height</code>就是最终盒子的大小</li></ul></li><li><code>float</code>：浮动<ul><li><code>float: left;</code> 左浮动</li><li><code>float: right;</code> 右浮动</li></ul></li></ul><h2 id="5-综合案例"><a href="#5-综合案例" class="headerlink" title="5. 综合案例"></a>5. 综合案例</h2><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;注册页面&lt;/title&gt;    &lt;style&gt;        *{            margin: 0px; /*外边距*/            padding: 0px;/*内边距*/            box-sizing: border-box;        }        body{            background: url("img/register_bg.png") no-repeat center;/*背景图居中*/        }        .rg_foreign{            width: 900px;            height: 500px;            border: 8px solid #EEEEEE;/*边框颜色*/            background-color: white;/*背景色白色*/            /*div水平居中*/            margin: auto;            margin-top: 15px; /*外上边距*/        }        .rg_left{            float: left;            margin: 15px;        }        .rg_left &gt; p:first-child{            color: #FFD026;            font-size: 22px;        }        .rg_left &gt; p:last-child{            color: #A6A6A6;            font-size: 22px;        }        .rg_center{            float: left;            width: 450px;        }        .rg_right{            float: right;            margin: 15px;        }        .rg_right p{            font-size: 15px;        }        .rg_right p a{            color: pink;        }        .td_left{            width: 100px;            text-align: right;            height: 45px;        }        .td_right{            padding-left: 35px;        }        #uname,#password,#email,#name,#tel,#birthday,#checked{            width: 250px;            height: 32px;            border: 1px solid #A6A6A6;            /*设置边框圆角*/            border-radius: 5px;            padding-left: 10px;        }        #checked{            width: 110px;        }        #img_check{            height: 32px;            vertical-align: middle; /*设置垂直居中*/        }        #btn_submit{           width: 150px;            height: 40px;            background-color: #FFD026;            border: 1px solid #FFD026;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="rg_foreign"&gt;    &lt;div class="rg_left"&gt;        &lt;p&gt;新用户注册&lt;/p&gt;        &lt;p&gt;USER REGISTER&lt;/p&gt;    &lt;/div&gt;    &lt;div class="rg_center"&gt;        &lt;div class="rg_form"&gt;            &lt;form action="./login.html" method="post"&gt;                &lt;table&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="uname"&gt;用户名&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="text" name="uname" id="uname" placeholder="请输入用户名"&gt;&lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="password"&gt;密码&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="password" name="password" id="password" placeholder="请输入密码"&gt;&lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="email"&gt;Email&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="email" name="email" id="email" placeholder="请输入邮箱"&gt;&lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="name"&gt;姓名&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="text" name="name" id="name" placeholder="请输入真实姓名"&gt;&lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="tel"&gt;手机号&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="text" name="tel" id="tel" placeholder="请输入手机号"&gt;&lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;性别&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="radio" name="gender" value="male" checked&gt;男                            &lt;input type="radio" name="gender" value="female"&gt;女                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="birthday"&gt;出生日期&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;&lt;input type="date" name="birthday" id="birthday"&gt;&lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td class="td_left"&gt;&lt;label for="checked"&gt;验证码&lt;/label&gt;&lt;/td&gt;                        &lt;td class="td_right"&gt;                            &lt;input type="text" name="checked" id="checked" placeholder="请输入验证码"&gt;                            &lt;img src="img/verify_code.jpg" alt="" id="img_check"&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td colspan="2" align="center"&gt;&lt;input type="submit" id="btn_submit" value="注册"&gt;&lt;/td&gt;                    &lt;/tr&gt;                &lt;/table&gt;            &lt;/form&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="rg_right"&gt;        &lt;p&gt;已有账号? &lt;a href="#"&gt;立即登录&lt;/a&gt;&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础</title>
      <link href="/2019/05/26/javaweb/html/"/>
      <url>/2019/05/26/javaweb/html/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Web概述"><a href="#1-Web概述" class="headerlink" title="1. Web概述"></a>1. Web概述</h2><h3 id="1-1-软件架构"><a href="#1-1-软件架构" class="headerlink" title="1.1 软件架构"></a>1.1 软件架构</h3><p>主要有如下两种架构</p><ol><li>C/S：Client/Server 客户端/服务器端</li><li>B/S：Browser/Server 浏览器/服务器端</li></ol><a id="more"></a><h3 id="1-2-资源分类"><a href="#1-2-资源分类" class="headerlink" title="1.2 资源分类"></a>1.2 资源分类</h3><h4 id="1-2-1-静态资源"><a href="#1-2-1-静态资源" class="headerlink" title="1.2.1 静态资源"></a>1.2.1 静态资源</h4><p>使用静态网页开发技术发布的资源，特点如下：</p><ul><li>所有用户访问，得到的结果是一样的，如：文本、图片、音视频等资源</li><li>静态网页开发技术：<code>HTML、CSS、JavaScript</code></li><li>如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</li></ul><table><thead><tr><th>名称</th><th>作用概述</th></tr></thead><tbody><tr><td>HTML</td><td>用于搭建基础网页，展示页面的内容</td></tr><tr><td>CSS</td><td>用于美化页面，布局页面</td></tr><tr><td>JavaScript</td><td>控制页面的元素，让页面有一些动态的效果</td></tr></tbody></table><h4 id="1-2-2-动态资源"><a href="#1-2-2-动态资源" class="headerlink" title="1.2.2 动态资源"></a>1.2.2 动态资源</h4><p>使用动态网页及时发布的资源，特点：</p><ul><li>所有用户访问，得到的结果可能不一样</li><li>动态网页开发技术：<code>jsp/servlet，php,asp</code>等</li><li>如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</li></ul><h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2. HTML"></a>2. HTML</h2><p>html是最基础的网页开发语言</p><ul><li><code>Hyper Text Markup Language</code>(超文本标记语言)<ul><li>超文本：是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本</li><li>标记语言：由标签构成的语言。&lt;标签名称&gt; 如 html，xml</li></ul></li></ul><blockquote><p>Notice：标记语言不是编程语言</p></blockquote><h3 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h3><h4 id="2-1-1-语法"><a href="#2-1-1-语法" class="headerlink" title="2.1.1 语法"></a>2.1.1 语法</h4><pre><code class="tex">1. html文档后缀名 .html 或者 .htm2. 标签分为：围堵标签(&lt;html&gt;&lt;/html&gt;)和自闭标签(&lt;link/&gt;)3. 标签可以嵌套：例&lt;a&gt;&lt;b&gt;&lt;/b&gt;&lt;/a&gt;4. 在开始标签中可以定义属性。属性是由键值对构成，值需用单双引号引起来。5. html的标签不区分大小写，但建议使用小写</code></pre><h4 id="特殊字符表"><a href="#特殊字符表" class="headerlink" title="特殊字符表"></a>特殊字符表</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/26/%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%A1%A8-1558883012702.png" alt="特殊字符表"></p><h3 id="2-2-标签"><a href="#2-2-标签" class="headerlink" title="2.2 标签"></a>2.2 标签</h3><h4 id="2-2-1-文件标签：构成html最基本的标签"><a href="#2-2-1-文件标签：构成html最基本的标签" class="headerlink" title="2.2.1 文件标签：构成html最基本的标签"></a>2.2.1 文件标签：构成html最基本的标签</h4><table><thead><tr><th>标签类型</th><th>标签名称</th><th>标签作用</th></tr></thead><tbody><tr><td>根标签</td><td><code>html</code></td><td>html文档的根标签</td></tr><tr><td>头标签</td><td><code>head</code></td><td>用于指导html文档的一些属性，引入外部的资源</td></tr><tr><td>标题标签</td><td><code>title</code></td><td>该页面标题</td></tr><tr><td>体标签</td><td><code>body</code></td><td>写主体内容</td></tr><tr><td>注解标签</td><td><code>&lt;!DOCTYPE html&gt;</code></td><td>html5中定义该文档是html文档</td></tr></tbody></table><h4 id="2-2-2-文本标签：和文本有关的标签"><a href="#2-2-2-文本标签：和文本有关的标签" class="headerlink" title="2.2.2 文本标签：和文本有关的标签"></a>2.2.2 文本标签：和文本有关的标签</h4><pre><code class="html">1. 注释：&lt;!-- 注释内容 --&gt;2. &lt;h1&gt; to &lt;h6&gt; ：标题标签3. &lt;p&gt;：段落标签4. &lt;br&gt;：换行标签5. &lt;hr&gt;：水平线    属性：        - color：颜色        - width：宽度        - size：高度        - align：对其方式            1. center：居中            2. left：左对齐            3. right：右对齐6. &lt;b&gt;：字体加粗7. &lt;i&gt;：字体斜体8. &lt;font&gt;：字体标签9. &lt;center&gt;：文本居中    属性：        - color：颜色        - size：大小        - face：字体10. 属性定义：    - color：        1. 可以使用颜色的英文单词：red、green、blue        2. rgb(值1，值2，值3)：值的范围：0~255,。例：rgb(0,0,255)        3. #值1值2值3：值的范围00~FF之间。例：#FF00FF    - width：        1. 数值：width='20'，数值的单位，默认是px(像素)        2. 数值%：占比相对于父元素的比例</code></pre><h4 id="2-2-3-图片标签：img展示图片，属性：src-指定图片的位置"><a href="#2-2-3-图片标签：img展示图片，属性：src-指定图片的位置" class="headerlink" title="2.2.3 图片标签：img展示图片，属性：src(指定图片的位置)"></a>2.2.3 图片标签：<code>img展示图片，属性：src(指定图片的位置)</code></h4><h4 id="2-2-4-列表标签：有序列表-ol，li-和无序列表-ul，li"><a href="#2-2-4-列表标签：有序列表-ol，li-和无序列表-ul，li" class="headerlink" title="2.2.4 列表标签：有序列表(ol，li)和无序列表(ul，li)"></a>2.2.4 列表标签：有序列表<code>(ol，li)</code>和无序列表<code>(ul，li)</code></h4><h4 id="2-2-5-链接标签"><a href="#2-2-5-链接标签" class="headerlink" title="2.2.5 链接标签"></a>2.2.5 链接标签</h4><pre><code class="html">a标签：定义一个超链接    属性：        1. href：指定访问资源的URL        2. target：指定打开资源的方式(_self:默认值，在当前页面打开；_blank:在新页面打开)</code></pre><h4 id="2-2-6-div和span"><a href="#2-2-6-div和span" class="headerlink" title="2.2.6 div和span"></a>2.2.6 div和span</h4><table><thead><tr><th>类型</th><th>标签名称</th><th>作用</th></tr></thead><tbody><tr><td>块级标签</td><td>div</td><td>每一个div占满一整行</td></tr><tr><td>行内标签</td><td>span</td><td>文本信息在一行展示</td></tr></tbody></table><h4 id="2-2-7-语义化标签：html5中为了提高程序的可读性，提供了一些标签。分别是页眉-lt-header-gt-和页脚-lt-footer-gt"><a href="#2-2-7-语义化标签：html5中为了提高程序的可读性，提供了一些标签。分别是页眉-lt-header-gt-和页脚-lt-footer-gt" class="headerlink" title="2.2.7 语义化标签：html5中为了提高程序的可读性，提供了一些标签。分别是页眉<header>和页脚<footer>"></a>2.2.7 语义化标签：html5中为了提高程序的可读性，提供了一些标签。分别是页眉<code>&lt;header&gt;</code>和页脚<code>&lt;footer&gt;</code></h4><h4 id="2-2-8-表格标签"><a href="#2-2-8-表格标签" class="headerlink" title="2.2.8 表格标签"></a>2.2.8 表格标签</h4><table><thead><tr><th>标签名称</th><th>标签作用</th><th>标签属性</th></tr></thead><tbody><tr><td>table</td><td>定义表格</td><td><code>width：宽度、border：边框、cellpadding：定义内容和单元格的距离、cellspacing：定义单元格之间的距离。如为0,则单元格的线会合为一条、bgcolor：背景色、align：对齐方式</code></td></tr><tr><td>tr</td><td>定义行</td><td><code>bgcolor：背景色、align：对齐方式</code></td></tr><tr><td>td</td><td>定义单元格</td><td><code>colspan：合并列、rowspan：合并行</code></td></tr><tr><td><code>&lt;caption&gt;</code></td><td>表格标题</td><td>\</td></tr><tr><td><code>&lt;thead&gt;</code></td><td>表示表格的头部分</td><td>\</td></tr><tr><td><code>&lt;tbody&gt;</code></td><td>表示表格的体部分</td><td>\</td></tr><tr><td><code>&lt;tfoot&gt;</code></td><td>表示表格的脚部分</td><td>\</td></tr></tbody></table><p><strong>演示</strong>：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;表格标签&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border="1" width="50%" cellpadding="0" cellspacing="0" bgcolor="#faebd7" align="center"&gt;        &lt;tr&gt;           &lt;!-- &lt;td&gt;编号&lt;/td&gt;            &lt;td&gt;姓名&lt;/td&gt;            &lt;td&gt;成绩&lt;/td&gt;--&gt;            &lt;th&gt;编号&lt;/th&gt;            &lt;th&gt;姓名&lt;/th&gt;            &lt;th&gt;成绩&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;小龙女&lt;/td&gt;            &lt;td&gt;100&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;杨过&lt;/td&gt;            &lt;td&gt;50&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;hr&gt;    &lt;table border="1" width="50%" cellpadding="0" cellspacing="0" bgcolor="#faebd7" align="center"&gt;        &lt;thead&gt;            &lt;caption&gt;学生信息表&lt;/caption&gt;            &lt;tr&gt;                &lt;!-- &lt;td&gt;编号&lt;/td&gt;                 &lt;td&gt;姓名&lt;/td&gt;                 &lt;td&gt;成绩&lt;/td&gt;--&gt;                &lt;th&gt;编号&lt;/th&gt;                &lt;th&gt;姓名&lt;/th&gt;                &lt;th&gt;成绩&lt;/th&gt;            &lt;/tr&gt;        &lt;/thead&gt;        &lt;tbody&gt;            &lt;tr bgcolor="#7fffd4" align="center"&gt;                &lt;td&gt;1&lt;/td&gt;                &lt;td&gt;小龙女&lt;/td&gt;                &lt;td&gt;100&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;2&lt;/td&gt;                &lt;td&gt;杨过&lt;/td&gt;                &lt;td&gt;50&lt;/td&gt;            &lt;/tr&gt;        &lt;/tbody&gt;        &lt;tfoot&gt;            &lt;tr&gt;                &lt;td&gt;3&lt;/td&gt;                &lt;td&gt;尹志平&lt;/td&gt;                &lt;td&gt;10&lt;/td&gt;            &lt;/tr&gt;        &lt;/tfoot&gt;    &lt;/table&gt;    &lt;hr&gt;    &lt;table border="1" width="50%" cellpadding="0" cellspacing="0" bgcolor="#faebd7" align="center"&gt;        &lt;tr&gt;            &lt;th rowspan="2"&gt;编号&lt;/th&gt;            &lt;th&gt;姓名&lt;/th&gt;            &lt;th&gt;成绩&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;小龙女&lt;/td&gt;            &lt;td&gt;100&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td colspan="2"&gt;杨过&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;hr&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="2-2-9-表单标签"><a href="#2-2-9-表单标签" class="headerlink" title="2.2.9 表单标签"></a>2.2.9 表单标签</h4><p>用于采集用户输入的数据，和服务进行交互</p><ul><li>form：用于定义表单的，可以定义一个范围(代表采集用户数据的范围)，属性如下：<ul><li>action：指定提交数据的URL</li><li>method：指定提交方式。主要使用<code>get</code>和<code>post</code></li></ul></li></ul><blockquote><p>Tips：表单项中的数据要想被提交，必须指定其name属性</p></blockquote><ul><li>表单项标签<code>input</code>。可以通过type属性值，改变元素展示的样式</li></ul><h5 id="type属性："><a href="#type属性：" class="headerlink" title="type属性："></a>type属性：</h5><ol><li>text：文本输入框，可使用<code>placeholder</code>属性，指定输入框的提示信息</li><li>password：密码输入框</li><li>radio：单选框</li><li>checkbox：复选框</li><li>file：文件选择框</li><li>hidden：隐藏域</li><li>submit：提交按钮，可以提交表单</li><li>button：普通按钮</li><li>image：图片提交按钮，src属性指定图片的路径</li></ol><h5 id="label：指定输入项的文字描述信息"><a href="#label：指定输入项的文字描述信息" class="headerlink" title="label：指定输入项的文字描述信息"></a>label：指定输入项的文字描述信息</h5><ul><li>select：下拉列表。子元素：option，指定列表项</li><li>textarea：文本域<ul><li>cols：指定列数，每一行有多少个字符</li><li>rows：默认多少行</li></ul></li></ul><h4 id="2-3-综合案例演示"><a href="#2-3-综合案例演示" class="headerlink" title="2.3 综合案例演示"></a>2.3 综合案例演示</h4><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="zh"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;旅游网&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;!--采用table来完成布局--&gt;    &lt;!--最外层的table，用于整个页面的布局--&gt;    &lt;table width="100%" align="center"&gt;        &lt;!--第1行--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;img src="image/top_banner.jpg" width="100%" alt=""&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第2行--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;table width="100%" align="center"&gt;                    &lt;tr&gt;                        &lt;td&gt;                            &lt;img src="image/logo.jpg" alt=""&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/search.png" alt=""&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/hotel_tel.png" alt=""&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                &lt;/table&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第3行--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;table width="100%" align="center"&gt;                    &lt;tr bgcolor="#ffd700" align="center" heigth="45"&gt;                        &lt;td&gt;                            &lt;a href=""&gt;首页&lt;/a&gt;                        &lt;/td&gt;                        &lt;td&gt;                            门票                        &lt;/td&gt;                        &lt;td&gt;                            酒店                        &lt;/td&gt;                        &lt;td&gt;                            香港车票                        &lt;/td&gt;                        &lt;td&gt;                            出境游                        &lt;/td&gt;                        &lt;td&gt;                            国内游                        &lt;/td&gt;                        &lt;td&gt;                            港澳游                        &lt;/td&gt;                        &lt;td&gt;                            抱团定制                        &lt;/td&gt;                        &lt;td&gt;                            全球自由行                        &lt;/td&gt;                        &lt;td&gt;                            收藏排行榜                        &lt;/td&gt;                    &lt;/tr&gt;                &lt;/table&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第4行--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;img src="image/banner_3.jpg" alt="" width="100%"&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第5行:旅游精选--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;img src="image/icon_5.jpg" alt=""&gt;                旅游精选                &lt;hr color="#ffd700"&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第6行--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;table align="center" width="95%"&gt;                    &lt;tr&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_1.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 899&lt;/font&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_1.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 899&lt;/font&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_1.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 899&lt;/font&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_1.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 899&lt;/font&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                &lt;/table&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第7行：国内游--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;img src="image/icon_6.jpg" alt=""&gt;                国内游                &lt;hr color="#ffd700"&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第8行--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;table align="center" width="95%"&gt;                    &lt;tr&gt;                        &lt;td rowspan="2"&gt;                            &lt;img src="image/guonei_1.jpg" alt=""&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_2.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_2.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_2.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                    &lt;tr&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_2.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_2.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;                        &lt;/td&gt;                        &lt;td&gt;                            &lt;img src="image/jiangxuan_2.jpg" alt=""&gt;                            &lt;p&gt;上海飞三亚5天4晚自由行(春节销售+亲子+蜜月行)&lt;/p&gt;                            &lt;font color="red"&gt;&amp;yen; 699&lt;/font&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                &lt;/table&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第9行:境外游--&gt;        &lt;!--第10行--&gt;        &lt;tr&gt;            &lt;td&gt;                &lt;img src="image/footer_service.png" alt="" width="100%"&gt;            &lt;/td&gt;        &lt;/tr&gt;        &lt;!--第11行--&gt;        &lt;tr&gt;            &lt;td align="center" bgcolor="#ffd700" height="40"&gt;                &lt;font color="gray" size="2"&gt;                    浙江零度科技有限公司                    版权所有 Copyright 2022-2030&amp;copy; All Right Reserved                &lt;/font&gt;            &lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC连接池</title>
      <link href="/2019/05/25/database/jdbc-lian-jie-chi/"/>
      <url>/2019/05/25/database/jdbc-lian-jie-chi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库连接池"><a href="#1-数据库连接池" class="headerlink" title="1. 数据库连接池"></a>1. 数据库连接池</h2><p>其实就是一个容器(集合)，存放数据库连接的容器。当系统初始化好后，容器被创建，容器中会申请一些连接对象。当用户来访问数据库时，从容器中获取连接对象，用户访问完后，会将连接对象归还给容器。</p><a id="more"></a><h3 id="1-1-好处"><a href="#1-1-好处" class="headerlink" title="1.1 好处"></a>1.1 好处</h3><ol><li>节约资源</li><li>用户访问高效</li></ol><h3 id="1-2-实现"><a href="#1-2-实现" class="headerlink" title="1.2 实现"></a>1.2 实现</h3><p>标准接口：<code>DataSource</code> ，<code>javax.sql</code>包下的，主要方法如下：</p><ol><li>获取连接：<code>getConnection()</code></li><li>归还连接：<code>close()</code>。 如果连接对象Connection是从连接池中获取的，那么调用<code>close()</code>方法，则不会关闭连接，而是归还连接。</li></ol><p>一般我们不去实现它，有数据库厂商来实现</p><ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供的</li></ol><h2 id="2-C3P0数据库连接池技术"><a href="#2-C3P0数据库连接池技术" class="headerlink" title="2. C3P0数据库连接池技术"></a>2. C3P0数据库连接池技术</h2><h3 id="2-1-导入Jar包"><a href="#2-1-导入Jar包" class="headerlink" title="2.1 导入Jar包"></a>2.1 导入Jar包</h3><p><a href="https://sourceforge.net/projects/c3p0/" target="_blank" rel="noopener">官方下载地址</a></p><p>下载完后解压，然后导入两个包：<code>c3p0-0.9.5.2.jar</code>和<code>mchange-commons-java-0.2.12.jar</code></p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/25/c3p0-1558796235077.jpg" alt="c3p0"></p><blockquote><p>Notice：不要忘记导入数据库驱动Jar包</p></blockquote><h3 id="2-2-定义配置文件"><a href="#2-2-定义配置文件" class="headerlink" title="2.2 定义配置文件"></a>2.2 定义配置文件</h3><ul><li>名称：<code>c3p0.properties</code>或者<code>c3p0-config.xml</code></li><li>路径：将文件放在src目录下即可。</li></ul><h3 id="2-3-创建核心对象"><a href="#2-3-创建核心对象" class="headerlink" title="2.3 创建核心对象"></a>2.3 创建核心对象</h3><ul><li>数据库连接池对象：<code>ComboPooledDataSource</code></li><li>基本使用如下：</li></ul><pre><code class="java">public class C3P0Demo1 {    public static void main(String[] args) throws SQLException {        // 1. 创建数据库连接池对象        ComboPooledDataSource dataSource = new ComboPooledDataSource();        // 2. 获取一个连接对象        Connection conn = dataSource.getConnection();        // 3. 进行具体操作        System.out.println(conn);    }}</code></pre><h2 id="3-Druid：数据库连接池实现技术"><a href="#3-Druid：数据库连接池实现技术" class="headerlink" title="3. Druid：数据库连接池实现技术"></a>3. Druid：数据库连接池实现技术</h2><h3 id="3-1-使用步骤"><a href="#3-1-使用步骤" class="headerlink" title="3.1 使用步骤"></a>3.1 使用步骤</h3><ol><li>导入jar包：<code>druid-1.0.9.jar</code></li><li>定义配置文件：<code>properties</code>形式的，可以叫任意名称，可以放任意目录下</li><li>加载配置文件：使用<code>Properties</code>对象来加载</li><li>获取数据库连接池对象：通过工厂类<code>DruidDataSourceFactory</code>来获取</li><li>获取连接：<code>getConnection</code></li></ol><h3 id="3-2-基本使用示例"><a href="#3-2-基本使用示例" class="headerlink" title="3.2 基本使用示例"></a>3.2 基本使用示例</h3><pre><code class="java">// Druid演示public class DruidDemo1 {    public static void main(String[] args) throws Exception {        // 1. 定义配置文件        // 2. 加载配置文件        Properties pro = new Properties();        InputStream is = DruidDemo1.class.getClassLoader().getResourceAsStream("druid.properties");        // 3. 获取连接池对象        DataSource ds = DruidDataSourceFactory.createDataSource(pro);        // 4. 获取连接        Connection conn = ds.getConnection();        // 5. 进行具体操作        System.out.println(conn);    }}</code></pre><h3 id="3-3-定义工具类"><a href="#3-3-定义工具类" class="headerlink" title="3.3 定义工具类"></a>3.3 定义工具类</h3><ol><li>定义一个类</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">// Druid连接池的工具类public class DruidUtils {    // 1. 定义成员变量    private static DataSource ds;    // 静态初始化代码块    static{        try {            Properties pro = new Properties();            pro.load(DruidUtils.class.getClassLoader().getResourceAsStream("druid.properties"));            // 获取DataSource对象            ds = DruidDataSourceFactory.createDataSource(pro);        } catch (Exception e) {            e.printStackTrace();        }    }    // 获取连接    public static Connection getConnection() throws SQLException {        return ds.getConnection();    }    // 释放资源    public static void close(Statement stmt,Connection conn){        close(null,stmt,conn);    }    public static void close(ResultSet rs, Statement stmt, Connection conn){        if (rs!=null){            try {                rs.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if (stmt!=null){            try {                stmt.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        if (conn!=null){            try {                conn.close();            } catch (SQLException e) {                e.printStackTrace();            }        }    }    // 获取连接池方法    public static DataSource getDataSource(){        return ds;    }}// 测试工具类// 使用工具类public class DruidDemo2 {    public static void main(String[] args) {        // 完成添加操作，给account表添加一条记录        Connection conn = null;        PreparedStatement pstmt = null;        try {            // 获取连接池对象            conn = DruidUtils.getConnection();            // 定义sql            String sql = "insert into account values(null,?,?)";            // 获取执行sql对象            pstmt = conn.prepareStatement(sql);            // 给？赋值            pstmt.setString(1,"小六");            pstmt.setDouble(2,2699);            // 执行sql            int count = pstmt.executeUpdate();            System.out.println(count);        } catch (SQLException e) {            e.printStackTrace();        }finally {            DruidUtils.close(pstmt,conn);        }    }}</code></pre><h2 id="4-Spring-JDBC"><a href="#4-Spring-JDBC" class="headerlink" title="4. Spring JDBC"></a>4. Spring JDBC</h2><p>是Spring框架对JDBC的简单封装，提供了一个JDBCTemplate对象简化JDBC的开发</p><h3 id="4-1-使用步骤"><a href="#4-1-使用步骤" class="headerlink" title="4.1 使用步骤"></a>4.1 使用步骤</h3><ol><li>导入Jar包</li><li>创建<code>JDBCTemplate</code>对象，该对象依赖于数据源<code>DataSource</code>，例：<code>JdbcTemplate template = new JdbcTemplate(ds);</code></li><li>调用<code>JDBCTemaplate</code>的方法来完成CRUD的操作</li></ol><p><strong>常用方法</strong>：</p><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td><code>update()</code></td><td>执行DML语句。增、删、改语句</td></tr><tr><td><code>queryForMap()</code></td><td>查询结果，将结果集封装为Map集合。列名作key，值作value，将这条记录封装为一个Map集合返回。注：该方法查询结果集长度只能是1</td></tr><tr><td><code>queryForList()</code></td><td>查询结果，将结果集封装为List集合。将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</td></tr><tr><td><code>queryForObject()</code></td><td>查询结果，将结果封装为对象。一般用于聚合函数的查询</td></tr><tr><td><code>query()</code></td><td>查询结果，将结果封装为JavaBean对象。一般我们使用<code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code>来完成数据到JavaBean的自动封装。</td></tr></tbody></table><h3 id="4-2-使用示例"><a href="#4-2-使用示例" class="headerlink" title="4.2 使用示例"></a>4.2 使用示例</h3><pre><code class="java">// jdbcTemplate基础入门public class JDBCTemplateDemo1 {    public static void main(String[] args) {        // 创建jdbcTemplate对象        JdbcTemplate jt = new JdbcTemplate(DruidUtils.getDataSource());        // 调用方法        String sql = "update account set balance=3000 where id=?";        int count = jt.update(sql, 6); // 返回值是影响的行数        System.out.println(count); // 1    }}</code></pre><h3 id="4-3-练习"><a href="#4-3-练习" class="headerlink" title="4.3 练习"></a>4.3 练习</h3><ol><li>修改6号数据的salary为10000</li><li>添加一条记录</li><li>删除刚刚添加的记录</li><li>查询id为8的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合</li><li>查询总记录数</li></ol><pre><code class="java">public class Exercise {        // 获取JdbcTemplate对象        // 使用Junit单元测试，让方法单独执行        private JdbcTemplate jt = new JdbcTemplate(DruidUtils.getDataSource());        // 编写sql语句并执行        @Test        public void test1(){            // 1. 修改6号数据的salary为10000            String update = "update staff set salary=10000 where id=?";            jt.update(update,6);        }        @Test        public void test2(){            // 2. 添加一条记录,字段分别为id，name，性别，工资，入职时间，部门id            jt.update("insert into staff(id,name,salary) values(?,?,?)",13,"冬兵",7889);        }        @Test        public void test3(){            // 3. 删除刚刚添加的记录            jt.update("delete from staff where name=?","冬兵");        }        @Test        public void test4(){            // 4. 查询id为8的记录，将其封装为Map集合            // 注意：这个方法查询的结果集只能是1            Map&lt;String, Object&gt; stringObjectMap = jt.queryForMap("select * from staff where id=?", 8);            System.out.println(stringObjectMap); // {id=8, name=美队, gender=男, salary=8000.0, join_date=2008-08-08, dept_id=2}        }        @Test        public void test5(){            // 5. 查询所有记录，将其封装为List            List&lt;Map&lt;String, Object&gt;&gt; maplist = jt.queryForList("select * from staff");            for (Map&lt;String, Object&gt; stringObjectMap : maplist) {                System.out.println(stringObjectMap);            }        }        @Test        public void test6(){            // 6. 查询所有记录，将其封装为Emp对象的List集合，自己完成实现类            String sql = "select * from staff";            List&lt;Emp&gt; list = jt.query(sql, new RowMapper&lt;Emp&gt;() {                @Override                public Emp mapRow(ResultSet rs, int i) throws SQLException {                    Emp emp = new Emp();                    int id = rs.getInt("id");                    String name = rs.getString("name");                    String gender = rs.getString("gender");                    double salary = rs.getDouble("salary");                    Date join_date = rs.getDate("join_date");                    int dept_id = rs.getInt("dept_id");                    emp.setId(id);                    emp.setName(name);                    emp.setGender(gender);                    emp.setSalary(salary);                    emp.setJoin_date(join_date);                    emp.setDept_id(dept_id);                    return emp;                }            });            for (Emp emp : list) {                System.out.println(emp);            }        }        @Test        public void test6_2() {            // 6. 查询所有记录，将其封装为Emp对象的List集合,使用jdbc提供的实现类来完成            String sql = "select * from staff";            List&lt;Emp&gt; list = jt.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));            for (Emp emp : list) {                System.out.println(emp);            }            /*            Failed to convert property value of type 'null' to required type 'int' for property 'dept_id'            需要将Emp类中变量改为为引用数据类型,然后重新生成方法             */        }        @Test        public void test7(){            // 7. 查询总记录数            String sql = "select count(id) from staff";            Long count = jt.queryForObject(sql, Long.class);            System.out.println(count);        }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2019/05/24/database/jdbc/"/>
      <url>/2019/05/24/database/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1. JDBC"></a>1. JDBC</h2><p>Java数据库连接(Java DataBase Connectivity)，简称JDBC。是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组Java语言编写的类好接口组成。</p><a id="more"></a><h3 id="1-1-客户端操作MySQL数据库的方式"><a href="#1-1-客户端操作MySQL数据库的方式" class="headerlink" title="1.1 客户端操作MySQL数据库的方式"></a>1.1 客户端操作MySQL数据库的方式</h3><ol><li>使用第三方客户端访问：SQLyog、Navicat、SQLWave、MyDB Studio等等</li><li>使用MySQL自带的命令行方式</li><li>通过Java API来访问MySQL数据库</li></ol><h3 id="1-2-什么是JDBC"><a href="#1-2-什么是JDBC" class="headerlink" title="1.2 什么是JDBC"></a>1.2 什么是JDBC</h3><p><strong>JDBC本质</strong>：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p><ul><li>使用JDBC的好处<ul><li>如果要开发访问数据库的程序，只需会调用JDBC接口中的方法即可，不用关注类具体实现</li><li>使用同一套Java代码，进行少量的修改就可以访问其他JDBC支持的数据库了</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/25/JDBC-1558754492770.jpg" alt="JDBC"></p><h3 id="1-3-使用JDBC开发使用到的包"><a href="#1-3-使用JDBC开发使用到的包" class="headerlink" title="1.3 使用JDBC开发使用到的包"></a>1.3 使用JDBC开发使用到的包</h3><table><thead><tr><th>使用的包</th><th>说明</th></tr></thead><tbody><tr><td>java.sql</td><td>所有与JDBC访问数据库相关的接口和类</td></tr><tr><td>javax.sql</td><td>数据库扩展包，提供数据库额外的功能。如连接池</td></tr><tr><td>数据库的驱动</td><td>由各大数据库厂商提供，需要额外去下载，是对JDBC接口实现的类</td></tr></tbody></table><h3 id="1-4-JDBC的核心API"><a href="#1-4-JDBC的核心API" class="headerlink" title="1.4 JDBC的核心API"></a>1.4 JDBC的核心API</h3><table><thead><tr><th>接口或类</th><th>作用</th></tr></thead><tbody><tr><td>DriverManager类</td><td>1. 管理和注册数据库驱动；2. 得到数据库连接对象</td></tr><tr><td>Connection接口</td><td>一个连接对象，可用于创建Statement和PreparedStatement对象</td></tr><tr><td>Statement接口</td><td>一个SQL语句对象，用于将SQL语句发送给数据库服务器</td></tr><tr><td>PrepareStatement接口</td><td>一个SQL语句对象，是Statement的子接口</td></tr><tr><td>ResultSet接口</td><td>用于封装数据库查询的结果集，返回给客户端Java程序</td></tr></tbody></table><h3 id="1-5-导入驱动Jar包"><a href="#1-5-导入驱动Jar包" class="headerlink" title="1.5 导入驱动Jar包"></a>1.5 导入驱动Jar包</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/25/1558669057920-1558754599644.png" alt="import_Jar"></p><h3 id="1-6-加载和注册驱动"><a href="#1-6-加载和注册驱动" class="headerlink" title="1.6 加载和注册驱动"></a>1.6 加载和注册驱动</h3><table><thead><tr><th>加载和注册驱动的方法</th><th>描述</th></tr></thead><tbody><tr><td>Class.forName(数据库驱动实现类)</td><td>加载和注册数据库驱动，数据库驱动由mysql厂商提供：”com.mysql.jdbc.Driver”</td></tr></tbody></table><blockquote><p>从JDBC3开始，弃用了驱动类“com.mysql.jdbc.Driver”，新的驱动程序类是“com.mysql.cj.jdbc.Driver”。驱动程序是通过SPI自动注册的，通常不需要手动加载驱动程序类。</p></blockquote><h2 id="2-DriverManager类"><a href="#2-DriverManager类" class="headerlink" title="2. DriverManager类"></a>2. DriverManager类</h2><p>驱动管理对象类，该类的作用是管理和注册驱动，以及创建数据库的连接。</p><blockquote><p>注：mysql5之后的驱动jar包可以省略注册驱动的步骤。</p></blockquote><h3 id="2-1-获取数据库连接"><a href="#2-1-获取数据库连接" class="headerlink" title="2.1 获取数据库连接"></a>2.1 获取数据库连接</h3><ul><li><code>Connection getConnection(String url,String user,String password)</code>：通过连接字符串，用户名，密码来得到数据库的连接对象</li><li><p><code>Connection getConnection(String url,Properties info)</code>：通过连接字符串，属性对象来得到连接对象</p></li><li><p><strong>参数说明</strong>：</p></li></ul><table><thead><tr><th>参数列表</th><th>说明</th></tr></thead><tbody><tr><td>用户名</td><td>登录的用户名</td></tr><tr><td>密码</td><td>登录的密码</td></tr><tr><td>连接字符串URL</td><td>不同的数据库URL是不同的，MySQL的写法：jdbc:mysql://localhost:3306/数据库名[?参数名=参数值]</td></tr><tr><td>驱动类的字符串名</td><td>com.mysql.cj.jdbc.Driver</td></tr></tbody></table><ul><li><strong>连接数据库URL地址格式</strong>：<code>协议名:子协议://服务器名或IP地址:端口号/数据库名?参数=参数值&amp;参数2=值2</code></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/25/DBURL-1558754637745.jpg" alt="DBURL"></p><blockquote><p>在本地服务器的情况下：MySQL中可简写为<code>jdbc:mysql:///数据库名</code></p></blockquote><ul><li><strong>乱码问题处理</strong></li></ul><p>如果数据库出现乱码，可以指定参数：<code>?characterEncoding=utf8</code>，表示让数据库以UTF-8编码来处理数据。</p><h3 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2 快速入门"></a>2.2 快速入门</h3><ol><li>使用用户名、密码、URL来得到连接对象<pre><code class="java">public class Demo01JDBC { public static void main(String[] args) throws Exception{     // 1. 导入jar驱动包     // 2.注册驱动     Class.forName("com.mysql.cj.jdbc.Driver"); // com.mysql.jdbc.Driver已弃用，且该语句jdbc3后可省略     // 3. 使用用户名密码来获取数据库连接对象     Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db1?serverTimezone=UTC", "root", "123456");     // 4. 定义sql语句     String sql = "update account set balance=1000 where id=1";     // 5. 获取执行sql语句的对象     Statement stat = conn.createStatement();     // 6. 执行sql语句     int count = stat.executeUpdate(sql);     // 7. 处理结果     System.out.println(count);     // 8. 释放资源     stat.close();     conn.close(); }}</code></pre></li></ol><blockquote><p>从JDBC3开始，弃用了驱动类“com.mysql.jdbc.Driver”，新的驱动程序类是“com.mysql.cj.jdbc.Driver”。驱动程序是通过SPI自动注册的，通常不需要手动加载驱动程序类。</p></blockquote><ol start="2"><li>使用属性文件和URL得到连接对象<br><code>`</code>java<br>public class Demo02JDBC {<br> public static void main(String[] args) throws SQLException {<pre><code> // 1. 定义URL连接字符串 String url = "jdbc:mysql:///db1?serverTimezone=UTC"; // 本地服务器且端口号3306.故省略 // 2. 创建属性对象 Properties info = new Properties(); // 3. 将用户名和密码放入info对象中 info.setProperty("user","root"); info.setProperty("password","123456"); // 4. 通过属性文件来获取数据库连接对象 Connection conn = DriverManager.getConnection(url, info); System.out.println(conn); // com.mysql.cj.jdbc.ConnectionImpl@51cdd8a：获取的是连接对象的内存地址值</code></pre> }<br>}</li></ol><pre><code>## 3. Connection接口Connection 接口，具体的实现类由数据库的厂商实现，代表一个连接对象。### 3.1 主要方法- 获取执行sql的对象：  - `Statement createStatement(String sql)`  - `PreparedStatement preparedStatement(String sql)`- 管理事务：  - 开启事务：`setAutoCommit(boolean autoCommit)`:调用该方法设置参数为fasle，即开启事务  - 提交事务：`commit()`  - 回滚事务：`rollback()`## 4. Statement接口用于执行静态SQL语句并返回其生成的结果对象### 4.1 主要方法1. `boolean execute(String sql)`：可以执行任意的sql2. `int executeUpdate(String sql)`：执行DML(insert、update、delete)语句、DDL(create、alter、drop)语句。返回值：**影响的行数**，可以通过判断行数来确定语句是否执行成功。3. `ResultSet executeQuery(String sql)`：执行DQL(select)语句。返回结果集对象### 4.2 演示案例1. account表中添加一条记录，使用insert语句```javapublic class Demo03JDBC {    public static void main(String[] args) {        Statement stmt = null;        Connection conn = null;        try {            // 1. 注册驱动            Class.forName("com.mysql.cj.jdbc.Driver");            // 2. 定义sql            String sql = "insert into account values(null,'小王',3000)";            // 3. 获取连接数据库对象            conn = DriverManager.getConnection("jdbc:mysql:///db1?serverTimezone=UTC&amp;characterEncoding=gbk", "root", "123456");            // 4. 获取执行sql的对象 Statement，并传入sql语句执行            stmt = conn.createStatement();            int count = stmt.executeUpdate(sql); // 返回值影响的行数            // 5. 处理结果            if (count&gt;0)                System.out.println("添加成功");            else                System.out.println("添加失败");        } catch (Exception e) {            e.printStackTrace();        }finally {            //stmt.close();            // 避免空指针异常            if(stmt!=null &amp;&amp; conn!=null){                try {                    stmt.close();                    conn.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><ol start="2"><li><p>修改一条表记录</p><pre><code class="java">// 只需在上述代码基础上改动sql语句即可String sql = "update account set balance=2000 where name='小王'";     conn = DriverManager.getConnection("jdbc:mysql:///db1?serverTimezone=UTC&amp;characterEncoding=gbk", "root", "123456");stmt = conn.createStatement();int count = stmt.executeUpdate(sql); // 返回值影响的行数if (count&gt;0) System.out.println("修改成功");else System.out.println("修改失败");</code></pre></li><li><p>删除一条表记录</p><pre><code class="java">// 改动sql语句即可public class DelJDBC { public static void main(String[] args) {     Connection conn = null;     Statement stmt = null;     try {         Class.forName("com.mysql.cj.jdbc.Driver");         conn = DriverManager.getConnection("jdbc:mysql:///db1?serverTimezone=UTC","root","123456");         stmt = conn.createStatement();         int count = stmt.executeUpdate("delete from account where id=3");         if (count&gt;0)             System.out.println("delete success!");         else             System.out.println("delete failed!");     } catch (Exception e) {         e.printStackTrace();     }finally {         if (stmt!=null &amp;&amp; conn!=null) {             try {                 stmt.close();                 conn.close();             } catch (SQLException e) {                 e.printStackTrace();             }         }     } }}</code></pre></li></ol><h2 id="5-ResultSet接口"><a href="#5-ResultSet接口" class="headerlink" title="5. ResultSet接口"></a>5. ResultSet接口</h2><p>结果集对象，封装查询的结果</p><h3 id="5-1-主要方法"><a href="#5-1-主要方法" class="headerlink" title="5.1 主要方法"></a>5.1 主要方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>boolean next()</code></td><td>游标向下移动1行，返回布尔类型，如果还有下一条记录返回true，反之false</td></tr><tr><td><code>数据类型 getXxx()</code></td><td>通过字段名或是列编号，填入参数String或是整数(1开始)，返回不同的类型。</td></tr></tbody></table><p><strong>常用数据类型转换表</strong></p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/25/jdbc_sql-1558754667060.jpg" alt="jdbc_sql"></p><h3 id="5-2-方法演示"><a href="#5-2-方法演示" class="headerlink" title="5.2 方法演示"></a>5.2 方法演示</h3><pre><code class="java">public class DQLJDBC {    public static void main(String[] args) {        ResultSet rs = null;        Connection conn = null;        Statement stmt = null;        try {            Class.forName("com.mysql.cj.jdbc.Driver");            conn = DriverManager.getConnection("jdbc:mysql:///db1?serverTimezone=UTC","root","123456");            stmt = conn.createStatement();            rs = stmt.executeQuery("select * from account");            // 处理结果            while (rs.next()){ // 循环判断游标是否是最后一行末尾                int id = rs.getInt(1); // 通过列编号获取数据                String name = rs.getString("name"); // 通过列名获取                double balance = rs.getDouble(3); // 通过列编号获取                System.out.println(id+","+name+","+balance);            }        } catch (Exception e) {            e.printStackTrace();        }finally {            if (rs!=null){                try {                    rs.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }            if (stmt!=null){                try {                    stmt.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }if (conn!=null){                try {                    conn.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><h3 id="5-3-练习"><a href="#5-3-练习" class="headerlink" title="5.3 练习"></a>5.3 练习</h3><ul><li>定义一个方法：查询users表的数据将其封装为对象，然后装载集合，返回。</li></ul><pre><code class="java">// 定义存储数据的类public class Users {    private int id;    private String name;    private int age;    private String site;    // 省略构造方法等}// 定义方法类，实现方法public class Demo5JDBC {    public static void main(String[] args) {        List&lt;Users&gt; list = new Demo5JDBC().findAll();        System.out.println(list);    }    // 创建方法，查询所有users对象，返回一个list    public List&lt;Users&gt; findAll(){        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        List&lt;Users&gt; list = null;        try {            // 1. 注册驱动            Class.forName("com.mysql.cj.jdbc.Driver");            // 2. 获取连接            conn = DriverManager.getConnection("jdbc:mysql:///db5?serverTimezone=UTC", "root", "123456");            // 3. 获取执行sql对象            stmt = conn.createStatement();            // 4. 执行sql            rs = stmt.executeQuery("select * from users");            // 5. 遍历结果集，封装对象，装载集合            Users us = null;            list = new ArrayList&lt;&gt;();            while (rs.next()){                // 获取数据                int id = rs.getInt("id");                String name = rs.getString("name");                int age = rs.getInt("age");                String site = rs.getString(4);                // 创建users对象,并赋值                us = new Users();                us.setId(id);                us.setName(name);                us.setAge(age);                us.setSite(site);                // 装载集合                list.add(us);            }        } catch (Exception e) {            e.printStackTrace();        }finally {            // 释放资源，rs，stmt和conn            if (rs!=null){                try {                    rs.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }            // 省略其他两个，与上方法一样        }        return list;    }}</code></pre><h2 id="6-自定义数据库工具类JdbcUtils"><a href="#6-自定义数据库工具类JdbcUtils" class="headerlink" title="6. 自定义数据库工具类JdbcUtils"></a>6. 自定义数据库工具类JdbcUtils</h2><p>可以把经常用到的功能做成一个工具类，在不同的地方重用。</p><h3 id="6-1-主要方法"><a href="#6-1-主要方法" class="headerlink" title="6.1 主要方法"></a>6.1 主要方法</h3><ol><li>可以把几个字符串定义成常量：用户名，密码，URL，驱动类</li><li>得到数据库的连接：<code>getConnection()</code></li><li>关闭所有打开的资源：<code>close(Connection conn,Statement stmt,ResultSet rs)</code> 和<code>close(ResultSet rs,Statement stmt, Connection conn)</code></li></ol><h4 id="6-2-使用工具类将上一个练习优化"><a href="#6-2-使用工具类将上一个练习优化" class="headerlink" title="6.2 使用工具类将上一个练习优化"></a>6.2 使用工具类将上一个练习优化</h4><ol><li><p>定义工具类<br>在项目目录下新建一个<code>util</code>文件夹，然后新建<code>JDBCUtils.java</code>文件，编写如下内容。<br><code>`</code>java<br>// JDBC工具类<br>public class JDBCUtils {<br> private static String url;<br> private static String user;<br> private static String password;<br> private static String driver;</p><p> // 文件的读取，只需读取一次即可拿到这些值：使用静态代码块<br> static {</p><pre><code> // 读取资源文件，获取配置值 try {     // 1. 创建Properties集合类     Properties pro = new Properties();     // 获取src路径下的文件的方式--&gt;ClassLoader 类加载器,如此就可以动态的获取src的绝对路径     ClassLoader classLoader = JDBCUtils.class.getClassLoader();     URL resource = classLoader.getResource("jdbc.properties");     String path = resource.getPath();     System.out.println(path);     // 2. 加载文件</code></pre><p>//            pro.load(new FileReader(“src/jdbc.properties”));</p><pre><code>     pro.load(new FileReader(path));     // 3. 获取属性，赋值     url = pro.getProperty("url");     user = pro.getProperty("user");     password = pro.getProperty("password");     driver = pro.getProperty("driver");     // 4. 注册驱动     Class.forName(driver); } catch (IOException e) {     e.printStackTrace(); } catch (ClassNotFoundException e) {     e.printStackTrace(); }</code></pre><p> }<br> // 获取连接<br> public static Connection getConnection() throws SQLException {</p><pre><code> return DriverManager.getConnection(url,user,password);</code></pre><p> }<br> // 释放资源<br> public static void close(Statement stmt, Connection conn){</p><pre><code> if (stmt!=null){     try {         stmt.close();     } catch (SQLException e) {         e.printStackTrace();     } } if (conn!=null){     try {         conn.close();     } catch (SQLException e) {         e.printStackTrace();     } }</code></pre><p> }<br> // 释放资源重载<br> public static void close(ResultSet rs,Statement stmt, Connection conn){</p><pre><code> if (rs!=null){     try {         rs.close();     } catch (SQLException e) {         e.printStackTrace();     } } if (stmt!=null){     try {         stmt.close();     } catch (SQLException e) {         e.printStackTrace();     } } if (conn!=null){     try {         conn.close();     } catch (SQLException e) {         e.printStackTrace();     } }</code></pre><p> }<br>}</p></li></ol><pre><code>2. 定义配置文件在项目源文件src下新建`jdbc.properties`文件。```propertiesurl=jdbc:mysql:///db5?serverTimezone=UTC&amp;characterEncoding=gbkuser=rootpassword=123456driver=com.mysql.cj.jdbc.Driver</code></pre><ol start="3"><li><p>演示用法</p><pre><code class="java">public class Demo6JDBCUtil { public static void main(String[] args) {     List&lt;Users&gt; list = new Demo6JDBCUtil().findAll2();     System.out.println(list); } /**  * 演示JDBC工具类  * @return  */ public List&lt;Users&gt; findAll2(){     Connection conn = null;     Statement stmt = null;     ResultSet rs = null;     List&lt;Users&gt; list = null;     try {//            // 1. 注册驱动//            Class.forName("com.mysql.cj.jdbc.Driver");//            // 2. 获取连接//            conn = DriverManager.getConnection("jdbc:mysql:///db5?serverTimezone=UTC", "root", "123456");         conn = JDBCUtils.getConnection();         // 3. 获取执行sql对象         stmt = conn.createStatement();         // 4. 执行sql         rs = stmt.executeQuery("select * from users");         // 5. 遍历结果集，封装对象，装载集合         Users us = null;         list = new ArrayList&lt;&gt;();         while (rs.next()){             // 获取数据             int id = rs.getInt("id");             String name = rs.getString("name");             int age = rs.getInt("age");             String site = rs.getString(4);             // 创建users对象,并赋值             us = new Users();             us.setId(id);             us.setName(name);             us.setAge(age);             us.setSite(site);             // 装载集合             list.add(us);         }     } catch (Exception e) {         e.printStackTrace();     }finally {         JDBCUtils.close(rs,stmt,conn); // 直接调用方法就可以释放资源     }     return list; }}</code></pre></li></ol><h3 id="6-3-练习：登录案例"><a href="#6-3-练习：登录案例" class="headerlink" title="6.3 练习：登录案例"></a>6.3 练习：登录案例</h3><ol><li>创建用户表</li><li>获取用户输入</li><li>查询数据库，与数据库中数据进行匹配</li><li>返回结果</li></ol><pre><code class="java">public class LoginExercise {    public static void main(String[] args) {        // 获取用户输入        Scanner sc = new Scanner(System.in);        System.out.print("请输入用户名：");        String name = sc.nextLine();        System.out.print("请输入密码：");        String pwd = sc.nextLine();        if (name==null || pwd==null)            System.out.println("输入内容不能为空");        login(name,pwd);        sc.close();    }    public static void login(String name,String pwd){        Connection conn = null;        Statement stmt = null;        ResultSet rs = null;        try {            // 连接数据库，判断是否存在数据            conn = JDBCUtils.getConnection();            stmt = conn.createStatement();            rs = stmt.executeQuery("select * from users where name='"+name+"' and pwd='"+pwd+"'");            if (rs.next()) // 返回布尔值，true则存在，false则不存在                System.out.println("登录成功");            else                System.out.println("用户名或密码错误！");        } catch (Exception e) {            e.printStackTrace();        }finally {            JDBCUtils.close(rs,stmt,conn);        }    }}</code></pre><h2 id="7-PreparedStatement接口"><a href="#7-PreparedStatement接口" class="headerlink" title="7. PreparedStatement接口"></a>7. PreparedStatement接口</h2><p>表示预编译的 SQL 语句的对象。 SQL 语句被预编译并存储在 <code>PreparedStatement</code> 对象中。然后可以使用此对象多次高效地执行该语句。  </p><h3 id="7-1-SQL注入问题"><a href="#7-1-SQL注入问题" class="headerlink" title="7.1 SQL注入问题"></a>7.1 SQL注入问题</h3><p>在拼接sql时，如果有一些sql的特殊关键字参与字符串的拼接，会造成安全性问题。</p><ul><li>输入密码时，如果输入以下密码，在账户和密码不正确情况下也登录成功</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/25/SQLInject-1558754766512.jpg" alt="SQLInject"></p><ul><li>原因</li></ul><p>打印了一下查询的SQL语句：<code>select * from user where name='ehwqhwqek' and pwd='a' or '1'='1';</code>发现当and前面为假，但是or后面为真，语句实际相当于：<code>select * from user where true;</code>查询了所有记录</p><p>要解决 SQL 注入就不能让用户输入的密码和我们的 SQL 语句进行简单的字符串拼接。</p><h3 id="7-2-解决SQL注入问题"><a href="#7-2-解决SQL注入问题" class="headerlink" title="7.2 解决SQL注入问题"></a>7.2 解决SQL注入问题</h3><p>使用<code>PreparedStatement</code>对象来解决该问题</p><ul><li>预编译的SQL：参数使用?作为占位符,例：<code>select * from users where name = ? and pwd = ?</code></li><li>给？赋值方法：<code>setXxx(?的位置编号(1开始),?的值)</code></li></ul><h4 id="7-2-1-方法演示"><a href="#7-2-1-方法演示" class="headerlink" title="7.2.1 方法演示"></a>7.2.1 方法演示</h4><pre><code class="java">// 使用prepardStatement对象解决sql注入问题public class LoginExercise2 {    public static void main(String[] args) {        // 获取用户输入        Scanner sc = new Scanner(System.in);        System.out.print("请输入用户名：");        String name = sc.nextLine();        System.out.print("请输入密码：");        String pwd = sc.nextLine();        if (name==null || pwd==null)            System.out.println("输入内容不能为空");        login(name,pwd);        sc.close();    }    /*        登录方法，使用PreparedStatement实现     */    public static void login(String name,String pwd){        Connection conn = null;        PreparedStatement ps = null;        ResultSet rs = null;        try {            // 连接数据库，判断是否存在数据            conn = JDBCUtils.getConnection();            // 定义sql语句            String sql = "select * from users where name = ? and pwd = ?";            // 获取执行sql对象            ps = conn.prepareStatement(sql); // 将sql传入，进行预编译            // 给？赋值            ps.setString(1,name);            ps.setString(2,pwd);            rs = ps.executeQuery();            if (rs.next()) // 返回布尔值，true则存在，false则不存在                System.out.println("登录成功");            else                System.out.println("用户名或密码错误！");        } catch (Exception e) {            e.printStackTrace();        }finally {            JDBCUtils.close(rs,ps,conn);        }    }}</code></pre><h3 id="7-3-PreparedStatement原理"><a href="#7-3-PreparedStatement原理" class="headerlink" title="7.3 PreparedStatement原理"></a>7.3 PreparedStatement原理</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/25/PStheory-1558754821161.jpg" alt="PStheory"></p><h4 id="7-3-1-优点"><a href="#7-3-1-优点" class="headerlink" title="7.3.1  优点"></a>7.3.1  优点</h4><ol><li><code>prepareStatement()</code>会先将 SQL 语句发送给数据库预编译。<code>PreparedStatement</code> 会引用着预编译后的结果。可以多次传入不同的参数给 <code>PreparedStatement</code> 对象并执行。减少 SQL 编译次数，提高效率。</li><li>安全性更高，没有SQL输入的隐患</li><li>提高了程序的可读性</li></ol><p>后期都会使用<code>PreparedStatement</code>来完成增删改查的所有操作</p><h2 id="8-JDBC的事务操作"><a href="#8-JDBC的事务操作" class="headerlink" title="8. JDBC的事务操作"></a>8. JDBC的事务操作</h2><ul><li><p>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p></li><li><p>使用<code>Connection</code>对象来管理事务</p><ul><li>开启事务：<code>setAutoCommit(boolean autoCommit)</code>:调用该方法设置参数为fasle，即开启事务</li><li>提交事务：<code>commit()</code></li><li>回滚事务：<code>rollback()</code></li></ul></li></ul><h3 id="8-1-银行转账案例"><a href="#8-1-银行转账案例" class="headerlink" title="8.1 银行转账案例"></a>8.1 银行转账案例</h3><p>步骤分析：</p><ol><li>获取连接</li><li>开启事务</li><li>获取到PreparedStatement</li><li>使用PreparedStatement执行两次更新操作</li><li>正常情况下提交事务</li><li>出现异常回滚事务</li><li>释放资源</li></ol><pre><code class="java">public class EFT {    public static void main(String[] args) {        Connection conn = null;        PreparedStatement ps1 = null;        PreparedStatement ps2 = null;        try {            // 1. 获取连接            conn = JDBCUtils.getConnection();            conn.setAutoCommit(false); // 将自动提交关闭，即开启事务            //  定义sql，小张-500            String sql1 = "update account set balance = balance - ? where name = ?";            // 小李+500            String sql2 = "update account set balance = balance + ? where name = ?";            // 获取执行sql对象            ps1 = conn.prepareStatement(sql1);            ps2 = conn.prepareStatement(sql2);            // 给?赋值,小张-500            ps1.setDouble(1,500);            ps1.setString(2,"小张");            ps1.executeUpdate(); // 执行更新语句            // 给?赋值,小李+500            ps2.setDouble(1,500);            ps2.setString(2,"小李");            ps2.executeUpdate(); // 执行更新语句            // 手动制造一个异常            int i = 3/0;            // 提交事务            conn.commit();            System.out.println("事务执行完毕");        } catch (Exception e) {            // 事务的回滚            try {                if (conn != null)                    System.out.println("事务异常！回滚中....");                    conn.rollback();            } catch (SQLException ex) {                ex.printStackTrace();            }            e.printStackTrace();        }finally {            // 释放资源            JDBCUtils.close(ps1,conn);            if (ps2!=null){                try {                    ps2.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><ul><li style="list-style: none"><input type="checkbox" checked=""> 能够理解JDBC的概念</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用DriverManager类</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Connection接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Statement接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用ResultSet接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够说出SQL注入原因和解决方案</li><li style="list-style: none"><input type="checkbox" checked=""> 能够通过PreparedStatement完成增、删、改、查</li><li style="list-style: none"><input type="checkbox" checked=""> 能够完成PreparedStatement改造登录案例</li><li style="list-style: none"><input type="checkbox" checked=""> 能够完成JDBC事务操作</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL多表查询和事务</title>
      <link href="/2019/05/23/database/mysql-duo-biao-cha-xun-he-shi-wu/"/>
      <url>/2019/05/23/database/mysql-duo-biao-cha-xun-he-shi-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL多表查询"><a href="#1-MySQL多表查询" class="headerlink" title="1. MySQL多表查询"></a>1. MySQL多表查询</h2><p>当我们需要查询的数据在多张表时，就需要连接多张表查询，这就是多表查询。</p><a id="more"></a><h3 id="1-1-表连接查询"><a href="#1-1-表连接查询" class="headerlink" title="1.1 表连接查询"></a>1.1 表连接查询</h3><ul><li>数据准备</li></ul><pre><code class="sql">CREATE DATABASE IF NOT EXISTS `db5` CHARACTER SET gbk;-- 创建部门表CREATE TABLE dept(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(50));INSERT INTO dept(NAME) VALUES('开发部'),('市场部'),('财务部');-- 创建员工表CREATE TABLE staff(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(30),gender CHAR(1), -- 性别salary DOUBLE, -- 工资join_date DATE, -- 入职日期dept_id INT,FOREIGN KEY(dept_id) REFERENCES dept(id) -- 外键);INSERT INTO staff(NAME,gender,salary,join_date,dept_id) VALUES('孙悟空','男',7200,'2013-02-24',1),('猪八戒','男',3600,'2010-12-02',2),('唐僧','男',9000,'2008-08-08',2),('白骨精','女',5000,'2015-10-07',3),('蜘蛛精','女',4500,'2011-03-14',1);</code></pre><ul><li>多表查询的作用</li></ul><p>如果想查询孙悟空的名字和他所在的部门名字，就需要使用多表查询。</p><ul><li>多表查询的分类<ul><li>内连接：隐式内连接和显示内连接</li><li>外连接：左外连接和右外连接</li></ul></li></ul><h3 id="1-2-笛卡尔积现象"><a href="#1-2-笛卡尔积现象" class="headerlink" title="1.2 笛卡尔积现象"></a>1.2 笛卡尔积现象</h3><ul><li>笛卡尔积：有两个集合A、B，取这两个集合中元素的所有组成情况。</li></ul><p>使用<code>select * from staff,dept;</code>就会出现该现象</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/22/CartesianProduct-1558535089208.jpg" alt="title"></p><ul><li>如何消除笛卡尔积现象的影响</li></ul><p>查询结果中不是所有的数据组合都是有用的，只有<strong>员工表.dept_id=部门表.id</strong>的数据才是有用的。所有需要通过设置条件过滤掉无用数据。</p><pre><code class="sql">SELECT * FROM staff,dept WHERE staff.`dept_id`=dept.`id`;-- 查询员工和部门的名字SELECT staff.`name`,dept.`name` FROM staff,dept WHERE staff.`dept_id`=dept.`id`;</code></pre><h3 id="1-3-内连接"><a href="#1-3-内连接" class="headerlink" title="1.3 内连接"></a>1.3 内连接</h3><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示。如：<strong>从表.外键=主表.主键</strong></p><h4 id="1-3-1-隐式内连接"><a href="#1-3-1-隐式内连接" class="headerlink" title="1.3.1 隐式内连接"></a>1.3.1 隐式内连接</h4><ul><li>隐式内连接：不使用join关键字，条件使用where指定。</li><li>语法：<code>select 字段名 from 左表,右表 where 条件;</code></li></ul><pre><code class="sql">-- 查询两张表中，所有员工表外键等于部门表主键的数据SELECT * FROM staff,dept WHERE staff.`dept_id`=dept.`id`;</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/22/in-connection01-1558535127200.jpg" alt="title"></p><h4 id="1-3-2-显式内连接"><a href="#1-3-2-显式内连接" class="headerlink" title="1.3.2 显式内连接"></a>1.3.2 显式内连接</h4><ul><li>显式内连接：使用<strong>[inner] JOIN…ON</strong>语句, ‘[ ]’表示可省略</li><li>语法：<code>select 字段名 from 左表 [inner] join 右表 on 条件;</code></li></ul><pre><code class="sql">-- 查询钢铁侠的信息，显示员工id、姓名、性别、工资和所在的部门名称SELECT s.`id`,s.`name`,s.`gender`,s.`salary`,d.`name`部门名称 FROM staff s INNER JOIN dept d ON s.`dept_id`=d.`id` AND s.`name`='钢铁侠';/*内连接查询步骤：1. 确定查询哪些表：员工表和部门表2. 确定表连接条件：员工表.dept_id = 部门表.id 的数据才是有效的，即消除笛卡尔积现象3. 确定查询条件：查询钢铁侠的信息，员工表.name='钢铁侠'4. 确定显示字段：显示钢铁侠的id、姓名、性别、工资和所在的部门名称5. 可以使用别名进行优化，如staff as s*/</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/22/in-connection02-1558535144642.jpg" alt="title"></p><h3 id="1-4-外连接"><a href="#1-4-外连接" class="headerlink" title="1.4 外连接"></a>1.4 外连接</h3><h4 id="1-4-1-左外连接"><a href="#1-4-1-左外连接" class="headerlink" title="1.4.1 左外连接"></a>1.4.1 左外连接</h4><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示；否则，显示 NULL</p><ul><li>语法：<code>select 字段名 fron 左表 left[outer] join 右表 on 条件;</code></li></ul><p>可以理解为：在内连接的基础上保证左表的数据全部显示(左表部门，右表员工情况下)</p><pre><code class="sql">-- 在部门表中增加一个销售部INSERT INTO dept(NAME) VALUES('销售部');-- 使用内连接查询数据SELECT * FROM dept d INNER JOIN staff s ON d.`id`=s.`dept_id`;-- 使用左外连接查询数据SELECT * FROM dept d LEFT JOIN staff s ON d.`id`=s.`dept_id`;</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/22/LeftOuterJoin-1558535161078.jpg" alt="title"></p><p>用左表记录去匹配右表记录，当不符合条件情况下，仍会显示左表数据，但右表数据会显示为NULL。即在内连接的基础上保证左表数据全部显示。</p><h4 id="1-4-2-右外连接"><a href="#1-4-2-右外连接" class="headerlink" title="1.4.2 右外连接"></a>1.4.2 右外连接</h4><p>用右边表的记录去匹配左边表的记录，如果符合条件的则显示；否则，显示 NULL</p><ul><li>语法：<code>select 字段名 from 左表 right[outer]join 右表 on 条件;</code></li></ul><p>可以理解为：在内连接的基础上保证右表的数据全部显示</p><pre><code class="sql">-- 在员工表中增加一个员工INSERT INTO staff VALUES(NULL,'蜘蛛侠','男',5880,'2014-4-1',NULL);-- 使用内连接查询SELECT * FROM dept d INNER JOIN staff s ON d.`id`=s.`dept_id`; -- 右表新添加的数据将查询不到，因为dept_id值为NULL。-- 使用右外连接查询SELECT * FROM dept d RIGHT JOIN staff s ON d.`id`=s.`dept_id`; -- 在内连接基础上，保证显示右表所有数据，即使条件不满足</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/22/RightOuterJoin-1558535183109.jpg" alt="title"></p><h2 id="2-子查询"><a href="#2-子查询" class="headerlink" title="2. 子查询"></a>2. 子查询</h2><h3 id="2-1-子查询概念"><a href="#2-1-子查询概念" class="headerlink" title="2.1 子查询概念"></a>2.1 子查询概念</h3><ol><li>一个查询的<strong>结果</strong>做为另一个查询的<strong>条件</strong></li><li>有查询的嵌套，内部的查询称为子查询</li><li>子查询要<strong>使用括号</strong></li></ol><pre><code class="sql">-- 查询开发部中有哪些员工-- 通过两条语句查询SELECT id FROM dept WHERE NAME='开发部'; -- 先获取开发部门id，1SELECT * FROM staff WHERE dept_id=1; -- 通过id去查询对应员工-- 使用子查询语句SELECT * FROM staff WHERE dept_id = (SELECT id FROM dept WHERE NAME='开发部'); -- 注意子查询多行单列必须限定子查询字段列只有一个，不能使用* 或两个字段名</code></pre><h3 id="2-2-子查询结果的三种情况"><a href="#2-2-子查询结果的三种情况" class="headerlink" title="2.2 子查询结果的三种情况"></a>2.2 子查询结果的三种情况</h3><ol><li>子查询的结果是单行单列</li><li>子查询的结果是多行单列</li><li>子查询的结果是多行多列</li></ol><h4 id="2-2-1-子查询结果是一个值-单行单列-的时候"><a href="#2-2-1-子查询结果是一个值-单行单列-的时候" class="headerlink" title="2.2.1 子查询结果是一个值(单行单列)的时候"></a>2.2.1 子查询结果是一个值(单行单列)的时候</h4><ul><li>子查询结果只要是单行单列，肯定在 WHERE 后面作为条件，父查询使用：比较运算符，如：&gt; 、&lt;、&lt;&gt;、=等</li><li>语法：<code>select 查询显示字段 from 表 where 字段=(子查询);</code></li></ul><pre><code class="sql">-- 查询工资最高的员工SELECT staff.`name` FROM staff WHERE salary = (SELECT MAX(salary) FROM staff);-- 查询工资小于平均工资的员工有哪些？SELECT * FROM staff WHERE salary &lt; (SELECT AVG(salary) FROM staff);</code></pre><h4 id="2-2-2-子查询结果是多行单列的时候"><a href="#2-2-2-子查询结果是多行单列的时候" class="headerlink" title="2.2.2 子查询结果是多行单列的时候"></a>2.2.2 子查询结果是多行单列的时候</h4><ul><li>子查询结果是多行单列，结果集类似于一个数组，父查询使用IN运算符</li><li>语法：<code>select 查询字段 form 表 where 字段 in (子查询);</code></li></ul><pre><code class="sql">-- 查询工资大于5000的员工，来自于哪些部门的名字-- 先查询大于5000的员工所在的部门idSELECT dept_id FROM staff WHERE staff.`salary` &gt; 5000;-- 再查询这些部门id对应的部门名称,会报错SELECT NAME FROM dept WHERE id = (SELECT dept_id FROM staff WHERE salary&gt;5000); -- 错误代码： 1242 Subquery returns more than 1 row-- 使用IN运算符SELECT NAME FROM dept WHERE id IN(SELECT dept_id FROM staff WHERE salary&gt;5000);-- 查询开发部与财务部所有的员工信息-- 先查询开发部和财务部的部门idSELECT id FROM dept WHERE NAME IN ('开发部','财务部');-- 通过部门id查询对应有哪些员工SELECT * FROM staff WHERE dept_id IN (SELECT id FROM dept WHERE NAME IN ('开发部','财务部'));</code></pre><h4 id="2-2-3-子查询结果是多行多列"><a href="#2-2-3-子查询结果是多行多列" class="headerlink" title="2.2.3 子查询结果是多行多列"></a>2.2.3 子查询结果是多行多列</h4><p>子查询结果只要是多列，肯定在 FROM 后面作为表，子查询作为表需要<strong>取别名</strong>，否则这张表没有名称则无法访问表中的字段</p><ul><li>语法：<code>select 查询字段 from (子查询) 表别名 where 条件;</code></li></ul><pre><code class="sql">-- 查询出 2011 年以后入职的员工信息，包括部门名称-- 在员工表中查询 2011-1-1 以后入职的员工SELECT * FROM staff WHERE join_date &gt;='2011-1-1';-- 查询所有的部门信息，与上面的虚拟表中的信息组合，找出所有部门 id 等于的 dept_idSELECT * FROM dept d, (SELECT * FROM staff WHERE join_date&gt;='2011-1-1') e WHERE d.`id`=e.dept_id;-- 也可以使用表连接查询SELECT * FROM staff s INNER JOIN dept d ON  s.`dept_id`=d.`id` WHERE join_date&gt;='2011-1-1';SELECT * FROM staff s INNER JOIN dept d ON  s.`dept_id`=d.`id` AND join_date&gt;='2011-1-1';</code></pre><h4 id="2-2-4-子查询小结"><a href="#2-2-4-子查询小结" class="headerlink" title="2.2.4 子查询小结"></a>2.2.4 子查询小结</h4><ul><li>子查询结果只要是单列，则在where后面作为条件</li><li>子查询结果只要是多列，则在from后面作为表进行二次查询</li></ul><h2 id="3-事务"><a href="#3-事务" class="headerlink" title="3. 事务"></a>3. 事务</h2><h3 id="3-1-事务概述及应用场景"><a href="#3-1-事务概述及应用场景" class="headerlink" title="3.1 事务概述及应用场景"></a>3.1 事务概述及应用场景</h3><ul><li><strong>概念</strong>：如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li><li>转账操作示例</li></ul><pre><code class="sql">-- 创建数据表CREATE TABLE account(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(30),balance DOUBLE);-- 插入数据INSERT INTO account(NAME,balance) VALUES('小张',1000),('小李',1000);/*    模拟小张给小李转500元钱，一个转账业务操作最少要执行下面两条语句：    小张账户-500    小李账户+500*/-- 小张账号-500UPDATE account SET balance = balance-500 WHERE NAME='小张';-- 小李账号+500UPDATE account SET balance = balance+500 WHERE NAME='小李';</code></pre><p>假设小张账户上-500后，服务器崩溃了。小李账户并没有+500元，如此数据就出现问题了。我们需要保证其中一条SQL语句出现问题，整个转账就算失败。因此需要使用事务。</p><h3 id="3-2-手动提交事务"><a href="#3-2-手动提交事务" class="headerlink" title="3.2 手动提交事务"></a>3.2 手动提交事务</h3><p>MySQL中可以有两种方式进行事务的操作：</p><ol><li>手动提交事务</li><li>自动提交事务</li></ol><h4 id="3-2-1-手动提交事务的SQL语句"><a href="#3-2-1-手动提交事务的SQL语句" class="headerlink" title="3.2.1 手动提交事务的SQL语句"></a>3.2.1 手动提交事务的SQL语句</h4><table><thead><tr><th>功能</th><th>SQL语句</th></tr></thead><tbody><tr><td>开启事务</td><td>start transaction; or begin;</td></tr><tr><td>提交事务</td><td>commit;</td></tr><tr><td>回滚事务</td><td>rollback;</td></tr></tbody></table><h4 id="3-2-2-手动提交事务使用过程"><a href="#3-2-2-手动提交事务使用过程" class="headerlink" title="3.2.2 手动提交事务使用过程"></a>3.2.2 手动提交事务使用过程</h4><ol><li>执行成功的情况：开启事务–&gt; 执行多条SQL语句–&gt; 成功：提交事务</li><li>执行失败的情况：开启事务–&gt; 执行多条SQL语句–&gt; 失败：事务的回滚</li></ol><h4 id="3-2-3-案例演示"><a href="#3-2-3-案例演示" class="headerlink" title="3.2.3 案例演示"></a>3.2.3 案例演示</h4><ol><li>模拟小张给小李转500元钱(成功情况)<ol><li>使用DOS控制台进入MySQL</li><li>执行以下SQL语句：1. 开启事务;  2. 小张账户-500;  3. 小李账户+500</li><li>使用SQLyog查看数据库，发现数据未改变</li><li>在控制台执行commit;提交事务</li><li>示意SQLyog查看数据库，发现数据已改变</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/transaction-1558592609612.jpg" alt="transaction"></p><ol start="2"><li>模拟小张给小李转500元钱(失败情况)，两人账户都重置为1000元。<ol><li>在控制台执行以下SQL语句：1. 开启事务;   2. 小张账户-500</li><li>使用SQLyog查看数据库，发现数据未改变</li><li>在控制台执行rollback回滚事务</li><li>使用SQLyog查看数据库，发现数据也未改变</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/transaction-error-1558592664109.jpg" alt="transaction-error"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>如果事务中SQL语句没有问题，<strong>commit提交事务</strong>，会对数据库数据进行改变。如果事务中SQL语句有问题，<strong>rollback回滚事务</strong>，会回退到开启事务时的状态。</p><h3 id="3-3-自动提交事务"><a href="#3-3-自动提交事务" class="headerlink" title="3.3 自动提交事务"></a>3.3 自动提交事务</h3><p>MySQL 默认每一条 DML(增删改)语句都是一个单独的事务，每条语句都会自动开启一个事务，语句执行完毕自动提交事务，MySQL 默认开始自动提交事务。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/Auto_commit-1558592689790.jpg" alt="Auto_commit"></p><h4 id="3-3-1-案例演示：自动提交事务"><a href="#3-3-1-案例演示：自动提交事务" class="headerlink" title="3.3.1 案例演示：自动提交事务"></a>3.3.1 案例演示：自动提交事务</h4><ol><li>将金额重置为1000</li><li>更新其中某一个账户</li><li>使用SQLyog查看数据库；发现数据已改变</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/demo01-1558592714256.jpg" alt="title"></p><h4 id="3-3-2-取消自动提交"><a href="#3-3-2-取消自动提交" class="headerlink" title="3.3.2 取消自动提交"></a>3.3.2 取消自动提交</h4><ul><li>查看 MySQL 是否开启自动提交事务：<code>select @@autocommit;</code> @ 表示全局变量，1表示开启，0关闭。</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/Auto_commit02-1558592732701.jpg" alt="Auto_commit02"></p><ul><li>取消自动提交事务</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/cancel_autocommit-1558592755217.jpg" alt="title"></p><ul><li>再次执行更新语句，然后使用SQLyog查看数据库，会发现数据并没有改变</li><li>在控制台执行commit提交任务</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/transaction02-1558592768439.jpg" alt="transaction02"></p><h2 id="3-4-事务原理"><a href="#3-4-事务原理" class="headerlink" title="3.4 事务原理"></a>3.4 事务原理</h2><p>事务开启之后，所有的操作都会临时保存到事务日志中，事务日志只有在得到commit命令才会同步到数据表中，其他任何情况都会情况事务日志(rollback,断开连接等)</p><h4 id="3-4-1-原理图"><a href="#3-4-1-原理图" class="headerlink" title="3.4.1 原理图"></a>3.4.1 原理图</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/theory-1558592803406.jpg" alt="theory"></p><p><strong>事务的步骤：</strong></p><ol><li>客户端连接数据库服务器，创建连接时创建此用户临时日志文件</li><li>开启事务后，所有的操作都会先写入到临时日志文件中</li><li>所有的查询操作从表中查询，但会结果日志文件加工后才返回</li><li>如果事务提交则将日志文件中的数据写入到表中，否则情况日志文件</li></ol><h3 id="3-5-回滚点"><a href="#3-5-回滚点" class="headerlink" title="3.5 回滚点"></a>3.5 回滚点</h3><p>在某些成功的操作完成之后，后续的操作有可能成功有可能失败，但是不管成功还是失败，前面操作都已经成功，可以在当前成功的位置设置一个回滚点。可以供后续失败操作返回到该位置，而不是返回所有操作，这个点称之为<strong>回滚点</strong>。</p><h4 id="3-5-1-回滚点操作语句"><a href="#3-5-1-回滚点操作语句" class="headerlink" title="3.5.1 回滚点操作语句"></a>3.5.1 回滚点操作语句</h4><table><thead><tr><th>作用</th><th>语句</th></tr></thead><tbody><tr><td>设置回滚点</td><td>savepoint 回滚点名字</td></tr><tr><td>回到回滚点</td><td>rollback to 名字</td></tr></tbody></table><h4 id="3-5-2-案例演示"><a href="#3-5-2-案例演示" class="headerlink" title="3.5.2 案例演示"></a>3.5.2 案例演示</h4><ol><li>将数据重置为1000</li><li>开启事务</li><li>让小张账户减3次钱，每次10元</li><li>设置回滚点：savepoint three_times;</li><li>让小张减4次钱，每次10元</li><li>回到回滚点：rollback to three_times;</li><li>查看结果，分析执行过程</li></ol><ul><li>小结：设置回滚点可以让我们在失败的时候回到指定回滚点，而不是回到事务开启的时候。</li></ul><h3 id="3-6-事务的隔离级别"><a href="#3-6-事务的隔离级别" class="headerlink" title="3.6 事务的隔离级别"></a>3.6 事务的隔离级别</h3><h4 id="3-6-1-事务四大特性ACID"><a href="#3-6-1-事务四大特性ACID" class="headerlink" title="3.6.1 事务四大特性ACID"></a>3.6.1 事务四大特性ACID</h4><table><thead><tr><th>事务特性</th><th>含义</th></tr></thead><tbody><tr><td>原子性(Atomicity)</td><td>每个事务都是一个整体，不可再拆分，事务中所有的SQL语句要么都执行成功，要么都失败。</td></tr><tr><td>一致性(Consistency)</td><td>事务在执行前数据库的状态与执行后数据库的状态保持一致。例：转账前两人的总金额是2000，转账后总金额也是2000</td></tr><tr><td>隔离性(Isolation)</td><td>事务与事务之间不应该相互影响，执行时保持隔离的状态</td></tr><tr><td>持久性(Durability)</td><td>一旦事务执行成功，对数据库的修改是持久的。就算关机，也是保存下来的。</td></tr></tbody></table><h4 id="3-6-2-事务的隔离级别"><a href="#3-6-2-事务的隔离级别" class="headerlink" title="3.6.2 事务的隔离级别"></a>3.6.2 事务的隔离级别</h4><p>事务在操作时的理想状态：所有的事务之间保持隔离，互不影响。因为并发操作，多个用户同时访问同一个数据，可以引发并发访问的问题</p><table><thead><tr><th>并发访问的问题</th><th>含义</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读取到了另一个事务中尚未提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务中两次读取的数据<strong>内容不一致</strong>，要求的是一个事务中多次读取时数据是一致的，这是事务update时引发的问题</td></tr><tr><td>幻读</td><td>一个事务中两次读取的数据的<strong>数量不一致</strong>，要求在一个事务多次读取的数据数量是一致的，这是insert或delete时引发的问题</td></tr></tbody></table><h4 id="3-6-3-MySQL数据库有四种隔离级别"><a href="#3-6-3-MySQL数据库有四种隔离级别" class="headerlink" title="3.6.3 MySQL数据库有四种隔离级别"></a>3.6.3 MySQL数据库有四种隔离级别</h4><p>从上往下隔离级别依次递增。“是”表示会出现这种问题，“否”表示不会出现这种问题。</p><table><thead><tr><th>级别</th><th>名字</th><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>默认隔离级别</th></tr></thead><tbody><tr><td>1</td><td>读未提交</td><td>read uncommitted</td><td>是</td><td>是</td><td>是</td><td></td></tr><tr><td>2</td><td>读已提交</td><td>read committed</td><td>否</td><td>是</td><td>是</td><td>Oracle和SQL Server</td></tr><tr><td>3</td><td>可重复读</td><td>repeatable read</td><td>否</td><td>否</td><td>是</td><td><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/isolation-1558592857953.jpg" alt="isolation"></td></tr><tr><td>4</td><td>串行化</td><td>serializable</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><blockquote><p>隔离级别越高，性能越差，安全性越高。</p></blockquote><h4 id="3-6-4-MySQL事务隔离级别相关命令"><a href="#3-6-4-MySQL事务隔离级别相关命令" class="headerlink" title="3.6.4 MySQL事务隔离级别相关命令"></a>3.6.4 MySQL事务隔离级别相关命令</h4><ul><li>查询全局事务隔离级别：<code>select @@ tx_isolation;</code></li><li>设置事务隔离级别：<code>set global transaction isolation level 级别字符串;</code> 重新登录MySQL生效。</li></ul><h4 id="3-6-5-脏读的演示"><a href="#3-6-5-脏读的演示" class="headerlink" title="3.6.5 脏读的演示"></a>3.6.5 脏读的演示</h4><p>将余额数据重置为1000元</p><ol><li>打开A窗口登录MySQL，设置全局隔离级别为最低(read uncommitted)</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/isolation-level1-1558592887521.jpg" alt="isolation-level1"></p><ol start="2"><li>打开B窗口，AB窗口都开启事务</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/AB-1558592910534.jpg" alt="AB"></p><ol start="3"><li>A窗口更新2个人的账户数据，模拟转账，未提交</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/A-update-1558592932429.jpg" alt="A-update"></p><ol start="4"><li>B窗口查询账户数据，到账了</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B-select-1558592959485.jpg" alt="B-select"></p><ol start="5"><li>A窗口回滚：<code>rollback;</code></li><li>B窗口查询账户数据，到账的钱没了</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B-select-2-1558592982344.jpg" alt="B-select-2"></p><p>脏读问题非常危险。比如小张向小李购买商品，小张开启事务，向小李账户转入500块钱，然后打电话给小李说钱已经转了。小李查询看钱的确到账了，发货给小张。小张收到货后回滚事务，小李再次查看钱就没了。</p><p><strong>解决脏读问题</strong>：将全局的隔离级别进行提升</p><ol><li>提高A窗口的隔离级别为read committed，并开启事务</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/isolation-level2-1558593001591.jpg" alt="isolation-level2"></p><ol start="2"><li>重新登录B窗口MySQL，进入数据库并开启事务</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B-usedb-1558593015378.jpg" alt="B-usedb"></p><ol start="3"><li>A窗口模拟转账操作，更新两个账户数据，未提交</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/A-level2-1558593029364.jpg" alt="A-level2"></p><ol start="4"><li>B窗口查询数据，发现没有改变(没有读取到另一个事务未提交的内容)</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B-select-level2-1558593046721.jpg" alt="B-select-level2"></p><ol start="5"><li>A窗口<code>commit;</code>提交事务，B窗口查询，发现数据改变了(另一个事务提交后的数据才能读取到)</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/A_commit_B_select-1558593059422.jpg" alt="A_commit_B_select"></p><p><strong>小结</strong>：read committed的方式可以避免脏读的发生</p><h3 id="3-6-6-不可重复读的演示"><a href="#3-6-6-不可重复读的演示" class="headerlink" title="3.6.6 不可重复读的演示"></a>3.6.6 不可重复读的演示</h3><p>将数据重置为1000</p><ol><li>开启A窗口，并设置全局隔离级别为read committed；</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/A-set-readcommitted%3B-1558593079757.jpg" alt="A-set-readcommitted"></p><ol start="2"><li>开启B窗口，B窗口开启事务并查询数据</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B-startAndselect-1558593106316.jpg" alt="B-startAndselect"></p><ol start="3"><li>A窗口开启事务，并更新数据</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/A-update-commit-1558593126721.jpg" alt="A-update-commit"></p><ol start="4"><li>B窗口查询数据，发现两次结果不一致</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B-select-02-1558593149558.jpg" alt="B-select-02"></p><p>两次查询输出的结果不同，无法确定哪次是对的，以哪次为准？</p><p><strong>解决不可重复读的问题</strong>：将全局隔离级别提升为：<strong>repeatable read</strong></p><p>将数据重置为1000</p><ol><li>A窗口设置隔离级别为：<strong>repeatable read</strong></li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/A_repeatable_read-1558593166460.jpg" alt="A_repeatable_read"></p><ol start="2"><li>B窗口重新登录MySQL，开启事务并查询数据</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B_select_level3-1558593179684.jpg" alt="B_select_level3"></p><ol start="3"><li>A窗口开启事务，更新数据</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/A_update_level3-1558593195882.jpg" alt="A_update_level3"></p><ol start="4"><li>B窗口查询数据，两次查询数据一致</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/B_select_level3_02-1558593214294.jpg" alt="B_select_level3_02"></p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>同一个事务中为了保证多次查询数据一致，必须使用<strong>repeatable read</strong>隔离级别</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/level3-1558593223717.jpg" alt="level3"></p><h3 id="3-7-幻读的演示"><a href="#3-7-幻读的演示" class="headerlink" title="3.7 幻读的演示"></a>3.7 幻读的演示</h3><ul><li>幻读主要是说多次读取一个范围内的记录(包括直接查询所有记录结果或者做聚合统计)，发现结果不一致(标准档案一般指记录增多，记录的减少应该也算是幻读)。</li><li><p>其实对于 <code>幻读</code>, MySQL的InnoDB引擎默认的<code>RR</code>级别已经通过<code>MVCC自动帮我们解决了</code>, 所以该级别下, 也模拟不出幻读的场景; 退回到 <code>RC</code> 隔离级别的话,又容易把<code>幻读</code>和<code>不可重复读</code>搞混淆。理论上RR级别是无法解决幻读问题的，但是由于InnoDB引擎的RR级别还使用了MVCC, 所以也就避免了幻读的出现。</p></li><li><p>使用<code>隔离性</code>的最高隔离级别<code>SERIALIZABLE</code>也可以解决<code>幻读</code>, 在该隔离级别下，一个事务没有执行完，其他事务的SQL执行不了，可以挡住幻读。但该隔离级别在实际中很少使用！</p></li><li><p><a href="https://segmentfault.com/a/1190000012669504?utm_source=tag-newest" target="_blank" rel="noopener">幻读的延伸</a></p></li></ul><h2 id="4-DCL-Data-Control-Language"><a href="#4-DCL-Data-Control-Language" class="headerlink" title="4. DCL(Data Control Language)"></a>4. DCL(Data Control Language)</h2><ul><li>DDL：create/alter/drop</li><li>DML：insert/ update/delete</li><li>DQL：select/show</li><li>DCL：grant/ revoke</li></ul><p>默认使用的都是root用户，超级管理员，拥有全部的权限。但是，一个公司里面的数据库服务器上面可能同时运行着很多个项目的数据库。所以，我们应该可以根据不同的项目建立不同的用户，分配不同的权限来管理和维护数据库。</p><blockquote><p>mysqld是MySQL的主程序，服务器端。mysql是MySQL的命令行工具，客户端。</p></blockquote><h3 id="4-1-创建用户"><a href="#4-1-创建用户" class="headerlink" title="4.1 创建用户"></a>4.1 创建用户</h3><ul><li><p>语法：<code>create user '用户名'@'主机名' identified by '密码';</code></p></li><li><p>关键字说明</p></li></ul><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>用户名</td><td>将创建用户名称</td></tr><tr><td>主机名</td><td>指定该用户在哪个主机上可以登录，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登录，可以使用通配符%</td></tr><tr><td>密码</td><td>该用户的登录密码，可以为空(则表示无需密码即可登录服务器)</td></tr></tbody></table><ul><li>操作示例</li></ul><pre><code class="sql">-- 创建 zero 用户，只能在 localhost 这个服务器登录 mysql 服务器，密码为 123create user 'zero'@'%' identified by '123';-- 创建 zero2用户可以在任何电脑上登录 mysql 服务器，密码为 123CREATE USER 'zero2'@'%' IDENTIFIED BY '123';-- 创建的用户名都在mysql数据库的user表中可以查看,密码经过了加密select user.`Host`,user.`User`,user.`authentication_string`PASSWORD FROM USER;</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/23/users-1558605540361.jpg" alt="users"></p><h3 id="4-2-用户授权"><a href="#4-2-用户授权" class="headerlink" title="4.2 用户授权"></a>4.2 用户授权</h3><p>用户创建之后，什么权限都没有，需要管理员手动给用户授权</p><ul><li>语法：<code>grant 权限1,权限2...on 数据库名.表名 to '用户名'@'主机名';</code></li><li>关键字说明</li></ul><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>grant…on…to</td><td>授权关键字</td></tr><tr><td>权限</td><td>授予用户的权限，如CREATE、ALTER、SELECT、INSERT、UPDATE等。如果要授予所有的权限则使用ALL</td></tr><tr><td>数据库名.表名</td><td>该用户可以操作哪个数据库的哪些表。如果要授予该用户对<strong>所有数据库和表</strong>的相应操作权限则可以使用<code>*.*</code></td></tr><tr><td>‘用户名‘@’主机名’</td><td>给哪个用户授权。注意有单引号</td></tr></tbody></table><ul><li>操作示例</li></ul><pre><code class="sql">-- 给 zero 用户分配对 test 这个数据库操作的权限：创建表，修改表，插入记录，更新记录，查询GRANT CREATE,ALTER,INSERT,UPDATE,SELECT ON db1.* TO 'zero'@'localhost';-- 给 zero2 用户分配所有权限，对所有数据库的所有表GRANT ALL ON *.* TO 'zero2'@'%';</code></pre><h3 id="4-3-撤销权限"><a href="#4-3-撤销权限" class="headerlink" title="4.3 撤销权限"></a>4.3 撤销权限</h3><ul><li><p>语法：<code>revoke 权限1,权限2... on 数据库.表名 from '用户名'@'主机名';</code></p></li><li><p>关键字</p></li></ul><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>revoke…on…from</td><td>撤销授权的关键字</td></tr><tr><td>权限</td><td>用户的权限，如 CREATE、ALTER、SELECT、INSERT、UPDATE 等，所有的权限则使用 ALL</td></tr><tr><td>数据库名.表名</td><td>对哪些数据库哪些表做操作。如果要撤销该用户对<strong>所有数据库和表</strong>的相应操作权限则可以使用<code>*.*</code></td></tr><tr><td>‘用户名‘@’主机名’</td><td>给哪个用户撤销</td></tr></tbody></table><ul><li>操作示例</li></ul><pre><code class="sql">-- 撤销zero2用户对全部数据库的全部权限REVOKE ALL ON *.* FROM 'zero2'@'%';</code></pre><h3 id="4-4-查看权限"><a href="#4-4-查看权限" class="headerlink" title="4.4 查看权限"></a>4.4 查看权限</h3><ul><li>语法：<code>show grants for '用户名'@'主机名';</code></li><li>操作示例</li></ul><pre><code class="sql">-- 查看zero用户的权限SHOW GRANTS FOR 'zero'@'localhost';</code></pre><blockquote><p>usage是指连接(登录)权限，建立一个用户，就会自动授予其usage权限，无法revoke。</p></blockquote><h3 id="4-5-删除用户"><a href="#4-5-删除用户" class="headerlink" title="4.5 删除用户"></a>4.5 删除用户</h3><ul><li><p>语法：<code>drop user '用户名'@'主机名';</code></p></li><li><p>操作示例</p></li></ul><pre><code class="sql">-- 删除zero用户DROP USER 'zero'@'localhost';</code></pre><h3 id="4-6-修改管理员密码"><a href="#4-6-修改管理员密码" class="headerlink" title="4.6 修改管理员密码"></a>4.6 修改管理员密码</h3><ul><li>语法：<code>mysqladmin -uroot -p password 新密码</code></li></ul><blockquote><p>该命令在DOS控制台执行，新密码无需加上引号。</p><p>Tips: </p><ol><li>请在DBA允许陪同下使用该命令</li><li>数据库内修改root密码需使用<code>flush privileges;</code>刷新权限才能生效</li></ol></blockquote><h3 id="4-7-修改普通用户密码"><a href="#4-7-修改普通用户密码" class="headerlink" title="4.7 修改普通用户密码"></a>4.7 修改普通用户密码</h3><ul><li>语法：<code>set password for '用户名'@'主机名'=password('newpwd');</code></li></ul><h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul><li style="list-style: none"><input type="checkbox" checked=""> 能够使用内连接进行多表查询</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用左外连接和右外连接进行多表查询</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用子查询进行多表查询</li><li style="list-style: none"><input type="checkbox" checked=""> 能够理解事务的概念</li><li style="list-style: none"><input type="checkbox" checked=""> 能够说出事务的特点</li><li style="list-style: none"><input type="checkbox" checked=""> 能够在MySQL中使用事务</li><li style="list-style: none"><input type="checkbox" checked=""> 能够理解脏读、不可重复读、幻读的概念及解决方法</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用DCL管理MySQL中的用户</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>&#39;2019.5.20&#39;</title>
      <link href="/2019/05/20/jottings/2019-5-20/"/>
      <url>/2019/05/20/jottings/2019-5-20/</url>
      
        <content type="html"><![CDATA[<h3 id="今日随笔-notebook"><a href="#今日随笔-notebook" class="headerlink" title="今日随笔 :notebook:"></a>今日随笔 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8">📓</span></h3><p>今天又是鸽子江的一天! <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8">😆</span></p><p>下面总结一下最近几天的问题 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8">🔍</span></p><a id="more"></a><h5 id="one-学习效率方面"><a href="#one-学习效率方面" class="headerlink" title=":one:学习效率方面"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8">1⃣</span>学习效率方面</h5><p>发现最近的学习效率有点问题，经常当天的学习内容都要拖很晚才能完成。也不知道是方法出了问题还是什么。</p><blockquote><p>学习娱乐之间要保持平衡，要有度。</p></blockquote><h5 id="two-知识点遗忘"><a href="#two-知识点遗忘" class="headerlink" title=":two: 知识点遗忘"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8">2⃣</span> 知识点遗忘</h5><p>学的一些以前的基础知识点，函数、方法什么的，如果不经常使用复习的话，很快就忘记了，应该解决一下这个问题。</p><blockquote><p> 复习以往知识点还是要提上日程</p></blockquote><h5 id="three-关于CoreJava"><a href="#three-关于CoreJava" class="headerlink" title=":three:关于CoreJava"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8">3⃣</span>关于CoreJava</h5><p>看CoreJava <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8">📖</span> ，给自己规定了每天看10页左右，要二个多月能看完，差不多还能接受，当然进度提高一点最好。且不能光看书，要结合书中知识点实践代码。</p><blockquote><p>在github创建一个CoreJava仓库，将所有的例子分门别类的放进去，方便以后查看。</p></blockquote><h5 id="four-今天发现的小cookie"><a href="#four-今天发现的小cookie" class="headerlink" title=":four:今天发现的小cookie"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8">4⃣</span>今天发现的小cookie</h5><p>就是Markdown语法的<strong>emoji</strong></p><p><a href="https://github.com/guodongxiaren/README/blob/master/emoji.md" target="_blank" rel="noopener">emoji参考传送门</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL查询操作</title>
      <link href="/2019/05/19/database/mysql-cha-xun-cao-zuo/"/>
      <url>/2019/05/19/database/mysql-cha-xun-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-DQL查询语句"><a href="#1-DQL查询语句" class="headerlink" title="1. DQL查询语句"></a>1. DQL查询语句</h2><h3 id="1-1-排序"><a href="#1-1-排序" class="headerlink" title="1.1 排序"></a>1.1 排序</h3><ul><li>语法：<code>select 字段名 from 表名 order by 字段名1 [ASC|DESC],字段名2 [ASC|DESC]...;</code></li><li>排序方式：ASC(升序,默认值)；DESC(降序)。</li></ul><a id="more"></a><pre><code class="sql"># 单列排序SELECT * FROM student2 ORDER BY math; # 以math为条件升序排序，默认升序SELECT * FROM student2 ORDER BY math DESC; # 以math为条件进行降序排序# 组合排序# 查询所有数据，在数学成绩升序排序的基础上，如果数学成绩相同在以英语成绩降序排序SELECT * FROM student2 ORDER BY math ASC,english DESC;</code></pre><blockquote><p>注意：同时对多个字段进行排序，如果第1字段相等，则按第2字段排序，依次类推。</p></blockquote><h3 id="1-2-聚合函数"><a href="#1-2-聚合函数" class="headerlink" title="1.2 聚合函数"></a>1.2 聚合函数</h3><p>将一列数据作为一个整体，进行纵向的计算，返回一个结果值。</p><ol><li>count：统计个数，一般选择非空的列(主键)</li><li>max：求最大值</li><li>min：求最小值</li><li>sum：求和</li><li>avg：求平均值</li></ol><pre><code class="sql"># 统计学生人数SELECT COUNT(id) AS 总人数 FROM student2;# 对english列统计个数SELECT COUNT(english) FROM student2; -- 7# 对english列统计个数,如果值为NULL，替换为0SELECT COUNT(IFNULL(english,0)) FROM student2; -- 8# 查询年龄大于20岁的人数SELECT COUNT(*) FROM student2 WHERE age&gt;20;# 查询数学成绩总分SELECT SUM(math) AS 数学成绩总分 FROM student2;# 查询数学成绩平均分SELECT AVG(math) AS 数学平均分 FROM student2;# 查询数学成绩最高分SELECT MAX(math) AS 数学最高分 FROM student2;# 查询数学最低分SELECT MIN(math) AS 数学最低分 FROM student2;</code></pre><p>IFNULL(列名，默认值)：如果列名不为空，返回该列值。如果为NULL，则返回默认值。</p><blockquote><p>聚合函数的计算排除了NULL值,可以选择非空列进行计算或者使用IFNULL函数</p></blockquote><h3 id="1-3-分组"><a href="#1-3-分组" class="headerlink" title="1.3 分组"></a>1.3 分组</h3><p>分组查询是指使用<code>group by</code> 语句对查询信息进行分组，相同数据作为一组。</p><p><code>select 字段1,字段2... from 表名 group by 分组字段[HAVING 条件];</code></p><pre><code class="sql"># 按性别进行分组，求男女生的数学平均分。SELECT sex,AVG(math) FROM student2 GROUP BY sex; # 当我们使用某个字段分组，在查询时也需要将这个字段查询出来，否则看不大数据属于哪组的/*    group by 将分组字段结果中相同内容作为一组，并且返回每组的第一条数据。单独分组没用，分组的目的就是为了统计，所以一般分组会跟聚合函数一起使用。*/# 查询男女各有多少人SELECT sex,COUNT(*)男女各有多少人 FROM student2 GROUP BY sex; # 分组函数会先查询所有数据，按性别分组，然后统计每组人数# 查询年龄大于25岁的人，按照性别分组，统计每组人数SELECT sex,COUNT(*)年龄大于25岁人数 FROM student2 WHERE age&gt;25 GROUP BY sex;# 查询年龄大于25岁的人，按性别分组，统计每组的人数，并只显示性别人数大于 2 的数据(使用having条件控制)SELECT sex,COUNT(*)年龄大于25岁人数且人数大于2的 FROM student2 WHERE age&gt;25 GROUP BY sex HAVING COUNT(*)&gt;2; # 该SQL语句会先过滤掉年龄小于25岁的人，在按照性别分组，然后统计每组人数，最后显示性别人数大于2的数据</code></pre><h4 id="having与where的区别"><a href="#having与where的区别" class="headerlink" title="having与where的区别"></a>having与where的区别</h4><table><thead><tr><th>子句</th><th>作用</th></tr></thead><tbody><tr><td>where子句</td><td>对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据。where后面不可以使用聚合函数。</td></tr><tr><td>having子句</td><td>该子句的作用是筛选满足条件的组，即在分组之后过滤数据。having后面可以使用聚合函数。</td></tr></tbody></table><h3 id="1-4-limit语句"><a href="#1-4-limit语句" class="headerlink" title="1.4 limit语句"></a>1.4 limit语句</h3><p>limit是限制的意思，作用就是限制查询记录的条数。</p><p>语句：<code>select 字段列表 from 表名 [where子句][group by子句][limit offset(默认0),length];</code></p><pre><code class="sql"># 查询学生表中数据，从第三条开始，显示6条。SELECT * FROM student2 LIMIT 2,6;# 使用场景：分页，一般使用在类似淘宝商品信息分页。</code></pre><h2 id="2-数据库的备份和还原"><a href="#2-数据库的备份和还原" class="headerlink" title="2. 数据库的备份和还原"></a>2. 数据库的备份和还原</h2><h3 id="2-1-备份格式"><a href="#2-1-备份格式" class="headerlink" title="2.1 备份格式"></a>2.1 备份格式</h3><p>在DOS下，使用语句：<code>mysqldump -u用户名 -p密码 数据库&gt;文件路径</code></p><pre><code class="powershell"># 备份db4数据库中数据到本地db4.sql文件中mysqldump -uroot -p123456 db4 &gt; C:\Java\JavaWeb\db4.sql</code></pre><h3 id="2-2-还原格式"><a href="#2-2-还原格式" class="headerlink" title="2.2 还原格式"></a>2.2 还原格式</h3><p>mysql中的命令，登录后使用：<code>use 数据库; source 导入文件的路径;</code></p><pre><code class="sql">/*还原步骤：    1. 删除db4数据库中的所有表    2. 登录mysql，选中数据库    3. 使用source 命令还原数据    4. 查看还原情况*/use db4;source C:\Java\JavaWeb\db4.sql;</code></pre><h2 id="3-数据库表的约束"><a href="#3-数据库表的约束" class="headerlink" title="3. 数据库表的约束"></a>3. 数据库表的约束</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性。一个表如果添加了约束，不正确的数据将无法插入到表中。约束在创建表的时候添加比较合适。</p><h3 id="3-2-约束种类"><a href="#3-2-约束种类" class="headerlink" title="3.2 约束种类"></a>3.2 约束种类</h3><table><thead><tr><th>约束名</th><th>约束关键字</th></tr></thead><tbody><tr><td>主键</td><td>primary key</td></tr><tr><td>唯一</td><td>unique</td></tr><tr><td>非空</td><td>not null</td></tr><tr><td>外键</td><td>foreign key</td></tr><tr><td>检查约束</td><td>check，注：mysql不支持</td></tr></tbody></table><h3 id="3-3-主键"><a href="#3-3-主键" class="headerlink" title="3.3 主键"></a>3.3 主键</h3><p>用来唯一标识数据库中的每一条记录。通常不用业务字段作为主键，而是单独给每张表设计一个id的字段，把id作为主键。</p><ul><li>主键关键字：primary key</li><li>主键特点：非空(not null)且唯一</li></ul><h4 id="创建主键"><a href="#创建主键" class="headerlink" title="创建主键"></a>创建主键</h4><ol><li>在创建表时给字段添加主键：<code>字段名 字段类型 PRIMARY KEY;</code></li><li>在已有表中添加主键：<code>alter table 表名 add primary key(字段名);</code></li></ol><pre><code class="sql"># 创建表时添加create table student3(    id int primary key; # id设为主键    name varchar(20);    age int);# 删除主键alter table student3 drop primary key;# 在已有表中添加主键alter table student3 add primary key(id);</code></pre><h4 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h4><p>可以使用<code>auto_increment</code>将主键字段设置为自增，数据库会自动生成主键字段值。</p><h4 id="修改自增长默认起始值"><a href="#修改自增长默认起始值" class="headerlink" title="修改自增长默认起始值"></a>修改自增长默认起始值</h4><p>默认地 AUTO_INCREMENT 的开始值是 1，如果希望修改起始值,可以使用如下SQL语句。</p><ul><li>创建表时指定起始值</li></ul><pre><code class="sql">create table 表名(    列名 int primary key auto_increment,)auto_increment=起始值;</code></pre><ul><li>创建表后修改起始值</li></ul><pre><code class="sql">alter table 表名 auto_increment=10;</code></pre><h4 id="delete和truncate对自增长的影响"><a href="#delete和truncate对自增长的影响" class="headerlink" title="delete和truncate对自增长的影响"></a>delete和truncate对自增长的影响</h4><ul><li>delete：删除所有的记录后，自增长没有影响。</li><li>truncate：删除后，自增长初始值重新开始了。</li></ul><h3 id="3-4-唯一约束"><a href="#3-4-唯一约束" class="headerlink" title="3.4 唯一约束"></a>3.4 唯一约束</h3><p>用以约束表中某一列不能出现重复的值</p><ul><li>语法：<code>字段名 字段类型 unique</code></li></ul><pre><code class="sql"># 创建学生表4，包含字段(id, name),name 这一列设置唯一约束,不能出现同名的学生CREATE TABLE student4(    id INT PRIMARY KEY AUTO_INCREMENT,    NAME VARCHAR(255) UNIQUE);# 添加学生INSERT INTO student4(NAME) VALUES('xiaohua');INSERT INTO student4(NAME) VALUES('xiaohua'); # 错误代码： 1062 Duplicate entry 'xiaohua' for key 'name'# 测试插入nullINSERT INTO student4(NAME) VALUES(NULL); # 不会报错，因为null无数据</code></pre><h3 id="3-5-非空约束"><a href="#3-5-非空约束" class="headerlink" title="3.5 非空约束"></a>3.5 非空约束</h3><p>用于约束某一列不能为null</p><p>语法：<code>字段名 字段类型 not null</code></p><pre><code class="sql">-- 创建表学生表5, 包含字段(id,name,gender)其中 name 不能为 NULLCREATE TABLE student5(    id INT PRIMARY KEY AUTO_INCREMENT,    NAME VARCHAR(100) NOT NULL,    gender CHAR(1));# 添加一条记录其中姓名不赋值INSERT INTO student5(NAME,gender) VALUES(NULL,'man'); # 错误代码： 1048 Column 'name' cannot be null</code></pre><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>我们可以为字段指定默认值</p><p>语法：<code>字段名 字段类型 default 默认值</code></p><pre><code class="sql">-- 创建一个学生表6，包含字段(id,name,address)， 地址默认值是广州CREATE TABLE student6(    id INT PRIMARY KEY AUTO_INCREMENT,    NAME VARCHAR(20),    address VARCHAR(50) DEFAULT '杭州');-- 添加一条记录,使用默认地址INSERT INTO student6(NAME,address) VALUES('xiaozhang',DEFAULT);-- 添加一条记录,不使用默认地址INSERT INTO student6(NAME,address) VALUES('xiaohua','上海');</code></pre><blockquote><p>Tips: 如果一个字段设置了非空和唯一约束，那么该字段与主键有什么区别？</p><ol><li>主键在一个表中只能有一个。</li><li>自增长只能用在主键上。</li></ol></blockquote><h3 id="3-6-外键约束"><a href="#3-6-外键约束" class="headerlink" title="3.6 外键约束"></a>3.6 外键约束</h3><p><strong>单表的缺点</strong>：</p><pre><code class="sql"># 创建一个员工表包含如下列(id, name, age, dep_name, dep_location),id 主键并自动增长,添加 5 条数据CREATE TABLE emp (    id INT PRIMARY KEY AUTO_INCREMENT,    NAME VARCHAR(30),    age INT,    dep_name VARCHAR(30),    dep_location VARCHAR(30));# 添加数据INSERT INTO emp (NAME, age, dep_name, dep_location) VALUES ('张三', 20, '研发部', '广州');INSERT INTO emp (NAME, age, dep_name, dep_location) VALUES ('李四', 21, '研发部', '广州');INSERT INTO emp (NAME, age, dep_name, dep_location) VALUES ('王五', 20, '研发部', '广州');INSERT INTO emp (NAME, age, dep_name, dep_location) VALUES ('老王', 20, '销售部', '深圳');INSERT INTO emp (NAME, age, dep_name, dep_location) VALUES ('大王', 22, '销售部', '深圳');INSERT INTO emp (NAME, age, dep_name, dep_location) VALUES ('小王', 18, '销售部', '深圳');</code></pre><ul><li>上数据表的缺点: 一是数据冗余，二是后期可能出现的增删改问题。</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><pre><code class="sql"># 将上述数据表分成两张表，部门表\员工表-- 创建部门表(id,dep_name,dep_location)-- 主表，一对多CREATE TABLE department(id INT PRIMARY KEY AUTO_INCREMENT,dep_name VARCHAR(20),dep_location VARCHAR(20));-- 创建员工表(id,name,age,dep_id)-- 从表,多对一CREATE TABLE employee(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20),age INT,dep_id INT -- 外键对应主表的主键);-- 添加两个部门INSERT INTO department VALUES(NULL, '研发部','广州'),(NULL, '销售部', '深圳');-- 添加员工，dep_id 表示员工所在部门INSERT INTO employee (NAME, age, dep_id) VALUES ('张三', 20, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('李四', 21, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('王五', 20, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('老王', 20, 2);INSERT INTO employee (NAME, age, dep_id) VALUES ('大王', 22, 2);INSERT INTO employee (NAME, age, dep_id) VALUES ('小王', 18, 2);</code></pre><p>但是如果我们在employee的dep_id里面输入不存在的部门，数据仍然可以添加，所以要规范dep_id中的数据只能是department表中存在的id。故可以使用外键约束来解决该问题</p><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li>外键：在从表中与主表主键对应的那一列，称为外键。例上从表中的dep_id</li><li>主表：一方，用来约束别人的表</li><li>从表：多方，被别人约束的表</li><li>创建约束语法：<ul><li>新建表时增加外键：<code>[CONSTRAINT] [外键约束名称] FOREIGN KEY(外键字段名) REFERENCES 主表名(主键字段名)</code></li><li>已有表增加外键：<code>ALTER TABLE 从表 ADD [CONSTRAINT] [外键约束名称] FOREIGN KEY (外键字段名) REFERENCES 主表(主键字段名);</code></li></ul></li></ul><pre><code class="sql">DROP TABLE employee;-- 创建从表 employee 并添加外键约束 emp_depid_fk-- 多方，从表CREATE TABLE employee(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20),age INT,dep_id INT, -- 外键对应主表的主键-- 创建外键约束CONSTRAINT emp_depid_fk FOREIGN KEY (dep_id) REFERENCES department(id));-- 正常添加数据INSERT INTO employee (NAME, age, dep_id) VALUES ('张三', 20, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('李四', 21, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('王五', 20, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('老王', 20, 2);INSERT INTO employee (NAME, age, dep_id) VALUES ('大王', 22, 2);INSERT INTO employee (NAME, age, dep_id) VALUES ('小王', 18, 2);-- 插入数据，指定一个不存在的部门值INSERT INTO employee (NAME, age, dep_id) VALUES ('老板', 35, 6); # 错误代码： 1452 Cannot add or update a child row: a foreign key constraint fails (`db4`.`employee`, CONSTRAINT `emp_depid_fk` FOREIGN KEY (`dep_id`) REFERENCES `department` (`id`))</code></pre><h4 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h4><ul><li>语法：<code>ALTER TABLE 从表 drop foreign key 外键名称;</code></li></ul><pre><code class="sql">-- 删除employee表的emp_depid_fk外键ALTER TABLE employee DROP FOREIGN KEY emp_depid_fk;-- 在 employee 表存在的情况下添加外键ALTER TABLE employee ADD CONSTRAINT emp_depid_fk FOREIGN KEY(dep_id) REFERENCES department(id);</code></pre><h4 id="外键的级联"><a href="#外键的级联" class="headerlink" title="外键的级联"></a>外键的级联</h4><ul><li>级联操作：在修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作。</li></ul><table><thead><tr><th>级联操作语法</th><th>描述</th></tr></thead><tbody><tr><td>ON UPDATE CASCADE</td><td>级联更新，只能是创建表的时候创建级联关系。更新主表中的主键，从表中的外键列也自动同步更新</td></tr><tr><td>ON DELETE CASCADE</td><td>级联删除</td></tr></tbody></table><pre><code class="sql">--  删除 employee 表，重新创建 employee 表，添加级联更新和级联删除DROP TABLE employee;CREATE TABLE employee(id INT PRIMARY KEY AUTO_INCREMENT,NAME VARCHAR(20),age INT,dep_id INT, -- 外键对应主表的主键-- 创建外键约束CONSTRAINT emp_depid_fk FOREIGN KEY (dep_id) REFERENCES department(id) ON UPDATE CASCADE ON DELETE CASCADE # 添加级联更新和级联删除);-- 再次添加数据到员工表和部门表INSERT INTO employee (NAME, age, dep_id) VALUES ('张三', 20, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('李四', 21, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('王五', 20, 1);INSERT INTO employee (NAME, age, dep_id) VALUES ('老王', 20, 2);INSERT INTO employee (NAME, age, dep_id) VALUES ('大王', 22, 2);INSERT INTO employee (NAME, age, dep_id) VALUES ('小王', 18, 2);DROP TABLE department; # Cannot delete or update a parent row: a foreign key constraint fails# 把部门表中 id 等于 1 的部门改成 id 等于 10UPDATE department SET id=10 WHERE id=1; # 1 queries executed, 1 success, 0 errors, 0 warnings-- 删除部门号是 2 的部门DELETE FROM department WHERE id=2;</code></pre><h3 id="3-7-数据约束小结"><a href="#3-7-数据约束小结" class="headerlink" title="3.7 数据约束小结"></a>3.7 数据约束小结</h3><table><thead><tr><th>约束名</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>主键</td><td>primary key</td><td>唯一且非空</td></tr><tr><td>默认</td><td>default</td><td>如果一列没有值，使用默认值</td></tr><tr><td>非空</td><td>not null</td><td>这一列必须有值</td></tr><tr><td>唯一</td><td>unique</td><td>这一列不能有重复值</td></tr><tr><td>外键</td><td>foreign key</td><td>主表中主键列，在从表中外键列</td></tr></tbody></table><h2 id="4-表与表之间的关系"><a href="#4-表与表之间的关系" class="headerlink" title="4. 表与表之间的关系"></a>4. 表与表之间的关系</h2><table><thead><tr><th>表与表之间的三种关系</th></tr></thead><tbody><tr><td>一对多：最常用的关系 部门和员工</td></tr><tr><td>多对多：学生选课表 和 学生表， 一门课程可以有多个学生选择，一个学生选择多门课程</td></tr><tr><td>一对一：相对使用比较少。员工表 简历表， 公民表 护照表</td></tr></tbody></table><h3 id="4-1-一对多"><a href="#4-1-一对多" class="headerlink" title="4.1 一对多"></a>4.1 一对多</h3><p>一对多(1:n) 例如：班级和学生，部门和员工，客户和订单，分类和商品</p><p>一对多建表原则: 在从表(多方)创建一个字段,字段作为外键指向主表(一方)的主键</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/20/oneToMany-1558281810598.jpg" alt="title"></p><h3 id="4-2-多对多"><a href="#4-2-多对多" class="headerlink" title="4.2 多对多"></a>4.2 多对多</h3><p>多对多(m:n) 例如：老师和学生，学生和课程，用户和角色</p><p>多对多关系建表原则: 需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主 键。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/20/ManyToMany-1558281920649.jpg" alt="title"></p><h3 id="4-3-一对一"><a href="#4-3-一对一" class="headerlink" title="4.3 一对一"></a>4.3 一对一</h3><p>一对一（1:1） 可以在任意一方添加外键指向另一方的主键。</p><p>两种建表原则：</p><ol><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一 UNIQUE</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/20/OneToOne-1558282085899.jpg" alt="title"></p><h3 id="4-4-综合案例"><a href="#4-4-综合案例" class="headerlink" title="4.4 综合案例"></a>4.4 综合案例</h3><p>根据途牛网的旅游分类、旅游航线等信息设计数据库表结构</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/20/tuniu-1558320997129.jpg" alt="title"></p><h4 id="SQL语句实现"><a href="#SQL语句实现" class="headerlink" title="SQL语句实现"></a>SQL语句实现</h4><pre><code class="sql">/*1. 创建旅游线路分类表，tab_categorycid 主键，自增cname 分类名称，唯一，*/CREATE TABLE tab_category(cid INT PRIMARY KEY AUTO_INCREMENT,cname VARCHAR(100) UNIQUE);/*2. 创建航线route表rid ，旅游线路主键，自增rname 旅游线路名称，非空唯一，price 价格rdate 上架时间，cid 外键*/CREATE TABLE tab_route(rid INT PRIMARY KEY AUTO_INCREMENT,rname VARCHAR(100) UNIQUE NOT NULL,price DOUBLE,rdate DATE,cid INT,FOREIGN KEY(cid) REFERENCES tab_category(cid) -- 外键指向主表主键);/*3. 创建用户表 tab_useruid 用户主键，自增长username 用户名长度 100，唯一，非空password 密码长度 30，非空name 真实姓名长度 100birthday 生日sex 性别，定长字符串 1telephone 手机号，字符串 11email 邮箱，字符串长度 100*/CREATE TABLE tab_user(uid INT PRIMARY KEY AUTO_INCREMENT,username VARCHAR(100) UNIQUE NOT NULL,PASSWORD VARCHAR(30) NOT NULL,NAME VARCHAR(100),birthday DATE,sex CHAR(1) DEFAULT '男',telephone VARCHAR(11),email VARCHAR(100));/*4. 创建用户和航线的中间表，收藏表:创建收藏表 tab_favoriterid 旅游线路id,外键date 收藏时间uid 用户 id,外键rid 和 uid 不能重复,设置复合主键,同一个用户不能收藏同一个线路两次*/CREATE TABLE tab_favorite(rid INT, -- 旅游线路idfavtime DATETIME,uid INT, -- 用户id-- 创建复合主键PRIMARY KEY(rid,uid),FOREIGN KEY(rid) REFERENCES tab_route(rid),FOREIGN KEY(uid) REFERENCES tab_user(uid));</code></pre><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/20/ExerciseCase-1558321667308.jpg" alt="title"></p><h3 id="4-5-表与表之间的关系小结"><a href="#4-5-表与表之间的关系小结" class="headerlink" title="4.5 表与表之间的关系小结"></a>4.5 表与表之间的关系小结</h3><table><thead><tr><th>表与表的关系</th><th>关系的维护</th></tr></thead><tbody><tr><td>一对多</td><td>主外键的关系</td></tr><tr><td>多对多</td><td>中间表，两个一对多</td></tr><tr><td>一对一</td><td>特殊一对多，从表中的外键设为唯一；从表的主键又是外键</td></tr></tbody></table><h2 id="6-数据库设计"><a href="#6-数据库设计" class="headerlink" title="6. 数据库设计"></a>6. 数据库设计</h2><ul><li>范式：好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式。</li></ul><h3 id="6-1-三大范式"><a href="#6-1-三大范式" class="headerlink" title="6.1 三大范式"></a>6.1 三大范式</h3><ul><li>范式概念：设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式。各种范式呈递次规范，越高的范式数据库冗余越小。</li><li>六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</li></ul><p>满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了</p><h3 id="6-2-第一范式-1NF"><a href="#6-2-第一范式-1NF" class="headerlink" title="6.2  第一范式:1NF"></a>6.2  第一范式:1NF</h3><p>数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项。即表中的某个列有多个值时，必须拆分为不同的列。简而言之，第一范式每一列不可再拆分，称为原子性。</p><h4 id="示例：班级表"><a href="#示例：班级表" class="headerlink" title="示例：班级表"></a>示例：班级表</h4><table><thead><tr><th>学号</th><th>姓名</th><th>班级</th></tr></thead><tbody><tr><td>1</td><td>小张</td><td>103班</td></tr><tr><td>2</td><td>小李</td><td>102班</td></tr><tr><td>3</td><td>小王</td><td>203班</td></tr></tbody></table><h3 id="6-3-第二范式：2NF"><a href="#6-3-第二范式：2NF" class="headerlink" title="6.3 第二范式：2NF"></a>6.3 第二范式：2NF</h3><p>在INF的前提下，非码属性必须完全依赖于码(在1NF基础上消除非主属性对主码的部分函数依赖)，即让表中的非主属性字段都<strong>完全依赖</strong>于主键。<br>所谓完全依赖是指不能存在仅依赖主键一部分的列。简而言之，第二范式就是在第一范式的基础上所有列完全依赖于主键列。</p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><table><thead><tr><th>学号</th><th>姓名</th><th>系名</th><th>系主任</th><th>课程名称</th><th>分数</th></tr></thead><tbody><tr><td>10010</td><td>张无忌</td><td>经济系</td><td>张三丰</td><td>高等数学</td><td>95</td></tr><tr><td>10010</td><td>张无忌</td><td>经济系</td><td>张三丰</td><td>大学英语</td><td>87</td></tr><tr><td>10010</td><td>张无忌</td><td>经济系</td><td>张三丰</td><td>计算机基础</td><td>65</td></tr><tr><td>10011</td><td>令狐冲</td><td>法律系</td><td>任我行</td><td>法理学</td><td>77</td></tr><tr><td>10011</td><td>令狐冲</td><td>法律系</td><td>任我行</td><td>大学英语</td><td>87</td></tr><tr><td>10011</td><td>令狐冲</td><td>法律系</td><td>任我行</td><td>法律社会学</td><td>65</td></tr><tr><td>10012</td><td>杨过</td><td>法律系</td><td>任我行</td><td>法律社会学</td><td>95</td></tr><tr><td>10012</td><td>杨过</td><td>法律系</td><td>任我行</td><td>法理学</td><td>97</td></tr><tr><td>10012</td><td>杨过</td><td>法律系</td><td>任我行</td><td>大学英语</td><td>99</td></tr></tbody></table><ol><li>函数依赖：A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A。例：学号–&gt;姓名，通过学号可以确定唯一姓名值，故称姓名依赖于学号 ；(学号，课程名称) –&gt; 分数，通过学号+课程名称可以确定唯一分数值，故分数依赖于学号+课程名称。</li><li>完全函数依赖：A–&gt;B,如果A是一个属性组，则B属性值的确定需要依赖于A属性组中所有的属性值。例：(学号，课程名称) –&gt; 分数，确定分数的值只能通过(学号+课程名称)属性组确定，故分数完全依赖于(学号+课程名称)。</li><li>部分函数依赖：A–&gt;B, 如果A是一个属性组，则B属性值的确定只需要依赖于A属性组中某一些值即可。例如：(学号，课程名称) –&gt;姓名，姓名属性值可以通过学号查询，故称姓名属性值部分依赖于(学号，课程名称)属性组。</li><li>传递函数依赖：A—&gt;B, B—&gt;C, 如果通过A属性(属性组)的值，可以确定唯一的B属性值，在通过B属性值可以确定唯一C属性值，则称C传递函数依赖于A。例如：学号–&gt;系名，系名–&gt;系主任，通过学号属性值可以确定唯一系名，通过系名可以确定唯一系主任，那么就可以通过学号确定系主任，故称系主任传递依赖于学号。</li><li>码：如果在一张表中，一个属性或属性组，被其他所有属性完全依赖，则称这一属性或属性组为该表的码。例如：上表中的码为：(学号，课程名称)，通过该属性组可确定所有其他属性值，所有其他属性完全依赖于该属性组，故称为码。<ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除码属性组外的属性</li></ul></li></ol><p><strong>第二范式的特点</strong>：</p><ol><li>一张表只描述一件事情。</li><li>表中的每一列都完全依赖于主键</li></ol><h3 id="6-4-第三范式：3NF"><a href="#6-4-第三范式：3NF" class="headerlink" title="6.4 第三范式：3NF"></a>6.4 第三范式：3NF</h3><p>在2NF基础上，任何非主属性不依赖于其他非主属性(在2NF基础上消除传递依赖)，即表中每一列都直接依赖于主键，而不是通过其他的列来间接依赖于主键，任何非主列不得传递依赖于主键。</p><p><strong>示例</strong>：</p><p>有如下学生信息表</p><table><thead><tr><th>学号</th><th>姓名</th><th>所在学院</th><th>学院地点</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>计算机系</td><td>杭州校区</td></tr></tbody></table><ul><li>存在传递依赖关系：学号–&gt;所在学院–&gt;学院地点</li><li>消除依赖，拆分成两张表</li></ul><p>学生表：<br>| 学号 | 姓名 | 所在学院编号(外键) |<br>| —- | —- | —————— |<br>| 1    | 小明 | 1                  |</p><p>学院表：<br>| 学院编号 | 学院地点 |<br>| ——– | ——– |<br>| 1        | 杭州校区 |</p><h3 id="6-5-三大范式总结"><a href="#6-5-三大范式总结" class="headerlink" title="6.5 三大范式总结"></a>6.5 三大范式总结</h3><table><thead><tr><th>范式</th><th>特点</th></tr></thead><tbody><tr><td>1NF</td><td>原子性：表中每列不可再拆分</td></tr><tr><td>2NF</td><td>不产生局部依赖，一张表只描述一件事情</td></tr><tr><td>3NF</td><td>不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其他列间接依赖于主键。</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2019/05/18/database/mysql-ji-chu/"/>
      <url>/2019/05/18/database/mysql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据库基本概念"><a href="#1-数据库基本概念" class="headerlink" title="1. 数据库基本概念"></a>1. 数据库基本概念</h2><p>数据库(DataBase)，简称DB，用于存储和管理数据的仓库。</p><p>数据库的特点：</p><ol><li>持久化存储数据。数据库其实就是一个文件系统。</li><li>方便存储和管理数据。</li><li>使用了统一的方式操作数据库。</li></ol><a id="more"></a><p><a href="http://note.youdao.com/noteshare?id=3490275e3fa4e6d37fc8bedd3794aa1f&amp;sub=7A387FC8255F4099AB24DCF98198C0E3" target="_blank" rel="noopener">安装MySQL</a></p><p><a href="http://note.youdao.com/noteshare?id=fe0558c8d90f7a4a831785455a30a8ac&amp;sub=WEB2676b40c253e961e9a2574607287e12f" target="_blank" rel="noopener">MySQL基本操作</a></p><blockquote><p>Tips：在MySQL中，数据库等于文件夹，表等于文件，数据就是数据。</p></blockquote><h3 id="2-SQL语句"><a href="#2-SQL语句" class="headerlink" title="2. SQL语句"></a>2. SQL语句</h3><p>Structured Query Language(结构化查询语句)，简称SQL。</p><p>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在异同的地方。</p><h4 id="2-1-SQL通用语法"><a href="#2-1-SQL通用语法" class="headerlink" title="2.1 SQL通用语法"></a>2.1 SQL通用语法</h4><ol><li>SQL语句可以单行或多行书写，以分号结尾。</li><li>可以使用空格和缩进来增强语句的可读性。</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</li><li>注释方式：<ul><li>单行注释：– 注释内容 或 # 注释内容(MySQL特有)</li><li>多行注释：/*  注释内容  */</li></ul></li></ol><h3 id="2-2-SQL分类"><a href="#2-2-SQL分类" class="headerlink" title="2.2 SQL分类"></a>2.2 SQL分类</h3><ol><li>数据定义语言(Data Definition Language)，简称<strong>DDL</strong>。用来定义数据库对象：数据库、表、列等。关键字：create、drop、alter等。</li><li>数据操作语言(Data Manipulation Language)，简称<strong>DML</strong>。用来对数据库中表的数据进行增删改。关键字：insert、delete、update等。</li><li>数据查询语言(Data Query Language)，简称<strong>DQL</strong>。用以查询数据库中表的记录(数据)。关键字：select，where等。</li><li>数据控制语言(Data Control Language)，简称<strong>DCL</strong>。用来定义数据库的访问权限和安全级别，以及创建用户。关键字：GRANT,REVOKE等。</li></ol><h4 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h4><p><strong>操作数据库： CRUD</strong></p><h5 id="1-C-Create-创建"><a href="#1-C-Create-创建" class="headerlink" title="1. C(Create):创建"></a>1. C(Create):创建</h5><ul><li>创建数据库：<code>create databases 数据库名称;</code></li><li>创建数据库，判断不存在才创建：<code>create database if not exists 数据库名称;</code></li><li>创建数据库，指定字符集：<code>create database 数据库名称 character set 字符集名;</code></li><li>例：创建db4数据库，判断是否存在，并指定字符集为gbk：<code>create database if not exists db4 character set gbk;</code></li></ul><h5 id="2-R-Retrieve-查询"><a href="#2-R-Retrieve-查询" class="headerlink" title="2. R(Retrieve):查询"></a>2. R(Retrieve):查询</h5><ul><li>查询所有数据库名称：<code>show databases;</code></li><li>查询某个数据库的创建语句和字符集：<code>show create database 数据库名称;</code></li></ul><h5 id="3-U-Update-修改"><a href="#3-U-Update-修改" class="headerlink" title="3. U(Update):修改"></a>3. U(Update):修改</h5><ul><li>修改数据库的字符集:<code>alter database 数据库名称 character set 字符集名称;</code></li></ul><h5 id="4-D-Delete-删除"><a href="#4-D-Delete-删除" class="headerlink" title="4. D(Delete):删除"></a>4. D(Delete):删除</h5><ul><li>删除数据库：<code>drop database 数据库名称;</code></li><li>判断数据库存在才删除：<code>drop database if exists 数据库名称;</code></li></ul><h5 id="5-使用数据库"><a href="#5-使用数据库" class="headerlink" title="5. 使用数据库"></a>5. 使用数据库</h5><ul><li>查询当前正在使用的数据库名称：<code>select database();</code></li><li>使用数据库：<code>use 数据库名称;</code></li></ul><p><strong>操作表：CRUD</strong></p><h5 id="1-C-Create-：创建"><a href="#1-C-Create-：创建" class="headerlink" title="1. C(Create)：创建"></a>1. C(Create)：创建</h5><pre><code class="sql">create table 表名(    列名1 数据类型1,    列名2 数据类型2,    ... ...    列名n 数据类型n); # 注意：最后一列，不需要加逗号','/*    常用数据库类型:    1. int：整数类型。例：`age int`    2. double：小数类型。例：`score double(5,2)`    3. date：日期(年月日)。例：`date yyyy-MM-dd`    4. datetime：日期(年月日时分秒)。例：`date yyyy-MM-dd HH:mm:ss`    5. timestamp：时间戳类型(年月日时分秒)。如不赋值，则默认使用当前系统时间，来自动赋值。    6. varchar：字符串类型。例：`name`*/</code></pre><blockquote><p>Tips: 如果想复制一张表，可以使用<code>create table 表名 like 被复制表名;</code></p></blockquote><h5 id="2-R-Retrieve-：查询"><a href="#2-R-Retrieve-：查询" class="headerlink" title="2. R(Retrieve)：查询"></a>2. R(Retrieve)：查询</h5><ul><li>查询某个数据库中所有表的名称：<code>show tables;</code></li><li>查询表结构：<code>desc 表名;</code></li></ul><h5 id="3-U-Update-：修改"><a href="#3-U-Update-：修改" class="headerlink" title="3. U(Update)：修改"></a>3. U(Update)：修改</h5><ol><li>修改表名：<code>alter table 表名 rename to 新的表名;</code></li><li>修改表的字符集：<code>alter table 表名 character set 字符集名称;</code></li><li>添加一列：<code>alter table 表名 add 列名 数据类型;</code></li><li>修改列名称：<code>alter table 表名 change 列名 新列名 新数据类型;</code></li><li>修改列数据类型：<code>alter table 表名 modify 列名 新数据类型;</code></li><li>删除列：<code>alter table 表名 dorp 列名;</code></li></ol><h5 id="4-D-Delete-：删除"><a href="#4-D-Delete-：删除" class="headerlink" title="4. D(Delete)：删除"></a>4. D(Delete)：删除</h5><ul><li>删除表：<code>drop table 表名;</code></li><li>判断表存在才删除：<code>drop table if exists 表名;</code></li></ul><h4 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h4><p><strong>1. 添加数据</strong></p><ul><li>语法：<code>insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);</code></li><li>注意事项：列名和值要一一对应；如果表名后面不定义列名，则默认给所有列添加值；除了数字类型，其他类型需要使用单双引号引起来。</li></ul><p><strong>2. 删除数据</strong></p><ul><li>语法：<code>delete from 表名 [where 条件]</code></li><li>注意事项：如果不指定条件，则删除表中所有记录；如果要删除表所有记录，推荐使用<code>TRUNCATE TABLE 表名;</code></li></ul><p><strong>3. 修改数据</strong></p><ul><li>语法：<code>update 表名 set 列名1=值1,列名2=值2,...[where 条件];</code></li><li>注意：如果不加任何条件，则会将表中所有记录全部修改。</li></ul><h4 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h4><p><strong>简单查询</strong>：</p><ol><li>查询表所有行和列的数据：<code>select * from 表名;</code></li><li>查询指定列：<code>select 字段名1,字段名2,...from 表名;</code></li><li>指定列/表的别名进行查询：<code>select 字段名1 AS 别名1,字段名2 AS 别名2,... from 表名 AS 表别名;</code>  </li></ol><blockquote><p>Tips: 表使用别名一般用于多表查询操作。</p></blockquote><p><strong>清除重复值</strong>：</p><p>查询指定列并且结果不出现重复数据：<code>select distinct 字段名 from 表名;</code></p><p><strong>查询结果参与运算</strong>：</p><ol><li>某列数据和固定值运算：<code>select 列名1+固定值 from 表名;</code></li><li>某列数据和其他列数据参与运算：<code>select 列名1+列名2 from 表名;</code></li></ol><blockquote><p>注意：参与运算的必须是数值类型</p></blockquote><p>SQL语句示例：</p><pre><code class="sql">/*    给student表添加数学、英语成绩列，给每条记录添加对应的数学和英语成绩，查询时将数学和英语的成绩相加显示。*/SELECT * FROM student;ALTER TABLE student ADD math INT; # 添加数学列ALTER TABLE student ADD english INT; # 添加英语列-- 两位同学添加数学英语成绩UPDATE `student` SET `math` = '86' , `english` = '94' WHERE `age` = '19' AND `name` = 'xiaoming' AND `math` IS NULL AND `english` IS NULL;UPDATE `student` SET `math` = '79' , `english` = '88' WHERE `age` = '18' AND `name` = 'xiaohua' AND `math` IS NULL AND `english` IS NULL;-- 给所有数学加5分SELECT math+5 FROM student;-- 查询math+english的和SELECT math+english FROM student;-- 查询总成绩，并使用别名显示SELECT *,(math+english) AS 总成绩 FROM student;</code></pre><p><strong>条件查询</strong>：</p><p>根据指定查询条件，对信息进行过滤显示，语句：<code>select 字段名 from 表名 where 条件;</code></p><ul><li>SQL语句示例</li></ul><pre><code class="sql">-- 创建一个学生表，包含如下列：CREATE TABLE student2(    id INT, -- 编号    NAME VARCHAR(20), # 姓名    age INT, -- 年龄    sex VARCHAR(5), # 性别    address VARCHAR(100), -- 地址    math INT, # 数学    english INT -- 英语    );INSERT INTO student2(id,NAME,age,sex,address,math,english) VALUES(1,'马云',55,'男','杭州',66,78),(2,'马化腾',45,'女','深圳',98,87),(3,'马景涛',55,'男','香港',56,77),(4,'柳岩',20,'女','湖南',76,65),(5,'柳青',20,'男','湖南',86,NULL),(6,'刘德华',57,'男','香港',99,99),(7,'马德',22,'女','香港',99,99),(8,'德玛西亚',18,'男','南京',56,65);</code></pre><ul><li>运算符</li></ul><table><thead><tr><th>比较运算符</th><th>说明</th></tr></thead><tbody><tr><td>&gt;、&lt;、&lt;=、&gt;=、=、&lt;&gt;</td><td>&lt;&gt;在SQL中表示不等于，在sql中也可以使用!=，没有==</td></tr><tr><td>BETWEEN…AND</td><td>在一个范围之内，如：between 100 and 200 相当于条件在100到200之间。</td></tr><tr><td>IN(集合)</td><td>集合表示多个值，使用逗号分隔</td></tr><tr><td>LIKE’张%’</td><td>模糊查询</td></tr><tr><td>IS NULL</td><td>查询某一列为NULL的值，注：不能写=NULL</td></tr></tbody></table><ul><li>操作示例</li></ul><pre><code class="sql"># 查询math分数大于80分的学生SELECT * FROM student2 WHERE math&gt;80;# 查询english分数小于或等于80分的学生SELECT * FROM student2 WHERE english &lt;=80;# 查询age等于20岁的学生SELECT * FROM student2 WHERE age=20;# 查询age不等于20岁的学生，注：不等于有两种写法SELECT * FROM student2 WHERE age&lt;&gt;20;SELECT * FROM student2 WHERE age!=20;</code></pre><ul><li>逻辑运算符</li></ul><table><thead><tr><th style="text-align:left">逻辑运算符</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">and 或 &amp;&amp;</td><td>与，SQL中建议使用前者，后者不通用。</td></tr><tr><td style="text-align:left">or 或 x</td><td>或</td></tr><tr><td style="text-align:left">not 或 !</td><td>非</td></tr></tbody></table><blockquote><p> x ： <code>||</code></p></blockquote><ul><li>操作示例</li></ul><pre><code class="sql"># 查询age大于35且性别为男的学生SELECT * FROM student2 WHERE age&gt;35 AND sex='男';# 查询age大于35或性别为男的学生SELECT * FROM student2 WHERE age&gt;35 OR sex='男';# 查询id是1或3或5的学生SELECT * FROM student2 WHERE id=1 OR id=3 OR id=5;</code></pre><ul><li><p>in 关键字</p><p>in里面的每个数据都会作为一次条件，只要满足条件就会显示：<code>select 字段名 from 表名 where 字段 in(数据1，数据2,...);</code></p></li></ul><pre><code class="sql"># 查询id是1或3或5的学生，使用inSELECT * FROM student2 WHERE id IN(1,3,5);# 查询id不是1或3或5的学生SELECT * FROM student2 WHERE id NOT IN(1,3,5);</code></pre><ul><li>范围查询</li></ul><p>表示从值1到值2范围，全部包含：<code>between 值1 and 值2</code></p><pre><code class="sql"># 查询english成绩大于等于75，且小于等于90的学生SELECT * FROM student2 WHERE english BETWEEN 75 AND 90;</code></pre><ul><li>like关键字</li></ul><p>表示模糊查询:<code>select * from 表名 where 字段名 like '通配符字符串;'</code></p><p>通配符：<code>%,匹配任意多个字符串</code>; <code>_,匹配单个字符</code></p><pre><code class="sql"># 查询姓马的学生SELECT * FROM student2 WHERE NAME LIKE '马%';# 查询姓名中包含'德'字的学生SELECT * FROM student2 WHERE NAME LIKE '%德%';# 查询姓马，且姓名有两个字的学生SELECT * FROM student2 WHERE NAME LIKE '马_';</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Junit单元测试，反射和注解</title>
      <link href="/2019/05/16/javabasics/junit-dan-yuan-ce-shi-he-fan-she/"/>
      <url>/2019/05/16/javabasics/junit-dan-yuan-ce-shi-he-fan-she/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Junit单元测试"><a href="#1-Junit单元测试" class="headerlink" title="1. Junit单元测试"></a>1. Junit单元测试</h2><h4 id="测试的分类："><a href="#测试的分类：" class="headerlink" title="测试的分类："></a>测试的分类：</h4><ol><li>黑盒测试：不需要写代码，给输入值，看输出值是否达到预期值。</li><li>白盒测试：要写代码。关注程序具体的执行流程。</li></ol><a id="more"></a><h4 id="Junit使用步骤"><a href="#Junit使用步骤" class="headerlink" title="Junit使用步骤"></a>Junit使用步骤</h4><ol><li>创建测试包(创建一个与被测试包同级的文件夹)</li><li>包内定义测试类(命名规范：被测试类名称+Test)</li><li>在测试类里面定义测试方法，如下图所示：</li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/16/Junit01-1557992450228.jpg" alt="title"></p><p><strong>参考资料</strong>：<a href="https://www.ibm.com/developerworks/cn/java/j-introducing-junit5-part1-jupiter-api/index.html" target="_blank" rel="noopener">Junit5基本使用</a></p><h4 id="部分断言方法"><a href="#部分断言方法" class="headerlink" title="部分断言方法"></a>部分断言方法</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/16/AssertMethod-1557993543134.jpg" alt="title"></p><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><pre><code class="java">// 定义计算类public class Calculator {    public int add(int a, int b){//        int i = 3/0;        return a - b; // 故意写错，以测试accertEquals方法    }    public int sub(int a, int b){        return a - b;    }}// 定义测试类import Junit.Calculator;import org.junit.jupiter.api.Test; // Junit5改进后，所有方法都在jupiter.api下import org.junit.jupiter.api.Assertions; public class CalculatorTest {    @BeforeAll // 一般用于资源的申请    public void init(){        System.out.println("所有测试方法执行前自动执行");    }    @AfterAll // 用于资源的释放    public void close(){        System.out.println("所有测试方法结束后自动执行");    }    @Test    public void testAdd(){        Calculator c = new Calculator();        int add = c.add(1, 2);        // 断言，我断言这个结果是3        Assertions.assertEquals(3,add); // 不通过，报错，并显示红色    }    @Test    public void testSub(){        Calculator c = new Calculator();        int sub = c.sub(1, 2);        Assertions.assertEquals(-1,sub); // 通过，显示绿色    }}</code></pre><h2 id="2-反射：框架设计的灵魂"><a href="#2-反射：框架设计的灵魂" class="headerlink" title="2. 反射：框架设计的灵魂"></a>2. 反射：框架设计的灵魂</h2><p>框架被称为半成品软件。我们可以在框架的基础上进行软件开发，简化编码。</p><p><strong>反射</strong>：将类的各个组成部分封装为其他对象，这就是反射机制</p><p>反射的好处：</p><ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol><h3 id="2-1-获取Class对象的方式"><a href="#2-1-获取Class对象的方式" class="headerlink" title="2.1 获取Class对象的方式"></a>2.1 获取Class对象的方式</h3><ol><li><strong>Class.forName(“全类名”)</strong>：将字节码文件加载进内存，返回Class对象。多用于配置文件，将类名定义在配置文件中。来读取文件，加载类。</li><li><strong>类名.class</strong>：通过类名的属性class获取。多用于参数的传递。</li><li><strong>对象.getClass()</strong>：<code>getClass()</code>方法在<code>Object</code>类中定义，所以可以直接使用。多用于对象获取字节码的方式。</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre><code class="java">public class ReflectDemoGetClass {    public static void main(String[] args) throws Exception {        // 1.Class.forName("全类名")：将字节码文件加载进内存，返回Class对象。        Class cls1 = Class.forName("Demo5_16.reflect.Person");        System.out.println(cls1);        // 2.类名.class：通过类名的属性class获取        Class cls2 = Person.class;        System.out.println(cls2);        // 3. 对象.getClass()：`getClass()`方法在`Object`类中定义，所以可以直接使用        Class cls3 = new Person().getClass();        System.out.println(cls3);        // 使用==比较对象内存地址        System.out.println(cls1 == cls2); // true        System.out.println(cls2 == cls3); // true    }}</code></pre><blockquote><p>Tips ：同一字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p></blockquote><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/16/Java%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5-1558017486873.bmp" alt="Java代码在计算机中的三个阶段"></p><h3 id="2-2-Class对象的功能："><a href="#2-2-Class对象的功能：" class="headerlink" title="2.2 Class对象的功能："></a>2.2 Class对象的功能：</h3><ol><li><p>获取成员变量</p><pre><code class="java">// 四种方式获取成员变量Filed[] getFields() // 获取所有public修饰的成员变量Filed getFiled(String name) // 获取public修饰的指定名称的成员变量Field[] getDeclaredFields() // 获取所有的成员变量,不考虑修饰符Filed getDeclaredField(String name) // 获取指定名称的成员变量,如果不是public修饰的成员变量，可以使用暴力反射获取// 示例代码如下:// Person类public class Person { private String name; private int age; public String a; protected String b; public String c; private String d; // 忽略get\set等方法    }public class ReflectDemo01 { public static void main(String[] args) throws Exception{     // 获取Person的Class对象     Class&lt;Person&gt; personClass = Person.class;     // 获取成员变量     // 1. Field[] getFields() 获取所有public修饰的成员变量     Field[] fields = personClass.getFields();     for (Field f:fields)         System.out.println(f); // public java.lang.String reflect.Person.a     // 2.Field getFiled(String name) // 获取public修饰的指定名称的成员变量     Field a = personClass.getField("a");     // 获取成员变量a的值     Person p = new Person();     Object value = a.get(p);     System.out.println(value); // null     // 设置a的值     a.set(p,"小明");     System.out.println(p);     // 3. Field[] getDeclaredFields() : 获取所有的成员变量,不考虑修饰符     Field[] declaredFields = personClass.getDeclaredFields();     for (Field f:declaredFields)         System.out.println(f);     // 4. Filed getDeclaredField(String name) : 获取指定名称的成员变量     Field d = personClass.getDeclaredField("d");     // 忽略访问权限修饰符的安全检查     d.setAccessible(true); // 暴力反射     System.out.println(d.get(p)); // null }}</code></pre></li><li>获取构造方法<pre><code class="java">// 四种方式获取构造方法Constructor&lt;?&gt;[] getConstructors() // 获取所有的public修饰的构造方法Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes) // 获取指定的public修饰的构造方法Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes) // 获取所有的构造方法，忽略修饰符Constructor&lt;?&gt;[] getDeclaredConstructor() // 获取指定名称的构造方法，非public修饰的可使用暴力反射获取// 代码举例public class ReflectDemo02 { public static void main(String[] args) throws Exception{     // 获取Person的Class对象     Class&lt;Person&gt; personClass = Person.class;     // 1. Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)     // 获取构造器     Constructor&lt;Person&gt; constructor = personClass.getConstructor(String.class, int.class);//        System.out.println(constructor); // public reflect.Person(java.lang.String,int)     // 使用构造器创建对象实例     Person person = constructor.newInstance("小明",22);     System.out.println(person);     // 如果使用空参数构造方法创建对象，操作可以简化为如下：     Person o = personClass.newInstance(); // 不推荐使用     System.out.println(o); }}</code></pre></li><li>获取成员方法<pre><code class="java">// 四种方式获取成员方法Method[] getMethods() // 获取所有public修饰的方法Method getMethod(String name,类&lt;?&gt;... parameterTypes) // 获取指定名称的public修饰的方法Method[] getDeclaredMethods() // 获取所有的成员方法，不考虑修饰符Method getDeclaredMethod(String name,类&lt;?&gt;... parameterTypes) // // 获取指定名称的成员方法,如果不是public修饰的成员变量，可以使用暴力反射获取// 代码示例public class ReflectDemo03 { public static void main(String[] args) throws Exception{     // 获取Person的Class对象     Class&lt;Person&gt; personClass = Person.class;     // 1. Method getMethod(String name,类&lt;?&gt;... parameterTypes): 获取指定名称的public修饰的方法     Method eat = personClass.getMethod("eat");     // 执行无参方法     eat.invoke(new Person());     // 执行有参方法，需传递参数列表     personClass.getMethod("eat",String.class).invoke(new Person(),"food");     // 2. Method[] getDeclaredMethods(): 获取所有public修饰的方法     Method[] methods = personClass.getMethods();     for (Method method:methods)         System.out.println(method);     // 3. Method[] getDeclaredMethods(): 获取所有的成员方法，不考虑修饰符     Method[] declaredMethods = personClass.getDeclaredMethods();     for (Method method:declaredMethods) {         System.out.println(method);         System.out.println(method.getName()); // 获取方法名称     }     // 获取类名称     System.out.println(personClass.getName()); // reflect.Person }}</code></pre></li><li>获取类名 ：<code>String getName()</code></li></ol><h4 id="Field：成员变量"><a href="#Field：成员变量" class="headerlink" title="Field：成员变量"></a>Field：成员变量</h4><ol><li>设置值：<code>void set(Object obj,Object value)</code></li><li>获取值：<code>get(Object obj)</code></li><li>忽略访问权限修饰符的安全检查(又称<strong>暴力反射</strong>)：<code>setAccessible(true)</code></li></ol><h4 id="Constructor：构造方法"><a href="#Constructor：构造方法" class="headerlink" title="Constructor：构造方法"></a>Constructor：构造方法</h4><p>创建对象：<code>T newInstance(Object... initargs)</code></p><blockquote><p>如果使用空参数构造方法创建对象，操作可以简化为：直接使用Class对象的newInstance方法</p></blockquote><h4 id="Method：方法对象"><a href="#Method：方法对象" class="headerlink" title="Method：方法对象"></a>Method：方法对象</h4><p>执行方法：<code>Object invoke(Object obj, Object... args)</code></p><p>获取方法名称：<code>String getName()</code></p><h3 id="2-3-练习案例"><a href="#2-3-练习案例" class="headerlink" title="2.3 练习案例"></a>2.3 练习案例</h3><p>创建一个”框架”(类)，不改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并执行其中的任意方法。</p><h4 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h4><ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><pre><code class="java">public class MyReflectFrame {    public static void main(String[] args) throws Exception {        // 可以创建任意类的对象，可以执行任意方法        // 前提：不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法//        new Student().sleep();        // 1. 加载配置文件        // 1.1 创建Properties对象        Properties pro = new Properties();        // 1.2 加载配置文件，转换一个集合        // 1.2.1 获取class目录下的配置文件        ClassLoader classLoader = MyReflectFrame.class.getClassLoader();// 获取这个字节码文件的类加载器        InputStream is = classLoader.getResourceAsStream("D:\\IDEA_WorkSpace\\JavaWeb\\src\\Demo5_16\\pro.properties"); // 返回用于读取指定资源的输入流        pro.load(is); // NullPointerException: inStream parameter is null!!! (后续回来解决)        // 2. 获取配置文件中定义的数据        String className = pro.getProperty("className"); // 获取配置文件中的类名        String methodName = pro.getProperty("methodName"); // 获取配置文件中的方法名        // 3.加载该类进内存        Class cls = Class.forName(className);        // 4. 创建对象        Object obj = cls.newInstance();        // 5. 获取方法对象        Method method = cls.getMethod(methodName);        // 6. 执行方法        method.invoke(obj);    }}</code></pre><h2 id="3-注解"><a href="#3-注解" class="headerlink" title="3. 注解"></a>3. 注解</h2><p><strong>注解</strong>：说明程序的，给计算机看的。</p><p>注释：用文字描述程序的，给程序员看的。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>注解(Annotation)，也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><h4 id="概念描述"><a href="#概念描述" class="headerlink" title="概念描述"></a>概念描述</h4><ul><li>JDK1.5 之后的新特性</li><li>代码级别的说明，用以说明程序的</li><li>使用注解：<code>@注解名称</code></li></ul><p><strong>作用分类</strong>：</p><ol><li>编写文档：通过代码里标识的注解生成文档[生成文档doc文档]</li><li>代码分析：通过代码里标识的注解对代码进行分析[使用反射]</li><li>编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查[Override]</li></ol><h3 id="3-1-JDK中预定义的一些注解"><a href="#3-1-JDK中预定义的一些注解" class="headerlink" title="3.1 JDK中预定义的一些注解"></a>3.1 JDK中预定义的一些注解</h3><ul><li><code>@Override</code>：检测被该注解标注的方法是否是继承自父类(接口)的</li><li><code>@Deprecated</code>：该注解标注的内容，表示已过时</li><li><code>@SuppressWarnings</code>：压制警告。一般传递参数all，<code>@SuppressWarnings("all")</code></li></ul><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><pre><code class="java">@SuppressWarnings("all") // 压制全部警告public class AnnoDemo2 {    @Override    public String toString(){        return super.toString();    }    @Deprecated    public void show1(){        //有缺陷    }    public void show2(){        // 优化版show2    }    public void demo(){        show1();    }}</code></pre><h3 id="3-2-自定义注解"><a href="#3-2-自定义注解" class="headerlink" title="3.2 自定义注解"></a>3.2 自定义注解</h3><p><strong>基本定义格式</strong></p><pre><code class="java">public @interface 注解名称{    属性列表;}</code></pre><p>其本质<strong>就是一个接口</strong>，该接口默认继承Annotation接口<code>public interface MyAnno extends java.lang.annotation.Annotation{...}</code></p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>接口中的抽象方法被称为属性，定义属性有以下要求：</p><ol><li>属性的返回值类型有这些取值：基本数据类型、String、枚举、注解、以上类型的数组。<pre><code class="java">// 代码示例public @interface MyAnno { int age(); // 八种基本数据类型 String name() default "zhangsan"; // String类型 Person per(); // 枚举类型 MyAnno2 anno2(); // 注解类型 String[] strarr(); // 以上类型数组均可}</code></pre></li><li>定义了属性，在使用时需给属性赋值<pre><code class="java">// 赋值示例@MyAnno(age = 12,per = Person.P1,anno2 = @MyAnno2,strarr = {"a","b"})public class Worker {}</code></pre></li></ol><blockquote><p>小总结：</p><ol><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，且属性名称是value，则名称value可省略，直接写值。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可省略。</li></ol></blockquote><h4 id="元注解-用于描述注解的注解"><a href="#元注解-用于描述注解的注解" class="headerlink" title="元注解(用于描述注解的注解)"></a>元注解(用于描述注解的注解)</h4><ul><li><code>@Target</code>：描述注解能够作用的位置，默认value值有<code>ElementType</code>枚举类型，常用取值有如下三个：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li><li><code>@Retention</code>：描述注解被保留的阶段<ul><li><code>@Retention(RetentionPolicy.RUNTIME)</code>：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到。</li></ul></li><li><code>@Documented</code>：描述注解是否被抽取到api文档中</li><li><code>@Inherited</code>：描述注解是否被子类继承</li></ul><h3 id="3-3-在程序中使用-解析-注解"><a href="#3-3-在程序中使用-解析-注解" class="headerlink" title="3.3 在程序中使用(解析)注解"></a>3.3 在程序中使用(解析)注解</h3><p>就是获取注解中定义的属性值</p><p>使用步骤：</p><ol><li>获取注解定义的位置的对象(Class，Method，Field)</li><li>获取指定的注解：<code>getAnnotation(Class)</code></li></ol><pre><code class="java">// 其实就是在内存中生成了一个该注解接口的子类实现对象public class ProImpl implements Pro{    public String className(){        return "Demo5_16.annotation.Demo1";    }    public String methodName(){        return "show"    }}</code></pre><ol start="3"><li>调用注解中的抽象方法获取配置的属性值</li></ol><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><pre><code class="java">// 自定义的注解Pro@Target(ElementType.TYPE) // 可作用于类上@Retention(RetentionPolicy.RUNTIME) // 保留在runtime阶段public @interface Pro {    String className();    String methodName();}// 方法类public class Demo01 {    public void show(){        System.out.println("demo1...show....");    }}// 测试类@Pro(className = "Demo5_16.annotation.Demo01",methodName = "show")public class MyReflectFrame {    public static void main(String[] args) throws Exception {        // 可以创建任意类的对象，可以执行任意方法        // 前提：不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法        // 解析注解        // 1.1 获取该类的字节码文件对象        Class&lt;MyReflectFrame&gt; myreflect = MyReflectFrame.class;        // 2. 获取上边的注解对象(其实就是在内存中生成了一个该注解接口的子类实现对象)        Pro an = myreflect.getAnnotation(Pro.class);        // 3. 调用注解对象中定义的抽象方法，获取返回值        String className = an.className();        String methodName = an.methodName();        System.out.println(className);        System.out.println(methodName);        // 4. 加载该类进内存        Class cls = Class.forName(className); // ClassNotFoundException: Demo5_16.annotation.Demo1 ?!!!        // 5. 创建对象        Object obj = cls.newInstance();        // 6. 获取方法对象        Method method = cls.getMethod(methodName);        // 7. 执行方法        method.invoke(obj);    }}</code></pre><h3 id="3-4-综合案例"><a href="#3-4-综合案例" class="headerlink" title="3.4 综合案例"></a>3.4 综合案例</h3><pre><code class="java">// 定义简单的计算类，使用@Check注解public class Calculator {    @Check    public void add(){        String str = null;        System.out.println(str.toString()); // 会报空指针异常        System.out.println("1 + 0 =" + (1 + 0));    }    @Check    public void sub(){        System.out.println("1 - 0 =" + (1 - 0));    }    @Check    public void mul(){        System.out.println("1 * 0 =" + (1 * 0));    }    @Check    public void div(){        System.out.println("1 / 0 =" + (1 / 0));    }}// 定义Check注解类@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.METHOD)public @interface Check {}// 定义测试框架类TestCheck// 当主方法执行后，会自动地运行被检测的所有方法(加了Check注解的方法)，判断方法是否有异常，记录到文件中public class TestCheck {    public static void main(String[] args) throws IOException {        Calculator calc = new Calculator();        // 2. 获取字节码文件对象        Class cls = calc.getClass();        // 3. 获取所有方法        Method[] methods = cls.getMethods();        int count = 0; // 出现异常次数        BufferedWriter bw = new BufferedWriter(new FileWriter("D:\\IDEA_WorkSpace\\JavaWeb\\src\\Demo5_16\\Check\\bug" + System.currentTimeMillis() + "txt",true));        for (Method method : methods) {            // 4. 判断方法上是否有Check注解            if (method.isAnnotationPresent(Check.class)){ // 判断该方法的注解对象是否为输入的注解对象，返回布尔值，true则是。                // 5. 有，则执行方法                try {                    method.invoke(calc); // 调用方法                } catch (Exception e) {                    // 6. 捕获异常,将异常记录到文件中                    count ++;                    bw.write(method.getName() + "方法出异常了"); // 获取方法名称                    bw.newLine();                    bw.write("异常的名称："+e.getCause());                    bw.newLine();                    bw.write("异常的原因："+e.getCause().getMessage());                    bw.newLine();                    bw.write("---------------------------");                    bw.newLine();                }            }        }        bw.write("本次测试一共出现" + count + "次异常");        bw.flush();        bw.close();    }}/* 输出文件：div方法出异常了异常的名称：java.lang.ArithmeticException: / by zero异常的原因：/ by zero---------------------------add方法出异常了异常的名称：java.lang.NullPointerException异常的原因：null---------------------------本次测试一共出现2次异常*/</code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>大多数时候，我们会使用注解，而不是自定义注解</li><li>注解给谁用？一般给编译器和解析程序(TestCheck就是解析程序)用</li><li>注解不是程序的一部分，可以理解为注解就是一个标签</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steeam流和方法引用</title>
      <link href="/2019/05/15/javabasics/stream-liu-he-fang-fa-yin-yong/"/>
      <url>/2019/05/15/javabasics/stream-liu-he-fang-fa-yin-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Stream流"><a href="#1-Stream流" class="headerlink" title="1. Stream流"></a>1. Stream流</h2><p>说到Stream便容易想到I/O流，实际上，在Java 8中，得益于Lambda所带来的函数式编程，引入了一个<strong>全新的Stream概念</strong>，用于解决已有集合类库既有的弊端。</p><a id="more"></a><h3 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h3><h4 id="传统集合的多步遍历代码"><a href="#传统集合的多步遍历代码" class="headerlink" title="传统集合的多步遍历代码"></a>传统集合的多步遍历代码</h4><p>几乎所有的集合(如<code>Collection</code>接口或<code>Map</code>接口等)都支持直接或间接的遍历操作。而当我们需要对集合中的元素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。</p><pre><code class="java">public class DemoForEach{    public static void main(String[] agrs){        List&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("xiaozhang");        list.add("xiaoming");        list.add("xiaoli");        list.add("xiaowang");        for(String name:list){            System.out.println(name);        }    }}</code></pre><h4 id="循环遍历的弊端"><a href="#循环遍历的弊端" class="headerlink" title="循环遍历的弊端"></a>循环遍历的弊端</h4><p>Java 8的Lambda让我们可以更加专注于<strong>做什么</strong>(What)，而不是<strong>怎么做</strong>(How)。现在我们看一下上例代码，可以发现：</p><ul><li>for循环的语法就是“<strong>怎么做</strong>”</li><li>for循环的循环体才是”<strong>做什么</strong>“</li></ul><p>为什么使用循环？因为要进行遍历。循环是遍历的唯一方式么？遍历是指对每一个元素逐一进行处理，<strong>而并不是从第一个到最后一个顺次处理的循环</strong>。前者是目的，后者是方式。</p><p>试想一下，如果希望对集合中的元素进行筛选过滤：</p><ol><li>将集合A根据条件一过滤为子集B</li><li>然后在根据条件二过滤为子集C</li></ol><p>在Java 8之前的做法可能为：</p><pre><code class="java">public class DemoNormalFilter {    public static void main(String[] args) {        List&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("张无忌");        list.add("周芷若");        list.add("赵敏");        list.add("张强");        list.add("张三丰");        List&lt;String&gt; zhangList = new ArrayList&lt;&gt;();        for (String name:list)            if (name.startsWith("张")) // startsWith:测试此字符串是否以指定的前缀开始。                zhangList.add(name);        List&lt;String&gt; shortList = new ArrayList&lt;&gt;();        for (String name:zhangList)            if (name.length() == 3)                shortList.add(name);        for (String name:shortList)            System.out.println(name);    }}</code></pre><p>上述代码含有三个循环，作用不同：</p><ol><li>首先筛选所以姓张的人；</li><li>然后筛选名字是三个字的人；</li><li>最后对筛选结果进行打印输出。</li></ol><p>每当我们需要对集合中的元素进行操作时，总是需要进行循环遍历。我们可以使用Lambda的衍生物Stream带来更加优雅的写法。</p><h4 id="Stream的更优写法"><a href="#Stream的更优写法" class="headerlink" title="Stream的更优写法"></a>Stream的更优写法</h4><p>下面来看使用Java 8的Stream API后的代码：</p><pre><code class="java">public class DemoStreamFilter {    public static void main(String[] args) {        List&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("张无忌");        list.add("周芷若");        list.add("赵敏");        list.add("张强");        list.add("张三丰");        list.stream()                .filter(s -&gt; s.startsWith("张"))                .filter(s -&gt; s.length() == 3)                .forEach(System.out::println);    }}</code></pre><p>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：<strong>获取流、过滤姓张、过滤长度为3、逐一打印</strong>。代码中并没有体现使用线性循环或是其他任何算法进行遍历，我们真正要做的事情内容被更好地体现在代码中。</p><h3 id="1-2-流式思想概述"><a href="#1-2-流式思想概述" class="headerlink" title="1.2 流式思想概述"></a>1.2 流式思想概述</h3><p><strong>注意：请暂时忘记对传统IO流的固有印象</strong>！</p><p>整体来看，流式思想类似于工厂车间的“<strong>生产流水线</strong>”</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/15/Stream01-1557888489833.jpg" alt="title"></p><p>当需要对多个元素进行操作(特别是多步操作)时，考虑到性能及便利性，我们应该首先拼好一个”模型”步骤方案，然后再按照方案去执行它。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/15/StreamModel-1557888739336.jpg" alt="title"></p><p>这张图展示了过滤、映射、跳过、计数等多步操作，这是一种集合元素的处理方案，而方案就是一种”函数模型”。图中的每一个方框都是一个”流”，调用指定的方法，可以从一个流模型转换为另一个流模型。而最右侧的数字3是最终结果。</p><p>这里的<code>filter</code>、<code>map</code>、<code>skip</code>都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法<code>count</code>执行时，整个模型才会按照指定策略执行操作。而这得益于Lambda的延迟执行特性。</p><blockquote><p>备注：“Stream流”其实是一个集合元素的<strong>函数模型</strong>，它并不是集合，也不是数据结构，其本身并不存储任何元素（或其地址值）。</p></blockquote><p>Stream(流)是一个来自数据源的元素队列</p><ul><li>元素是特定类型的对象，形成一个队列。Java中的Stream并不会存储元素，而是按需计算。</li><li><strong>数据源</strong>流的来源。可以是集合、数组等。</li></ul><p>和以前的Collection操作不同，Stream操作还有两个基础的特征：</p><ul><li><strong>Pipelinling</strong>：中间操作都会返回流对象本身。这样多个操作可以串联成一个管道，如同流式风格(fluent style)。这样做可以对操作进行优化，比如延迟执行(laziness)和短路(short-circuiting)。</li><li><strong>内部迭代</strong>：以前对集合遍历都是通过Iterator或者增强for的方式，显式的在集合外部进行迭代，这叫做外部迭代。Stream提供了内部迭代的方式，流可以直接调用遍历方法。</li></ul><p>当使用一个流时，通常包括三个基本步骤：获取一个数据源(source) –&gt; 数据转换 –&gt; 执行操作获取想要的结果。每次转换原有Stream对象不变，返回一个新的Stream对象(可以有多次转换)，这就允许对其的操作可以像链条一样排列，变成一个管道。</p><h4 id="1-3-获取流"><a href="#1-3-获取流" class="headerlink" title="1.3 获取流"></a>1.3 获取流</h4><p><code>java.util.stream.Stream&lt;T&gt;</code> 是Java 8 新加入的最常用的流接口(该接口不是函数式接口)。</p><p>获取流的方式：</p><ul><li>所有的<code>Collection</code>集合都可以通过<code>stream</code>默认方法获取流；</li><li><code>Stream</code>接口的静态方法<code>of</code>可以获取数组对应的流。</li></ul><h4 id="根据Collection获取流"><a href="#根据Collection获取流" class="headerlink" title="根据Collection获取流"></a>根据Collection获取流</h4><p>首先，<code>java.util.Collection</code>接口中加入了default方法 <code>stream</code> 用来获取流，所以其所有实现类均可获取流。</p><pre><code class="java">public class DemoGetStream {    public static void main(String[] args) {        List&lt;String&gt; list = new ArrayList&lt;&gt;();        Stream&lt;String&gt; stream1 = list.stream();        Set&lt;String&gt; set = new HashSet&lt;&gt;();        Stream&lt;String&gt; stream2 = set.stream();    }}</code></pre><h4 id="根据Map获取流"><a href="#根据Map获取流" class="headerlink" title="根据Map获取流"></a>根据Map获取流</h4><p><code>java.util.Map</code>接口不是<code>Collection</code>的子接口，且其K-V数据结构不符合流元素的单一特征，所以获取对应的流需要分key、value或entry等情况：</p><pre><code class="java">public class DemoMapGetStream {    public static void main(String[] args) {        Map&lt;String,String&gt; map = new HashMap&lt;&gt;();        Stream&lt;String&gt; keyStream = map.keySet().stream(); // 获取键流        Stream&lt;String&gt; valueStream = map.values().stream(); // 获取值流        Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream(); // 获取键值对流    }}</code></pre><h4 id="根据数组获取流"><a href="#根据数组获取流" class="headerlink" title="根据数组获取流"></a>根据数组获取流</h4><p>如果使用的是数组，由于数组对象不可添加默认方法，所以<code>Stream</code>接口中提供了静态方法<code>of</code>,使用实例如下：</p><pre><code class="java">public class DemoArrGetStream {    public static void main(String[] args) {        String[] arr = {"张","李","王"};        Stream&lt;String&gt; stream = Stream.of(arr);    }}// of方法的参数是一个可变参数，所以支持数组</code></pre><h3 id="1-4-常用方法"><a href="#1-4-常用方法" class="headerlink" title="1.4 常用方法"></a>1.4 常用方法</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/15/StreamMethod-1557892482395.jpg" alt="title"></p><p>流模型的操作很丰富，下面介绍一些常用的API。这些方法可以被分成两种：</p><ul><li><strong>延迟方法</strong>：返回值类型仍然是<code>Stream</code>接口本身类型的方法，因此支持链式调用。(除了终结方法外，其余方法均为延迟方法)</li><li><strong>终结方法</strong>：返回值类型不再是<code>Stream</code>接口自身类型的方法，因此不再支持类似<code>StringBuilder</code>那样的链式调用。这里介绍的终结方法包括<code>count</code>和<code>forEach</code>方法。</li></ul><h4 id="逐一处理：forEach"><a href="#逐一处理：forEach" class="headerlink" title="逐一处理：forEach"></a>逐一处理：forEach</h4><p>​    虽然方法名字叫<code>forEach</code>，但是与for循环中的”for-each”昵称不同。方法签名如下：</p><pre><code class="java">void forEach(Consumer&lt;? super T&gt; action);</code></pre><p>​    该方法接收一个<code>Consumer</code>接口函数，会将每一个流元素交给该函数进行处理。</p><blockquote><p>Tips: 方法名和形参列表共同组成<strong>方法签名</strong>。</p></blockquote><h4 id="复习Consumer接口"><a href="#复习Consumer接口" class="headerlink" title="复习Consumer接口"></a>复习Consumer接口</h4><p><code>java,util.function.Consumer&lt;T&gt;</code>接口是一个消费型接口。</p><p><code>Consumer</code>接口中包含抽象方法<code>void accept(T t)</code>，意为消费一个指定泛型的数据。</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><pre><code class="java">public class DemoStreamForEach {    public static void main(String[] args) {        Stream&lt;String&gt; stream = Stream.of("张", "李", "王");        stream.forEach(name-&gt; System.out.println(name));    }}</code></pre><h4 id="过滤：filter"><a href="#过滤：filter" class="headerlink" title="过滤：filter"></a>过滤：filter</h4><p>可以通过<code>filter</code>方法将一个流转换成另一个子集流。方法签名：</p><pre><code class="java">Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</code></pre><p>该接口接收一个<code>Predicate</code>函数式接口参数作为筛选条件。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/15/StreamFilter-1557901616757.jpg" alt="title"></p><h4 id="复习Predicate接口"><a href="#复习Predicate接口" class="headerlink" title="复习Predicate接口"></a>复习Predicate接口</h4><p><code>java.util.stream.Predicate</code>函数式接口，其中唯一的抽象方法为<code>boolean test(T t);</code></p><p>该方法将会产生一个boolean值结果，代表指定条件是否满足。结果为true则保留元素，反之不保留。</p><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><pre><code class="java">public class Demo2Filter {    public static void main(String[] args) {        Stream&lt;String&gt; stream = Stream.of("张三丰", "张翠山", "赵敏", "周芷若", "张无忌");        // 对Stream流中的元素进行过滤，只要姓张的        Stream&lt;String&gt; stream2 = stream.filter(name -&gt; name.startsWith("张"));        // 遍历stream2流        stream2.forEach(name-&gt; System.out.println(name));    }}</code></pre><h4 id="映射：map"><a href="#映射：map" class="headerlink" title="映射：map"></a>映射：map</h4><p>如果需要将流中的元素映射到另一个流中，可以使用<code>map</code>方法。方法签名：</p><pre><code class="java">&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</code></pre><p>该接口需要一个<code>Function</code>函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/15/StreamMap-1557903369553.jpg" alt="title"></p><h4 id="复习Function接口"><a href="#复习Function接口" class="headerlink" title="复习Function接口"></a>复习Function接口</h4><p>此前我们已经学习过<code>java.util.stream.Function</code>函数式接口，其中唯一的抽象方法为：</p><pre><code class="java">R apply(T t);</code></pre><p>这可以将一种T类型转换成为R类型，而这种转换的动作，就称为”映射“。</p><h4 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h4><p>Stream流中的<code>map</code>方法基本使用的代码如下：</p><pre><code class="java">public class StreamMap {    public static void main(String[] args) {        Stream&lt;String&gt; stream = Stream.of("10", "15", "17");        Stream&lt;Integer&gt; result = stream.map(str -&gt; Integer.parseInt(str));        result.forEach(str-&gt; System.out.println(str));    }}</code></pre><p>上述代码中，<code>map</code>方法的参数通过方法引用，将字符串类型转换为了int类型(并自动装箱为<code>Integer</code>类对象)。</p><h4 id="统计个数：count"><a href="#统计个数：count" class="headerlink" title="统计个数：count"></a>统计个数：count</h4><p>正如集合<code>Collection</code>当中的<code>size</code>方法一样，流提供<code>count</code>方法来统计元素个数</p><p>该方法返回一个long值代表元素个数。基本使用如下：</p><pre><code class="java">public class DemoStreamCount {    public static void main(String[] args) {        Stream&lt;String&gt; stream = Stream.of("1", "2", "3", "4");        System.out.println(stream.count()); // 4    }}</code></pre><h4 id="取用前几个：limit"><a href="#取用前几个：limit" class="headerlink" title="取用前几个：limit"></a>取用前几个：limit</h4><p><code>limit</code>方法可以对流进行截取，只取用前n个。方法签名：</p><pre><code class="java">Stream&lt;T&gt; limit(long maxSize);</code></pre><p>参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作。基本使用：</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/15/StreamLimit-1557906224811.jpg" alt="title"></p><pre><code class="java">public class DemoStreamLimit {    public static void main(String[] args) {        Stream&lt;String&gt; stream = Stream.of("a", "b", "c", "d", "e");        Stream&lt;String&gt; limit = stream.limit(3); // 截取流的前两个元素        limit.forEach(s-&gt; System.out.println(s)); // a,b,c    }}</code></pre><h4 id="跳过前几个：skip"><a href="#跳过前几个：skip" class="headerlink" title="跳过前几个：skip"></a>跳过前几个：skip</h4><p>如果希望跳过前几个元素，可以使用<code>skip</code>方法获取一个截取之后的新流：</p><pre><code class="java">Stream&lt;T&gt; skip(long n);</code></pre><p>如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/15/StreamSkip-1557906391858.jpg" alt="title"></p><pre><code class="java">public class DemoStreamSkip {    public static void main(String[] args) {        Stream&lt;String&gt; stream = Stream.of("1", "2", "3", "4", "5", "6");        Stream&lt;String&gt; skip = stream.skip(3);        skip.forEach(s-&gt; System.out.println(s)); // 4,5,6    }}</code></pre><h4 id="组合：concat"><a href="#组合：concat" class="headerlink" title="组合：concat"></a>组合：concat</h4><p>如果有两个流，希望合并成为一个流，那么可以使用<code>Stream</code>接口的静态方法<code>concat</code>。方法签名：</p><pre><code class="java">static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b);</code></pre><blockquote><p>注：这是一个静态方法，与<code>java.lang.String</code>中的<code>concat</code>方法是不同的。</p></blockquote><p>代码示例</p><pre><code class="java">public class DemoStreamConcat {    public static void main(String[] args) {        Stream&lt;String&gt; h = Stream.of("hello");        Stream&lt;String&gt; w = Stream.of("world!");        Stream&lt;String&gt; result = Stream.concat(h, w);        result.forEach(s-&gt; System.out.println(s));    }}</code></pre><h3 id="1-5-练习：集合元素的处理"><a href="#1-5-练习：集合元素的处理" class="headerlink" title="1.5 练习：集合元素的处理"></a>1.5 练习：集合元素的处理</h3><p>现在有两个<code>ArrayList</code>集合存储队伍当中多个成员姓名，要去使用循环依次进行以下若干步骤：</p><ol><li><p>第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。</p></li><li><p>第一个队伍筛选之后只要前3个人；存储到一个新集合中。</p></li><li>第二个队伍只要姓张的成员姓名；存储到一个新集合中。</li><li>第二个队伍筛选之后不要前2个人；存储到一个新集合中。</li><li>将两个队伍合并为一个队伍；存储到一个新集合中。</li><li>根据姓名创建 Person 对象；存储到一个新集合中。</li><li>打印整个队伍的Person对象信息。</li></ol><p>代码实现(传统方式)</p><pre><code class="java">public class ExerciseOldFor {    public static void main(String[] args) {        ArrayList&lt;String&gt; one = new ArrayList&lt;&gt;();        // ....        //队伍2        ArrayList&lt;String&gt; two = new ArrayList&lt;&gt;();        // ....        // 1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。        List&lt;String&gt; oneA = new ArrayList&lt;&gt;();        for (String name:one){            if (name.length()==3){                oneA.add(name);            }        }        // 2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。        List&lt;String&gt; oneB = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 3; i++) {            oneB.add(oneA.get(i));        }        // 3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。        List&lt;String&gt; twoA = new ArrayList&lt;&gt;();        for (String name:two){            if (name.startsWith("张")){                twoA.add(name);            }        }        // 4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。        List&lt;String&gt; twoB = new ArrayList&lt;&gt;();        for (int i = 2; i &lt; twoA.size(); i++) {            twoB.add(twoA.get(i));        }        // 5. 将两个队伍合并为一个队伍；存储到一个新集合中。        List&lt;String&gt; totalNames = new ArrayList&lt;&gt;();        totalNames.addAll(oneB);        totalNames.addAll(twoB);        // 6. 根据姓名创建 Person 对象；存储到一个新集合中。        List&lt;Person&gt; personList = new ArrayList&lt;&gt;();        for (String name:totalNames){            personList.add(new Person(name));        }        // 7. 打印整个队伍的Person对象信息。        for (Person p:personList){            System.out.println(p);        }    }}</code></pre><p>Stream流方式实现</p><pre><code class="java">public class ExerciseStream {    public static void main(String[] args) {        // 队伍1        ArrayList&lt;String&gt; one = new ArrayList&lt;&gt;();        one.add("迪丽热巴");        one.add("宋远桥");        one.add("苏星河");        one.add("石破天");        one.add("石中玉");        one.add("老子");        one.add("庄子");        one.add("洪七公");        //队伍2        ArrayList&lt;String&gt; two = new ArrayList&lt;&gt;();        two.add("古力娜扎");        two.add("张无忌");        two.add("赵丽颖");        two.add("张三丰");        two.add("尼古拉斯赵四");        two.add("张天爱");        two.add("张二狗");        // 1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。        Stream&lt;String&gt; threeName = one.stream().filter(n -&gt; n.length() == 3);        // 2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。        Stream&lt;String&gt; firstThreePeople = threeName.limit(3);        // 3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。        Stream&lt;String&gt; firstNameZhang = two.stream().filter(s -&gt; s.startsWith("张"));        // 4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。        Stream&lt;String&gt; skipTwoPeople = firstNameZhang.skip(2);        // 5. 将两个队伍合并为一个队伍；存储到一个新集合中。        Stream&lt;String&gt; concat = Stream.concat(firstThreePeople, skipTwoPeople);        // 6. 根据姓名创建 Person 对象；存储到一个新集合中。        List&lt;Person&gt; people = new ArrayList&lt;&gt;();        concat.forEach(s -&gt; people.add(new Person(s)));        // 7. 打印整个队伍的Person对象信息。        people.forEach(p-&gt; System.out.println(p));        // 以上3步合并写法        Stream.concat(firstThreePeople,skipTwoPeople).map(Person::new).forEach(System.out::println);    }}</code></pre><h2 id="2-方法引用"><a href="#2-方法引用" class="headerlink" title="2. 方法引用"></a>2. 方法引用</h2><p>在使用Lambda表达式时，我们实际上传递进去的代码就是一种解决方案：拿什么参数做什么操作。那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要写重复逻辑？</p><h3 id="2-1-冗余的Lambda场景"><a href="#2-1-冗余的Lambda场景" class="headerlink" title="2.1 冗余的Lambda场景"></a>2.1 冗余的Lambda场景</h3><p>下面是一个简单的函数式接口以便应用Lambda表达式：</p><pre><code class="java">public interface Printable{    void print(String str);}</code></pre><p>在<code>Printable</code>接口当中唯一的抽象方法<code>print</code>接收一个字符串参数，目的就是为了打印显示它。那么下面通过Lambda来实现一下：</p><pre><code class="java">public class DemoPrintImpl {    private static void printString(String s,Printable data){        data.print(s);    }    public static void main(String[] args) {        printString("hello",s-&gt; System.out.println(s));    }}</code></pre><p>其中<code>printString</code>方法只管调用<code>Printable</code>接口的<code>print</code>方法，并不管该方法的具体实现逻辑会将字符串如何操作。而<code>main</code>方法通过Lambda表达式指定了函数式接口<code>Printable</code>的具体操作方案为：<strong>拿到一个String数据后，在控制台中输出它。</strong></p><h3 id="2-2-问题分析"><a href="#2-2-问题分析" class="headerlink" title="2.2 问题分析"></a>2.2 问题分析</h3><p>这段代码的问题在于，对字符串进行控制台打印输出的操作方案，已经有了现成的实现，那就是<code>System.out</code>对象中的<code>println(String)</code>方法。既然Lambda希望做到的事情就是调用<code>println(String)</code>方法，那何必自己手动调用呢。</p><h3 id="2-3-用方法引用改进代码"><a href="#2-3-用方法引用改进代码" class="headerlink" title="2.3 用方法引用改进代码"></a>2.3 用方法引用改进代码</h3><pre><code class="java">public class Demo02PrintRef {    private static void printString(Printable data){        data.print("hello");    }    public static void main(String[] args) {        //        printString(s-&gt; System.out.println(s));        /*        分析：            Lambda表达式的目的，打印参数传递的字符串            把参数s，传递给了System.out对象，调用out对象中的方法println对字符串进行了输出            注意：                1. System.out对象是已经存在的                2. println方法也是已经存在的            所以我们可以使用方法引用来优化Lambda表达式            可以使用System.out方法直接引用(调用)println方法         */        printString(System.out::println);    }}</code></pre><p>其中双冒号<code>::</code>写法，这被称为“<strong>方法引用</strong>”，而双冒号是一种新的语法。</p><h3 id="2-4-方法引用符"><a href="#2-4-方法引用符" class="headerlink" title="2.4 方法引用符"></a>2.4 方法引用符</h3><p>双冒号<code>::</code>为引用运算符，而它所在的表达式被称为<strong>方法引用</strong>。如果Lambda要表达的函数方案已经存在于某个方法的实现中，那么则可以通过双冒号来引用该方法作为Lambda的替代者。</p><h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p>如上例中，<code>System.out</code>对象中有一个重载的<code>println(String)</code>方法恰好就是我们所需要的。那么对于<code>printString</code>方法的函数式接口参数，对比下面两种写法，完全等效：</p><ul><li>Lambda表达式写法：<code>s -&gt; System.out.println(s);</code></li><li>方法引用写法：<code>System.out::println</code></li></ul><p>第一种语义是指：拿到参数之后经Lambda之手，继而传递给<code>System.out.println</code>方法去处理。</p><p>第二种等效写法的语义是指：直接让<code>System.out</code>中的<code>println</code>方法来取代Lambda。两种写法的执行效果完全一样，而第二种方法引用的写法复用了已有方案，更加简洁。</p><blockquote><p>注：Lambda 中 传递的参数 一定是方法引用中 的那个方法可以接收的类型,否则会抛出异常</p></blockquote><h4 id="推导与省略"><a href="#推导与省略" class="headerlink" title="推导与省略"></a>推导与省略</h4><p>如果使用Lambda，那么根据“<strong>可推导即可省略</strong>”的原则，无需指定参数类型，也无需指定重载形式—-它们都将被自动推导，而如果使用方法引用，也是同样可以根据上下文进行推导。</p><p>函数式接口是Lambda的基础，而方法引用是Lambda的孪生兄弟。</p><h3 id="2-5-通过对象名引用成员方法"><a href="#2-5-通过对象名引用成员方法" class="headerlink" title="2.5 通过对象名引用成员方法"></a>2.5 通过对象名引用成员方法</h3><p>这是最常见的一种用法，与上例相同。如果一个类中已经存在了一个成员方法：</p><pre><code class="java">public class MethodRefObject {    public void printUpperCase(String str){        System.out.println(str.toUpperCase());    }}</code></pre><p>函数式接口定义不变，那么当需要使用这个<code>printUpperCase</code>成员方法来替代<code>Printable</code>接口的Lambda时，已经具有了<code>MethodRefObject</code>类的对象实例，则可以通过对象名引用成员方法，如下：</p><pre><code class="java">public class Demo04MethodRef {    private static void printString(Printable p){        p.print("hello");    }    public static void main(String[] args) {        MethodRefObject obj = new MethodRefObject();        printString(obj::printUpperCase); // HELLO    }}</code></pre><h3 id="2-6-通过类名称引用静态方法"><a href="#2-6-通过类名称引用静态方法" class="headerlink" title="2.6 通过类名称引用静态方法"></a>2.6 通过类名称引用静态方法</h3><p>由于在<code>java.lang.Math</code>类中已经存在了静态方法<code>abs</code>，所以当我们需要通过Lambda来调用该方法时，有两种写法。首先是函数式接口：</p><pre><code class="java">@FunctionalInterfacepublic interface Calcable {    int calc(int num);}</code></pre><p>两种写法调用：</p><pre><code class="java">public class Demo05CalcLambda {    private static void method(int num,Calcable ca){        System.out.println(ca.calc(num));    }    public static void main(String[] args) {        // Lambda表达式写法        method(-10,n -&gt; Math.abs(n)); // 10        // 通过类名称引用静态方法        method(-10,Math::abs); // 10    }}</code></pre><p>上述例子中，两种写法是完全等效的：</p><ul><li>Lambda表达式：<code>n-&gt;Math.abs(n)</code></li><li>方法引用：<code>Math::abs</code></li></ul><h3 id="2-7-通过super引用成员方法"><a href="#2-7-通过super引用成员方法" class="headerlink" title="2.7 通过super引用成员方法"></a>2.7 通过super引用成员方法</h3><p>如果存在继承关系，当Lambda中需要出现super调用时，也可以使用方法引用进行替代。代码示例如下：</p><pre><code class="java">// 首先是函数式接口：@FunctionalInterfacepublic interface Greetable {    void greet();}// 定义父类public class Human {    public void sayHello(){        System.out.println("Hello!");    }}// 定义子类继承父类public class Man extends Human {    // 子类重写父类sayHello方法    @Override    public void sayHello(){        System.out.println("大家好，我是Man！");    }    // 定义方法method，参数传递Greetable接口    public void method(Greetable g){        g.greet();    }    public void show(){        // 调用method方法，使用Lambda表达式        method(()-&gt;new Human().sayHello()); // 创建父类human对象，调用父类的sayHello方法        // 因为有子父类关系，所以存在一个关键字super，代表父类；所以我们可以直接使用super，调用父类的成员方法        // 使用super关键字引用父类的成员方法        method(super::sayHello);    }    public static void main(String[] args) {        new Man().show(); // 调用show方法    }}</code></pre><h3 id="2-8-通过this引用成员方法"><a href="#2-8-通过this引用成员方法" class="headerlink" title="2.8 通过this引用成员方法"></a>2.8 通过this引用成员方法</h3><p>this代表当前对象，如果需要引用的方法就是当前类中的成员方法，那么可以使用<code>this::成员方法</code>的格式来使用方法引用。</p><pre><code class="java">// 定义简单的函数式接口@FunctionalInterfacepublic interface Richable {    void buy();}// 定义使用类public class Child {    private void buyGame(){        System.out.println("买了游戏");    }    private void computer(Richable r){        r.buy();    }    public void soHappy(){        // 使用lambda表达式        computer(()-&gt;System.out.println("买了游戏"))；        // 使用this关键字，调用本类中已经存在的方法        computer(()-&gt;this.buyGame())        // 使用方法引用        computer(this::buyGame);        // 上述三种方法完全等效    }     public static void main(String[] args) {        new Child().soHappy(); // 买了游戏    }}</code></pre><h3 id="2-9-类的构造器引用"><a href="#2-9-类的构造器引用" class="headerlink" title="2.9 类的构造器引用"></a>2.9 类的构造器引用</h3><p>由于构造器的名称和类名完全一样，并不固定。所以构造器引用使用<code>类名称::new</code>的格式表示。</p><p>代码示例:</p><pre><code class="java">// Person类public class Person {    private String name;    public Person() {    }    public Person(String name) {        this.name = name;    }    // ....}// 定义一个车间Person对象的函数式接口@FunctionalInterfacepublic interface PersonBuilder {    // 定义一个方法，根据传递的姓名，创建Person对象返回    Person builderPerson(String name);}// 类的构造器引用public class DemoBuilderPerson {    // 定义一个方法，参数传递姓名和PersonBuilder接口，方法中通过姓名创建Person对象    public static void printName(String name,PersonBuilder pb){        Person person = pb.builderPerson(name);        System.out.println(person.getName());    }    public static void main(String[] args) {        // 调用printName方法，方法的参数PersonBuilder接口是函数式接口，故可以使用Lambda表达式        printName("小张",name -&gt; new Person(name));        /*            使用方法引用优化lambda表达式            构造方法new Person(String name) 已知            创建对象已知 new            就可以使用Person引用new创建对象         */        printName("小明",Person::new); // 使用Person类的带参构造方法，通过传递的姓名创建对象    }}</code></pre><h3 id="2-10-数组的构造器引用"><a href="#2-10-数组的构造器引用" class="headerlink" title="2.10 数组的构造器引用"></a>2.10 数组的构造器引用</h3><p>数组也是<code>Object</code>的子类对象，所以同样具有构造器，只是语法稍有不同。如果对应到Lambda的使用场景中时，示例代码如下：</p><pre><code class="java">// 定义一个创建是数组的函数式接口@FunctionalInterfacepublic interface ArrayBuilder {    // 定义一个创建int类型数组的方法，参数传递数组的长度，返回创建好的int类型数组    int[] builderArray(int length);}// 数组的构造器引用public class DemoArrayBuilder {    /*        定义一个方法        方法的参数传递创建数组的长度和ArrayBuilder接口        方法内部根据传递的长度使用ArrayBuilder中的方法创建数组并返回     */    public static int[] createArray(int length,ArrayBuilder ab){        return ab.builderArray(length);    }    public static void main(String[] args) {        // 调用createArray方法，传递数组的长度和Lambda表达式        int[] arr = createArray(10,(len)-&gt;new int[len]);        System.out.println(arr.length); // 10        /*            使用方法引用优化lambda表达式            已知创建的就是int[]数组            数组的长度也是已知的            就可以使用方法引用            int[]引用new，根据参数传递的长度来创建数组         */        int[] arr2 = createArray(10,int[]::new);        System.out.println(arr2.length); // 10    }}</code></pre><h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul><li style="list-style: none"><input type="checkbox" checked=""> 能够理解流与集合相比的优点。让我们专注于做什么，而不是怎么做</li><li style="list-style: none"><input type="checkbox" checked=""> 能够理解流的延迟执行特点。Stream可以按需计算，只有当终结方法执行时，整个模型才会按照指定策略执行操作。</li><li style="list-style: none"><input type="checkbox" checked=""> 能够通过集合、映射或数组获取流。实现类.stream();Stream.of(数组)。</li><li style="list-style: none"><input type="checkbox" checked=""> 能够掌握常用的流操作。forEach,filter,map,count,limit,skip,concat</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用输出语句的方法引用。System.out::println？</li><li style="list-style: none"><input type="checkbox"> 能够通过4种方式使用方法引用</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用类和数组的构造器引用。类名称::new;数组[]::new</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式接口</title>
      <link href="/2019/05/14/javabasics/han-shu-shi-jie-kou/"/>
      <url>/2019/05/14/javabasics/han-shu-shi-jie-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数式接口"><a href="#1-函数式接口" class="headerlink" title="1. 函数式接口"></a>1. 函数式接口</h2><p>函数式接口在Java中是指：<strong>有且仅有一个抽象方法的接口</strong>。</p><p>函数式接口，也称为SAM(Single Abstract Method interfaces)接口，即适用于函数式编程场景的接口。而java中的函数式编程体现就是Lambda，所以函数式接口就是可以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，java中的Lambda才能顺利地进行推导。</p><a id="more"></a><blockquote><p>注：“<strong>语法糖</strong>“是指使用更加方便，但是原理不变的代码语法。例如在遍历集合时使用的for-each语法，其实底层的实现原理仍然是迭代器，这便是“语法糖”。从应用层面来讲，Java中的Lambda可以被当做是匿名内部类的“语法糖”，但是二者在原理上是不同的。</p></blockquote><h3 id="1-1-格式"><a href="#1-1-格式" class="headerlink" title="1.1 格式"></a>1.1 格式</h3><p>​    只要确保接口中有且仅有一个抽象方法即可：</p><pre><code class="java">修饰符 interface 接口名称{    public abstract 返回值类型 方法名称(可选参数信息);    // 其他非抽象方法内容}</code></pre><p>​    由于接口当中抽象方法的<code>public abstract</code>是可以省略的，所以定义一个函数式接口很简单：</p><pre><code class="java">public interface MyFun{    void MyMethod();}</code></pre><h3 id="1-2-FunctionalInterface注解"><a href="#1-2-FunctionalInterface注解" class="headerlink" title="1.2 @FunctionalInterface注解"></a>1.2 @FunctionalInterface注解</h3><p>​    与<code>@Override</code>注解的作用类似，Java 8中专门为函数式接口引入了一个新的注解：<code>@FunctionalInterface</code>。该注解可用于一个接口的定义上：</p><pre><code class="java">@FunctionalInterfacepublic interface MyFun{    void MyMethod();}</code></pre><p>​    一旦使用该注解来定义接口，编译器将会强制检查该接口是否确定有且仅有一个抽象方法，否则将会报错。</p><h3 id="1-3-自定义函数式接口"><a href="#1-3-自定义函数式接口" class="headerlink" title="1.3 自定义函数式接口"></a>1.3 自定义函数式接口</h3><p>对于刚刚定义好的<code>MyFun</code>函数式接口，典型使用场景就是作为方法的参数：</p><pre><code class="java">public class DemoFunInterface {    public static void main(String[] args) {        // 使用lambda调用函数式接口中的方法        doSomething(()-&gt; System.out.println("Lambda执行了！"));    }    // 使用自定义的函数式接口作为方法参数    private static void doSomething(MyFun inter){        inter.MyMethod(); // 调用自定义的函数式接口方法    }}</code></pre><h2 id="2-函数式编程"><a href="#2-函数式编程" class="headerlink" title="2. 函数式编程"></a>2. 函数式编程</h2><p>在兼顾面向对象特性的基础上，Java语言通过Lambda表达式与方法引用等，打开了函数式编程的大门。</p><pre><code class="java">// 函数式接口的使用：一般可以作为方法的参数和返回值类型public class Demo {    // 定义一个方法，参数使用函数式接口MyFun    public static void show(MyFun myFun){        myFun.MyMethod();    }    public static void main(String[] args) {        // 调用show方法，方法的参数是一个接口，所以可以传递接口的实现类对象        show(new MyFunImpl());        // 调用show方法，方法的参数是一个接口,所以我们可以传递接口的匿名内部类        show(new MyFun() {            @Override            public void MyMethod() {                System.out.println("使用匿名内部类重写接口中的抽象方法");            }        });        // 调用show方法，方法的参数是一个函数式接口,所以我们可以传递lambda表达式        show(()-&gt; System.out.println("使用Lambda表达式重写接口中的抽象方法"));    }}// result:/*使用实现类重写MyFun接口抽象方法使用匿名内部类重写接口中的抽象方法使用Lambda表达式重写接口中的抽象方法*/</code></pre><h3 id="2-1-Lambda的延迟执行"><a href="#2-1-Lambda的延迟执行" class="headerlink" title="2.1 Lambda的延迟执行"></a>2.1 Lambda的延迟执行</h3><p>有些场景的代码执行后，结果不一定会被使用，从而造成性能浪费。而Lambda表达式是延迟执行的，这正好可以作为解决方案，提升性能。</p><h4 id="性能浪费的日志"><a href="#性能浪费的日志" class="headerlink" title="性能浪费的日志"></a>性能浪费的日志</h4><p>注：日志可以帮助我们快速的定位问题，记录程序运行过程中的情况，以便项目的监控和优化。</p><p>一种典型场景就是对参数进行有条件使用，例如对日志消息进行拼接后，在满足条件情况下进行打印输出：</p><pre><code class="java">public class Demo02Logger {    public static void main(String[] args) {        // 定义三个日志信息        String msg1 = "hello";        String msg2 = "world";        String msg3 = "java";        // 调用方法，传递日志级别和日志信息        log(1,msg1+msg2+msg3);    }    // 定义一个根据日志的级别，显示日志信息的方法    private static void log(int level, String msg){        // 对日志等级进行判断，如果是1级别，那么输出日志信息        if (level == 1){            System.out.println(msg);        }    }}</code></pre><p>上述代码仍存在问题：无论级别是否满足要求，作为<code>log</code>方法的第二个参数，三个字符串一定会首先被拼接并传入方法内，然后才会进行级别判断。如级别不符合要求，那么字符串拼接操作就白做了，浪费性能。</p><blockquote><p>备注：SLF4J是应用非常广泛的日志框架，它在记录日志时为了解决这种性能浪费的问题，并不推荐首先进行字符串的拼接，而是将字符串的若干部分作为可变参数传入方法中，仅在日志级别满足要求的情况下才会进行字符串拼接。例如：<code>LOGGER.debug("变量{}的取值为{}。", "os", "macOS")</code>，其中的大括号<code>{}</code>为占位符。如果满足日志级别要求，则会将“os”和“macOS”两个字符串依次拼接到大括号的位置；否则不会进行字符串拼接。这也是一种可行解决方案，但Lambda可以做到更好。</p></blockquote><h4 id="Lambda优化写法"><a href="#Lambda优化写法" class="headerlink" title="Lambda优化写法"></a>Lambda优化写法</h4><p>使用Lambda必然需要一个函数式接口：</p><pre><code class="java">@FunctionalInterfacepublic interface MessageInter {    String Message();}</code></pre><p>对<code>log</code>方法进行改造：</p><pre><code class="java">public class DemoLogLambda {    public static void main(String[] args) {        String msg1 = "hello";        String msg2 = "world";        String msg3 = "java";        log(1,() -&gt; msg1 + msg2 + msg3);    }    private static void log(int level,MessageInter msg){        if (level == 1){            System.out.println(msg.Message()); // 只有当条件满足时，才会去调用字符串拼接方法，不满足不会拼接        }    }}</code></pre><p>如此，只有当级别满足要求时，才会进行三个字符串拼接，不会造成性能浪费。</p><h4 id="证明Lambda的延迟"><a href="#证明Lambda的延迟" class="headerlink" title="证明Lambda的延迟"></a>证明Lambda的延迟</h4><pre><code class="java">public class DemoLoggerDelay {    private static void log(int level,MessageInter msg){        if (level == 1){            System.out.println(msg.Message());        }    }    public static void main(String[] args) {        String msg1 = "hello";        String msg2 = "world";        String msg3 = "java";        log(2,() -&gt;{            System.out.println("满足条件Lambda执行！");            return msg1 + msg2 + msg3;        });    }}</code></pre><p>从结果中可以看出，在不符合级别要求的情况下，Lambda将不会执行。从而达到节省性能的效果。</p><blockquote><p>实际上使用内部类也可以达到同样的效果，只是将代码操作延迟到了另外一个对象当中通过调用方法来完成。而是否调用其所在方法是在条件判断之后才执行的。</p></blockquote><h3 id="2-2-使用Lambda作为参数和返回值"><a href="#2-2-使用Lambda作为参数和返回值" class="headerlink" title="2.2 使用Lambda作为参数和返回值"></a>2.2 使用Lambda作为参数和返回值</h3><p>抛开实现原理不说，Java中的Lambda表达式可以被看做是匿名内部类的替代品。如果方法的参数是一个<strong>函数式接口类型</strong>，那么就可以使用Lambda表达式进行替代。使用Lambda表达式作为方法参数，其实就是使用函数式接口作为方法参数。</p><p>例如<code>java.lang.Runnable</code>接口就是一个函数式接口，假设有一个<code>startThread</code>方法使用该接口作为参数，那么就可以使用Lambda进行传参。这种情况其实和<code>Thread</code>类的构造方法参数为<code>Runnable</code>没有本质区别。</p><pre><code class="java">// 使用lambda作为方法参数public class DemoRunnable {    public static void main(String[] args) {        // 调用方法，参数是接口，我们可以传递匿名内部类，实现类接口lambda等。        startThread(new Runnable() {            @Override            public void run() {                System.out.println(Thread.currentThread().getName() + "--&gt;" + "线程启动了");            }        });        // 调用方法，参数是一个函数式接口，我们可以传递lambda        startThread(() -&gt; System.out.println(Thread.currentThread().getName() + "--&gt;" + "线程启动了"));    }    // 定义一个方法，方法参数使用函数式接口Runnable    public static void startThread(Runnable run){        // 开启多线程        new Thread(run).start();    }}</code></pre><p>类似地，如果一个方法的返回值类型是一个函数式接口，那么就可以直接返回一个Lambda表达式。当需要通过一个方法来获取一个<code>java.util.Comparator</code>接口类型的对象作为排序器时，就可以调用该方法获取。</p><pre><code class="java">// 使用Lambda作为返回值类型public class DemoComparator {    // 定义一个方法，方法返回值类型使用函数式接口Comparator    public static Comparator&lt;String&gt; getComparator(){        // 方法的返回值类型是一个接口，那么我们可以返回这个接口的匿名内部类//        return new Comparator&lt;String&gt;() {//            @Override//            public int compare(String o1, String o2) {//                return o2.length() - o1.length();//            }//        };        // 方法的返回值类型是一个函数式接口，所以我们可以返回一个Lambda表达式        return (String o1,String o2) -&gt; o2.length() - o1.length();    }    public static void main(String[] args) {        // 创建一个字符串数组        String[] arr = {"aaa","b","cccc","dddddd"};        System.out.println(Arrays.toString(arr));        // 调用Arrays中的sort方法，对字符串数组进行排序        Arrays.sort(arr,getComparator());        System.out.println(Arrays.toString(arr));    }}</code></pre><h2 id="3-常用函数式接口"><a href="#3-常用函数式接口" class="headerlink" title="3. 常用函数式接口"></a>3. 常用函数式接口</h2><p>JDK提供了大量常用的函数式接口以丰富Lambda的典型使用场景，它们主要在<code>java.util.function</code>包中被提供。</p><h3 id="3-1-Supplier接口"><a href="#3-1-Supplier接口" class="headerlink" title="3.1 Supplier接口"></a>3.1 Supplier接口</h3><p><code>java.util.funtion.Supplier&lt;T&gt;</code>接口仅包含一个无参的方法：<code>T get()</code>。用来获取一个泛型参数指定类型的对象数据。由于这是一个函数式接口，也就意味着对应的Lambda表达式需要”<strong>对外提供</strong>“一个符合泛型类型的对象数据。</p><pre><code class="java">public class DemoSupplier {    // 定义一个方法，方法的参数传递Supplier&lt;T&gt;接口，泛型执行get方法就会返回一个String    public static String getString(Supplier&lt;String&gt; sup){        return sup.get();    }    public static void main(String[] args) {        // 调用getString方法，方法的参数Supplier是一个函数式接口，所以可以传递Lambda表达式        String s = getString(() -&gt; "你好呀");        System.out.println(s);    }}// Supplier&lt;T&gt;接口被称之为生成型接口，指定接口的泛型是什么类型，那么接口中的get方法就会生产什么类型数据</code></pre><h3 id="3-2-练习：求数组元素最大值"><a href="#3-2-练习：求数组元素最大值" class="headerlink" title="3.2 练习：求数组元素最大值"></a>3.2 练习：求数组元素最大值</h3><p>使用<code>Supplier</code>接口作为方法参数类型，通过Lambda表达式求出int数组中的最大值。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">public class DemoMaxArray {    // 定义一个方法，用于获取int类型数组中元素的最大值，方法的参数传递Supplier接口，泛型使用Integer    public static int getMax(Supplier&lt;Integer&gt; sup){        return sup.get();    }    public static void main(String[] args) {        int[] arr = {99,35,72,956,12,-3};        int maxValue = getMax(()-&gt;{            int max = arr[0];            for (int i : arr) {                if (i&gt;max)                    max = i;            }            return max;        });        System.out.println("数组中最大值元素为：" + maxValue);    }}</code></pre><h3 id="3-3-Consumer接口"><a href="#3-3-Consumer接口" class="headerlink" title="3.3 Consumer接口"></a>3.3 Consumer接口</h3><p><code>java.util.function.Consumer&lt;T&gt;</code>接口则正好与Supplier接口相反，它不是生产一个数据，而是消费一个数据，其数据类型由泛型决定。</p><h4 id="抽象方法：accept"><a href="#抽象方法：accept" class="headerlink" title="抽象方法：accept"></a>抽象方法：accept</h4><p><code>Consumer</code>接口中包含抽象方法<code>void accept(T t)</code>,意为消费一个指定泛型的数据。</p><pre><code class="java">public class DemoConsumer {    /*        定义一个方法        方法的参数传递一个字符串的姓名        方法的参数传递Consumer接口，泛型使用String        可以使用Consumer接口消费字符串的姓名     */    public static void method(String name,Consumer&lt;String&gt; con){        con.accept(name);    }    public static void main(String[] args) {        // 调用method方法，传递字符串姓名，方法的另一个参数是Consumer接口，是一个函数式接口，可以使用Lambda表达式        method("上海",(String name)-&gt;{            // 对传递的字符串进行消费            // 消费方式：直接输出字符串            System.out.println(name);            // 消费方式：对字符串进行反转输出            String reName = new StringBuffer(name).reverse().toString();            System.out.println(reName);        });    }}// result:上海海上</code></pre><h4 id="默认方法-andThen"><a href="#默认方法-andThen" class="headerlink" title="默认方法: andThen"></a>默认方法: andThen</h4><p>如果一个方法的参数和返回值全都是<code>Consumer</code>类型，那么就可以实现效果：消费数据的时候，先做一个操作，然后在做另一个操作，实现组合。而这个方法就是<code>Consumer</code>接口中的default方法<code>andThen</code>。</p><pre><code class="java">/*    Consumer接口的默认方法andThen    作用：需要两个Consumer接口，可以把两个Consumer接口组合到一起，在对数据进行消费    例如：      Consumer&lt;String&gt; con1      Consumer&lt;String&gt; con2      String s= "hello";      con1.accept(s);      con2.accept(s);      连接两个Consumer接口，再进行消费      con1.andThen(con2).accept(s); 谁写前面谁先消费 */public class DemoAndThen {    private static void consumerString(String s,Consumer&lt;String&gt; one,Consumer&lt;String&gt; two){//        one.accept(s);//        two.accept(s);        // 使用andThen方法，把两个Consumer接口连接到一起消费数据,等效于上面        one.andThen(two).accept(s);    }    public static void main(String[] args) {        // 因为有两个Consumer接口，所以要传递两个Lambda进去        consumerString("Hello",                s -&gt; System.out.println(s.toUpperCase()),                s -&gt; System.out.println(s.toLowerCase()));    }}</code></pre><h3 id="3-4-练习：格式化打印信息"><a href="#3-4-练习：格式化打印信息" class="headerlink" title="3.4 练习：格式化打印信息"></a>3.4 练习：格式化打印信息</h3><p>将下面字符串数组中的信息，按照格式<code>姓名：xxx，性别：x。</code>的格式将信息打印出来。要求将打印姓名的动作作为第一个<code>Consumer</code>接口的Lambda实例，将打印性别作为第二个<code>Consumer</code>接口的Lambda实例，将两个<code>Consumer</code>接口按照顺序拼接到一起。</p><pre><code class="java">// 字符串数组String[] arr = { "迪丽热巴,女", "古力娜扎,女", "马尔扎哈,男"};</code></pre><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">public class ConsumerExercise {    public static void main(String[] args) {        String[] arr = { "迪丽热巴,女", "古力娜扎,女", "马尔扎哈,男"};        printInfo(arr,s -&gt; System.out.print("姓名："+s.split(",")[0]), // 消费方式：对info进行切割，读取姓名，按照指定格式输出                  s -&gt; System.out.println(",性别："+s.split(",")[1]+"。")); // 对info进行切割，读取年龄，按照指定格式输出    }    private static void printInfo(String[] arr, Consumer&lt;String&gt; one, Consumer&lt;String&gt; two){        for (String info:arr)            one.andThen(two).accept(info);    }}/* result：姓名：迪丽热巴,性别：女。姓名：古力娜扎,性别：女。姓名：马尔扎哈,性别：男。 */</code></pre><h3 id="3-5-Predicate接口"><a href="#3-5-Predicate接口" class="headerlink" title="3.5 Predicate接口"></a>3.5 Predicate接口</h3><p>有时我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。这时可以使用<code>java.util.function.Predicate&lt;T&gt;</code>接口。</p><h4 id="抽象方法：test"><a href="#抽象方法：test" class="headerlink" title="抽象方法：test"></a>抽象方法：test</h4><p><code>Predicate</code>接口中包含一个抽象方法：<code>boolean test(T t)</code>。用于条件判断场景：</p><pre><code class="java">public class DemoPredicate {    public static boolean checkString(String s,Predicate&lt;String&gt; pre){       return pre.test(s);    }    public static void main(String[] args) {        String s = "helloworld";        boolean b = checkString(s, str -&gt; str.length() &gt; 5);// 对参数传递的字符串进行判断，判断字符串长度是否大于5，并把判断的结果返回        System.out.println(b);    }}</code></pre><h4 id="默认方法：and"><a href="#默认方法：and" class="headerlink" title="默认方法：and"></a>默认方法：and</h4><p>既然是条件判断，就会存在与、或、非三种常见的逻辑关系。其中将两个<code>Predicate</code>条件使用“与”逻辑连接起来实现“<strong>并且</strong>”的效果时，可以使用default方法<code>and</code>。</p><p>​    如果要判断一个字符串既包含大写”H”，又要包含大写”W”，示例代码如下：</p><pre><code class="java">public class DemoPredicateAnd {    public static void method(String s, Predicate&lt;String&gt; one, Predicate&lt;String&gt; two){        boolean isValid = one.and(two).test(s);        System.out.println("字符串符合要求吗：" + isValid);    }    /*        contains(String str)            当且仅当该字符串包含str时，返回true，反之返回false     */    public static void main(String[] args) {        method("Helloworld",s-&gt;s.contains("H"),s-&gt;s.contains("W"));    }}// result:false</code></pre><h4 id="默认方法：or"><a href="#默认方法：or" class="headerlink" title="默认方法：or"></a>默认方法：or</h4><p>与<code>and</code>类似的，默认方法<code>or</code>实现逻辑关系中的”<strong>或</strong>“。</p><p>如果希望实现逻辑”字符串包含大写H或者大写W”，那么只需要将上个例子代码<code>and</code>修改为<code>or</code>即可实现。</p><pre><code class="java">public class DemoPredicateAnd {    public static void method(String s, Predicate&lt;String&gt; one, Predicate&lt;String&gt; two){        // 只需修改and--&gt;or即可        boolean isValid = one.or(two).test(s);        System.out.println("字符串符合要求吗：" + isValid);    }    public static void main(String[] args) {        method("Helloworld",s-&gt;s.contains("H"),s-&gt;s.contains("W"));    }}</code></pre><h4 id="默认方法：negate"><a href="#默认方法：negate" class="headerlink" title="默认方法：negate"></a>默认方法：negate</h4><p>“非”(取反)。源码中只是对结果boolean值进行”!”取反而已。调用方法跟<code>and</code>和<code>or</code>一样。</p><pre><code class="java">public class DemoPredicateNegate {    public static void method(Predicate&lt;String&gt; pre){        boolean isLong = pre.negate().test("helloworld");        System.out.println("字符串很长吗："+isLong);    }    public static void main(String[] args) {        method(s-&gt;s.length()&lt;5); // true    }}</code></pre><h3 id="3-6-练习：集合信息筛选"><a href="#3-6-练习：集合信息筛选" class="headerlink" title="3.6 练习：集合信息筛选"></a>3.6 练习：集合信息筛选</h3><p>数组当中有多条”姓名+性别”格式的信息，通过<code>Predicate</code>接口的方法将符合要求的字符串筛选到集合<code>ArrayList</code>中，需同时满足以下两个条件：</p><pre><code>1. 必须为女生 2. 姓名必须是4个字</code></pre><pre><code class="java">//数组String[] array = { "迪丽热巴,女", "古力娜扎,女", "马尔扎哈,男", "赵丽颖,女" };</code></pre><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><pre><code class="java">public class ExercisePredicate {    public static boolean FilterArray(String s, Predicate&lt;String&gt; one,Predicate&lt;String&gt; two){        return one.and(two).test(s);    }    public static void main(String[] args) {        String[] array = { "迪丽热巴,女", "古力娜扎,女", "马尔扎哈,男", "赵丽颖,女" };        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;&gt;();        for (String s:array){            boolean b = FilterArray(s, str -&gt; str.split(",")[0].length() == 4, str -&gt; str.contains("女"));            if (b==true)                arrayList.add(s);        }        System.out.println(arrayList);    }}</code></pre><h3 id="3-7-Function接口"><a href="#3-7-Function接口" class="headerlink" title="3.7 Function接口"></a>3.7 Function接口</h3><p><code>java.util.function.Function&lt;T,R&gt;</code>接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。</p><h4 id="抽象方法：apply"><a href="#抽象方法：apply" class="headerlink" title="抽象方法：apply"></a>抽象方法：apply</h4><p>Function接口中最主要的抽象方法为：<code>R apply(T t)</code>，根据类型T的参数获取类型R的结果。</p><p>​    使用的场景例如：将<code>String</code>类型转换为<code>Integer</code>类型。</p><pre><code class="java">public class DemoFunctionApply {    /*        定义一个方法        方法的参数传递 一个字符串类型的整数        方法的参数传递以Function接口，泛型使用&lt;String,Integer&gt;        使用Function接口中的方法apply，把字符串类型的整数，转换为Integer类型的整数     */    public static void change(String s, Function&lt;String,Integer&gt; fun){        int in = fun.apply(s); // 自动拆箱，Integer-&gt;int        System.out.println(in);    }    public static void main(String[] args) {        change("10",str-&gt;Integer.parseInt(str));    }}</code></pre><h4 id="默认方法：andThen"><a href="#默认方法：andThen" class="headerlink" title="默认方法：andThen"></a>默认方法：andThen</h4><p><code>Function</code>接口中有一个默认的andThen方法，用来进行组合操作。</p><p>​    该方法同样用于“先做什么，再做什么”的场景，和<code>Consumer</code>中的<code>andThen</code>差不多</p><pre><code class="java">/*    分析：        转换了两次        第一次是把String类型转换为了Integer类型            所以我们可以使用Function&lt;String,Integer&gt; fun1                Integer i = fun1.apply("123")+10;        第二次是把Integer类型转换为String类型            所以我们可以使用Function&lt;Integer,String&gt; fun2                String s = fun2.apply(i);        我们可以使用andThen方法，把两次转换组合在一起使用            String s = fun1.andThen(fun2).apply("123");            fun1先调用apply方法，把字符串转换为Integer            fun2再调用apply方法，把Integer转换为字符串*/public class DemoFunctionAndThen {    public static void MySwitch(String s, Function&lt;String,Integer&gt; fun1,Function&lt;Integer,String&gt; fun2){        String str = fun1.andThen(fun2).apply(s);        System.out.println(str); // 133    }    public static void main(String[] args) {        String s = "123";        MySwitch(s,str-&gt;Integer.parseInt(str)+10,i-&gt;i+"");// 字符串转换为整数并+10，然后再转换回字符串    }}</code></pre><h3 id="3-8-练习：自定义函数模型拼接"><a href="#3-8-练习：自定义函数模型拼接" class="headerlink" title="3.8 练习：自定义函数模型拼接"></a>3.8 练习：自定义函数模型拼接</h3><p>使用<code>Function</code>进行函数模型的拼接，按照顺序需要执行的多个函数操作如下：</p><pre><code>1. 将字符串截取数字年龄部分，得到字符串 2. 将年龄字符串转换为int类型的数字 3. 将int数字累加100，得到结果int数字</code></pre><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">public class ExerciseFunction {    public static int change(String s, Function&lt;String,String&gt; one,Function&lt;String,Integer&gt; two,Function&lt;Integer,Integer&gt; three){        return one.andThen(two).andThen(three).apply(s);    }    public static void main(String[] args) {        String str = "赵丽颖,20";        int n = change(str, s -&gt; s.split(",")[1], s -&gt; Integer.parseInt(s), i -&gt; i += 100);        System.out.println(n); // 120    }}</code></pre><h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul><li style="list-style: none"><input type="checkbox" checked=""> 能够使用@FunctionalInterface注解</li><li style="list-style: none"><input type="checkbox" checked=""> 能够自定义无参无返回函数式接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够自定义有参有返回函数式接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够理解Lambda延迟执行的特点</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Lambda作为方法的参数</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Lambda作为方法的返回值</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Supplier函数式接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Consumer函数式接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Function函数式接口</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用Predicate函数式接口</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2019/05/13/javabasics/wang-luo-bian-cheng/"/>
      <url>/2019/05/13/javabasics/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络编程基础概念"><a href="#1-网络编程基础概念" class="headerlink" title="1. 网络编程基础概念"></a>1. 网络编程基础概念</h2><h3 id="1-1-软件结构"><a href="#1-1-软件结构" class="headerlink" title="1.1 软件结构"></a>1.1 软件结构</h3><ul><li><strong>C/S结构</strong>：全称为Client/Server结构，是指客户端和服务器结构。常见程序如QQ、迅雷等。</li><li><strong>B/S结构</strong>：全称为Brower/Server结构，是指浏览器和服务器结构。常见浏览器如谷歌、火狐等。</li></ul><p>两种架构各有优势，但是无论哪种架构，都离不开网络的支持。<strong>网络编程</strong>，就是在一定的协议下，实现两台计算机的通信的程序。</p><a id="more"></a><h3 id="1-2-网络通信协议"><a href="#1-2-网络通信协议" class="headerlink" title="1.2 网络通信协议"></a>1.2 网络通信协议</h3><ul><li><strong>网络通信协议：</strong>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为<strong>网络通信协议</strong>，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。</li><li><strong>TCP/IP协议：</strong> 传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)，是Internet最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/13/3_tcp_ip-1557711751122.jpg" alt="title"></p><p>上图中，TCP/IP协议中的四层分别是应用层、传输层、网络层和链路层，每层分别负责不同的通信功能。</p><p><strong>链路层</strong>：链路层是用于定义物理传输通道，通常是对某些网络连接设备的驱动协议，例如针对光纤、网线提供的驱动。<br><strong>网络层</strong>：网络层是整个TCP/IP协议的核心，它主要用于将传输的数据进行分组，将分组数据发送到目标计算机或者网络。<br><strong>传输层</strong>：主要使网络程序进行通信，在进行网络通信时，可以采用TCP协议，也可以采用UDP协议。<br><strong>应用层</strong>：主要负责应用程序的协议，例如HTTP协议、FTP协议等。</p><h3 id="1-3-协议分类"><a href="#1-3-协议分类" class="headerlink" title="1.3 协议分类"></a>1.3 协议分类</h3><p>通信的协议还是比较复杂的，<code>java.net</code> 包中包含的类和接口，它们提供低层次的通信细节。我们可以直接使用这些类和接口，来专注于网络程序开发，而不用考虑通信的细节。</p><p><code>java.net</code> 包中提供了两种常见的网络协议的支持：</p><ul><li><p><strong>UDP</strong>：用户数据报协议(User Datagram Protocol)。UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p><p>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输例如视频会议都使用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。</p><p>但是在使用UDP协议传送数据时，由于UDP的<strong>面向无连接性</strong>，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议。UDP的交换过程如下图所示。</p></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/13/UDP%E9%80%9A%E4%BF%A1%E5%9B%BE%E8%A7%A3-1557712097787.bmp" alt="title"></p><p>特点：数据被限制在64KB以内，超出这个范围就不能发送了。</p><p>数据报(Datagram):网络传输的基本单位</p><ul><li><p><strong>TCP</strong>：传输控制协议 (Transmission Control Protocol)。TCP协议是<strong>面向连接</strong>的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。</p><p>在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”。</p><ul><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认。</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求。</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接。整个交互过程如下图所示。</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/13/4_tcp-1557712258327.jpg" alt="title"></p><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛，例如下载文件、浏览网页等。</p><h3 id="1-4-网络编程三要素"><a href="#1-4-网络编程三要素" class="headerlink" title="1.4 网络编程三要素"></a>1.4 网络编程三要素</h3><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><ul><li><strong>协议</strong>：计算机网络通信必须遵守的规则。</li></ul><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><ul><li><strong>IP地址：指互联网协议地址（Internet Protocol Address）</strong>，俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。假如我们把“个人电脑”比作“一台电话”的话，那么“IP地址”就相当于“电话号码”。</li></ul><p><strong>IP地址分类</strong></p><ul><li>IPv4：是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code> 的形式，例如<code>192.168.65.100</code> 。其中a、b、c、d都是0~255之间的十进制整数，那么最多可以表示42亿个。</li><li>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。</li></ul><p>　　为了扩大地址空间，拟通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成<code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code>，号称可以为全世界的每一粒沙子编上一个网址，这样就解决了网络地址资源数量不够的问题。</p><p><strong>常用命令</strong></p><ul><li><p>查看本机IP地址，在控制台输入：<code>ipconfig</code></p></li><li><p>检查网络是否连通，在控制台输入：<code>ping IP地址</code>，<code>ping 220.181.57.216</code></p></li><li><p>特殊IP地址：本机IP地址<code>127.0.0.1</code> or <code>localhost</code></p></li></ul><h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><p>网络的通信，本质上是两个进程（应用程序）的通信。每台计算机都有很多的进程，那么在网络通信时，如何区分这些进程？</p><p>如果说<strong>IP地址</strong>可以唯一标识网络中的设备，那么<strong>端口号</strong>就可以唯一标识设备中的进程（应用程序）了。</p><ul><li><strong>端口号：用两个字节表示的整数，它的取值范围是0~65535</strong>。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li></ul><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><h2 id="2-TCP通信程序"><a href="#2-TCP通信程序" class="headerlink" title="2. TCP通信程序"></a>2. TCP通信程序</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>TCP通信能实现两台计算机之间的数据交互，通信的两端，要严格区分为客户端(Client)与服务端(Server)。</p><p><strong>两端通信时步骤：</strong></p><ol><li>服务端程序，需要事先启动，等待客户端的连接。</li><li>客户端主动连接服务器端，连接成功才能通信。服务端不可以主动连接客户端。</li></ol><p><strong>在Java中，提供了两个类用于实现TCP通信程序</strong>：</p><ol><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ol><h3 id="2-2-Socket类"><a href="#2-2-Socket类" class="headerlink" title="2.2 Socket类"></a>2.2 Socket类</h3><p><code>Socket</code> 类：该类实现客户端套接字，套接字指的是两台设备之间通讯的端点。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public Socket(String host, int port)</code> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。</li></ul><blockquote><p>Tips: 回送地址(127.x.x.x) 是本机回送地址（Loopback Address），主要用于网络软件测试以及本地机进程间通信，无论什么程序，一旦使用回送地址发送数据，立即返回，不进行任何网络传输。</p></blockquote><p>代码示例:</p><pre><code class="java">Socket client = new Socket("127.0.0.1",8888);</code></pre><h4 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><code>public InputStream getInputStream()</code> ： 返回此套接字的输入流。<ul><li>如果此Socket具有相关联的通道，则生成的InputStream的所有操作也关联该通道。</li><li>关闭生成的InputStream也将关闭相关的Socket。</li></ul></li><li><code>public OutputStream getOutputStream()</code> ： 返回此套接字的输出流。<ul><li>如果此Socket具有相关联的通道，则生成的OutputStream的所有操作也关联该通道。</li><li>关闭生成的OutputStream也将关闭相关的Socket。</li></ul></li><li><code>public void close()</code> ：关闭此套接字。<ul><li>一旦一个socket被关闭，它不可再使用。</li><li>关闭此socket也将关闭相关的InputStream和OutputStream 。 </li></ul></li><li><code>public void shutdownOutput()</code> ： 禁用此套接字的输出流。   <ul><li>任何先前写出的数据将被发送，随后终止输出流。 </li></ul></li></ul><h3 id="2-3-ServerSocket类"><a href="#2-3-ServerSocket类" class="headerlink" title="2.3 ServerSocket类"></a>2.3 ServerSocket类</h3><p><code>ServerSocket</code>类：这个类实现了服务器套接字，该对象等待通过网络的请求。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ServerSocket(int port)</code> ：使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</li></ul><p>代码举例：</p><pre><code class="java">ServerSocket = server = new ServerSocket(8888);</code></pre><h4 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h4><ul><li><code>public Socket accept()</code> ：监听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。 </li></ul><h3 id="2-4-简单的TCP网络程序"><a href="#2-4-简单的TCP网络程序" class="headerlink" title="2.4 简单的TCP网络程序"></a>2.4 简单的TCP网络程序</h3><h4 id="TCP通信分析图解"><a href="#TCP通信分析图解" class="headerlink" title="TCP通信分析图解"></a>TCP通信分析图解</h4><ol><li>【服务端】启动,创建ServerSocket对象，等待连接。</li><li>【客户端】启动,创建Socket对象，请求连接。</li><li>【服务端】接收连接,调用accept方法，并返回一个Socket对象。</li><li>【客户端】Socket对象，获取OutputStream，向服务端写出数据。</li><li>【服务端】Socket对象，获取InputStream，读取客户端发送的数据。</li></ol><blockquote><p>到此，客户端向服务端发送数据成功。</p></blockquote><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/13/5_%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1-1557714678758.jpg" alt="title"></p><blockquote><p>自此，服务端向客户端回写数据。</p></blockquote><ol start="6"><li>【服务端】Socket对象，获取OutputStream，向客户端回写数据。</li><li>【客户端】Socket对象，获取InputStream，解析回写数据。</li><li>【客户端】释放资源，断开连接。</li></ol><h4 id="客户端与服务器数据收发代码示例"><a href="#客户端与服务器数据收发代码示例" class="headerlink" title="客户端与服务器数据收发代码示例"></a>客户端与服务器数据收发代码示例</h4><pre><code class="java">// 客户端实现public class ClientTCP {    public static void main(String[] args) throws IOException {        System.out.println("客户端，发送数据");        // 1.1. 创建一个客户端对象Socket，构造方法绑定服务器的IP和端口号        Socket client = new Socket("localhost",8888);        // 2.使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象        OutputStream os= client.getOutputStream();        // 3.使用网络字节输出流对象中的方法write，给服务器发送数据        os.write("测试传输数据....".getBytes());        // 4. 使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象        InputStream is = client.getInputStream();        // 5. 使用网络字节输入流对象中的方法read，读取服务器回写的数据        byte[] b = new byte[1024];        int len = is.read(b);        System.out.println(new String(b,0,len));        // 6. 释放资源        client.close();    }}// 服务器端实现public class ServerTCP {    public static void main(String[] args) throws IOException {        System.out.println("服务端启动，等待客户端连接.....");        // 1. 创建服务器ServerSocket对象和系统要指定的端口号        ServerSocket server = new ServerSocket(8888);        // 2. 使用ServerSocket对象中的accept方法，获取请求的客户端对象Socket        Socket socket = server.accept();        // 3. 使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象        InputStream is = socket.getInputStream();        // 4. 使用网络字节输入流对象中的方法read，读取客户端发送的数据        byte[] bytes = new byte[1024];        int len = is.read(bytes);        String msg = new String(bytes,0,len);        System.out.println(msg);        // 5. 使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象        OutputStream os = socket.getOutputStream();        // 6. 使用网络字节输出流对象中的方法write，给客户端回写数据        os.write("服务端已接收到数据....".getBytes());        // 7. 释放资源        server.close();        socket.close();    }}</code></pre><h2 id="3-文件传输案例"><a href="#3-文件传输案例" class="headerlink" title="3. 文件传输案例"></a>3. 文件传输案例</h2><h3 id="3-1-案例分析"><a href="#3-1-案例分析" class="headerlink" title="3.1 案例分析"></a>3.1 案例分析</h3><ol><li>【客户端】输入流，从硬盘读取文件数据到程序中。</li><li>【客户端】输出流，写出文件数据到服务端。</li><li>【服务端】输入流，读取文件数据到服务端程序。</li><li>【服务端】输出流，写出文件数据到服务器硬盘中。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/13/6_upload-1557733549763.jpg" alt="title"></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">// 客户端public class FileUpload_Client {    public static void main(String[] args) throws IOException {        System.out.println("客户端开始发送文件...");        // 1. 创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取的数据源        FileInputStream fis = new FileInputStream("C:\\Users\\14908\\Desktop\\upload.jpg");        // 2. 创建一个客户端Socket对象，构造方法中绑定服务器IP和端口号        Socket client = new Socket("localhost",8888);        // 3. 使用Socket中的方法getOutputStream，获取网络字节输出流OutputStream对象        OutputStream os = client.getOutputStream();        // 4. 使用本地字节输入流FileInputStream对象中的方法read，读取本地文件        byte[] b = new byte[1024];        int len;        while ((len = fis.read(b)) != -1){            // 5. 使用网络字节输出流OutputStream对象中的write方法，把读取的文件上传到服务器            os.write(b,0,len);        }        /*            解决阻塞问题：上传完文件，给服务器写一个结束标记            void shutdownOutPut() 禁用此套接字的输出流            对于TCP套接字，任何此前写入的数据都将被发送，并且后跟TCP的正常连接终止序列         */        client.shutdownOutput();        // 6. 使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象        InputStream is = client.getInputStream();        // 7. 使用网络字节输入流流InputStream对象中的方法read，读取服务器回写的数据        while (((len = is.read(b))!=-1)){            System.out.println(new String(b,0,len));        }        // 8. 释放资源(FileInputStream,Socket)        fis.close();        client.close();    }}// 服务器端public class FileUpload_Server {    public static void main(String[] args) throws IOException {        System.out.println("服务器启动，等待连接...");        // 1. 创建一个本地字节输出流FileOutputStream对象，构造方法中绑定目的地        FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_13\\download.jpg");        // 2. 创建一个服务端ServerSocket对象，构造方法中绑定侦听的端口号        ServerSocket server = new ServerSocket(8888);        // 3. 使用ServerSocket对象的accept方法，接收客户端的socket对象        Socket socket = server.accept();        // 4. 使用socket中的方法getInputStream，获取网络字节输入流InputStream对象        InputStream is = socket.getInputStream();        byte[] bytes = new byte[1024];        // 5. 使用网络字节输入流InputStream对象中的read方法，读取客户端传输过来的数据        int len;        while ((len = is.read(bytes)) != -1){            // 6. 使用本地字节输出流FileOutputStream对象中的方法write，将文件写出到硬盘            fos.write(bytes,0,len);            fos.flush();        }        // 7. 使用socket中的方法getOutputStream，获取网络字节输出流对象，使用write方法回写数据        socket.getOutputStream().write("上传成功!".getBytes());        // 8. 释放资源        fos.close();        socket.close();        server.close();    }}</code></pre><h4 id="文件上传优化"><a href="#文件上传优化" class="headerlink" title="文件上传优化"></a>文件上传优化</h4><ol><li><p><strong>文件名写死问题</strong></p><p>服务端，保存文件的名称如果写死，那么最终导致服务器硬盘，只会保留一个文件，可以使用系统时间优化文件名称，保证文件名称唯一。</p><pre><code class="java">FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_13\\"+System.currentTimeMillis()+".jpg");</code></pre></li><li><p><strong>服务器端循环接收的问题</strong></p><p>服务器端应该保持运行，持续接收来自不同用户的文件，使用循环改进即可。</p><pre><code class="java">// 每次接收新的连接，创建一个Socketwhile(true){    Socket socket = server.accept();    .....}</code></pre></li><li><p><strong>效率问题</strong></p><p>服务端在接收大文件时，可能要耗费更多的时间，此时不能接收其他用户上传的文件，所以使用多线程技术优化。</p><pre><code class="java">while(true){    Socket socket = server.accept();    // 新的socket交给子线程处理    new Thread(() -&gt; {        // 处理文件保存代码    }).start();}</code></pre></li></ol><h4 id="优化代码实现"><a href="#优化代码实现" class="headerlink" title="优化代码实现"></a>优化代码实现</h4><pre><code class="java">// 客户端public class FileUpload_Client {    public static void main(String[] args) throws IOException {        System.out.println("客户端开始发送文件...");        // 1. 创建一个本地字节输入流FileInputStream对象，构造方法中绑定要读取的数据源        FileInputStream fis = new FileInputStream("C:\\Users\\14908\\Desktop\\upload.jpg");        // 2. 创建一个客户端Socket对象，构造方法中绑定服务器IP和端口号        Socket client = new Socket("localhost",8888);        // 3. 使用Socket中的方法getOutputStream，获取网络字节输出流OutputStream对象        OutputStream os = client.getOutputStream();        // 4. 使用本地字节输入流FileInputStream对象中的方法read，读取本地文件        byte[] b = new byte[1024];        int len;        while ((len = fis.read(b)) != -1){            // 5. 使用网络字节输出流OutputStream对象中的write方法，把读取的文件上传到服务器            os.write(b,0,len);        }        /*            解决阻塞问题：上传完文件，给服务器写一个结束标记            void shutdownOutPut() 禁用此套接字的输出流            对于TCP套接字，任何此前写入的数据都将被发送，并且后跟TCP的正常连接终止序列         */        client.shutdownOutput();        // 6. 使用Socket中的方法getInputStream，获取网络字节输入流InputStream对象        InputStream is = client.getInputStream();        // 7. 使用网络字节输入流流InputStream对象中的方法read，读取服务器回写的数据        while (((len = is.read(b))!=-1)){            System.out.println(new String(b,0,len));        }        // 8. 释放资源(FileInputStream,Socket)        fis.close();        client.close();    }}// 服务器端public class FileUpload_Server {    public static void main(String[] args) throws IOException {        System.out.println("服务器启动，等待连接...");        // 2. 创建一个服务端ServerSocket对象，构造方法中绑定侦听的端口号        ServerSocket server = new ServerSocket(8888);        // 3. 使用ServerSocket对象的accept方法，接收客户端的socket对象        while (true) { // 循环接收socket对象            Socket socket = server.accept();            new Thread(() -&gt; { // 线程优化多用户访问                try{                    // 4. 使用socket中的方法getInputStream，获取网络字节输入流InputStream对象                    InputStream is = socket.getInputStream();                    // 1. 创建一个本地字节输出流FileOutputStream对象，构造方法中绑定目的地                    FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_13\\"+System.currentTimeMillis()+".jpg");                    byte[] bytes = new byte[1024];                    // 5. 使用网络字节输入流InputStream对象中的read方法，读取客户端传输过来的数据                    int len;                    while ((len = is.read(bytes)) != -1) {                        // 6. 使用本地字节输出流FileOutputStream对象中的方法write，将文件写出到硬盘                        fos.write(bytes, 0, len);                        fos.flush();                    }                    // 7. 使用socket中的方法getOutputStream，获取网络字节输出流对象，使用write方法回写数据                    socket.getOutputStream().write("上传成功!".getBytes());                    // 8. 释放资源                    fos.close();                    socket.close();                }catch (IOException e) {                    e.printStackTrace();                }            }).start();        }        // 服务器就不用关闭了//        server.close();    }}</code></pre><h3 id="3-2-模拟B-S服务器"><a href="#3-2-模拟B-S服务器" class="headerlink" title="3.2 模拟B\S服务器"></a>3.2 模拟B\S服务器</h3><p>模拟网站服务器，使用浏览器访问自己编写的服务端程序，查看网页效果。</p><pre><code class="java">/*    BS版本TCP服务器 */public class BServer {    public static void main(String[] args) throws IOException {        ServerSocket server = new ServerSocket(8088);        /*            浏览器解析服务器回写的html页面，页面中如果有图片，那么浏览器就会单独开启一个线程，读取服务器的图片            我们需要让服务器一直处于监听状态，客户端请求一次，服务器端回写一次。         */        while (true){            Socket socket = server.accept();            new Thread(()-&gt;{                try{                    InputStream is = socket.getInputStream(); // 网络字节输入流                    // 把is网络字节输入流对象，转换为字符缓冲输入流                    BufferedReader br = new BufferedReader(new InputStreamReader(is));                    // 把客户端请求信息的第一行读取出来                    String line = br.readLine();                    System.out.println(line); // 输出请求的路径                    // 把读取的信息以空格进行分离，只要中间部分                    String[] arr = line.split(" ");                    // 把路径前面的/去除,获取Demo5_13\web\index.html                    String htmlpath = arr[1].substring(1);                    // 创建一个本地字节输入流，构造方法中绑定要读取的html路径                    FileInputStream fis = new FileInputStream("D:\\IDEA_WorkSpace\\Demo\\"+htmlpath);                    // 使用Socket中的getOutputStream方法，获取网络字节输出流对象                    OutputStream os = socket.getOutputStream();                    // 写入html协议响应头，固定写法                    os.write("HTTP/1.1 200 OK\r\n".getBytes());                    os.write("Content-Type:text/html\r\n".getBytes());                    //必须写入空行，否则浏览器不解析                    os.write("\r\n".getBytes());                    // 一读一写复制文件，把服务器读取的html文件回写到客户端                    int len;                    byte[] bytes = new byte[1024];                    while ((len = fis.read(bytes)) != -1) {                        os.write(bytes,0,len);                    }                    // 释放资源                    fis.close();                    socket.close();                }catch (IOException E){                    E.printStackTrace();                }            }).start();        }        //server.close();    }}</code></pre><h3 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h3><ul><li style="list-style: none"><input type="checkbox" checked=""> 能够辨别UDP和TCP协议特点。无连接和有连接，传输数据安全和传输效率高</li><li style="list-style: none"><input type="checkbox" checked=""> 能够说出TCP协议下两个常用类名称。Socket，ServerSocket。</li><li style="list-style: none"><input type="checkbox" checked=""> 能够编写TCP协议下字符串数据传输程序。OutputStream.write(“hello”.getBytes());</li><li style="list-style: none"><input type="checkbox" checked=""> 能够理解TCP协议下文件上传案例。本地字节输入流读取数据，通过网络字节输出流发送到服务器，服务器通过网络字节输入流循环读取数据，使用本地字节输入流写出到硬盘中。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓冲流、转换流、序列化流、打印流</title>
      <link href="/2019/05/10/javabasics/4-chong-io-liu-de-zeng-qiang/"/>
      <url>/2019/05/10/javabasics/4-chong-io-liu-de-zeng-qiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-缓冲流"><a href="#1-缓冲流" class="headerlink" title="1. 缓冲流"></a>1. 缓冲流</h2><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><a id="more"></a><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h3 id="1-1-字节缓冲流"><a href="#1-1-字节缓冲流" class="headerlink" title="1.1 字节缓冲流"></a>1.1 字节缓冲流</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><h4 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h4><p>缓冲流读写方法与基本流是一致的，通过复制大文件(560MB)，来测试一下效率。</p><ol><li>基本流代码</li></ol><pre><code class="java">public class BufferedDemo01 {    public static void main(String[] args) {        long start = System.currentTimeMillis(); // 记录开始时间        // 创建流对象        try(            FileInputStream fis = new FileInputStream("D:\\chrome\\IdeaInstall.exe");            FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\copy.exe");        ){            //读写数据            int b;            while ((b = fis.read())!=-1){                fos.write(b);            }        }catch (IOException e) {            e.printStackTrace();        }        long end = System.currentTimeMillis();// 记录结束时间        System.out.println("普通流复制560MB所需时间："+(end-start)+"毫秒");    }}// result: long long time</code></pre><ol start="2"><li>缓冲流代码</li></ol><pre><code class="java">public class ButteredDemo02 {    public static void main(String[] args) {        long start = System.currentTimeMillis(); // 记录开始时间        try(// 创建缓冲流对象            BufferedInputStream bis = new BufferedInputStream(new FileInputStream("D:\\chrome\\IdeaInstall.exe"));            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\copy2.exe"))        ){            //读写数据            int b;            while ((b = bis.read())!=-1){                bos.write(b);            }        } catch (IOException e) {            e.printStackTrace();        }        long end = System.currentTimeMillis(); // 记录结束时间        System.out.println("缓冲流复制560MB所需时间："+(end-start)+"毫秒");    }}// result：缓冲流复制560MB所需时间：40171毫秒</code></pre><ol start="3"><li>使用数组优化</li></ol><pre><code class="java">public class ButteredDemo02 {    public static void main(String[] args) {        long start = System.currentTimeMillis(); // 记录开始时间        try(// 创建缓冲流对象            BufferedInputStream bis = new BufferedInputStream(new FileInputStream("D:\\chrome\\IdeaInstall.exe"));            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\copy2.exe"))        ){            //读写数据            int len;            byte[] bytes = new byte[8*1024]; // 使用数组对象优化            while ((len = bis.read(bytes))!=-1){                bos.write(bytes,0,len);  // 只写入有效字节数据            }        } catch (IOException e) {            e.printStackTrace();        }        long end = System.currentTimeMillis(); // 记录结束时间        System.out.println("缓冲流使用数组复制560MB所需时间："+(end-start)+"毫秒");    }}// result:    缓冲流使用数组复制560MB所需时间：2847毫秒</code></pre><h3 id="1-2-字符缓冲流"><a href="#1-2-字符缓冲流" class="headerlink" title="1.2 字符缓冲流"></a>1.2 字符缓冲流</h3><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个新的字符缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的字符缓冲输出流。</li></ul><h4 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h4><p>字符缓冲流的基本方法与普通字符流调用方式一致，但它具备特有的方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li></ul><p><code>readLine</code>方法演示：</p><pre><code class="java">public class BufferedReaderDemo01 {    public static void main(String[] args) throws IOException {        // 创建流对象        BufferedReader br = new BufferedReader(new FileReader("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\read.txt"));        // 定义字符串，保存读取的一行文字        String line;        // 循环读取，直到读取到null        while ((line = br.readLine())!=null){            System.out.print(line);            System.out.println("，");        }        br.close(); // 释放资源    }}</code></pre><p><code>newLine</code>方法演示：</p><pre><code class="java">public class BufferedWriterDemo02 {    public static void main(String[] args) throws IOException {        // 创建流对象        BufferedWriter bw = new BufferedWriter(new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\out.txt"));        // 写出数据        bw.write("你好");        bw.newLine(); // 写出换行        bw.write("世界");        bw.newLine();        bw.close();    }}// result:你好世界</code></pre><h3 id="1-3-练习：文本排序"><a href="#1-3-练习：文本排序" class="headerlink" title="1.3 练习：文本排序"></a>1.3 练习：文本排序</h3><pre><code>3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。9.今当远离，临表涕零，不知所言。6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</code></pre><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>逐行读取文本信息。</li><li>解析文本信息到集合中。</li><li>遍历集合，按顺序，写出文本信息。</li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">public class BufferedExercise {    public static void main(String[] args) {        // 创建map集合，保存文本数据，键为序号，值为文字        HashMap&lt;String,String&gt; lineMap = new HashMap&lt;&gt;();        // 创建流对象        try(                BufferedReader br = new BufferedReader(new FileReader("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\出师表.txt"));                BufferedWriter bw = new BufferedWriter(new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\sort.txt"))        ){            // 循环读取数据，解析存入map中            String line;            while((line = br.readLine())!=null){                // 解析文本                String[] split = line.split("\\."); // 以"."作为分隔符，将一行分为序号和文字两部分                lineMap.put(split[0],split[1]);// 序号为键，文字为值，存入集合中            }            // 遍历map集合            for (int i = 1; i &lt;= lineMap.size(); i++) {                String key = String.valueOf(i); // 获取键名为i的键                // 获取map中的文本                String value = lineMap.get(key); // 获取键名为key的对应值                // 拼接字符串，并写出                bw.write(key + "." + value);                bw.newLine(); // 写出换行            }        }catch (IOException e){            e.printStackTrace();        }    }}</code></pre><h2 id="2-转换流"><a href="#2-转换流" class="headerlink" title="2. 转换流"></a>2. 转换流</h2><h3 id="2-1-字符编码和字符集"><a href="#2-1-字符编码和字符集" class="headerlink" title="2.1 字符编码和字符集"></a>2.1 字符编码和字符集</h3><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><p><strong>编码</strong>:字符(能看懂的)–字节(看不懂的)</p><p><strong>解码</strong>:字节(看不懂的)–&gt;字符(能看懂的)</p><ul><li><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</li></ul><h4 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h4><ul><li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p><img src="https://i.loli.net/2019/05/10/5cd540cb5cccd.jpg" alt=""></p><p>当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><strong>ASCII字符集</strong> ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li></ul><ul><li><strong>ISO-8859-1字符集</strong>：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><strong>GBxxx字符集</strong>：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><strong>Unicode字符集</strong> ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h3 id="2-2-编码引出的问题"><a href="#2-2-编码引出的问题" class="headerlink" title="2.2 编码引出的问题"></a>2.2 编码引出的问题</h3><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><h3 id="2-3-InputStreamReader类"><a href="#2-3-InputStreamReader类" class="headerlink" title="2.3 InputStreamReader类"></a>2.3 InputStreamReader类</h3><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。</p><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。`</li></ul><h4 id="指定编码读取Demo"><a href="#指定编码读取Demo" class="headerlink" title="指定编码读取Demo"></a>指定编码读取Demo</h4><pre><code class="java">public class ReaderDemo {    public static void main(String[] args) throws IOException {        // 定义文件路径        String FilePath = "D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\file_gbk.txt";        // 创建流对象，默认UTF8编码        InputStreamReader isr = new InputStreamReader(new FileInputStream(FilePath));        // 创建流对象，指定GBK编码        InputStreamReader isr2 = new InputStreamReader(new FileInputStream(FilePath),"GBK");        // 定义变量，保存字符        int read;        // 使用默认编码字符流读取，乱码        while ((read = isr.read())!=-1){            System.out.print((char)read); // ��Һ�        }        isr.close();        // 使用指定GBK编码字符流读取        while ((read = isr2.read())!=-1){            System.out.println((char)read); // 大家好        }        isr2.close();    }}</code></pre><h3 id="2-4-OutPutStreamWriter类"><a href="#2-4-OutPutStreamWriter类" class="headerlink" title="2.4 OutPutStreamWriter类"></a>2.4 OutPutStreamWriter类</h3><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><h4 id="指定编码写出Demo"><a href="#指定编码写出Demo" class="headerlink" title="指定编码写出Demo"></a>指定编码写出Demo</h4><pre><code class="java">public class OutPutDemo {    public static void main(String[] args) throws IOException {        String FilePath = "D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\";        // 创建流对象，默认UTF8编码        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(FilePath + "out2.txt"));        // 写出数据        osw.write("你好"); // 保存为6个字节        osw.close();        // 创建流对象，指定GBK编码        OutputStreamWriter osw2 = new OutputStreamWriter(new FileOutputStream(FilePath + "out3.txt"),"GBK");        // 写出数据        osw2.write("你好"); // 保存为4个字节        osw2.close();    }}</code></pre><h4 id="转换流图解"><a href="#转换流图解" class="headerlink" title="转换流图解"></a>转换流图解</h4><p><strong>转换流是字节与字符间的桥梁！</strong></p><p><img src="https://i.loli.net/2019/05/10/5cd56e55421e2.jpg" alt=""></p><h3 id="2-5-练习：转换文件编码"><a href="#2-5-练习：转换文件编码" class="headerlink" title="2.5 练习：转换文件编码"></a>2.5 练习：转换文件编码</h3><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h4 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">public class CodeSwitchDemo {    public static void main(String[] args) {        try( // 1. 指定GBK编码的转换流，读取文本文件。             InputStreamReader isr = new InputStreamReader(new FileInputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\file_gbk.txt"),"GBK");             OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\codeswitch.txt")) // 默认就是utf8        ){            // 读取文件            char[] chars = new char[1024]; // 定义字符数组            int len;            while ((len = isr.read(chars))!=-1){ // 使用字符数组优化读取                osw.write(chars,0,len); // 写出            }        }catch (IOException e){            e.printStackTrace();        }    }}</code></pre><h2 id="3-序列化"><a href="#3-序列化" class="headerlink" title="3. 序列化"></a>3. 序列化</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： </p><p><img src="https://i.loli.net/2019/05/10/5cd575db8ecac.jpg" alt=""></p><h3 id="3-1-ObjectOutputStream类"><a href="#3-1-ObjectOutputStream类" class="headerlink" title="3.1 ObjectOutputStream类"></a>3.1 ObjectOutputStream类</h3><p><code>java.io.ObjectOutputStream</code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ObjectOutputStream(OutputStream out)</code>：创建一个指定<code>OutputStream</code>的<code>ObjectOutputStream</code>。</li></ul><h4 id="对象序列化操作-写对象操作"><a href="#对象序列化操作-写对象操作" class="headerlink" title="对象序列化操作(写对象操作)"></a>对象序列化操作(写对象操作)</h4><ol><li>一个对象要想序列化，必须满足两个条件</li></ol><ul><li>该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li></ul><pre><code class="java">public class Employee implements java.io.Serializable {    public String name;    public String address;    public transient int age; // transient瞬态修饰成员,不会被序列化    public void addressCheck() {          System.out.println("Address  check : " + name + " -- " + address);    }}</code></pre><ol start="2"><li>写出对象方法</li></ol><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre><code class="java">// 测试类/*java.io.ObjectOutputStream extends OutputStream    ObjectOutputStream: 对象序列化流    作用：把对象以流的方式写入到文件中保存    构造方法：        ObjectOutputStream(OutputStream out): 创建写入指定OutputStream的ObjectOutputStream        参数：OutputStream out：字节输出流    特有成员方法：        void writeObject(Object obj):将指定对象写入ObjectOutputStream*/public class Demo01ObjectOutputStream {    public static void main(String[] args) throws IOException {        // 1. 创建ObjectOutputStream，构造方法中传递字节输出流        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\person.txt"));        // 2. 使用ObjectOutputStream对象中的方法writeObject()，把对象写入到文件中        oos.writeObject(new Person("小张",11));        // 3. 释放资源        oos.close();    }}// Person类/*    序列化和反序列化时，会抛出NotSerializableException(没有序列化异常)    类通过实现 Java.io.Serializable 接口以启用其序列化功能。未实现此接口的类将无法使其进行任何状态序列化或反序列化。    Serializable接口也叫标记型接口        要进行序列化和反序列化的类必须实现Serializable接口，就会给类添加一个标记        当我们进行序列化和反序列化时，就会检测该类是否有这个标记            有：就可以进行序列化和反序列化操作            无：就会抛出NotSerializableException异常 */public class Person implements Serializable {    private String name;    private int age;    public Person() {    }    // 省略get/set等方法}</code></pre><h3 id="3-2-ObjectInputStream类"><a href="#3-2-ObjectInputStream类" class="headerlink" title="3.2 ObjectInputStream类"></a>3.2 ObjectInputStream类</h3><p><code>ObjectInputStream</code>反序列化流，将之前使用<code>ObjectOutputStream</code>序列化的原始数据恢复为对象。 </p><h4 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定<code>InputStream</code>的<code>ObjectInputStream</code>。</li></ul><h4 id="反序列化操作1-读对象操作"><a href="#反序列化操作1-读对象操作" class="headerlink" title="反序列化操作1(读对象操作)"></a>反序列化操作1(读对象操作)</h4><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><pre><code class="java">/*java.io.ObjectInputStream extends InputStream    ObjectInputStream:对象的反序列化流    作用：把文件中保存的对象，以流的方式读取出来使用    构造方法：        ObjectInputStream(InputStream in)：创建从指定InputStream中读取的ObjectInputStream        参数：InputStream in：字节输入流    特有成员方法：        Object readObject(): 从ObjectInputStream 读取对象*/public class Demo01InputStream {    public static void main(String[] args) throws IOException, ClassNotFoundException {        // 1. 创建ObjectInputStream对象，构造方法中传递字节输入流        ObjectInputStream ois = new ObjectInputStream(new FileInputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\person.txt"));        // 2. 使用ObjectInputStream对象的方法readObject() 读取保存对象的文件        Object obj = ois.readObject();           /*               readObject()方法声明抛出了ClassNotFoundException(class文件找不到异常)            当不存在对象的class文件时抛出此异常            反序列化前提：                1. 类必须实现Serializable                2. 必须存在类对应的class文件           */        // 3. 释放资源        ois.close();        // 4. 使用读取出来的对象        System.out.println(obj); // Person{name='小张', age=11}    }}</code></pre><blockquote><p>Tips:   <strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p></blockquote><h4 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a>反序列化操作2</h4><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参数构造方法 </li></ul><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。</p><p><code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><pre><code class="java">public class Person implements Serializable {    private static final long serialVersionUID = 1L; // 加入固定序列版本号    private String name;    public int age;        // 省略构造方法，get/set等}</code></pre><h3 id="3-3-练习：序列化集合"><a href="#3-3-练习：序列化集合" class="headerlink" title="3.3 练习：序列化集合"></a>3.3 练习：序列化集合</h3><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><h4 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h4><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="java">// 序列化操作public class StudentSerializableDemo {    public static void main(String[] args) throws IOException {    ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\students.txt"));    ArrayList&lt;Person&gt; arrayList = new ArrayList&lt;&gt;();    arrayList.add(new Person("xiaoming",12));    arrayList.add(new Person("xiaohua",17));    arrayList.add(new Person("xiaoli",15));    oos.writeObject(arrayList);    oos.close();}}// 反序列化操作public class StudentDemo2 {    public static void main(String[] args) throws IOException, ClassNotFoundException {        ObjectInputStream ois = new ObjectInputStream(new FileInputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\students.txt"));        // 读取，强转为ArrayList类型        ArrayList&lt;Person&gt; stuobj = (ArrayList&lt;Person&gt;) ois.readObject();        // 遍历打印        for (Person p:stuobj){            System.out.println(p);        }        ois.close();    }}</code></pre><h2 id="4-打印流"><a href="#4-打印流" class="headerlink" title="4. 打印流"></a>4. 打印流</h2><p>我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h3 id="4-1-PringStream类"><a href="#4-1-PringStream类" class="headerlink" title="4.1 PringStream类"></a>4.1 PringStream类</h3><h4 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public PrintStream(String fileName)</code>： 使用指定的文件名创建一个新的打印流。</li></ul><h4 id="改变打印流向"><a href="#改变打印流向" class="headerlink" title="改变打印流向"></a>改变打印流向</h4><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以改变它的流向。</p><pre><code class="java">public class PrintDemo {    public static void main(String[] args) throws FileNotFoundException {        System.out.println(97);        // 创建打印流，指定文件名称        PrintStream ps = new PrintStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_10\\print.txt");        // 设置系统的打印流向，输出到print.txt中        System.setOut(ps);        // 调用系统打印里，就会在print.txt中输出97        System.out.println(97);    }}</code></pre><h3 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h3><ul><li style="list-style: none"><input type="checkbox" checked=""> 能够使用字节缓冲流读取数据到程序。FileInputStream</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用字节缓冲流写出数据到文件。FileOutPutStream</li><li style="list-style: none"><input type="checkbox" checked=""> 能够明确字符缓冲流的作用和基本用法。FileReader，FileWriter</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用缓冲流的特殊功能。数组优化</li><li style="list-style: none"><input type="checkbox" checked=""> 能够阐述编码表的意义</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用转换流读取指定编码的文本文件。 InputStreamReader</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用转换流写入指定编码的文本文件。 OutputStreamWriter</li><li style="list-style: none"><input type="checkbox" checked=""> 能够说出打印流的特点。 可以改变打印流向，输出到文件中</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用序列化流写出对象到文件。ObjectOutputStream</li><li style="list-style: none"><input type="checkbox" checked=""> 能够使用反序列化流读取文件到程序中。ObjectInputStream</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的字节流和字符流</title>
      <link href="/2019/05/07/javabasics/zi-jie-liu-zi-fu-liu/"/>
      <url>/2019/05/07/javabasics/zi-jie-liu-zi-fu-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-IO概述"><a href="#1-IO概述" class="headerlink" title="1. IO概述"></a>1. IO概述</h2><p>我们把数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出(写入)</strong>数据。</p><a id="more"></a><h3 id="1-1-IO的分类"><a href="#1-1-IO的分类" class="headerlink" title="1.1 IO的分类"></a>1.1 IO的分类</h3><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><h3 id="1-2-顶级父类"><a href="#1-2-顶级父类" class="headerlink" title="1.2 顶级父类"></a>1.2 顶级父类</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/06/IO%E7%88%B6%E7%B1%BB-1557156293866.jpg" alt="title"></p><h2 id="2-字节流"><a href="#2-字节流" class="headerlink" title="2. 字节流"></a>2. 字节流</h2><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h3 id="2-1-字节输出流-OutputStream"><a href="#2-1-字节输出流-OutputStream" class="headerlink" title="2.1 字节输出流[OutputStream]"></a>2.1 字节输出流[OutputStream]</h3><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><blockquote><p>Tips: close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h3 id="2-2-FileOutputStream类"><a href="#2-2-FileOutputStream类" class="headerlink" title="2.2 FileOutputStream类"></a>2.2 FileOutputStream类</h3><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。<br><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称路径写入文件。</li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><ul><li>构造举例，代码如下：<pre><code class="java">public class FileOutPutDemo01 {  public static void main(String[] args) throws IOException {      // 使用File对象创建流对象      File file = new File("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\a.txt");      FileOutputStream fos = new FileOutputStream(file);      // 使用文件名称路径创建流对象      FileOutputStream fos2 = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\b.txt");  }}</code></pre><h4 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h4></li></ul><ol><li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：<pre><code class="java">public class FOSWrite { public static void main(String[] args) throws IOException {     FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo" +             "\\Demo5_6\\fos.txt");     // 写入数据     fos.write(97);     fos.write(98);     fos.write(99);     // 关闭     fos.close(); }}// result:abc</code></pre></li></ol><blockquote><p>Tips: </p><pre><code>1. 虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。</code></pre></blockquote><ol start="2"><li><p><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</p><pre><code class="java">public class FOSWriteDemo02 { public static void main(String[] args) throws IOException {     FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo" +             "\\Demo5_6\\fos2.txt");     // 将字符串转换为字节数组     byte[] bytes = "测试写入".getBytes();     // 写出字节数组数据     fos.write(bytes); // 测试写入     fos.close(); }}</code></pre></li><li><p><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</p><pre><code class="java">public class FosWriteDemo03 { public static void main(String[] args) throws IOException {     FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fos3.txt");     byte[] bytes = "abcdef".getBytes(); // 字符串转换为字节数组     fos.write(bytes,2,2); // result：cd     fos.close(); }}</code></pre></li></ol><h4 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h4><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>以上两个构造方法，参数中都需要传入一个boolean类型的值，true表示追加数据，false表示清空原有数据。代码示例如下：</p><pre><code class="java">public class FOSAppendWrite {    public static void main(String[] args) throws IOException {        FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo" +                "\\Demo5_6\\fos2.txt",true); // 创建流对象，设置数据追加        fos.write("，测试追加。".getBytes()); // result = 测试写入，测试追加。        fos.close();    }}</code></pre><h4 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h4><p>Windows中换行符号是<code>\r\n</code>。以下代码示例具体使用：</p><pre><code class="java">public class FOSWriteDemo04 {    public static void main(String[] args) throws IOException {        FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\c.txt");        byte[] words = {97,98,99,100,101}; // abcde        for (byte i:words){            fos.write(i);            fos.write("\r\n".getBytes()); // 写出一个换行，将换行符号转为数组写出        }        fos.close();    }}/*result:abcde */</code></pre><blockquote><p>Tips：</p><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><h3 id="2-3-字节输入流-InputStream"><a href="#2-3-字节输入流-InputStream" class="headerlink" title="2.3 字节输入流[InputStream]"></a>2.3 字节输入流[InputStream]</h3><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><h3 id="2-4-FileInputStream类"><a href="#2-4-FileInputStream类" class="headerlink" title="2.4 FileInputStream类"></a>2.4 FileInputStream类</h3><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p><ul><li>代码示例如下：<pre><code class="java">public class FileInputStreamDemo01 {  public static void main(String[] args) throws IOException {      // 使用File对象创建流对象      FileInputStream fis = new FileInputStream(new File("Demo5_6\\fos2.txt"));      // 使用文件名创建流对象      FileInputStream fis2 = new FileInputStream("Demo5_6\\fos.txt");  }}</code></pre></li></ul><h4 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h4><ol><li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码演示如下：<pre><code class="java">public class FISRead { public static void main(String[] args) throws IOException {     FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\read.txt");     byte[] bytes = {97,98,99,100,101};     for (byte b:bytes){         fos.write(b);         fos.write("\n".getBytes());     }     fos.close();     // 创建字节输入流对象，指向文件     FileInputStream fis = new FileInputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\read.txt"); int b;     while ((b = fis.read())!=-1){ // 判断从数据中读取的值不等于-1         System.out.println((char)b); // byte字节型转换为char字符型     }     fis.close(); }}</code></pre></li></ol><blockquote><p>Tips:虽然读取了一个字节，但是会自动提示为int类型。操作完毕后，一定要close()。</p></blockquote><ol start="2"><li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：<pre><code class="java">public class FISReadDemo02 { public static void main(String[] args) throws IOException {     FileInputStream fis = new FileInputStream("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\read.txt");     int len; // 定义变量，作为有效个数     byte[] bytes = new byte[2]; // 定义字节数组，作为放字节数据的容器，存储2个字节     while ((len = fis.read(bytes))!=-1){ // 这样每次可以读取2个字节         System.out.println(new String(bytes,0,len)); // 每次读取后，将数组变成字符串打印     }     fis.close(); }}</code></pre></li></ol><h3 id="2-5-字节流练习：图片复制"><a href="#2-5-字节流练习：图片复制" class="headerlink" title="2.5 字节流练习：图片复制"></a>2.5 字节流练习：图片复制</h3><h4 id="复制原理图解"><a href="#复制原理图解" class="headerlink" title="复制原理图解"></a>复制原理图解</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/05/07/2_copy-1557212320372.jpg" alt="title"></p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre><code class="java">public class CopyImg {    public static void main(String[] args) throws IOException {        // 创建流对象，指定数据源        FileInputStream fis = new FileInputStream("C:\\Users\\14908\\Desktop\\Java\\img\\2_copy.jpg");        // 指定目的地        FileOutputStream fos = new FileOutputStream("D:\\IDEA_WorkSpace\\Demo" +                "\\Demo5_6\\copy.jpg");        // 定义长度        int len;        // 定义数组        byte[] b = new byte[1024];        // 循环读取        while ((len = fis.read(b))!=-1){            fos.write(b,0,len);        }        fos.close();        fis.close();    }}</code></pre><blockquote><p>Tips：<br>    流的关闭原则：先开后关，后开先关。</p></blockquote><h2 id="3-字符流"><a href="#3-字符流" class="headerlink" title="3. 字符流"></a>3. 字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h3 id="3-1-字符输入流-Reader"><a href="#3-1-字符输入流-Reader" class="headerlink" title="3.1 字符输入流[Reader]"></a>3.1 字符输入流[Reader]</h3><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>public int read()</code>： 从输入流读取一个字符。 </li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h3 id="3-2-FileReader类"><a href="#3-2-FileReader类" class="headerlink" title="3.2 FileReader类"></a>3.2 FileReader类</h3><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>Tips:</p><pre><code>1. 字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表(IDEA中是UTF-8)2. 字节缓冲区：一个字节数组，用来临时存储字节数据</code></pre></blockquote><h4 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h4><p><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。<br><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。</p><p>代码示例如下：</p><pre><code class="java">public class FileReaderDemo throws IOException{    public static void main(String[] args){        // 使用File对象创建流对象        FileReader fr = new FileReader(new File("Demo5_6\\a.txt"))；        // 使用文件名称创建流对象        FileReader fr2 = new FileReader("Demo5_6\\a.txt")；    }}</code></pre><h4 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h4><ol><li><p><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码演示如下：</p><pre><code class="java">public class FRReadDemo01 { public static void main(String[] args) throws IOException {     FileReader fr = new FileReader("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\d.txt");     int w;     while ((w = fr.read())!=-1){         System.out.print((char)w);     }     fr.close(); }}</code></pre><blockquote><p>Tips：虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote></li><li><p><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码演示如下：</p><pre><code class="java">public class FRReadDemo02 { public static void main(String[] args) throws IOException {     FileReader fr = new FileReader("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\d.txt");     int len;     char[] cbuf = new char[2]; // 定义字符数组，作为放字符数据的容器     while ((len = fr.read(cbuf))!=-1){         System.out.print(new String(cbuf,0,len)); // 转换为字符串输出     }     fr.close(); }}</code></pre></li></ol><h3 id="3-3-字符输出流-Writer"><a href="#3-3-字符输出流-Writer" class="headerlink" title="3.3 字符输出流[Writer]"></a>3.3 字符输出流[Writer]</h3><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>void write(int c)</code> 写入单个字符。</li><li><code>void write(char[] cbuf)</code>写入字符数组。 </li><li><code>abstract  void write(char[] cbuf, int off, int len)</code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li><li><code>void write(String str)</code>写入字符串。 </li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush()</code>刷新该流的缓冲。  </li><li><code>void close()</code> 关闭此流，但要先刷新它。 </li></ul><h3 id="3-4-FileWriter类"><a href="#3-4-FileWriter类" class="headerlink" title="3.4 FileWriter类"></a>3.4 FileWriter类</h3><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h4 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。 </li></ul><h4 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h4><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码示例如下：</p><pre><code class="java">public class FWWrite {    public static void main(String[] args) throws IOException {        FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fw.txt");        // 写出数据        fw.write(97);        fw.write('b');        fw.write('c');        fw.write(30000);        fw.close();        // result: abc田    }}</code></pre><blockquote><p>Tips:</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol></blockquote><h4 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close</code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul><p>代码示例：</p><pre><code class="java">public class FWWriteDemo02 {    public static void main(String[] args) throws IOException {        FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fw02.txt");        // 写出数据,通过flush        fw.write('刷');        fw.flush();        fw.write('新');        fw.flush();        // 写出数据，通过close        fw.write('关');        fw.close();        fw.write('闭'); // [报错] java.io.IOException: Stream closed        fw.close();    }}</code></pre><blockquote><p>Tips：即使使用了flush方法写出了数据，操作到最后还是要调用close方法，释放系统资源。</p></blockquote><h4 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h4><ol><li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，实例如下：<pre><code class="java">public class FWCharWrite { public static void main(String[] args) throws IOException {     FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fw03.txt");     char[] chars = "测试写出字符数组".toCharArray(); // 将字符串转换为字符数组     fw.write(chars); // 测试写出字符数组     fw.write(chars,4,2); // 写出从索引2开始的2个字节，即"字符"2字     fw.close(); }}                                                              </code></pre></li><li><p><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，示例如下：</p><pre><code class="java">public class FWWriteString { public static void main(String[] args) throws IOException {     FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fw04.txt");     fw.write("测试字符串写出"); // 测试字符串写出     fw.write("测试写出指定字符",2,2); // 写出     fw.close(); }}</code></pre></li><li><p><strong>续写和换行</strong>：操作类似于FileOutputStream。</p><pre><code class="java">public class FWWriteString { public static void main(String[] args) throws IOException {     FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fw04.txt");     fw.write("测试字符串写出"); // 测试字符串写出     fw.write("\r\n"); // 写出换行符     fw.write("测试写出指定字符",2,2); // 写出     fw.close(); }}</code></pre></li></ol><h2 id="4-IO异常的处理"><a href="#4-IO异常的处理" class="headerlink" title="4. IO异常的处理"></a>4. IO异常的处理</h2><h3 id="JDK7前的处理"><a href="#JDK7前的处理" class="headerlink" title="JDK7前的处理"></a>JDK7前的处理</h3><p>之前的练习中，一直把异常直接抛出，实际开发中建议使用<code>try...catch...finally</code> 代码块，处理异常部分，代码示例如下：</p><pre><code class="java">public class HandleException01 {    public static void main(String[] args) {        // 声明一个Fw对象，指向空        FileWriter fw = null;        try {            // 创建一个流对象，将fw指向该对象            fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fw05.txt");            // 写出数据            fw.write("异常的处理测试");        } catch (IOException e) {            e.printStackTrace();        }finally{            try{                if (fw != null){                    fw.close();                }            }catch (IOException e){                e.printStackTrace();            }        }    }}</code></pre><h3 id="JDK7的处理"><a href="#JDK7的处理" class="headerlink" title="JDK7的处理"></a>JDK7的处理</h3><p>可以使用JDK7优化后的<code>try-with-resource</code> 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。<br>格式：</p><pre><code class="java">try(创建流对象语句，如多个，使用';'隔开){    // 读写语句}catch(IOException e){    e.printStackTrace();}</code></pre><p>代码示例：</p><pre><code class="java">public class FWJDK7Dispose {    public static void main(String[] args) {        try(FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\fw06.txt");){            fw.write("测试JDK7后优化的try...catch");        } catch (IOException e) {            e.printStackTrace();        }    }}</code></pre><h3 id="JDK9的改进"><a href="#JDK9的改进" class="headerlink" title="JDK9的改进"></a>JDK9的改进</h3><p>JDK9中<code>try-with-resource</code> 的改进，对于<strong>引入对象</strong>的方式，支持的更加简洁。被引入的对象，同样可以自动关闭，无需手动close，格式如下。<br>改进前格式：</p><pre><code class="java">// 被final修饰的对象final Resource resource1 = new Resource("resource1");// 普通对象Resource resource2 = new Resource("resource2");// 引入方式：创建新的变量保存try (Resource r1 = resource1;     Resource r2 = resource2) {     // 使用对象}</code></pre><p>改进后的格式：</p><pre><code class="java">// 被final修饰的对象final Resource resource1 = new Resource("resource1");// 普通对象Resource resource2 = new Resource("resource2");// 引入方式：直接引入try (resource1; resource2) {     // 使用对象}</code></pre><p>改进后的代码实例：</p><pre><code class="java">public class TryDemo {    public static void main(String[] args) throws IOException{        final FileReader fr = new FileReader("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\read.txt");        FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\out.txt");        try(fr;fw){            int b;            while ((b = fr.read())!=-1){                fw.write(b);            }        } catch (IOException e) {            e.printStackTrace();        }    }}</code></pre><h2 id="5-属性集"><a href="#5-属性集" class="headerlink" title="5. 属性集"></a>5. 属性集</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p><code>java.util.Properties</code> 继承于<code>Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><h3 id="5-2-Properties类"><a href="#5-2-Properties类" class="headerlink" title="5.2 Properties类"></a>5.2 Properties类</h3><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><p><code>public Properties()</code> :创建一个空的属性列表。</p><h4 id="基本的存储方法"><a href="#基本的存储方法" class="headerlink" title="基本的存储方法"></a>基本的存储方法</h4><ul><li><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。  </li><li><code>public String getProperty(String key)</code> ：使用此属性列表中指定的键搜索属性值，返回搜索到的值</li><li><code>public Set&lt;String&gt; stringPropertyNames()</code> ：返回所有键名称的集合。<pre><code class="java">public class ProDemo {  public static void main(String[] args) {      // 创建属性集对象      Properties pt = new Properties();      // 添加键值对元素      pt.setProperty("小梦","168");      pt.setProperty("小明","175");      pt.setProperty("小张","178");      // 打印属性集对象      System.out.println(pt);      // 通过键获取值      Set&lt;String&gt; set = pt.stringPropertyNames(); // 获取所以键，放入集合中      for (String key:set){          System.out.println(key+"--&gt;"+pt.getProperty(key));      }  }}// result{小明=175, 小张=178, 小梦=168}小明--&gt;175小张--&gt;178小梦--&gt;168</code></pre></li></ul><h4 id="store方法"><a href="#store方法" class="headerlink" title="store方法"></a>store方法</h4><p><code>Properties</code>集合中的方法<code>store</code>；用于把集合中的临时数据，持久化写入到硬盘中存储。</p><ul><li><strong>构造方法</strong><ul><li>void store(OutPutStream out,String comments); 字节输出流，不能写入中文</li><li>void store(Write write,String comments); 字符输出流，可以写中文</li><li>String comments: 注释，用来解释说明保存的文件是做什么的，不能中文注释</li></ul></li></ul><p>代码示例：</p><pre><code class="java">public class ProDemo02 {    public static void main(String[] args) throws IOException {        // 1. 创建Properties集合对象，添加数据        Properties pro = new Properties();        pro.setProperty("小明","177");        pro.setProperty("小立","181");        pro.setProperty("小化","173");        // 2. 创建字节输出流/字符输出流对象，绑定输出目的地。        FileWriter fw = new FileWriter("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\prop.txt");        // 3. 使用Properties集合中的方法store，把集合中的临时数据，写入到硬盘中        pro.store(fw,"save data");        // 4. 释放资源        fw.close();        /*        prop.txt            #save data            #Tue May 07 20:47:14 CST 2019            小明=177            小立=181            小化=173         */    }}</code></pre><h4 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h4><p>可以使用<code>Properties</code>集合中的方法<code>load</code>，把硬盘中保存的文件(键值对形式的)，读取到集合中使用。</p><ul><li><p><strong>构造方法</strong>：</p><ul><li>void load(InputStream inStream); 字节输入流，不能读取含有中文的键值对</li><li>void load(Reader reader); 字符输入流，可以读取中文</li></ul></li><li><p><strong>注意</strong>：</p><ol><li>存储键值对的文件中，键与值的默认连接符号可以使用=，空格(其他符号)，一般使用=</li><li>存储键值对的文件中，可以使用# 做注释，注释的内容不会被读取</li><li>存储键值对的文件中，键值默认都是字符串，不需要再加引号</li></ol></li></ul><p>代码示例：</p><pre><code class="java">public class ProLoadMethod {    public static void main(String[] args) throws IOException {        // 1. 创建Properties集合对象        Properties pro = new Properties();        // 2. 使用Properties集合对象中的load方法来读取保存键值对的文件        pro.load(new FileReader("D:\\IDEA_WorkSpace\\Demo\\Demo5_6\\prop.txt"));        // 3.遍历Properties集合        Set&lt;String&gt; set = pro.stringPropertyNames();        for (String key:set){            System.out.println(key + "--&gt;" + pro.getProperty(key));        }    }}</code></pre><h2 id="今日总结："><a href="#今日总结：" class="headerlink" title="今日总结："></a>今日总结：</h2><ol><li>IO的概述</li><li>IO的分类：根据数据流向：输入流和输出流，根据数据类型：字节流和字符流。</li><li>字节输出流<code>OutPutStream</code>类的子类<code>FileFileOutputStream</code>类构造方法创建流对象的方式</li><li><code>FileFileOutputStream</code>类的基本方法<code>write</code>的三种使用方式</li><li>数据的追加续写：<code>FileFileOutputStream</code>类的第二个参数布尔值，true追加，false清空。</li><li>关于换行符的写入</li><li>字节输入流<code>InputStream</code>类的子类<code>FileInputStream</code>类</li><li><code>FileInputStream</code>类构造方法创建流对象的方式</li><li><code>FileInputStream</code>类的基本方法<code>read</code>的2种使用方式，读取字节和读取字节数组。</li><li>字符输入流<code>Reader</code>类的子类<code>FileReader</code>类</li><li><code>FileReader</code>类构造方法创建流对象的方式</li><li>读取字符数据的两种方式，读取字符和读取字符数据</li><li>字符输出流<code>Write</code>类的子类<code>FileWrite</code>类构造方法创建流对象的方式</li><li>使用<code>write</code>写出数据的方法：写出字符、写出字符数组写出字符串</li><li>关闭<code>close()</code>和刷新<code>flush</code>方法</li><li>IO异常处理的优化方案</li><li>属性集的概述和使用</li><li><code>Properties</code>类的构造方法创建流对象</li><li>基本存储方法:<code>setProperty()</code>,<code>getProperty()</code>,<code>stringPropertyNames()</code></li><li>读取<code>load()</code>和写入<code>store()</code>方法</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中File类和递归</title>
      <link href="/2019/05/05/javabasics/file-lei-he-di-gui/"/>
      <url>/2019/05/05/javabasics/file-lei-he-di-gui/</url>
      
        <content type="html"><![CDATA[<h2 id="1-File类"><a href="#1-File类" class="headerlink" title="1. File类"></a>1. File类</h2><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><a id="more"></a><h3 id="1-1-构造方法"><a href="#1-1-构造方法" class="headerlink" title="1.1 构造方法"></a>1.1 构造方法</h3><ul><li><code>public File(String pathname)</code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。  </li><li><code>public File(String parent, String child)</code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。</li></ul><p>代码举例如下：</p><pre><code class="java">public class DemoFileClass {    public static void main(String[] args) {        // 通过文件绝对路径        String pathname = "D:\\IDEA_WorkSpace\\Demo\\Demo5_5\\testfile.txt";        File file1 = new File(pathname);//        System.out.println(file1);        // 通过父路径和子路径字符串        String parent = "D:\\IDEA_WorkSpace\\Demo\\Demo5_5";        String child = "testfile.txt";        File file2 = new File(parent,child);//        System.out.println(file2);        // 通过父级File对象和子路径字符串        File parentDir = new File("D:\\IDEA_WorkSpace\\Demo\\Demo5_5");        File file3 = new File(parentDir,child);        System.out.println(file3);    }}</code></pre><blockquote><p>一个File对象代表硬盘中实际存在的一个文件或者目录；无论该路径下是否存在文件或者目录，都不影响File对象的创建。</p></blockquote><h3 id="1-2-常用方法"><a href="#1-2-常用方法" class="headerlink" title="1.2 常用方法"></a>1.2 常用方法</h3><h4 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h4><ul><li><code>public String getAbsolutePath()</code> ：返回此File的绝对路径名字符串。</li><li><code>public String getPath()</code> ：将此File转换为路径名字符串。 </li><li><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </li><li><code>public long length()</code>  ：返回由此File表示的文件的长度。 </li></ul><p>实例代码如下：</p><pre><code class="java">public class GetFileDemo {    public static void main(String[] args) {        File file = new File("D:\\IDEA_WorkSpace\\Demo\\Demo5_5\\testfile.txt");        System.out.println("文件绝对路径:" + file.getAbsolutePath());        System.out.println("文件构造路径:" + file.getPath());        System.out.println("文件名称:" + file.getName());        System.out.println("文件长度:" + file.length()+"字节");        File fileDir = new File("D:\\IDEA_WorkSpace\\Demo\\Demo5_5");        System.out.println("目录绝对路径：" + fileDir.getAbsolutePath());        System.out.println("目录构造路径：" + fileDir.getPath());        System.out.println("目录名称：" + fileDir.getName());        System.out.println("目录长度：" + fileDir.length());    }}// 上述输出结果：文件绝对路径:D:\IDEA_WorkSpace\Demo\Demo5_5\testfile.txt文件构造路径:D:\IDEA_WorkSpace\Demo\Demo5_5\testfile.txt文件名称:testfile.txt文件长度:32字节目录绝对路径：D:\IDEA_WorkSpace\Demo\Demo5_5目录构造路径：D:\IDEA_WorkSpace\Demo\Demo5_5目录名称：Demo5_5目录长度：4096</code></pre><blockquote><p>API中说明：length(), 表示文件的长度。但是File对象表示目录，则返回值未指定。</p></blockquote><h4 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h4><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。<pre><code class="java">public class FilePath {  public static void main(String[] args) {      System.out.println(new File("D:\\IDEA_WorkSpace\\Demo\\" +              "Demo5_5\\testfile.txt").getAbsolutePath());      System.out.println(new File("testfile.txt").getAbsolutePath());  }}// output resultD:\IDEA_WorkSpace\Demo\Demo5_5\testfile.txtD:\IDEA_WorkSpace\testfile.txt</code></pre></li></ul><h4 id="判定功能的方法"><a href="#判定功能的方法" class="headerlink" title="判定功能的方法"></a>判定功能的方法</h4><ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li></ul><p>示例代码如下：</p><pre><code class="java">public class FileIs {    public static void main(String[] args) {        File file = new File("D:\\IDEA_WorkSpace\\Demo\\Demo5_5\\testfile.txt");        File dir = new File("D:\\IDEA_WorkSpace\\Demo\\Demo5_5");        // 判断是否存在文件或者目录,返回布尔值        System.out.println(file.exists()); // true        System.out.println(dir.exists()); // true    System.out.println(new File("A:\\testDir").exists()); // false            // 判断是文件还是目录//        System.out.println("is file?: " + file.isFile()); // true//        System.out.println("is file?: " + dir.isFile()); // false//        System.out.println("is directory?: " + file.isDirectory()); // false//        System.out.println("is directory?: " + dir.isDirectory()); // true        Judge(file);         Judge(dir);    }    public static void Judge(File file){        if (file.isFile())            System.out.println(file + "  是文件");        if (file.isDirectory())            System.out.println(file + "  是目录");    }}</code></pre><h4 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h4><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。  </li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><p>示例如下：</p><pre><code class="java">public class FileCreDel{    final static String rootpath = "D:\\IDEA_WorkSpace\\Demo\\Demo5_5\\";    public static void main (String[] args) throws IOException {        System.out.println("创建文件:1\n创建文件夹：2\n删除文件或文件夹：3\n退出：4");        Scanner sc = new Scanner(System.in);        while (true) {            int pattern = sc.nextInt();            switch (pattern) {                case 1:                    System.out.println("输入需要创建的文件名:");                    CreFile(sc.next());                    break;                case 2:                    System.out.println("输入需要创建的文件夹名:");                    MkDir(sc.next());                    break;                case 3:                    System.out.println("输入需要删除的文件或文件夹名称:");                    Del(sc.next());                    break;                case 4:                    System.exit(0);            }        }    }    public static void CreFile(String name) throws IOException {        File file = new File(rootpath + name);        if (file.exists() == false) {            file.createNewFile();            System.out.println(name + "文件创建成功");        } else{            System.out.println(name + "文件已经存在，创建失败！");        }    }    public static void MkDir(String name) throws IOException{        File dir = new File(rootpath + name);        if (dir.exists() == false){            dir.mkdirs();            System.out.println(name + "文件夹创建成功");        }else{            System.out.println(name + "文件夹已存在，创建失败！");        }    }    public static void Del(String name){        if (new File(rootpath + name).delete() == true){            System.out.println("删除成功！");        }else {            System.out.println("删除失败，文件或文件夹不存在！");        }    }}</code></pre><blockquote><p>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote><h3 id="1-3-目录的遍历"><a href="#1-3-目录的遍历" class="headerlink" title="1.3 目录的遍历"></a>1.3 目录的遍历</h3><ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。<pre><code class="java">public class FileFor {  public static void main(String[] args) {      File dir = new File("D:\\IDEA_WorkSpace\\Demo\\Demo5_5\\");      // 获取当前目录下的文件以及文件夹的名称。      String[] names = dir.list();      for(String name:names){          System.out.println(name);      }      // 获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息。      File[] files = dir.listFiles();      for (File file:files){          System.out.println(file);      }  }}</code></pre></li></ul><blockquote><p>Tips:调用listFiles方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。</p></blockquote><h2 id="2-递归"><a href="#2-递归" class="headerlink" title="2. 递归"></a>2. 递归</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><ul><li><strong>递归</strong>：指在当前方法内调用自己的这种现象。</li><li><strong>递归的分类:</strong><ul><li>递归分为两种，直接递归和间接递归。</li><li>直接递归称为方法自身调用自己。</li><li>间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</li></ul></li><li><strong>注意事项</strong>：<ul><li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li><li>在递归中虽然有限定条件，但是递归次数不能太多。否则也会发生栈内存溢出。</li><li>构造方法,禁止递归。</li></ul></li></ul><h3 id="2-2-递归累加求和"><a href="#2-2-递归累加求和" class="headerlink" title="2.2 递归累加求和"></a>2.2 递归累加求和</h3><h4 id="计算1-n的和"><a href="#计算1-n的和" class="headerlink" title="计算1~n的和"></a>计算1~n的和</h4><p><strong>分析</strong>：num的累和 = num + (num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><p>实例如下：</p><pre><code class="java">public class DemoRecursion02 {    public static void main(String[] args) {        int num = 5;        System.out.println(getSum(num));    }    public static int getSum(int num){        if (num == 1)            return 1;        return num+getSum(--num); // 为什么num--会报错？ num--：num先参与运算，在减一，这样传递过去的一直是5，故--num才行，先自减1在参与运算。    }}</code></pre><h3 id="2-3-递归求阶乘"><a href="#2-3-递归求阶乘" class="headerlink" title="2.3 递归求阶乘"></a>2.3 递归求阶乘</h3><ul><li><strong>阶乘</strong>：所有小于及等于该数的正整数的积。<pre><code class="java">n的阶乘：n! = n * (n-1) *...* 3 * 2 * 1 </code></pre><strong>分析</strong>：这与累和类似,只不过换成了乘法运算，学员可以自己练习，需要注意阶乘值符合int类型的范围。<pre><code>推理得出：n! = n * (n-1)!</code></pre>代码实现如下：<pre><code class="java">public class DemoRecursion03 {  public static void main(String[] args) {      int n = 5;      System.out.println(n + "的阶乘为：" + getValue(n));  }  public static int getValue(int n){      if (n == 1)          return 1;      return n * getValue(--n);  }}</code></pre></li></ul><h3 id="2-4-递归打印多级目录"><a href="#2-4-递归打印多级目录" class="headerlink" title="2.4 递归打印多级目录"></a>2.4 递归打印多级目录</h3><p><strong>分析</strong>：多级目录的打印，就是当目录的嵌套。遍历之前，无从知道到底有多少级目录，所以我们还是要使用递归实现。</p><p>示例代码：</p><pre><code class="java">public class RecursionPrintDir {    public static void main(String[] args) {        File dir = new File("D:\\IDEA_WorkSpace\\Demo\\");        printDir(dir);    }    public static void printDir(File dir){        File[] files = dir.listFiles(); // 获取文件或目录file对象        for (File file:files){            if (file.isFile()){                System.out.println("文件名：" + file.getAbsolutePath()); //如果是文件则打印绝对路径            }else{                System.out.println("目录：" + file.getAbsolutePath());                printDir(file); // 继续遍历，调用printdir，形成递归            }        }    }}</code></pre><h2 id="3-综合案例"><a href="#3-综合案例" class="headerlink" title="3. 综合案例"></a>3. 综合案例</h2><h3 id="3-1-文件搜索"><a href="#3-1-文件搜索" class="headerlink" title="3.1 文件搜索"></a>3.1 文件搜索</h3><p>输入文件名称，输出文件路径<br><strong>分析</strong>：</p><ol><li>目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</li><li>遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</li></ol><p>代码实现：</p><pre><code class="java">public class SearchFile {    static String rootpath = "D:\\IDEA_WorkSpace\\Demo\\Demo5_5\\";//    final static String filename = "FileFor.java";    public static void main(String[] args) {        System.out.println("输入你要搜索的文件名：");        searchfile(new File(rootpath),new Scanner(System.in).next());    }    public static void searchfile(File dir,String filename){        File[] files = dir.listFiles();        for (File file:files){            if(file.isFile()){                if (file.getName().equals(filename) == true){                    System.out.println(file.getAbsolutePath());                }            }else{                searchfile(file,filename);            }        }    }}</code></pre><blockquote><p>注意：==和equals的区别！！！</p></blockquote><h3 id="3-2-文件过滤器的优化"><a href="#3-2-文件过滤器的优化" class="headerlink" title="3.2 文件过滤器的优化"></a>3.2 文件过滤器的优化</h3><p><code>java.io.FileFilter</code>是一个接口，是File的过滤器。 该接口的对象可以传递给File类的<code>listFiles(FileFilter)</code> 作为参数， 接口中只有一个方法。</p><p><code>boolean accept(File pathname)</code> ：测试pathname是否应该包含在当前File目录中，符合则返回true。</p><p><strong>分析</strong>：</p><ol><li>接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。</li><li><code>accept</code>方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。保留规则：<ol><li>要么是.java文件。</li><li>要么是目录，用于继续遍历。</li></ol></li><li>通过过滤器的作用，<code>listFiles(FileFilter)</code>返回的数组元素中，子文件对象都是符合条件的，可以直接打印。</li></ol><p>代码实现：</p><pre><code class="java">public class DemoFileFilter {    static String rootpath = "D:\\IDEA_WorkSpace\\Demo\\Demo5_5\\";    public static void main(String[] args) {        printDir(new File(rootpath));    }    public static void printDir(File dir){        // 匿名内部类方式,创建过滤器子类对象        File[] files = dir.listFiles(new FileFilter() {            @Override            public boolean accept(File pathname) {                return pathname.getName().endsWith(".java")||pathname.isDirectory();// 过滤掉除了.java文件和目录以外的所有东西            }        });        // 循环打印过滤后的数据        for (File file:files){            if (file.isFile()){                System.out.println("文件名："+file.getAbsolutePath());            }else{                printDir(file);            }        }    }}</code></pre><h3 id="3-3-Lambda优化"><a href="#3-3-Lambda优化" class="headerlink" title="3.3 Lambda优化"></a>3.3 Lambda优化</h3><p>代码示例如下：</p><pre><code class="java">public static void printDir2(File dir){        File[] files = dir.listFiles(f-&gt;{return f.getName().endsWith(".java") || f.isDirectory();});        for (File file:files){            if (file.isFile()){                System.out.println("文件名："+file.getAbsolutePath());            }else{                printDir2(file);            }        }    }</code></pre><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ol><li>Java中的File类</li><li>文件和目录的创建和删除操作</li><li>File类的一些方法</li><li>递归的概念以及使用<br><strong>遇到的问题</strong>：</li><li>==与equals的区别，使用过程中的注意事项</li><li>Lambda表达式还不熟练</li><li>时间管理</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的线程池与Lambda表达式</title>
      <link href="/2019/05/03/javabasics/xian-cheng-chi-yu-lambda-biao-da-shi/"/>
      <url>/2019/05/03/javabasics/xian-cheng-chi-yu-lambda-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-等待唤醒机制"><a href="#1-等待唤醒机制" class="headerlink" title="1. 等待唤醒机制"></a>1. 等待唤醒机制</h2><p><strong>概念</strong>：多个线程在处理同一个资源，但处理的动作(线程的任务)却不相同。</p><p>比如：线程A用来生产包子，线程B用来吃包子，包子可以理解为同一资源。线程A与线程B的处理动作，一个是生产，一个是消费。那么线程A与线程B之间就存在线程通信问题。</p><a id="more"></a><p><strong>为什么要处理线程间通信：</strong></p><p>多个线程并发执行时, 在默认情况下CPU是随机切换线程的，当我们需要多个线程来共同完成一件任务，并且我们希望他们有规律的执行, 那么多线程之间需要一些协调通信，以此来帮我们达到多线程共同操作一份数据。</p><p><strong>如何保证线程间通信有效利用资源：</strong></p><p>多个线程在处理同一个资源，并且任务不同时，需要线程通信来帮助解决线程之间对同一个变量的使用或操作。 就是多个线程在操作同一份数据时， 避免对同一共享变量的争夺。也就是我们需要通过一定的手段使各个线程能有效的利用资源。而这种手段即—— <strong>等待唤醒机制。</strong></p><h3 id="1-1-等待唤醒机制"><a href="#1-1-等待唤醒机制" class="headerlink" title="1.1 等待唤醒机制"></a>1.1 等待唤醒机制</h3><p><strong>什么是等待唤醒机制</strong></p><p>这是多个线程间的一种<strong>协作</strong>机制。谈到线程我们经常想到的是线程间的<strong>竞争（race）</strong>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。就好比在公司里你和你的同事们，你们可能存在在晋升时的竞争，但更多时候你们更多是一起合作以完成某些任务。</p><p>就是在一个线程进行了规定操作后，就进入等待状态<strong>wait()</strong>， 等待其他线程执行完他们的指定代码过后 再将其唤醒<strong>notify()</strong> ;在有多个线程进行等待时， 如果需要，可以使用 notifyAll()来唤醒所有的等待线程。</p><p>wait/notify 就是线程间的一种协作机制。</p><p><strong>等待唤醒中的方法</strong></p><p>等待唤醒机制就是用于解决线程间通信的问题，使用的3个方法含义如下：</p><ol><li>wait：线程不再活动，不再参与调度，进入 wait set 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING。它还要等着别的线程执行一个<strong>特别的动作</strong>，也即是“<strong>通知（notify）</strong>”在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</li><li>notify：则选取所通知对象的 wait set 中的一个线程释放；例如，餐馆有空位置后，等候就餐最久的顾客最先入座。</li><li>notifyAll：则释放所通知对象的 wait set 上的全部线程。</li></ol><blockquote><p>注意：哪怕只通知了一个等待的线程，被通知线程也不能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不在持有锁，所以它需要再次尝试获取锁(可能会面临其他线程的竞争),成功后才能在当初调用wait方法之后的地方恢复执行。</p></blockquote><blockquote><p>总结：如果能获取锁，线程就从waiting状态变成Runnable状态；否则，从wait set出来，又会进入entry set，线程就从waiting状态变成了Blocked状态。</p></blockquote><p><strong>调用wait和notify方法需要注意的细节</strong></p><ol><li>wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法。</li></ol><h3 id="1-2-生成者与消费者问题"><a href="#1-2-生成者与消费者问题" class="headerlink" title="1.2 生成者与消费者问题"></a>1.2 生成者与消费者问题</h3><p>等待唤醒机制其实就是经典的”生产者与消费者”的问题。</p><p>拿生产包子消费包子来说等待唤醒机制如何有效利用资源：</p><p>包子铺线程生产包子，吃货线程消费包子。当包子没有时（包子状态为false），吃货线程等待，包子铺线程生产包子（即包子状态为true），并通知吃货线程（解除吃货的等待状态）,因为已经有包子了，那么包子铺线程进入等待状态。接下来，吃货线程能否进一步执行则取决于锁的获取情况。如果吃货获取到锁，那么就执行吃包子动作，包子吃完（包子状态为false），并通知包子铺线程（解除包子铺的等待状态）,吃货线程进入等待。包子铺线程能否进一步执行则取决于锁的获取情况。</p><p>代码实例如下：</p><pre><code class="java">// 资源类public class Baozi {    // 设置包子的属性    String pier; // 皮    String xianer; // 陷    boolean flag = false; // 包子的状态：有就true，没有就false}// 生产者类public class BaoZiPu extends Thread{ // 生成者(包子铺)类：是一个线程类，可以继承Thread    // 1.需要在成员位置创建一个包子变量    private Baozi bz;    // 2.使用带参构造方法，为包子变量赋值    public BaoZiPu(String name, Baozi bz){        super(name);        this.bz = bz;    }    // 设置线程任务(run)：生成包子    /*    包子铺线程和包子线程关系---&gt;通信(互斥)        必须使用同步技术保证两个线程只能有一个在执行        锁对象必须保持唯一，可以使用包子对象作为锁对象        包子铺类和吃货的类就需要把包子对象作为参数传递进来            1.需要在成员位置创建一个包子变量            2.使用带参构造方法，为包子变量赋值     */    @Override    public void run(){        int count = 0;        // 造包子        while (true){             // 必须使用同步技术保证两个线程只能有一个在执行            synchronized (bz) {                if (bz.flag == true) { // 对包子状态进行判断                    try {                        bz.wait(); // true：有包子,包子铺调用wait方法进入等待状态                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                // 没有包子，包子铺生产包子                System.out.println("包子铺开始做包子");                if (count % 2 == 0) {                    bz.pier = "面皮";                    bz.xianer = "五花肉";                } else {                    bz.pier = "薄皮";                    bz.xianer = "韭菜鸡蛋";                }                count++;                try {                    Thread.sleep(5000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                // 包子铺生成好了包子                bz.flag = true; // 修改包子的状态为true                System.out.println("包子造好了：" + bz.pier + bz.xianer+",吃货来吃吧!");                bz.notify(); // 唤醒吃货线程，起来吃包子了            }        }    }}// 消费者类public class BaoZiPu extends Thread{ // 生成者(包子铺)类：是一个线程类，可以继承Thread    // 1.需要在成员位置创建一个包子变量    private Baozi bz;    // 2.使用带参构造方法，为包子变量赋值    public BaoZiPu(String name, Baozi bz){        super(name);        this.bz = bz;    }    // 设置线程任务(run)：生成包子    /*    包子铺线程和包子线程关系---&gt;通信(互斥)        必须使用同步技术保证两个线程只能有一个在执行        锁对象必须保持唯一，可以使用包子对象作为锁对象        包子铺类和吃货的类就需要把包子对象作为参数传递进来            1.需要在成员位置创建一个包子变量            2.使用带参构造方法，为包子变量赋值     */    @Override    public void run(){        int count = 0;        // 造包子        while (true){             // 必须使用同步技术保证两个线程只能有一个在执行            synchronized (bz) {                if (bz.flag == true) { // 对包子状态进行判断                    try {                        bz.wait(); // true：有包子,包子铺调用wait方法进入等待状态                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                }                // 没有包子，包子铺生产包子                System.out.println("包子铺开始做包子");                if (count % 2 == 0) {                    bz.pier = "面皮";                    bz.xianer = "五花肉";                } else {                    bz.pier = "薄皮";                    bz.xianer = "韭菜鸡蛋";                }                count++;                try {                    Thread.sleep(5000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                // 包子铺生成好了包子                bz.flag = true; // 修改包子的状态为true                System.out.println("包子造好了：" + bz.pier + bz.xianer+",吃货来吃吧!");                bz.notify(); // 唤醒吃货线程，起来吃包子了            }        }    }}// 测试类public class TestDemo {    public static void main(String[] args) {        Baozi bz = new Baozi(); // 创建包子对象        new BaoZiPu("包子铺",bz).start(); // 创建包子铺线程，开启，生产包子        new Chihuo("吃货",bz).start(); // 创建吃货线程，开启，吃包子    }}</code></pre><h2 id="2-线程池"><a href="#2-线程池" class="headerlink" title="2. 线程池"></a>2. 线程池</h2><h3 id="2-1-线程池思想概述"><a href="#2-1-线程池思想概述" class="headerlink" title="2.1 线程池思想概述"></a>2.1 线程池思想概述</h3><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p><p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p><p>在Java中可以通过线程池来达到这样的效果。下面就详细讲解一下Java的线程池。</p><h3 id="2-2-线程池概念"><a href="#2-2-线程池概念" class="headerlink" title="2.2 线程池概念"></a>2.2 线程池概念</h3><ul><li><strong>线程池</strong>：其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。<br>下图描述线程池的工作原理：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/29/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86-1556526310665.bmp" alt="title"></li></ul><p>合理利用线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><h3 id="2-3-线程池的使用"><a href="#2-3-线程池的使用" class="headerlink" title="2.3 线程池的使用"></a>2.3 线程池的使用</h3><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的,因此<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有个创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int n Threads)</code>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li></ul><p>使用线程池对象的方法如下：</p><ul><li><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</li></ul><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果。线程池创建与使用。</p></blockquote><p>使用线程池中线程对象的步骤：</p><ol><li>创建线程池对象。</li><li>创建Runnable接口子类对象。(task)</li><li>提交Runnable接口子类对象。(take task)</li><li>关闭线程池(一般不做)。</li></ol><p>Runnable实现类实例如下：</p><pre><code class="java">// 实现类public class MyRunnable implements Runnable{    @Override    public void run() {        System.out.println("我要一个教练");        try{            Thread.sleep(2000);        }catch(InterruptedException e){            e.printStackTrace();        }        System.out.println("教练来了："+Thread.currentThread().getName());        System.out.println("教我游泳,教完后，教练回到了游泳池");    }}// 线程池测试类public class ThreadPoolDemo {    public static void main(String[] args) {        // 创建线程池对象        ExecutorService service = Executors.newFixedThreadPool(2); // 创建了包含2个线程对象的线程池        // 创建Runnable实例对象        MyRunnable r = new MyRunnable();//        new Thread(r).start(); // 使用传统方式，自己创建线程对象        service.submit(r); // 从线程池中获取线程对象，然后会自动调用MyRunnable中的run()        service.submit(r); // 再次获取一个线程对象        service.submit(r); // again        /*            注意：submit方法调用结束后，程序并没终止，是因为线程池控制了线程的关闭            将使用完的线程又归还到了线程池中         */        service.shutdown();    }}</code></pre><h2 id="3-Lambda表达式"><a href="#3-Lambda表达式" class="headerlink" title="3. Lambda表达式"></a>3. Lambda表达式</h2><h3 id="3-1-函数式编程思想概述"><a href="#3-1-函数式编程思想概述" class="headerlink" title="3.1 函数式编程思想概述"></a>3.1 函数式编程思想概述</h3><p>在数学中，<strong>函数</strong>就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong></p><p>面向对象的思想:做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情。</p><p>函数式编程思想:只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程</p><h3 id="3-2-冗余的Runnable代码"><a href="#3-2-冗余的Runnable代码" class="headerlink" title="3.2 冗余的Runnable代码"></a>3.2 冗余的Runnable代码</h3><h4 id="传统写法"><a href="#传统写法" class="headerlink" title="传统写法"></a>传统写法</h4><p>当需要启动一个线程去完成任务是，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使<code>java.lang.Thread</code>类来启动该线程。如下所示：</p><pre><code class="java">public class Demo01Runnable {    public static void main(String[] args) {        // 匿名内部类        Runnable task = new Runnable() {            @Override            public void run() { // 覆盖重写抽象方法                System.out.println("多线程任务具体执行内容！");            }        };        new Thread(task).start(); // 启动线程    }}</code></pre><p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个<code>Runnable</code>接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容：</p><ul><li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</li><li>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</li><li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li><li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li></ul><h3 id="3-3-编程思想转换"><a href="#3-3-编程思想转换" class="headerlink" title="3.3 编程思想转换"></a>3.3 编程思想转换</h3><h4 id="专注于具体做什么，而不是这么做"><a href="#专注于具体做什么，而不是这么做" class="headerlink" title="专注于具体做什么，而不是这么做"></a>专注于具体做什么，而不是这么做</h4><p>很多时候我们为了做具体的事情而不得不创建了一个匿名内部类对象来完成，这是非必要的。我们真正希望做的事情是：将run方法体内的代码传递给Thread类知晓。</p><p><strong>传递一段代码</strong> –这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p><p>2014年3月Oracle所发布的Java 8（JDK 1.8）中，加入了<strong>Lambda表达式</strong>的重量级新特性，为我们打开了新世界的大门。</p><h3 id="3-4-体验Lambda的更优写法"><a href="#3-4-体验Lambda的更优写法" class="headerlink" title="3.4 体验Lambda的更优写法"></a>3.4 体验Lambda的更优写法</h3><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><pre><code class="java">public class DemoLambdaRunnable {    public static void main(String[] args) {        new Thread(() -&gt; System.out.println("多线程任务执行！")).start(); // 启动线程    }}</code></pre><p>这段代码同上一段执行效果完全一样。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p><h3 id="3-5-回顾匿名内部类"><a href="#3-5-回顾匿名内部类" class="headerlink" title="3.5 回顾匿名内部类"></a>3.5 回顾匿名内部类</h3><h4 id="使用实现类"><a href="#使用实现类" class="headerlink" title="使用实现类"></a>使用实现类</h4><p>要启动一个线程，需要创建一<code>Thread</code>类的对象调用<code>start</code>方法。而为了指定线程执行的内容，需要调用<code>Thread</code>类的构造方法：</p><ul><li><code>public Thread(Runnable target)</code><br>为了获取<code>Runnable</code>接口的实现对象，还要为该接口定义一个实现类<code>RunnableImpl</code>：<pre><code class="java">public class RunnableImpl implements Runnable{  @Override  public void run(){  System.out.println("多线程任务执行！")  }}</code></pre>然后创建该实现类的对象作为<code>Thread</code>类的构造参数：<pre><code class="java">public class ThreadInitParam{  public static void main(String[] args){  Runnable task = new RunnableImpl();  new Thread(task).start();  }}</code></pre></li></ul><h4 id="使用匿名内部类"><a href="#使用匿名内部类" class="headerlink" title="使用匿名内部类"></a>使用匿名内部类</h4><p>这个<code>RunnableImpl</code>类只是为了实现<code>Runnable</code>接口而存在的，而且仅被使用了唯一一次，所以使用匿名内部类的语法即可省去该类的单独定义，即匿名内部类：</p><pre><code class="java">public class ThreadNameless {    public static void main(String[] args) {        new Thread(new Runnable() {            @Override            public void run() {                System.out.println("多线程任务执行！");            }        }).start();    }}</code></pre><h4 id="匿名内部类的好处与弊端"><a href="#匿名内部类的好处与弊端" class="headerlink" title="匿名内部类的好处与弊端"></a>匿名内部类的好处与弊端</h4><p>一方面，匿名内部类可以帮我们<strong>省去实现类的定义</strong>；另一方面，匿名内部类的语法——<strong>确实太复杂了！</strong></p><h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p>仔细分析该代码中的语义，<code>Runnable</code>接口只有一个<code>run</code>方法的定义：</p><ul><li><code>public abstract void run();</code><br>即制定了一种做事情的方案（其实就是一个函数）：</li></ul><ul><li><strong>无参数</strong>：不需要任何条件即可执行该方案。</li><li><strong>无返回值</strong>：该方案不产生任何结果。</li><li><strong>代码块</strong>（方法体）：该方案的具体执行步骤。</li></ul><p>同样的语义体现在<code>Lambda</code>语法中，要更加简单：</p><pre><code class="java">() -&gt; System.out.println("多线程任务执行！")</code></pre><ul><li>前面的一对小括号即<code>run</code>方法的参数（无），代表不需要任何条件；</li><li>中间的一个箭头代表将前面的参数传递给后面的代码；</li><li>后面的输出语句即业务逻辑代码。</li></ul><h3 id="3-6-Lambda标准格式"><a href="#3-6-Lambda标准格式" class="headerlink" title="3.6 Lambda标准格式"></a>3.6 Lambda标准格式</h3><p>Lambda省去面向对象的条条框框，格式由<strong>3个部分</strong>组成：</p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码<br>Lambda表达式的<strong>标准格式</strong>为：(参数类型 参数名称) -&gt; { 代码语句 }<br>格式说明：</li><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li><code>-&gt;</code>是新引入的语法格式，代表指向动作。</li><li>大括号内的语法与传统方法体要求基本一致。</li></ul><h3 id="3-7-Lambda的参数和返回值"><a href="#3-7-Lambda的参数和返回值" class="headerlink" title="3.7 Lambda的参数和返回值"></a>3.7 Lambda的参数和返回值</h3><p>// Todo 使用数组存储多个Person对象。</p><p>// Todo 对数组中的Person对象使用Arrays的sort方法通过年龄进行升序排序。</p><p>下面举例演示<code>java.util.Comparator&lt;T&gt;</code>接口的使用场景代码，其中的抽象方法定义为：</p><ul><li><code>public abstract int compare(T o1, T o2);</code></li></ul><p>当需要对一个对象数组进行排序时，<code>Arrays.sort</code>方法需要一个<code>Comparator</code>接口实例来指定排序的规则。假设有一个<code>Person</code>类，含有<code>String name</code>和<code>int age</code>两个成员变量：</p><pre><code class="java">public class Person{    private String name;    private int age;    // 省略构造器、toString方法与Getter Setter }</code></pre><h4 id="传统写法-1"><a href="#传统写法-1" class="headerlink" title="传统写法"></a>传统写法</h4><p>使用传统代码对<code>Person[]</code>数组进行排序</p><pre><code class="java">public class DemoComparator {    public static void main(String[] args) {        // 创建一个Person数组        Person[] array = {                new Person("xiaom",13),                new Person("xiaoz",17),                new Person("xiaol",15)};        // Comparator接口的实例（使用了匿名内部类）重写了compare方法，制定了"按照年龄从小到大升序(前-后)"的排序规则。        Comparator&lt;Person&gt; comp = new Comparator&lt;Person&gt;() {            @Override            public int compare(Person o1, Person o2) {                return o1.getAge() - o2.getAge();            }        };        Arrays.sort(array,comp); // 第二个参数为排序规则，即Comparator接口实例        for(Person person:array){            System.out.println(person);        }    }}</code></pre><h4 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h4><ul><li>为了排序，<code>Arrays.sort</code>方法需要排序规则，即<code>Comparator</code>接口的实例，抽象方法<code>compare</code>是关键；</li><li>为了指定<code>compare</code>的方法体，<strong>不得不</strong>需要<code>Comparator</code>接口的实现类；</li><li>为了省去定义一个<code>ComparatorImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>compare</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li><li>实际上，<strong>只有参数和方法体才是关键</strong>。</li></ul><h4 id="Lambda写法"><a href="#Lambda写法" class="headerlink" title="Lambda写法"></a>Lambda写法</h4><pre><code class="java">public class DemoComparatorLambda {    public static void main(String[] args) {        // 创建一个Person数组        Person[] array = {                new Person("xiaom",13),                new Person("xiaoz",17),                new Person("xiaol",15)};        Arrays.sort(array,(Person a,Person b) -&gt; {return a.getAge() - b.getAge();});        for(Person person:array){            System.out.println(person);        }    }}</code></pre><h3 id="3-8-练习"><a href="#3-8-练习" class="headerlink" title="3.8 练习"></a>3.8 练习</h3><p>给定一个计算器<code>Calculator</code>接口，内含抽象方法<code>calc</code>可以将两个int数字相加得到和值：</p><pre><code class="java">// 定义接口类public interface Calculator {    public abstract int calc(int a,int b);}// 定义测试类public class DemoInvokeCalc {    public static void main(String[] args) {        // 使用匿名内部类实现        invokeCalc(10, 20, new Calculator() {            @Override            public int calc(int a, int b) {                return a + b;            }        });        // TODO 请在此使用Lambda[标准格式]调用invokeCalc方法来计算120+130的结果        invokeCalc(120,130,(int a,int b)-&gt; {return a+b;}); // 使用Lambda表达式实现    invokeCalc(20,30,(a, b) -&gt; a + b); // Lambda表达式省略格式写法    }    private static void invokeCalc(int a,int b,Calculator calculator){// 三个参数，2个int类型整数，1个接口        int result = calculator.calc(a, b);        System.out.println("结果是："+result);    }}</code></pre><h3 id="3-9-Lambda省略格式"><a href="#3-9-Lambda省略格式" class="headerlink" title="3.9 Lambda省略格式"></a>3.9 Lambda省略格式</h3><h4 id="可推导即可省略"><a href="#可推导即可省略" class="headerlink" title="可推导即可省略"></a>可推导即可省略</h4><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如上例还可以使用Lambda的省略写法：</p><pre><code class="java">public static void main(String[] args){    invokeCalc(120,130,(a,b)-&gt;a+b);}</code></pre><h4 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h4><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li><li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ol><h3 id="3-10-Lambda的使用前提"><a href="#3-10-Lambda的使用前提" class="headerlink" title="3.10 Lambda的使用前提"></a>3.10 Lambda的使用前提</h3><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p><ol><li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br>无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><blockquote><p>注：有且仅有一个抽象方法的接口，称为“<strong>函数式接口</strong>”。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的线程详解和同步方法</title>
      <link href="/2019/04/28/javabasics/xian-cheng-yu-tong-bu/"/>
      <url>/2019/04/28/javabasics/xian-cheng-yu-tong-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-线程"><a href="#1-线程" class="headerlink" title="1. 线程"></a>1. 线程</h2><p>线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。 </p><a id="more"></a><h3 id="1-1-多线程原理"><a href="#1-1-多线程原理" class="headerlink" title="1.1 多线程原理"></a>1.1 多线程原理</h3><p>代码示例：</p><pre><code class="java">// 定义线程类public class MyThread extends Thread{    // 定义指定线程名称的构造方法    public MyThread(String name) {        // 调用父类的String参数的构造方法，指定线程的名称        super(name);     }    // 重写run方法，完成该线程的执行逻辑    @Override    public void run(){        for(int i = 0;i &lt; 10;i++){            System.out.println(getName()+"正在执行第"+i+"次");// getName获取当前线程名称        }    }}// 测试类public class TestThread {    public static void main(String[] args) {        // 创建线程对象        MyThread mt = new MyThread("小强");        // 启动线程        mt.start();        // 在主方法中执行for循环        for(int i = 0;i &lt; 10;i++){            System.out.println("旺财"+i);        }    }}</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/%E7%BA%BF%E7%A8%8B%E6%B5%81%E7%A8%8B%E5%9B%BE-1556453011478.png" alt="title"></p><p>程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用mt的对象的<br>start方法，另外一个新的线程也启动了，这样，整个应用就在多线程下运行。</p><p>多线程执行时，在栈内存中，其实每一个执行线程都有一片自己所属的栈内存空间。进行方法的压栈和弹栈。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/%E6%A0%88%E5%86%85%E5%AD%98%E5%8E%9F%E7%90%86%E5%9B%BE-1556454114513.bmp" alt="title"></p><p>当执行线程的任务结束了，线程自动在栈内存中释放了。但是当所有的执行线程都结束了，那么进程就结束了。</p><h3 id="1-2-Thread类"><a href="#1-2-Thread类" class="headerlink" title="1.2 Thread类"></a>1.2 Thread类</h3><p><code>java.lang.Thread</code>类中定义了有关线程的一些方法:</p><p><strong>构造方法</strong>：</p><ul><li><code>public Thread()</code> ：分配一个新的线程对象。</li><li><code>public Thread(String name)</code> :分配一个指定名字的新的线程对象。</li><li><code>public Thread(Runnable target)</code> :分配一个带有指定目标新的线程对象。</li><li><code>public Thread(Runnable target,String name)</code> :分配一个带有指定目标新的线程对象并指定名字。</li></ul><p><strong>常用方法</strong>:</p><ul><li><code>public String getName()</code>:获取当前线程名称。</li><li><code>public void start()</code>:导致此线程开始执行; Java虚拟机调用此线程的run方法。</li><li><code>public void run()</code>:此线程要执行的任务在此处定义代码。</li><li><code>public static void sleep(long millis)</code>:使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</li><li><code>public static Thread currentThread()</code>:返回对当前正在执行的线程对象的引用</li></ul><h3 id="1-3-创建线程方式二"><a href="#1-3-创建线程方式二" class="headerlink" title="1.3 创建线程方式二"></a>1.3 创建线程方式二</h3><p>采用 <code>java.lang.Runnable</code> 也是非常常见的一种，我们只需要重写run方法即可。<br>步骤如下：</p><ol><li>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建Runnable实现类的实例，并以此实例作为Thread的target来创建Thread对象，该Thread对象才是真正<br>的线程对象。</li><li>调用线程对象的start()方法来启动线程。</li></ol><p>代码示例如下：</p><pre><code class="java">// 实现类public class MyRunnable implements Runnable{    @Override    public void run() { // 重写run方法        for (int i = 0;i &lt; 10; i++){            System.out.println(Thread.currentThread().getName()+" "+i);        }    }}// 测试类public class RunnableDemo {    public static void main(String[] args) {        // 创建类对象，线程任务对象        MyRunnable mr = new MyRunnable();        // 创建线程对象        Thread r = new Thread(mr,"小强");        r.start();        for (int i = 0;i &lt; 10;i++){            System.out.println("旺财"+i);        }    }}</code></pre><p>通过实现Runnable接口，使得该类有了多线程类的特征。run()方法是多线程程序的一个执行目标。所有的多线程<br>代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。</p><p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread<br>对象的start()方法来运行多线程代码。</p><p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是继承Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，<strong>熟悉Thread类的API</strong>是进行多线程编程的基础。</p><blockquote><p>Tips::Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run()方法仅作为线程执行体。<br>而实际的线程对象依然是Thread实例，只是该Thread线程负责执行其target的run()方法。</p></blockquote><h3 id="1-4-Thread和Runnable的区别"><a href="#1-4-Thread和Runnable的区别" class="headerlink" title="1.4 Thread和Runnable的区别"></a>1.4 Thread和Runnable的区别</h3><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p><p><strong>实现Runnable接口创建多线程程序的好处：</strong></p><ol><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li><li>线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类</li></ol><blockquote><p>在java中，每次程序运行至少启动2个线程。一个是main线程，一个是垃圾收集线程。因为每当使用java命令执行一个类的时候，实际上都会启动一个JVM，每一个JVM其实在就是在操作系统中启动了一个进程。</p></blockquote><h3 id="1-5-匿名内部类方法实现线程的创建"><a href="#1-5-匿名内部类方法实现线程的创建" class="headerlink" title="1.5    匿名内部类方法实现线程的创建"></a>1.5    匿名内部类方法实现线程的创建</h3><p>使用线程的内匿名内部类方式，可以方便的实现每个线程执行不同的线程任务操作。</p><p>使用匿名内部类的方式实现Runnable接口，重新Runnable接口中的run方法：</p><pre><code class="java">public class NoNameInnerClassThread {    public static void main(String[] args) {        Runnable r = new Runnable() {            @Override            public void run() {                for(int i = 0;i&lt;10;i++){                    System.out.println("小张"+i);                }            }        };        new Thread(r).start();        for (int i = 0; i &lt; 10; i++) {            System.out.println("小李"+i);        }    }}</code></pre><h2 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2. 线程安全"></a>2. 线程安全</h2><p>如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。程序每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p>举例演示线程的安全问题：<br>电影院要卖票，模拟电影院的卖票过程。假设要播放的电影是“复联4”，本次电影的座位共100个(本场电影只能卖100张票)。</p><p>我们模拟电影院的售票窗口，实现多个窗口同时卖“复联4”这场电影票(多个窗口一起卖这100张票)</p><p>需要窗口，采用线程对象来模拟；需要票，Runnable接口子类来模拟</p><p>代码示例如下：</p><pre><code class="java">// 实现类public class Ticket implements Runnable{    private int ticket = 100;    // 执行卖票流程    @Override    public void run() {        // 每个窗口的卖票操作        while (true){            if (ticket&gt;0){                try{                    Thread.sleep(100);                }catch (InterruptedException e){                    e.printStackTrace();                }                System.out.println(Thread.currentThread().getName()+"正在卖"+ticket--);            }        }    }}// 测试类public class TicketDemo {    public static void main(String[] args) {        Ticket tk = new Ticket(); // 创建线程任务对象        // 创建3个窗口对象        Thread t1 = new Thread(tk,"窗口1");        Thread t2 = new Thread(tk,"窗口2");        Thread t3 = new Thread(tk,"窗口3");        // 同时进行卖票操作        t1.start();        t2.start();        t3.start();    }}</code></pre><p>结果有一部分会出现如下情况：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98-1556459958932.jpg" alt="title"><br><br>发现程序出现了两个问题：</p><ol><li>有部分相同的票数被卖了两回。</li><li>不存在的票，比如0票与-1票，是不存在的。</li></ol><p>这种几个窗口(线程)票数不同步了，这种问题称为线程不安全。</p><blockquote><p>线程安全问题都是由全局变量及静态变量引起的。若每个线程中对全局变量、静态变量只有读操作，而无写操作,一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。</p></blockquote><h3 id="2-1-线程同步"><a href="#2-1-线程同步" class="headerlink" title="2.1 线程同步"></a>2.1 线程同步</h3><p>当我们使用多个线程访问同一资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全问题。<br>要解决上述多线程并发访问一个资源的安全性问题:也就是解决重复票与不存在票问题，Java中提供了同步机制<br>(synchronized)来解决。<br>根据案例简述：</p><pre><code class="txt">窗口1线程进入操作的时候，窗口2和窗口3线程只能在外等着，窗口1操作结束，窗口1和窗口2和窗口3才有机会进入代码去执行。也就是说在某个线程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</code></pre><p>为了保证每个线程都能正常执行原子操作,Java引入了线程同步机制。<br>有三种方式完成同步操作：</p><ol><li>同步代码块。</li><li>同步方法。</li><li>锁机制。</li></ol><h3 id="2-2-同步代码块"><a href="#2-2-同步代码块" class="headerlink" title="2.2 同步代码块"></a>2.2 同步代码块</h3><ul><li><strong>同步代码块</strong>：<code>synchronized</code>关键字可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。格式：<code>synchronized</code>(同步锁){需要同步操作的代码}</li></ul><p><strong>同步锁：</strong><br>对象的同步锁只是一个概念,可以想象为在对象上标记了一个锁。</p><ol><li>锁对象 可以是任意类型。</li><li>多个线程对象 要使用同一把锁。</li></ol><blockquote><p>注意：    在任何时候候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着<br>(BLOCKED)。</p></blockquote><p>使用同步代码块解决线程同步问题实例：</p><pre><code class="java">public class Ticket implements Runnable{    private int ticket = 100;    Object lock = new Object(); // 创建锁对象    // 执行卖票流程    @Override    public void run() {        // 每个窗口的卖票操作        while (true){            synchronized (lock) { // 加锁                if (ticket &gt; 0) {                    try {                        Thread.sleep(100);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    System.out.println(Thread.currentThread().getName() + "正在卖" + ticket--);                }else{                    break;                }            }        }    }}// 当使用了同步代码块后，上述的线程的安全问题就解决了。</code></pre><h3 id="2-3-同步方法"><a href="#2-3-同步方法" class="headerlink" title="2.3 同步方法"></a>2.3 同步方法</h3><ul><li><strong>同步方法</strong>：使用synchronized修饰的方法,就叫做同步方法,保证A线程执行该方法的时候,其他线程只能在方法外等着。格式：<code>public synchroized void method(){可能会产生线程问题的代码}</code></li></ul><blockquote><p>同步锁是谁？对于非static方法，同步锁就是this。对于static方法，使用当前方法所在类的字节码对象(类名.class)</p></blockquote><p>使用同步方法解决线程安全问题代码示例：</p><pre><code class="java">public class Ticket implements Runnable{    private int ticket = 100;    Object lock = new Object(); // 创建锁对象    // 执行卖票流程    @Override    public void run() {        // 每个窗口的卖票操作        while (true){            sellTicket();            if (ticket==0)                break;        }    }    public synchronized void sellTicket(){ // 使用synchronized修饰方法    // 卖票操作        if (ticket &gt; 0) {            try {                Thread.sleep(100);            } catch (InterruptedException e) {                e.printStackTrace();            }            System.out.println(Thread.currentThread().getName() + "正在卖" + ticket--);        }    }}</code></pre><h3 id="2-4-Lock锁"><a href="#2-4-Lock锁" class="headerlink" title="2.4 Lock锁"></a>2.4 Lock锁</h3><p><code>java.util.concurrent.locks.Lock</code>机制提供了比<strong>synchronized</strong>代码块和<strong>synchronized</strong>方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象。</p><p>Lock锁也称同步锁，加锁与释放锁方法化了，如下：</p><ul><li><code>public void lock()</code> :加同步锁。</li><li><code>public void unlock()</code> :释放同步锁。</li></ul><p>使用Lock锁解决线程安全问题代码示例：</p><pre><code class="java">public class Ticket implements Runnable{    private int ticket = 100;    Lock lock = new ReentrantLock();    // 执行卖票流程    @Override    public void run() {        // 每个窗口的卖票操作        while (true){            lock.lock(); // 上锁            if (ticket &gt; 0) {                try {                    Thread.sleep(100);                } catch (InterruptedException e) {                    e.printStackTrace();                }                System.out.println(Thread.currentThread().getName() + "正在卖" + ticket--);            }            lock.unlock(); // 解锁            if (ticket == 0)                break;        }    }}</code></pre><h2 id="3-线程状态"><a href="#3-线程状态" class="headerlink" title="3, 线程状态"></a>3, 线程状态</h2><h3 id="3-1线程状态概述"><a href="#3-1线程状态概述" class="headerlink" title="3.1线程状态概述"></a>3.1线程状态概述</h3><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，<br>有几种状态呢？在API中 java.lang.Thread.State 这个枚举中给出了六种线程状态：</p><p>这里先列出各个线程状态发生的条件，下面对每种状态进行详细解析：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/6%E7%A7%8D%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81-1556462102520.jpg" alt="title"></p><h3 id="3-2-Timed-Waiting-计时等待"><a href="#3-2-Timed-Waiting-计时等待" class="headerlink" title="3.2 Timed Waiting(计时等待)"></a>3.2 Timed Waiting(计时等待)</h3><p>Timed Waiting在API中的描述为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。</p><p>在前面写的卖票案例中，为了减少线程执行太快，现象不明显等问题，我们在run方法中添加了sleep语句，这样就<br>强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。</p><p>其实当我们调用了sleep方法之后，当前执行的线程就进入到“休眠状态”，其实就是所谓的Timed Waiting(计时等<br>待)，以下通过案例加深理解。</p><p><strong>实现一个计数器，计数到100，在每个数字之间暂停1秒，每隔10个数字输出一个字符串</strong></p><pre><code class="java">public class TimeWaitingDemo extends Thread{    public void run(){        for (int i = 0; i &lt; 100; i++) {            if (i%10==0)                System.out.println("------"+i);            System.out.print(i);            try {                Thread.sleep(1000);                System.out.print("线程睡眠1s！\n");            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public static void main(String[] args){        new TimeWaitingDemo().start();    }}</code></pre><p>sleep方法的使用还是很简单的,需要注意下面几点：</p><ol><li>进入 TIMED_WAITING 状态的一种常见情形是调用的 sleep 方法，单独的线程也可以调用，不一定非要有协<br>作关系。</li><li>为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程<br>中会睡眠</li><li>sleep与锁无关，线程睡眠到期自动苏醒，并返回到Runnable（可运行）状态。</li></ol><p>Timed Waiting 线程状态图：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/%E8%AE%A1%E6%97%B6%E7%AD%89%E5%BE%85-1556463087958.png" alt="title"></p><h3 id="3-3-BLOCKED-锁阻塞"><a href="#3-3-BLOCKED-锁阻塞" class="headerlink" title="3.3 BLOCKED(锁阻塞)"></a>3.3 BLOCKED(锁阻塞)</h3><p>Blocked状态在API中的介绍为：一个正在阻塞等待一个监视器锁（锁对象）的线程处于这一状态。</p><p>在学完同步机制后，这个状态是非常好理解的了。比如，线程A与线程B代码中使用同一锁，如果线程A获<br>取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态。</p><p>这是由Runnable状态进入Blocked状态。除此Waiting以及Time Waiting状态也会在某种情况下进入阻塞状态，如下图示：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/%E9%94%81%E9%98%BB%E5%A1%9E-1556463246524.png" alt="title"></p><h3 id="3-4-Wating-无限等待"><a href="#3-4-Wating-无限等待" class="headerlink" title="3.4 Wating(无限等待)"></a>3.4 Wating(无限等待)</h3><p>Wating状态在API中介绍为：一个正在无限期等待另一个线程执行一个特别的（唤醒）动作的线程处于这一状态。<br>代码示例：</p><pre><code class="java">public class WaitingDemo {    public static Object obj = new Object();    public static void main(String[] args){        // 演示waiting        new Thread(new Runnable() { // 匿名内部类            @Override            public void run() {                while (true){                    synchronized (obj){                        try {                            System.out.println(Thread.currentThread().getName()+"=== 获取到锁对" +                                    "象，调用wait方法，进入waiting状态，释放锁对象");                            obj.wait();// 进入无限等待状态//                            obj.wait(5); // 5s后自动醒来                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        System.out.println(Thread.currentThread().getName()+"=== 从waiting状态" +                                "醒来，获取到锁对象，继续执行");                    }                }            }        },"等待线程").start();        new Thread(new Runnable() {            @Override            public void run() {                System.out.println(Thread.currentThread().getName()+"------- 等待3秒");                try {                    Thread.sleep(3000);                } catch (InterruptedException e) {                    e.printStackTrace();                }                synchronized (obj){                    System.out.println(Thread.currentThread().getName()+"------ 获取到锁对象" +                            "，调用notify方法，释放锁对象");                    obj.notify(); // 释放锁对象                }            }        },"唤醒线程").start();    }}// 输出结果：等待线程=== 获取到锁对象，调用wait方法，进入waiting状态，释放锁对象唤醒线程------- 等待3秒唤醒线程------ 获取到锁对象，调用notify方法，释放锁对象等待线程=== 从waiting状态醒来，获取到锁对象，继续执行等待线程=== 获取到锁对象，调用wait方法，进入waiting状态，释放锁对象.....阻塞等待中</code></pre><p>通过上述案例可以发现，一个调用了某个对象的 Object.wait 方法的线程会等待另一个线程调用此对象的<br>Object.notify()方法 或 Object.notifyAll()方法。</p><p>其实waiting状态并不是一个线程的操作，它体现的是多个线程间的通信，可以理解为多个线程之间的协作关系，<br>多个线程会争取锁，同时相互之间又存在协作关系。就好比在公司里你和你的同事们，你们可能存在晋升时的竞<br>争，但更多时候你们更多是一起合作以完成某些任务。</p><p>当多个线程协作时，比如A，B线程，如果A线程在Runnable（可运行）状态中调用了wait()方法那么A线程就进入<br>了Waiting（无限等待）状态，同时失去了同步锁。假如这个时候B线程获取到了同步锁，在运行状态中调用了<br>notify()方法，那么就会将无限等待的A线程唤醒。注意是唤醒，如果获取到锁对象，那么A线程唤醒后就进入<br>Runnable（可运行）状态；如果没有获取锁对象，那么就进入到Blocked（锁阻塞状态）。</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/%E6%97%A0%E9%99%90%E7%AD%89%E5%BE%85-1556464661325.png" alt="title"></p><h3 id="3-5-补充知识点"><a href="#3-5-补充知识点" class="headerlink" title="3.5 补充知识点"></a>3.5 补充知识点</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/28/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE-1556464693106.png" alt="title"></p><p>我们在翻阅API的时候会发现Timed Waiting（计时等待） 与 Waiting（无限等待） 状态联系还是很紧密的，<br>比如Waiting（无限等待） 状态中wait方法是空参的，而timed waiting（计时等待） 中wait方法是带参的。<br>这种带参的方法，其实是一种倒计时操作，相当于我们生活中的小闹钟，我们设定好时间，到时通知，可是<br>如果提前得到（唤醒）通知，那么设定好时间在通知也就显得多此一举了，那么这种设计方案其实是一举两<br>得。如果没有得到（唤醒）通知，那么线程就处于Timed Waiting状态,直到倒计时完毕自动醒来；如果在倒<br>计时期间得到（唤醒）通知，那么线程从Timed Waiting状态立刻唤醒。</p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><ol><li>多线程原理解析</li><li>Thread类构造方法和常用方法的使用</li><li>Runnable类的使用</li><li>线程安全问题</li><li>线程同步的三种方法</li><li>线程六种状态概述</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的异常处理和进程线程概念</title>
      <link href="/2019/04/27/javabasics/java-zhong-de-yi-chang-chu-li-he-jin-cheng-xian-cheng-gai-nian/"/>
      <url>/2019/04/27/javabasics/java-zhong-de-yi-chang-chu-li-he-jin-cheng-xian-cheng-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-异常"><a href="#1-异常" class="headerlink" title="1. 异常"></a>1. 异常</h2><ul><li><strong>异常</strong>：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li></ul><p>在Java等面向对象的编程语言中，异常本身是一个类，产出异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p><blockquote><p>异常指的不是语法错误，语法错误是不会编译通过的。</p></blockquote><a id="more"></a><h3 id="1-2-异常体系"><a href="#1-2-异常体系" class="headerlink" title="1.2 异常体系"></a>1.2 异常体系</h3><p>异常机制就是帮助我们找到程序中的问题，异常的根类是<code>java.lang.Throwable</code>，其下有两个子类：<code>java.lang.Error</code>和<code>java.lang.Exception</code>，平常所说的异常指的是<code>java.lang.Exception</code><br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB-1556336090373.png" alt="title"></p><p><strong>Throwable体系</strong></p><ul><li><strong>Error</strong>：严重错误Error，无法通过处理的错误，只能事先避免。好比绝症。</li><li><strong>Exception</strong>：表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。类似感冒之类的。</li></ul><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>:打印异常的详细信息。</p><p><em>包含了异常的类型，异常的原因，还有异常出现的位置，在开发和调试阶段，都得使用printStackTrace。</em></p></li><li><p><code>public String getMessage()</code>:获取发生异常的原因。</p><p><em>提示给用户的时候，就提示错误原因。</em></p></li><li><p><code>public String toString()</code>: 获取异常的类型和异常描述信息(不用)。</p></li></ul><p><strong><em>出现异常后，可以把异常的简单类名，复制到API中去查询。</em></strong></p><h3 id="1-3-异常分类"><a href="#1-3-异常分类" class="headerlink" title="1.3 异常分类"></a>1.3 异常分类</h3><p>一般的异常指的就是Exception，因为这类异常一旦出现，我们就需要对代码进行更正，修复程序。</p><p><strong>异常的分类</strong>：根据在编译时期还是运行时期去检查异常</p><ul><li><strong>编译时期的异常</strong>： checked异常。在编译时期，就会检查，如果没有处理异常，则编译失败。</li><li><strong>运行时期异常</strong>：runtime异常。在运行时期，检查异常，在编译时期，运行异常不会编译器检测(不会报错)。</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB-1556346151127.png" alt="title"></p><h3 id="1-4-异常的产生过程解析"><a href="#1-4-异常的产生过程解析" class="headerlink" title="1.4 异常的产生过程解析"></a>1.4 异常的产生过程解析</h3><p>运行下面程序，程序会产生义工数组索引越界异常<code>ArrayIndexOutOfBoundsException</code>。</p><pre><code class="java">// 工具类public class ArrayTools {    // 对给定的数组通过给定的索引获取元素    public static int getElement(int[] arr, int index){        int element = arr[index];        return element;    }}// 测试类public class ExceptionDemo {    public static void main(String[] args) {        int[] arr = {34,12,67};        int num = ArrayTools.getElement(arr,4);        System.out.println("num="+num);        System.out.println("over");    }}</code></pre><p>上述程序执行过程图解：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B-1556347566816.png" alt="title"></p><h2 id="2-异常的处理"><a href="#2-异常的处理" class="headerlink" title="2. 异常的处理"></a>2. 异常的处理</h2><p>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h3 id="2-1-抛出异常throw"><a href="#2-1-抛出异常throw" class="headerlink" title="2.1 抛出异常throw"></a>2.1 抛出异常throw</h3><p>在编写程序时，我们必须要考虑程序出现问题的情况。比如，在定义方法时，方法需要接受参数。那么，当调用方法使用接受到的参数时，首先需要先对参数数据进行合法的判断，数据若不合法，就应该告诉调用者，传递合法的数据进来。这时需要使用抛出异常的方式来告诉调用者。</p><p>在Java中，提供了一个<strong>throw</strong>关键字，它用来抛出一个指定的异常对象。具体操作如下：</p><ol><li>创建一个异常对象，封装一些提示信息。</li><li><p>通过关键字thro将这个异常对象告知给调用者。throw异常对象。</p><p> throw<strong>用在方法内</strong>，用来抛出一个异常对象，将这个异常对象传递到调用者处，并结束当前方法的执行。</p></li></ol><p><strong>使用格式：</strong> <code>throw new 异常类名(参数)</code></p><p>  例如：</p><pre><code class="java">throw new NullPointerException("要访问的arr数组不存在");throw new ArrayIndexOutOfBoundsException("该索引在数组中不存在，已超出范围")</code></pre><p>以下为程序实例：</p><pre><code class="java">public class ThrowDemo {    public static void main(String[] args) {        // 创建一个数组        int[] arr = {2,4,35,2};        // 根据索引找对应的元素        int index = 4;        int element = getElement(arr,index);        System.out.println(element);        System.out.println("over");    }    // 根据 索引找到数组中对应的元素    public static int getElement(int[] arr,int index){        // 判断 索引是否越界        if(index&lt;0 || index &gt; arr.length-1){            /*                判断条件如果满足，当执行完throw抛出异常对象后，方法已无法继续运算。                这时就会结束当前方法的执行，并将异常告知给调用者。这时就需通过异常来解决。             */            throw new ArrayIndexOutOfBoundsException("小老弟，索引越界了！！！");        }        int element = arr[index];        return element;    }}</code></pre><blockquote><p>注意：如果产生了问题，throw就会将问题描述类即异常进行抛出，也就是将问题返回给该方法的调用者。</p><p>那么对于调用者来说，有两种方式处理，一种是进行捕获处理，另一种就是继续将问题声明出去，使用throws声明处理。</p></blockquote><h3 id="2-2-Objects非空判断"><a href="#2-2-Objects非空判断" class="headerlink" title="2.2 Objects非空判断"></a>2.2 Objects非空判断</h3><p>我们学习过一个类Objects， 里面有提到过它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），那么在它的源码中，对对象为null的值进行了抛出异常操作。</p><ul><li><code>public static &lt;T&gt; requireNonNull(T obj)</code>:查看指定引用对象不是null。</li></ul><p>查看源码可以发现这里对null对象进行了抛出异常操作。</p><pre><code class="java">public static &lt;T&gt; T requireNonNull(T obj) {        if (obj == null)            throw new NullPointerException();        return obj;    }</code></pre><h3 id="2-3-声明异常throws"><a href="#2-3-声明异常throws" class="headerlink" title="2.3 声明异常throws"></a>2.3 声明异常throws</h3><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内通过throw抛出了编译时异常，而没有捕获处理，那么必须通过throws进行声明，让调用者去处理。<br>关键字<strong>throws</strong>运用于方法声明之上,用于表示当前方法不处理异常,而是提醒该方法的调用者来处理异常(抛出异常)。</p><p><strong>声明异常格式：</strong><code>修饰符 返回值类型 方法名(参数) throws 异常类名1，异常类名2...{  }</code></p><p>代码实例：</p><pre><code class="java">public class ThrowDemo02 {    public static void main(String[] args) throws IOException{        read("a.txt");    }    // 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明    // 假如该方法可能有多种异常情况产生，那么throws后面可以写多个异常类，用逗号隔开。    public static void read(String path) throws FileNotFoundException, IOException {        if(!path.equals("a.txt")) // 如果不是a.txt这个字符串            throw new FileNotFoundException("文件不存在"); // 则生成一个异常类返回给调用者        if(!path.equals("b.txt"))            throw new IOException();    }}</code></pre><h3 id="2-4-捕获异常try…catch"><a href="#2-4-捕获异常try…catch" class="headerlink" title="2.4 捕获异常try…catch"></a>2.4 捕获异常try…catch</h3><p>如果异常出现的话，会立即终止程序，所以我们得处理异常：</p><ol><li>该方法不处理,而是声明抛出,由该方法的调用者来处理(throws)。</li><li>在方法中使用try-catch的语句块来处理异常。</li></ol><p><strong>try-catch</strong>的方式就是捕获异常。</p><ul><li><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。</li></ul><p>捕获异常语法如下：</p><pre><code class="java">try{    编写可能会出现异常的代码}catch(异常类型 e){    处理异常的代码    // 记录日志/打印异常信息/继续抛出异常}</code></pre><p><strong>try：</strong> 该代码块中编写可能产生异常的代码。<br><strong>catch：</strong> 用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><blockquote><p>注意：try和catch都不能单独使用，必须一起用。</p></blockquote><p>代码实例:</p><pre><code class="java">public class TryCatchDemo {    public static void main(String[] args) {        try{ // 当产生异常时，必须有处理方式，要么捕获，要么声明。            read("b.txt");        }catch (FileNotFoundException e){ // try中抛出的是什么异常，在括号中就定义什么异常            System.out.println(e);        }        System.out.println("over");    }    public static void read(String path) throws FileNotFoundException{        if(!path.equals("a.txt"))            throw new FileNotFoundException("文件不存在");    }}</code></pre><p>如何获取异常信息：</p><p>Throwable类中定义了一些查看方法:</p><ul><li><p><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</p></li><li><p><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</p></li><li><p><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</p><p><em>包含了异常的类型,异常的原因,还包括异常出现的位置,在开发和调试阶段,都得使用printStackTrace。</em><br>​ </p><h3 id="2-4-finally代码块"><a href="#2-4-finally代码块" class="headerlink" title="2.4 finally代码块"></a>2.4 finally代码块</h3></li></ul><p><strong>finally</strong>：当遇到某些代码是无论是否发生异常，都要执行的，那么可以放在finally代码块中，在finally代码块中存放的代码都是一定会被执行的。</p><p>有哪些时候的代码必须最终执行？当我们在try语句块中打开了一些物理资源(磁盘文件/网络连接/数据库连接等),我们都得在使用完之后,最终关闭打开的资源。</p><p>语法：try…catch….finally:自身需要处理异常,最终还得关闭资源。</p><blockquote><p>注意：finally不能单独使用。</p></blockquote><p>代码示例：</p><pre><code class="java">public class FinallyDemo {    public static void main(String[] args) {        try{            read("a.txt");        }catch (FileNotFoundException e){            //捕获编译期报错信息，在运行期抛出去。            throw  new RuntimeException(e);        }finally {            System.out.println("这里的代码必定执行");        }        System.out.println("over");    }    // 因为我们当前的read方法中有异常，所以编译期会报错。    public static void read(String path) throws FileNotFoundException{        if(!path.equals("a.txt"))            throw new FileNotFoundException("文件不存在");    }}</code></pre><blockquote><p>当只有在try或者catch中调用退出JVM的相关方法时，finally才不会执行，否则必定执行。</p></blockquote><h3 id="2-5-异常注意事项"><a href="#2-5-异常注意事项" class="headerlink" title="2.5 异常注意事项"></a>2.5 异常注意事项</h3><ul><li><p>多个异常使用捕获又该如何处理呢？</p><ol><li>多个异常分别处理。</li><li>多个异常一次捕获，多次处理。</li><li>多个异常一次捕获一次处理。</li></ol></li></ul><p>一般使用一次捕获多次处理方式，格式如下：</p><pre><code class="java">try{    编写可能会出现异常的代码}catch(异常类型A e){ 当try中出现A类型异常时，就用该catch来捕获。    处理异常代码}catch(异常类型B e){当try中出现B类型异常时，就用该catch来捕获。    处理异常代码}</code></pre><blockquote><p>注意：这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。</p></blockquote><ul><li><p>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</p></li><li><p>如果finally有return语句,永远返回finally中的结果,避免该情况. </p></li><li><p>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</p></li><li><p>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</p></li></ul><h2 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3. 自定义异常"></a>3. 自定义异常</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p><strong>为什么需要自定义异常类:</strong></p><p>我们说了Java中不同的异常类,分别表示着某一种具体的异常情况,那么在开发中总是有些异常情况是没有定义好的,此时我们根据自己业务的异常情况来定义异常类。例如年龄负数问题,考试成绩负数问题等等。</p><p>在上述示例中，发现这些异常都是JDK内部定义好的，但是实际开发中也会出现很多异常,这些异常很可能在JDK中没有定义过,例如年龄负数问题,考试成绩负数问题。我们就需要自己定义异常。</p><p><strong>什么是自定义异常类:</strong></p><p>在开发中根据自己业务的异常情况来定义的异常类。</p><p><strong>异常类如何定义:</strong></p><ol><li>自定义一个编译期异常: 自定义类 并继承于<code>java.lang.Exception</code>。</li><li>自定义一个运行时期的异常类:自定义类 并继承于<code>java.lang.RuntimeException</code>。</li></ol><h3 id="3-2-自定义异常的练习"><a href="#3-2-自定义异常的练习" class="headerlink" title="3.2 自定义异常的练习"></a>3.2 自定义异常的练习</h3><p>模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><p>代码实例如下：</p><pre><code class="java">// 首先定义一个登录异常类RegisterException:public class RegisterException extends Exception{    public RegisterException() { // 空参构造    }    public RegisterException(String message){        super(message); // @param message 表示异常提示    }}// 模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。public class TestDemo {    // 模拟数据库中已存在的账号    private static String[] names = {"xiaowang","xiaozhang","xiaoming"};    public static void main(String[] args) {        // 调用方法        try{            // 可能出现异常的代码块            checkUsername("xiaowang");            System.out.println("注册成功");        }catch(RegisterException e){            e.printStackTrace();        } catch (LoginException e) {            e.printStackTrace();        }    }    public static boolean checkUsername(String uname) throws LoginException, RegisterException {        for(String name:names){            if(name.equals(uname))                throw new RegisterException("亲"+name+"已经被注册了！");        }        return true;    }}</code></pre><h2 id="4-多线程"><a href="#4-多线程" class="headerlink" title="4. 多线程"></a>4. 多线程</h2><h3 id="4-1-并发与并行"><a href="#4-1-并发与并行" class="headerlink" title="4.1 并发与并行"></a>4.1 并发与并行</h3><ul><li><strong>并发</strong>：指两个或多个事件在<strong>同一个时间段内</strong>发生。</li><li><strong>并行</strong>：指两个或多个事件在<strong>同一时刻</strong>发生（同时发生）。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E5%B9%B6%E8%A1%8C%E4%B8%8E%E5%B9%B6%E5%8F%91-1556377430817.bmp" alt="title"></li></ul><p>在操作系统中，安装了多个程序，并发指的是在一段时间内宏观上有多个程序同时运行，这在单 CPU 系统中，每一时刻只能有一道程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>而在多个 CPU 系统中，则这些可以并发执行的程序便可以分配到多个处理器上（CPU），实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核 越多，并行处理的程序越多，能大大的提高电脑运行的效率。</p><blockquote><p>注意：单核处理器的计算机肯定是不能并行的处理多个任务的，只能是多个任务在单个CPU上并发运行。同理,线程也是一样的，从宏观角度上理解线程是并行运行的，但是从微观角度上分析却是串行运行的，即一个线程一个线程的去运行，当系统只有一个CPU时，线程会以某种顺序执行多个线程，我们把这种情况称之为线程调度。</p></blockquote><h3 id="4-2-线程与进程"><a href="#4-2-线程与进程" class="headerlink" title="4.2 线程与进程"></a>4.2 线程与进程</h3><ul><li><p><strong>进程</strong>：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</p></li><li><p><strong>线程</strong>：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。 </p><p>简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程。</p></li></ul><p>打开任务管理器，可以查看当前任务的进程：</p><p><strong>进程</strong> <br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5-1556377763628.png" alt="title"></p><p><strong>线程</strong> <br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5-1556377846601.png" alt="title"></p><p><strong>线程调度:</strong></p><ul><li><p>分时调度</p><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p></li><li><p>抢占式调度</p><p>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p><ul><li>设置线程的优先级<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E8%AE%BE%E7%BD%AE%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7-1556377952137.bmp" alt="title"></li><li><p>抢占式调度详解</p><p>大部分操作系统都支持多进程并发运行，现在的操作系统几乎都支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。此时，这些程序是在同时运行，”感觉这些软件好像在同一时刻运行着”.</p><p>实际上，CPU(中央处理器)使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉要快，看上去就是在同一时刻运行。<br>其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/27/%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6-1556378070170.bmp" alt="title"></p></li></ul></li></ul><h3 id="4-3-创建线程类"><a href="#4-3-创建线程类" class="headerlink" title="4.3 创建线程类"></a>4.3 创建线程类</h3><p>Java使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。每个线程的作用是完成一定的任务，实际上就是执行一段程序流即一段顺序执行的代码。Java使用线程执行体来代表这段程序流。Java中通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><ol><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务,因此把run()方法称为线程执行体。</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ol><p>代码实例如下：</p><pre><code class="java">// 自定义线程类public class MyThread extends Thread{    // 定义指定线程名称的构造方法    public MyThread(String name) {        // 调用父类的String参数的构造方法，指定线程的名称        super(name);    }    // 重写run方法，完成该线程的执行逻辑    @Override    public void run(){        for(int i = 0;i &lt; 10;i++){            System.out.println(getName()+"正在执行第"+i+"次");        }    }}// 测试类public class TestThread {    public static void main(String[] args) {        // 创建线程对象        MyThread mt = new MyThread("新的线程！");        // 启动线程        mt.start();        // 在主方法中执行for循环        for(int i = 0;i &lt; 10;i++){            System.out.println("main线程"+i);        }    }}</code></pre><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><ol><li>Java中的异常体系</li><li>异常处理5个关键字：try、catch、finally、throw、throws</li><li>异常处理的使用方法</li><li>自定义异常类</li><li>并发与并行的概念</li><li>进程线程的概念</li><li>线程调度的各种方式</li><li>Java中的线程类Thread，以及基本使用方式</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map集合和Debug跟踪</title>
      <link href="/2019/04/26/javabasics/map-ji-he-he-debug-gen-zong/"/>
      <url>/2019/04/26/javabasics/map-ji-he-he-debug-gen-zong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Map集合"><a href="#1-Map集合" class="headerlink" title="1. Map集合"></a>1. Map集合</h2><p>生活中我们常会看到一种集合：IP地址与主机名，身份证号与个人等，这种一一对应的关系，叫做映射。Java中的<code>java.util.Map</code>接口是专门用来存放这种映射关系的集合类。</p><a id="more"></a><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>通过查看Map接口描述，发现Map接口下的集合与Collection接口下的集合，它们存储数据的形式不同，如下图。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/26/Collection%E4%B8%8EMap-1556257061416.bmp" alt="title"></p><ul><li><code>Collection</code>中的集合，元素是孤立存在的，向集合中存储元素采用一个个元素的方式存储。</li><li><code>Map</code>中的集合，元素是成对存在的。每个元素由键值对组成，通过键可以找对应的值。</li><li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li><li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li></ul><h3 id="1-2-Map常用子类"><a href="#1-2-Map常用子类" class="headerlink" title="1.2 Map常用子类"></a>1.2 Map常用子类</h3><p>Map有多个子类，这里主要讲解常用的HashMap集合、LinkedHashMap集合。</p><ul><li><strong>HashMap&lt;K,V&gt;</strong>：存储数据采用的哈希表结构，元素的存取顺序不一致。由于要保证键的唯一、不重复，需要重写键的hashCode()和equals()方法。</li><li><strong>LinkedHashMap</strong>：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证键的唯一性，需要重写键的hashCode和equals方法。</li></ul><blockquote><p>Tips:Map接口中的集合都有两个泛型变量&lt;K,V&gt;,在使用时，需为两个泛型变量赋予数据类型。两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可不同。</p></blockquote><h3 id="1-3-Map接口中的常用方法"><a href="#1-3-Map接口中的常用方法" class="headerlink" title="1.3 Map接口中的常用方法"></a>1.3 Map接口中的常用方法</h3><p>Map接口中定义了多种方法，常用的如下：</p><ul><li><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</li><li><code>public V remove(Object key)</code>: 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li><li><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</li><li><code>boolean containsKey(Object key)</code> 判断集合中是否包含指定的键。</li><li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><p>Map接口的方法示例：</p><pre><code class="java">public class MapDemo {    public static void main(String[] args) {        // 创建Map对象        HashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        // put(键,值)添加元素        System.out.println(map.put("小明",15)); // 如果添加的元素对键名没有在集合中，会返回一个null，并添加元素        System.out.println(map.put("小明",11)); // 如果添加的元素对键名在集合中存在，则返回该键对应的值，然后替换为新值        map.put("小张",18);        map.put("李小",16);        System.out.println(map); // {小明=15, 小张=18, 李小=16}        // remove(键名)删除指定元素        System.out.println(map.remove("李小"));        System.out.println(map); // {小明=15, 小张=18}        // 通过键名查询对应的值        System.out.println(map.get("小明")); // 15        System.out.println(map.get("小张")); // 18    }}</code></pre><blockquote><p>Tips:</p><p>使用put方法时，若指定的键(key)在集合中没有，则表示没有这个键值对，返回null，并把指定键值添加到集合中。</p><p>若指定的键(key)在集合中存在，则返回值为集合中键对应的值，并把指定键所对应的值，替换为新值。</p></blockquote><h3 id="1-4-Map集合遍历键找值的方式"><a href="#1-4-Map集合遍历键找值的方式" class="headerlink" title="1.4 Map集合遍历键找值的方式"></a>1.4 Map集合遍历键找值的方式</h3><p>遍历方式：即通过元素中的键名，获取键所对应的值。</p><pre><code class="java">public class DemoGetValue {    public static void main(String[] args) {        HashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;();        map.put("小明",16);        map.put("小李",19);        map.put("小张",17);        map.put("小德",12);        // 获取所以键，存储到set集合中        Set&lt;String&gt; keys = map.keySet();        for(String key:keys){            System.out.println(key+"的年龄是："+map.get(key)+"岁");        }    }}</code></pre><h3 id="1-5-Entry键值对对象"><a href="#1-5-Entry键值对对象" class="headerlink" title="1.5 Entry键值对对象"></a>1.5 Entry键值对对象</h3><p>Map中存放的是两种对象，一种称为key(键)，一种称为value(值)，在Map中是一一对应关系，这一对对象又称做Map中的一个<code>Entry(项)</code>。<code>Entry</code>将键值对的对应关系封装成了对象。即键值对对象，这样我们遍历Map集合时，就可以从每一个键值对(Entry)对象中获取对应的键与对应的值。</p><p>Entry同样提供了获取对应键和对应值的方法：</p><ul><li><code>public K getKey()</code>: 获取Entry对象中的键。</li><li><code>public V getValue()</code>:获取Entry对象中的值。</li></ul><p>在Map集合中也提供了获取所以Entry对象的方法：</p><ul><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>:获取Map集合中所有的键值对对象的集合(Set集合)。</li></ul><h3 id="1-6-Map集合遍历键值对方式"><a href="#1-6-Map集合遍历键值对方式" class="headerlink" title="1.6 Map集合遍历键值对方式"></a>1.6 Map集合遍历键值对方式</h3><p>键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中的键与值。<br>操作步骤：</p><ol><li>获取Map集合中，所以键值对(Entry)对象，以Set集合形式返回。方法提示：<code>entrySet()</code>。</li><li>遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。</li><li>通过键值对(Entry)对象，获取Entry对象中的键与值。  方法提示:<code>getkey() getValue()</code>   <pre><code class="java">public class EntryDemo {public static void main(String[] args) {    HashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;();    map.put("小米",32);    map.put("小花",25);    map.put("小马",52);    Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entrys = map.entrySet();    for (Map.Entry&lt;String,Integer&gt; entry:entrys){        String key = entry.getKey();        int value = entry.getValue();        System.out.println(key+"的年龄是:"+value+"岁");    }}}</code></pre></li></ol><blockquote><p>Tips: Map集合不能直接使用迭代器或foreach进行遍历。但是转Set之后就可以使用了。</p></blockquote><h3 id="1-7-HashMap存储自定义类型键值"><a href="#1-7-HashMap存储自定义类型键值" class="headerlink" title="1.7 HashMap存储自定义类型键值"></a>1.7 HashMap存储自定义类型键值</h3><p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到map集合中。学生作为键, 家庭住址作为值。</p><pre><code class="java">// 学生类public class Student {    private String name;    private int age;    // ... 省略get/set方法，初始化构造方法等}// 测试类public class HashMapTest {    public static void main(String[] args) {        // 创建HashMap集合对象        Map&lt;Student, String&gt; map = new HashMap&lt;&gt;();        map.put(new Student("张三",25),"上海");        map.put(new Student("李四",28),"北京");        map.put(new Student("王五",20),"广州");        map.put(new Student("赵六",19),"深圳");        map.put(new Student("孙钱",24),"杭州");        // 取出元素        Set&lt;Student&gt; keys = map.keySet(); // 获取所以键名放入set中        for (Student key:keys){            System.out.println(key.toString() + "....." + map.get(key)); // 注意Student类要重写toString方法        }    }}</code></pre><h3 id="1-8-LinkedHashMap"><a href="#1-8-LinkedHashMap" class="headerlink" title="1.8 LinkedHashMap"></a>1.8 LinkedHashMap</h3><p>HashMap可以保证成对元素唯一性，且查询速度很快，可存入的顺序是无序的，如果要保证有序，可以使用<code>HashMap</code>下的一个子类<code>LinkedHashMap</code>，它是链表和哈希表组成的一个数据存储结构。</p><pre><code class="java">public class LinkedHashMapDemo {    public static void main(String[] args) {        LinkedHashMap&lt;String,Integer&gt; linkMap = new LinkedHashMap&lt;&gt;();        linkMap.put("小米",11);        linkMap.put("小花",15);        linkMap.put("小中",19);        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entrys = linkMap.entrySet();        for(Map.Entry&lt;String,Integer&gt; entry:entrys){            System.out.println(entry.getKey() + "的年龄是：" + entry.getValue() + "岁");        }    }}// 如此就保证了存入元素的有序性</code></pre><h3 id="1-9-Map集合练习"><a href="#1-9-Map集合练习" class="headerlink" title="1.9 Map集合练习"></a>1.9 Map集合练习</h3><p>计算一个字符串中每个字符出现次数。</p><pre><code class="java">public class MapTest {    public static void main(String[] args) {        System.out.println("请输入一个字符串:");        String line = new Scanner(System.in).nextLine();        findChar(line);    }    public static void findChar(String line){        // 创建一个集合，存储字符及出现次数        HashMap&lt;Character,Integer&gt; map = new HashMap&lt;&gt;();        for(int i = 0;i &lt; line.length();i++){            char c = line.charAt(i); // 返回指定索引处字符            if(!map.containsKey(c)){ // 判断字符 是否在键集中,不在则执行下面语句                map.put(c,1); // 第一次出现，添加该字符，并计数1            }else{ // 则说明字符键名在键集中了，就是出现过                Integer count = map.get(c); // 获取前一次值                map.put(c,++count); // 再次存入，并更新值            }        }        System.out.println(map);    }}</code></pre><h2 id="2-知识点补充"><a href="#2-知识点补充" class="headerlink" title="2. 知识点补充"></a>2. 知识点补充</h2><h3 id="2-1-JDK9对集合添加的优化"><a href="#2-1-JDK9对集合添加的优化" class="headerlink" title="2.1 JDK9对集合添加的优化"></a>2.1 JDK9对集合添加的优化</h3><p>Java 9，添加了几种集合工厂方法，更方便创建少量元素的集合、map实例。新的List、Set、Map的静态工厂方法可以更方便地创建集合的不可变实例。示例如下：</p><pre><code class="java">public class JDK9NewMethod {    public static void main(String[] args) {        Set&lt;String&gt; str = Set.of("a","b","c");//        str1.add("d"); // 这里使用add方法，编译不会报错，执行会报错，因为是不可变集合。        System.out.println(str);        List&lt;String&gt; list = List.of("a","b","c");        System.out.println(list);        Map&lt;String,Integer&gt; map = Map.of("a",1,"b",2);        System.out.println(map);    }}</code></pre><p>注意事项：</p><blockquote><ol><li>of()方法只是Map,List,Set这三个接口的静态方法，其父类接口和子类实现并没有这类方法，如HashSet，ArrayList等。<br>2.返回的集合是不可变的。</li></ol></blockquote><h3 id="2-2-Debug跟踪"><a href="#2-2-Debug跟踪" class="headerlink" title="2.2 Debug跟踪"></a>2.2 Debug跟踪</h3><h4 id="使用IDEA的断点调试功能，查看程序的运行过程"><a href="#使用IDEA的断点调试功能，查看程序的运行过程" class="headerlink" title="使用IDEA的断点调试功能，查看程序的运行过程"></a>使用IDEA的断点调试功能，查看程序的运行过程</h4><p>下图为调试窗口基本功能。<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/26/debug%E8%B0%83%E8%AF%95%E7%AA%97%E5%8F%A3%E5%8A%9F%E8%83%BD%E7%AE%80%E8%BF%B0-1556287135342.png" alt="title"></p><h2 id="3-斗地主Map实现"><a href="#3-斗地主Map实现" class="headerlink" title="3. 斗地主Map实现"></a>3. 斗地主Map实现</h2><h3 id="需求分析："><a href="#需求分析：" class="headerlink" title="需求分析："></a>需求分析：</h3><ol><li>准备牌：<br>完成数字与纸牌的映射关系：<br>使用双列Map(HashMap)集合，完成一个数字与字符串纸牌的对应关系(相当于一个字典)。</li><li>洗牌：<br>通过数字完成洗牌发牌</li><li>发牌：<br>将每个人以及底牌设计为ArrayList<string>,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。<br>存放的过程中要求数字大小与斗地主规则的大小对应。<br>将代表不同纸牌的数字分配给不同的玩家与底牌。</string></li><li>看牌：<br>通过Map集合找到对应字符展示。<br>通过查询纸牌与数字的对应关系，由数字转成纸牌字符串再进行展示。<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/26/04_%E6%96%97%E5%9C%B0%E4%B8%BB%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90-1556289337309.bmp" alt="title"><pre><code class="java">public class Poker { public static void main(String[] args) {     // 准备牌     List&lt;String&gt; colors = List.of("♥","♦","♠","♣");     List&lt;String&gt; numbers = List.of("2","3","4","5","6","7","8","9","10","J","Q","K","A");     HashMap&lt;Integer,String&gt; pokerMap = new HashMap&lt;&gt;();     int cardID = 0;     for (String color:colors){         for (String num:numbers){             pokerMap.put(cardID,color+num);             cardID++;         }     }     pokerMap.put(52,"小☺");     pokerMap.put(53,"大☠");//        System.out.println(pokerMap);     ArrayList&lt;Integer&gt; cardKeys = new ArrayList&lt;&gt;();     cardKeys.addAll(pokerMap.keySet());// 获取map的键名集合，并转换为List集合，方便打乱。     // 打乱顺序，洗牌     Collections.shuffle(cardKeys); // 牌编号集合     // 创建3个玩家集合和底牌集合。     ArrayList&lt;String&gt; bottomCard = new ArrayList&lt;&gt;(); // 底牌     ArrayList&lt;String&gt; player1 = new ArrayList&lt;&gt;(); // 玩家1     ArrayList&lt;String&gt; player2 = new ArrayList&lt;&gt;(); // 玩家2     ArrayList&lt;String&gt; player3 = new ArrayList&lt;&gt;(); // 玩家3     // 发牌的编号     for (int i = 0;i &lt; cardKeys.size();i++){         if (i &gt;= 51){             bottomCard.add(pokerMap.get(cardKeys.get(i))); // 根据牌编号，获取对应在牌盒中的牌，放入底牌         }else if (i % 3 == 0){             player1.add(pokerMap.get(cardKeys.get(i))); // 根据牌编号，获取对应在牌盒中的牌，放入玩家1手中         }else if (i % 3 == 1){             player2.add(pokerMap.get(cardKeys.get(i))); // 根据牌编号，获取对应在牌盒中的牌，放入玩家2手中         }else{             player3.add(pokerMap.get(cardKeys.get(i))); // 根据牌编号，获取对应在牌盒中的牌，放入玩家3手中         }     }     // 根据花色排序，后续可改进为根据数字排序     Collections.sort(bottomCard);     Collections.sort(player1);     Collections.sort(player2);     Collections.sort(player3);     // 看牌     System.out.println(player1);     System.out.println(player2);     System.out.println(player3);     System.out.println(bottomCard); }}</code></pre></li></ol><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><ol><li>Map集合中的子类和常用方法</li><li>Debug跟踪的使用</li><li>使用Map实现斗地主案例</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构概述和List/Set集合</title>
      <link href="/2019/04/25/javabasics/shu-ju-jie-gou-jian-shu-he-list-set-ji-he/"/>
      <url>/2019/04/25/javabasics/shu-ju-jie-gou-jian-shu-he-list-set-ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1. 数据结构"></a>1. 数据结构</h2><h3 id="常见的数据结构"><a href="#常见的数据结构" class="headerlink" title="常见的数据结构"></a>常见的数据结构</h3><p>数据存储的常用结构有：栈、队列、数组、链表和红黑树。下面分别了解一下：</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><ul><li><strong>栈</strong>：<strong>stack</strong>，又称堆栈，它是运算受限的线性表，限定仅在表尾进行插入和删除操作的线性表；又被称为后进先出(Last In First Out)的线性表，简称LIFO结构。</li></ul><a id="more"></a><p>简单的说：采用该结构的集合，对元素的存取有以下特点：</p><ul><li>先进后出(即，先存进去的元素，要在后它存进去的元素依次取出后，才能取出该元素)。</li><li>栈的入口、出口都是栈的顶端位置。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%A0%86%E6%A0%88-1556160250265.png" alt="title"></li><li><strong>压栈</strong>：就是存元素。即、把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</li><li><strong>弹栈</strong>：就是取元素。即、把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</li></ul><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><ul><li><strong>队列</strong>：<strong>queue</strong>，简称队，它同堆栈一样，也是一种运算受限的线性表，只允许在一端进行插入操作，而在另一端进行删除操作的线性表，又被称为先进先出(First In First Out)的线性表，简称FIFO结构。<br>采用该结构的集合，对元素的存取有如下特点：</li><li>先进先出(即，先存进去的元素，会比后它进来的元素先出去)。</li><li>队列的入口、出口各占一侧。如下图示：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E9%98%9F%E5%88%97%E5%9B%BE-1556161254994.bmp" alt="title"></li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><strong>数组</strong>：<strong>Array</strong>是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。<br>数据结构特点：<br></li><li><p>查找元素快：通过索引，可以快速访问指定位置的元素<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2%E5%BF%AB-1556161542860.png" alt="title"></p></li><li><p>增删元素慢</p><ul><li><strong>指定索引位置增加元素</strong>： 需要创建一个新数组，将指定新元素存储在指定索引位置，在把原数组元素根据索引，复制到新数组对应索引的位置。如下图：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0-1556161717343.png" alt="title"></li><li><strong>指定索引位置删除元素</strong>：需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引位置，原数组中指定索引位置元素不复制到新数组中。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4-1556161853599.png" alt="title"></li></ul></li></ul><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><ul><li><strong>链表</strong>：<strong>linked list</strong>由一系列结点node(链表中每一个元素称为结点)组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域(每一个节点包含指向下一个节点的指针)。链表结构有单向链表与双向链表，这里介绍的是单向链表。<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9-1556162344765.png" alt="title"><br><br>采用该数据结构的集合，对元素的存取有如下的特点：</li><li>多个结点之间，通过地址进行连接。例如多个人手拉手，每个人使用自己的右手拉住下一个人的左手，依次类推，这样多个人就连在一起了。<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84-1556162662545.png" alt="title"><br></li><li>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素。</li><li>增删元素快：只需修改连接下个元素的地址即可。<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%A2%9E%E5%8A%A0%E7%BB%93%E7%82%B9-1556163144732.png" alt="title"><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9-1556163150767.bmp" alt="title"></li></ul><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><ul><li><strong>二叉树</strong>:<strong>binary tree</strong>,是每个节点不超过2的有序<strong>树(tree)</strong>。即每个节点最多只有两个分支(不存在分支度大于2的节点)的数结构。通常分支被称作”左子树”和”右子树”。二叉树的分支具有左右次序，不能颠倒。<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E4%BA%8C%E5%8F%89%E6%A0%91-1556164470030.bmp" alt="title"><br>二叉树有一种比较有意思的叫做红黑树，红黑树本身就是一颗二叉查找树，将节点插入后，该树仍然是一颗二叉查找树。也意味着，树的键值仍然有序的。<br>红黑树的约束：</li></ul><ol><li>节点可以是红色的或者黑色的</li><li>根节点是黑色的</li><li>叶子节点(特指空节点)是黑色的</li><li>每个红色节点的子节点都是黑色的</li><li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同<br>红黑树特点：速度特别快,趋近平衡树,查找叶子元素最少和最多次数不多于二倍<br><a href="https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/5-TreeSet%20and%20TreeMap.md" target="_blank" rel="noopener">红黑树详解</a></li></ol><h2 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2. List集合"></a>2. List集合</h2><h3 id="2-1-List接口"><a href="#2-1-List接口" class="headerlink" title="2.1 List接口"></a>2.1 List接口</h3><p><code>java.util.List</code>接口继承自<code>Collection</code>接口，是单列集合的一个重要分支，习惯将实现了<code>List</code>接口的对象称为List集合。在List集合中允许出现重复的元素，所有的元素是以一种线性方式进行存储的，在程序中可以通过索引来访问集合中的指定元素。另外，List集合还有一个特定就是元素有序，即元素的存入顺序和取出顺序一致。</p><p>List接口特点：</p><ol><li>它是一个元素存取有序的集合。例如，存元素的顺序是11、22、33.那么集合中，元素的存储就是按照11、22、33的顺序完成的。</li><li>它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素(与数组的索引是一个道理)</li><li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素。</li></ol><h3 id="2-2-List接口中常用的方法"><a href="#2-2-List接口中常用的方法" class="headerlink" title="2.2 List接口中常用的方法"></a>2.2 List接口中常用的方法</h3><p>List作为Collection集合的子接口，不但继承了Collection接口中的全部方法，而且还增加了一些根据元素索引来操作集合的特有方法。</p><ul><li><code>public void add(int index, E element)</code>:将指定的元素，添加到该集合中的指定位置上。</li><li><code>public E get(int index)</code>: 返回集合中指定位置的元素</li><li><code>public E remove(int index)</code>:移除列表中指定位置的元素，返回的是被移除的元素</li><li><code>public E set(int index,E element)</code>:用指定元素替换集合中指定位置的元素，返回值是更新前的元素。</li></ul><p>List集合特有的方法都是跟索引相关的，代码如下：</p><pre><code class="java">import java.util.ArrayList;import java.util.List;public class Demo01List {    public static void main(String[] args) {        // 创建List集合对象        List&lt;String&gt; list =  new ArrayList&lt;String&gt;();        //往 尾部添加 元素        list.add("小米");        list.add("小天");        list.add("小风");        System.out.println(list);  // [小米, 小天, 小风]        // add(int index,String s) 往指定位置添加元素        list.add(1,"小洪");        System.out.println(list); // [小米, 小洪, 小天, 小风]        // remove(int index) 删除指定位置元素，返回被删除元素        System.out.println("删除索引位置为2的元素"+list.remove(2)); // 删除索引位置为2的元素小天        // set(int index, String s) 将指定位置的元素进行替换(修改)        System.out.println(list.set(1,"小华")); // 返回的是被替换的元素， 小洪        for (int i = 0; i &lt; list.size(); i++) {            System.out.println(list.get(i)); // get(int index) 获取指定索引位置的元素        }    }}</code></pre><h2 id="3-List的子类"><a href="#3-List的子类" class="headerlink" title="3. List的子类"></a>3. List的子类</h2><p><code>java.util.ArrayList</code>集合数据存储的结构是数组结构。元素增删慢，查找快，因日常开发中使用最多的功能为查询数据、遍历数据，所以ArrayList是常用的集合。</p><h3 id="3-1-LinkedList集合"><a href="#3-1-LinkedList集合" class="headerlink" title="3.1 LinkedList集合"></a>3.1 LinkedList集合</h3><p><code>java.util.LinkedList</code>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><blockquote><p>LinkedList是一个双向链表，如下图就是一个双向链表。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8-1556175171141.png" alt="title"></p></blockquote><p>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法。这些方法了解即可：</p><ul><li><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</li><li><code>public E getFirst()</code>:返回此列表的第一个元素。</li><li><code>public E getLast()</code>:返回此列表的最后一个元素。</li><li><code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</li><li><code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</li><li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li><li><code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</li><li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</li></ul><p>LinkedList是List的子类，List中的方法LinkedList都是可以使用的。方法演示：</p><pre><code class="java">import java.util.LinkedList;public class Demo02LinkedList {    public static void main(String[] args) {        LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();        list.addFirst(0);        list.addLast(1);        list.addLast(2);        list.addLast(3);        System.out.println(list); // [0,1,2,3]        System.out.println("返回此列表第一个元素:"+list.getFirst()); // 0        System.out.println("返回此列表最后一个元素:"+list.getLast()); // 3        System.out.println("删除第一个元素并返回它:"+list.removeFirst()); // 0        System.out.println("删除最后一个元素并返回它:"+list.removeLast()); // 3        System.out.println(list.pop()); // 弹出，就是移除元素,栈在列表左侧        list.push(3);        System.out.println(list);        System.out.println(list.isEmpty()); // 判断列表是否为空，空则返回true    }}</code></pre><h2 id="4-Set接口"><a href="#4-Set接口" class="headerlink" title="4. Set接口"></a>4. Set接口</h2><p><code>java.util.Set</code>接口和<code>java.util.List</code>接口一样，同样继承自<code>Collection</code>接口，它与<code>Collection</code>接口中的方法基本一致，并没有对该接口进行功能上的扩充，只是比<code>Collection</code>接口更加严格了。与<code>List</code>接口不同的是，<code>Set</code>接口中元素无序，并且有规则保证存入元素不出现重复。</p><p><code>Set</code>集合有多个子类，这里主要介绍其中的<code>java.util.HashSet</code>、<code>java.util.LinkedHashSet</code>这两个集合。</p><blockquote><p>Tips：Set集合取出元素的方式可以采用：迭代器、增强for。</p></blockquote><h3 id="4-1-HashSet集合介绍"><a href="#4-1-HashSet集合介绍" class="headerlink" title="4.1 HashSet集合介绍"></a>4.1 HashSet集合介绍</h3><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它存储的元素是不可重复的，并且元素都是无序的。它的底层实现其实是一个<code>java.util.HashMap</code>支持。</p><p><code>HashSet</code>是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖与：<code>hashCode</code>与<code>equals</code>方法。以下代码示意使用Set集合存储：</p><pre><code class="java">import java.util.HashSet;public class Demo03HashSet {    public static void main(String[] args) {        // 创建 Set集合        HashSet&lt;String&gt; set = new HashSet&lt;&gt;();        // 添加元素        set.add(new String("cba"));        set.add("abc");        set.add("bac");        set.add("cba");        // 遍历        for (String s:set){            System.out.println(s); // cba,abc,bac 自动去重了        }    }}</code></pre><h4 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h4><p>hashCode方法返回对象的哈希值</p><pre><code class="java">/*    哈希值：是一个十进制的整数，由系统随机给出(就是对象的地址值，是一个逻辑地址，不是数据实际存储的物理地址)    在Object类有一个方法，可以获取对象的哈希值    int hashCode() 返回该对象的哈希码值    hashCode()方法的源码：        public native int hashCode();        native:代办该方法调用的是本地操作系统的方法。 */public class DemoHashCode {    public static void main(String[] args) {        // Person类继承了Object类，所以可以使用Object类的hashCode方法        Person p1 = new Person();        System.out.println(p1.hashCode()); // 1072408673        System.out.println(new Person().hashCode()); // 1531448569        System.out.println("abc".hashCode()); // 96354        // 以下两个为特殊情况，内容不同hash值相同        System.out.println("重地".hashCode()); // 1179395        System.out.println("通话".hashCode()); // 1179395    }}</code></pre><p>Set集合去重原理：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/Set%E5%8E%BB%E9%87%8D%E5%8E%9F%E7%90%86-1556188205465.png" alt="title"></p><h3 id="4-2-HashSet集合存储数据的结构-哈希表"><a href="#4-2-HashSet集合存储数据的结构-哈希表" class="headerlink" title="4.2 HashSet集合存储数据的结构(哈希表)"></a>4.2 HashSet集合存储数据的结构(哈希表)</h3><h4 id="什么是哈希表？"><a href="#什么是哈希表？" class="headerlink" title="什么是哈希表？"></a>什么是哈希表？</h4><p>在JDK 1.8之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过Key值依次查找的效率较低。而JDK 1.8中，哈希表存储采用数组+链表+红黑树实现，而链表长度超过阈值(8)时，将链表转换为红黑树，这样大大减少了查找时间。</p><p>简单的来说，哈希表是由数组+链表+红黑树(JDK1.8增加了红黑树部分)实现的，如下图示。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%93%88%E5%B8%8C%E8%A1%A8-1556182995014.png" alt="title"><br>哈希表存储流程图：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/25/%E5%93%88%E5%B8%8C%E6%B5%81%E7%A8%8B%E5%9B%BE-1556183133856.png" alt="title"></p><p>JDK1.8引入红黑树大程度优化了HashMap性能，而保证HashSet集合元素的唯一是根据对象的hashCode和equals方法决定的。如果我们往集合中存放自定义的对象，那么为了保证其唯一，就必须重写hashCode和equals方法建立当前对象的比较方式。</p><h3 id="4-3-HashSet存储自定义类型元素"><a href="#4-3-HashSet存储自定义类型元素" class="headerlink" title="4.3 HashSet存储自定义类型元素"></a>4.3 HashSet存储自定义类型元素</h3><p>给HashSet存放自定义类型的元素时，需要重写对象中的hashCode和equals方法，建立自己的比较方式，才能保证HashCode集合中对象的唯一性。以下代码示例：</p><pre><code class="java">import java.util.HashSet;/*    HashSet存储自定义类型元素    set集合保存元素唯一：        存储的元素(String,Integer,....student,Person),必须重写hashCode方法和equals方法    要求：        同名同年龄的人，视为同一人，只能存储一次 */public class Demo04MyHashSet {    public static void main(String[] args) {        // 创建hashSet集合，存储Person        HashSet&lt;Person&gt; set = new HashSet&lt;&gt;();        Person p1 = new Person("小米",11);        Person p2 = new Person("小米",11);        Person p3 = new Person("小米",12);        System.out.println(p1.hashCode()); // 1072408673        System.out.println(p2.hashCode()); // 1531448569        // 因为hashcode值不一样，所以认为是不同元素，没有起到去重效果。        System.out.println(p1==p2); // false 比较对象地址值不同，也认定是两个不同元素        System.out.println(p1.equals(p2));        set.add(p1);        set.add(p2);        set.add(p3);        System.out.println(set);    }}</code></pre><h3 id="4-4-LinkedHashSet"><a href="#4-4-LinkedHashSet" class="headerlink" title="4.4 LinkedHashSet"></a>4.4 LinkedHashSet</h3><p>HashSet可以保证元素唯一，可是元素存放进去是没有顺序的，如果要保证允许，可以使用HashSet的一个子类<code>java.util.LinkedHashSet</code>，它是链表和哈希表组合的一个数据存储结构。<br>示例如下：</p><pre><code class="java">import java.util.Iterator;import java.util.LinkedHashSet;import java.util.Set;public class DemoLinkedHashSet {    public static void main(String[] args) {        Set&lt;String&gt; set = new LinkedHashSet&lt;&gt;();        set.add("aaa");        set.add("ccc");        set.add("bbb");        set.add("ddd");        for(String s:set){            System.out.println(s);        }    }}</code></pre><h3 id="4-5-可变参数"><a href="#4-5-可变参数" class="headerlink" title="4.5 可变参数"></a>4.5 可变参数</h3><p>如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化成如下格式：</p><pre><code>修饰符 返回值类型 方法名(参数类型... 形参名){ }</code></pre><p><strong>…</strong>用在参数上，我们称之为可变参数，这个写法完全等价与</p><pre><code>修饰符 返回值类型 方法名(参数类型[] 形参名){ }</code></pre><p>后面的这种定义，在调用时必须传递数组，而前者可以直接传递数据。</p><p>同样是代表数组，但是在调用这个带有可变参数的方法时，不用创建数组(这就是简单方便之处),直接将数组中的元素作为实际参数进行传递。其实是编译成的class文件，先将这些元素封装到一个数组中，再进行传递。这些动作在编译.class文件时，就自动完成了。<br>代码示例如下：</p><pre><code class="java">public class ChangeArgs {    public static void main(String[] args) {        int[] arr = {1,3,65,491,5};        int sum = getSum(arr);        System.out.println(sum);        int sum2 = getSum(6,7,2,63,737); // 使用了可变参数写法，可以传递多个数据        System.out.println(sum2);    }    // 原始写法//    public static int getSum(int[] arr){//        int sum = 0;//        for(int a : arr){//            sum += a;//        }////        return sum;//    }    // 使用可变参数写法    public static int getSum(int... arr){        int sum = 0;        for (int a:arr){            sum += a;        }        return sum;    }}</code></pre><h2 id="5-Collections"><a href="#5-Collections" class="headerlink" title="5. Collections"></a>5. Collections</h2><h3 id="5-1-常用功能"><a href="#5-1-常用功能" class="headerlink" title="5.1 常用功能"></a>5.1 常用功能</h3><ul><li><code>java.utils.Collections</code>是集合工具类，用来对集合进行操作。部分方法如下：</li></ul><ul><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)</code>:往集合中添加一些元素。</li><li><code>public static void shuffle(List&lt;?&gt; list) 打乱顺序</code>:打乱集合顺序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。</li></ul><p>代码示例：</p><pre><code class="java">public class DemoCollections {    public static void main(String[] args) {        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();        // 原写法//        list.add(1);//        list.add(2);//        list.add(43);//        list.add(675);        // 使用工具类添加元素        Collections.addAll(list,64,267,1242,5);        System.out.println(list); // [64, 267, 1242, 5]        // 排序        Collections.sort(list);        System.out.println(list); // [5, 64, 267, 1242]    }}</code></pre><h3 id="5-2-Comparator比较器"><a href="#5-2-Comparator比较器" class="headerlink" title="5.2 Comparator比较器"></a>5.2 Comparator比较器</h3><p><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序。</p><p>代码示例：</p><pre><code class="java">public class Demo02 {    public static void main(String[] args) {        ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();        list.add("cba");        list.add("aba");        list.add("sba");        list.add("nba");        //排序方法        Collections.sort(list);        System.out.println(list); // [aba, cba, nba, sba]    }}</code></pre><p>排序方式，简单的就是比较两个对象之间的大小，在Java中提供了两种比较实现的方式，一种是比较死板的采用<code>java.lang.Comparable</code>接口去实现，一种是灵活的当我需要做排序的时候在去选择的<code>java.util.Comparator</code>接口完成。</p><p>我们采用的<code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>这个方法完成的排序，实际上要求了被排序的类型需要实现Comparable接口完成比较的功能，在String类型上如下：</p><pre><code class="java">public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence { }</code></pre><p>String类实现了这个接口，并完成了比较规则的定义，但是这样就把这种规则写死了，如果要实现一些别的操作，可以使用<code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>方法灵活的完成。这个里面就涉及到了Comparator这个接口，位于位于java.util包下，排序是comparator能实现的功能之一,该接口代表一个比较器，比较器具有可比性！顾名思义就是做排序的，通俗地讲需要比较两个对象谁排在前谁排在后，那么比较的方法就是：</p><ul><li><code>public int compare(String o1, String o2)</code>：比较其两个参数的顺序。</li></ul><blockquote><p>两个对象比较的结果有三种：大于，等于，小于。</p></blockquote><blockquote><p>如果要按照升序排序，则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）</p></blockquote><blockquote><p>如果要按照降序排序，则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p></blockquote><pre><code class="java">public class Demo03 {    public static void main(String[] args) {        ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();        list.add("cba");        list.add("aba");        list.add("sba");        list.add("nba");        //排序方法  按照第一个单词的降序        Collections.sort(list, new Comparator&lt;String&gt;() {            @Override            public int compare(String o1, String o2) {                return o2.charAt(0) - o1.charAt(0);            }        });        System.out.println(list); // [sba, nba, cba, aba]    }}</code></pre><h3 id="5-3-简述Comparable和Comparator两个接口的区别。"><a href="#5-3-简述Comparable和Comparator两个接口的区别。" class="headerlink" title="5.3 简述Comparable和Comparator两个接口的区别。"></a>5.3 简述Comparable和Comparator两个接口的区别。</h3><p><strong>Comparable</strong>：强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的compareTo方法被称为它的自然比较方法。只能在类中实现compareTo()一次，不能经常修改类的代码实现自己想要的排序。实现此接口的对象列表（和数组）可以通过Collections.sort（和Arrays.sort）进行自动排序，对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p><p><strong>Comparator</strong>强行对某个对象进行整体排序。可以将Comparator 传递给sort方法（如Collections.sort或 Arrays.sort），从而允许在排序顺序上实现精确控制。还可以使用Comparator来控制某些数据结构（如有序set或有序映射）的顺序，或者为那些没有自然顺序的对象collection提供排序。</p><h3 id="5-4-Exercise"><a href="#5-4-Exercise" class="headerlink" title="5.4 Exercise"></a>5.4 Exercise</h3><p>创建一个学生类，存储到ArrayList集合中完成指定排序操作。</p><pre><code class="java">// Student类public class Student implements Comparable&lt;Student&gt;{    private String name;    private int age;    public Student() {    }    public Student(String name, int age) {        this.name = name;        this.age = age;    }    @Override    public String toString() {        return "Student{" +                "name='" + name + '\'' +                ", age=" + age +                '}';    }    public String getName() {        return name;    }    public int getAge() {        return age;    }    public void setName(String name) {        this.name = name;    }    public void setAge(int age) {        this.age = age;    }    @Override    public int compareTo(Student o) {        return this.age-o.age; // 升序    }}// 测试类public class Demo04 {    public static void main(String[] args) {        ArrayList&lt;Student&gt; list = new ArrayList&lt;&gt;();        list.add(new Student("小明",11));        list.add(new Student("小李",14));        list.add(new Student("小张",17));        list.add(new Student("小化",16));        // 升序操作        Collections.sort(list);// 报错，要求 该list中元素类型  必须实现比较器Comparable接口        for (Student sd:list){            System.out.println(sd);        }    }}</code></pre><p>必须实现Comparable接口，重写compareTo方法，才能进行升序操作。</p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><ol><li>基本数据结构简述</li><li>List集合的相关操作方法</li><li>LinkedList集合的方法</li><li>Set，HashSet，LinkedHashSet等集合的使用方法，自定义元素等</li><li>哈希表定义</li><li>可变参数的使用</li><li>Collections工具类的使用方法</li><li>Comparator比较器</li><li>Comparable和Comparator两个接口的区别</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collction集合和泛型</title>
      <link href="/2019/04/24/javabasics/collection-he-fan-xing/"/>
      <url>/2019/04/24/javabasics/collection-he-fan-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Collection集合"><a href="#1-Collection集合" class="headerlink" title="1. Collection集合"></a>1. Collection集合</h2><ul><li><strong>集合</strong>:集合是java中提供的一种容器，可以用来存储多个数据。<br>集合和数组的区别</li><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象，而且对象的类型可以不一致。当对象多的时候，使用集合进行存储。</li></ul><a id="more"></a><h2 id="1-1-集合框架"><a href="#1-1-集合框架" class="headerlink" title="1.1 集合框架"></a>1.1 集合框架</h2><p>JavaSE提供了满足各种需求的API，在使用这些API前，先了解其继承与接口操作架构，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。</p><p>集合按照其存储结构可以分成两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code>，今天我们主要学习<code>Collction</code>集合，后续学习<code>Map</code>集合。</p><ul><li><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。其中，<code>List</code>的特点是元素有序、元素可重复。<code>Set</code>的特点是元素无序，而且不可重复。<code>List</code>接口的主要实现类有<code>java.util.ArrayList</code>和<code>java.util.LinkedList</code>，<code>Set</code>接口的主要实现类有<code>java.util.HashSet</code>和<code>java.util.TreeSet</code>。<br>如图描述集合类的继承体系：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/24/01_%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D-1556083479913.bmp" alt="title"></li></ul><h2 id="1-2-Collection常用功能"><a href="#1-2-Collection常用功能" class="headerlink" title="1.2 Collection常用功能"></a>1.2 Collection常用功能</h2><p>Coollection是所有单列集合的父接口，因此在Collection中定义了单列集合(List和Set)通用的一些方法，这些方法可用于操作所有的单列集合。方法如下：</p><ul><li><code>public boolean add(E e)</code>：  把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code> :清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li><li><code>public int size()</code>: 返回集合中元素的个数。</li><li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。<br>代码示例：<br>~~~java<br>import java.util.ArrayList;<br>import java.util.Collection;</li></ul><p>public class DemoCollection {<br>    public static void main(String[] args) {<br>        Collection<string> coll = new ArrayList<string>(); // 创建集合对象，多态写法<br>        // 使用添加功能，add(String s)；<br>        coll.add(“小米”);<br>        coll.add(“小洪”);<br>        coll.add(“小丽”);<br>        System.out.println(coll); // [小米, 小洪, 小丽]<br>        // 使用判断功能 contains(String s);<br>        System.out.println(coll.contains(“小张”)); // false<br>        System.out.println(coll.contains(“小米”)); // true<br>        System.out.println(coll.size()); // 返回集合中元素个数</string></string></p><pre><code>    System.out.println(coll.remove("小洪"));    System.out.println(coll);    Object[] obj = coll.toArray(); // 转换成一个Object数组    for (int i = 0; i &lt; obj.length; i++) {        System.out.println(obj[i]);    }    coll.clear(); // 清空集合    System.out.println(coll.isEmpty()); // 判断集合是否为空}</code></pre><p>}</p><pre><code>## 2. Iterator迭代器### 2.1 Iterator接口`java.util.Iterator`接口主要用于迭代访问`Collection`中的元素，因此`Iterator`对象也被称为迭代器。* `public Iterator iterator()`:获取集合对应的迭代器，用来遍历集合中的元素。* **迭代**：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有就把这个元素取出来，然后继续判断。直到把集合中所有元素全部取出。这种取出方式专业术语称为迭代。Iterator接口常用的方法如下：* `public E next()`: 返回迭代的下一个元素。* `public boolean hasNext()`: 如果仍有元素可以迭代，则返回true。&gt; E ：代表泛型的意思，指的是迭代出元素的数据类型```javapublic class DemoIterator {    public static void main(String[] args) {        Collection&lt;String&gt; coll = new ArrayList&lt;&gt;();        // 添加元素        coll.add("盖伦");        coll.add("艾希");        coll.add("剑圣");        Iterator&lt;String&gt; it = coll.iterator(); // 每个集合对象都有自己的迭代器。        while (it.hasNext()){//判断是否仍然有迭代元素            System.out.println(it.next()); // 获取迭代出的元素        }    }}```### 2.2 迭代器的实现原理上面的案例已经完成了Iterator遍历集合的整个过程。当遍历集合时，首先通过调用it集合的iterator()方法获取迭代器对象，然后使用hasNext()方法判断集合中是否存在下一个元素，如果存在，则调用next()方法将元素取出来，反之则说明达到了集合末尾，停止遍历元素。Iterator迭代器对象在遍历集合时，内部采用指针的方式来跟踪集合中的元素。如下图例演示Iterator对象迭代元素的过程：&lt;br&gt;![title](https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/24/%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8E%9F%E7%90%86%E5%9B%BE%E8%A7%A3-1556091723158.png)在调用Iterator的next方法之前，迭代器的索引位于第一个元素之前，不指向任何元素，当第一次调用迭代器的next方法后，迭代器的索引会向后移动一位，指向第一个元素并将该元素返回，当再次调用next方法时，迭代器的索引会指向第二个元素并将该元素返回，依此类推，直到hasNext方法返回false，表示到达了集合的末尾，终止对元素的遍历。### 2.3 增强for增强for循环(也称for each循环)是JDK 1.5以后出来的一个高级for循环，专门用来遍历数组和集合的。内部原理是一个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。格式如下：~~~javafor(元素数据类型 变量：Collection集合or数组){    // 操作代码}</code></pre><p>它能用于遍历Collection和数组。通常只进行遍历元素，不能在遍历过程中对集合进行增删操作。</p><h4 id="遍历示例"><a href="#遍历示例" class="headerlink" title="遍历示例"></a>遍历示例</h4><pre><code class="java">import java.util.ArrayList;import java.util.Collection;public class DemoSuperFor {    public static void main(String[] args) {        int[] arr = {3,4,5,6,7};        for(int a:arr){// a代表数组中的每个元素            System.out.println(a);        }    // 进行元素遍历        Collection&lt;String&gt; coll = new ArrayList&lt;&gt;();        coll.add("蛮王");        coll.add("剑圣");        coll.add("赵信");        // 使用增强for遍历        for(String s:coll){ // 变量s代表被遍历到的集合园            System.out.println(s);        }    }}</code></pre><blockquote><p>Tips:增强for循环必须有被遍历的目标。且目标只能是Collection或是数组。新式for仅仅用作遍历操作出现。</p></blockquote><h2 id="3-泛型"><a href="#3-泛型" class="headerlink" title="3. 泛型"></a>3. 泛型</h2><p>集合中是可以存放任意对象的，只要把对象存储集合后，那么这时它们都会被提升成Object类型。当我们在取出每一个对象并进行相应操作时，必须采用类型转换。</p><p>观察一下代码：</p><pre><code class="java">public class DemoGeneric {    public static void main(String[] args) {        Collection coll = new ArrayList();        coll.add("abc");        coll.add("itcast");        coll.add(5); // 由于集合没有做泛型限定，任何类型都可以存放        Iterator it = coll.iterator();        while (it.hasNext()){            System.out.println(((String)it.next()).length());        }    }}</code></pre><p>当程序运行到最后时会抛出<strong>java.lang.ClassCastException</strong>错误。因为集合中有一个int类型存在，所以发生了类型转换异常。Collection虽然可以存储各种对象，但实际上通常只存储同一类型对象。</p><ul><li><strong>泛型</strong>：可以在类或方法中预支地使用未知的类型。</li></ul><blockquote><p>Tips:一般在创建对象时，将未知的类型确定具体的类型。当没有指定泛型时，默认类型为Objec类型。</p></blockquote><h3 id="3-1-使用泛型的好处"><a href="#3-1-使用泛型的好处" class="headerlink" title="3.1 使用泛型的好处"></a>3.1 使用泛型的好处</h3><ul><li>将运行时期的ClassCastException，转移到了编译时期变成了编译失败。</li><li>避免了类型强转的麻烦。</li></ul><p>代码示例：</p><pre><code class="java">import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;public class DemoGeneric02 {    public static void main(String[] args) {        Collection&lt;String&gt; list = new ArrayList&lt;String&gt;();        list.add("abc");        list.add("itcast");        //list.add(5); // 编译不通过，类型不同        Iterator&lt;String&gt; it = list.iterator();        while(it.hasNext()){            String str = it.next(); // 当使用了Iterator&lt;String&gt;控制元素类型后，就不用强转了。            System.out.println(str.length());        }    }}</code></pre><blockquote><p>Tips:泛型是数据类型的一部分，我们将类名与泛型合并一起看作数据类型。</p></blockquote><h3 id="3-2-泛型的定义与使用"><a href="#3-2-泛型的定义与使用" class="headerlink" title="3.2 泛型的定义与使用"></a>3.2 泛型的定义与使用</h3><p>在集合中会大量使用到泛型，这里来完整地学习泛型知识。<br><br>泛型，用来灵活地将数据类型应用到不同的类、方法、接口当中。将数据类型作为参数进行传递。</p><h4 id="定义和使用含有泛型的类"><a href="#定义和使用含有泛型的类" class="headerlink" title="定义和使用含有泛型的类"></a>定义和使用含有泛型的类</h4><p>定义格式：</p><pre><code>修饰符 class 类名&lt;代表泛型的变量&gt;{ }</code></pre><p>例如，API中的ArrayList集合：</p><pre><code class="java">class ArrayList&lt;E&gt;{    public boolean add(E e){ }    public E get(int index){ }}</code></pre><p><strong>在创建对象的时候确定泛型</strong><br>例如：<code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p><p>以下举例自定义泛型类</p><pre><code class="java">public class DemoTestE {    public static void main(String[] args) {        // 创建一个泛型为String的类        DemoE&lt;String&gt; mye = new DemoE&lt;String&gt;();        // 调用set方法        mye.setMvp("我是一个字符串");        // 调用get方法        String str = mye.getMvp();        System.out.println(str);        // 创建一个泛型为Integer的类        DemoE&lt;Integer&gt; my2 = new DemoE&lt;&gt;();        my2.setMvp(123);        System.out.println(my2.getMvp());    }}</code></pre><h4 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h4><p>格式： <code>修饰符&lt;代表泛型的变量&gt; 返回值类型 方法名(参数){ }</code><br>代码举例：</p><pre><code class="java">// 自定义一个含有泛型的方法public class MyGenericMethod {    public &lt;MVP&gt; void show(MVP mvp){        System.out.println(mvp.getClass()); // 获取当前类对象    }    public &lt;MVP&gt; MVP show2(MVP mvp){        return mvp;    }}// 使用该类方法，任意输入数据类型public class GenericMethodDemo {    public static void main(String[] args) {        // 创建对象        MyGenericMethod mgm = new MyGenericMethod();        // 调用方法        mgm.show("aaa");        mgm.show(123);        mgm.show('A');        mgm.show(1.30);    }}</code></pre><h4 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h4><p>格式：<code>修饰符 interface名称&lt;代表泛型的变量&gt;{ }</code><br>使用方法基本和类的一致，代码如下：</p><pre><code class="java">// 含有泛型的接口类public interface MyGenericInterface&lt;E&gt; {    public abstract void add(E e);    public abstract E getE();}// 使用格式1： 定义类时确定泛型的类型public class MyGenericInterfaceImpl implements MyGenericInterface&lt;String&gt; {    @Override    public void add(String e){        System.out.println("接口使用泛型");    }    @Override    public String getE(){        return null;    }}// 此时，泛型E的是就是String类型// 使用格式2：始终不确定泛型的类型，直到创建对象时，确定泛型的类型public class MyImpl2&lt;E&gt; implements MyGenericInterface&lt;E&gt;{    @Override    public void add(E e) {        System.out.println("在创建对象时会确认泛型的类型");    }    @Override    public E getE() {        return null;    }}// 测试public class GenericTest {    public static void main(String[] args) {        MyImpl2&lt;String&gt; my = new MyImpl2&lt;String&gt;(); // 在创建对象时指定泛型类型        my.add("aa");        MyImpl2&lt;Integer&gt; my2 = new MyImpl2&lt;Integer&gt;();         my2.add(1);    }}</code></pre><h3 id="3-4-泛型通配符"><a href="#3-4-泛型通配符" class="headerlink" title="3.4 泛型通配符"></a>3.4 泛型通配符</h3><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h4 id="通配符的基本使用"><a href="#通配符的基本使用" class="headerlink" title="通配符的基本使用"></a>通配符的基本使用</h4><p>泛型的通配符：不知道使用什么类型来接收时，可以使用？(？表示未知通配符)。</p><pre><code class="java">import java.util.ArrayList;import java.util.Collection;public class TestWildCard {    public static void main(String[] args) {        Collection&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();        list.add(123);        getElement(list); // 可以接受任意类型数据        Collection&lt;String&gt; str = new ArrayList&lt;String&gt;();        str.add("str");        getElement(str);    }    public static void getElement(Collection&lt;?&gt; coll){ // 不知道会传入什么类型数据，可以用？        System.out.println(coll);    }}</code></pre><blockquote><p>Tips:泛型不存在继承关系，例如Collection<object> list = new ArrayList<string>();这种是错误的。</string></object></p></blockquote><h4 id="通配符高级使用–受限泛型"><a href="#通配符高级使用–受限泛型" class="headerlink" title="通配符高级使用–受限泛型"></a>通配符高级使用–受限泛型</h4><p>前面设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在Java的泛型中可以指定一个泛型<strong>上限</strong>和<strong>下限</strong>。</p><p><strong>泛型的上限</strong>：</p><ul><li><strong>格式</strong>：<code>类型名称&lt;？extends类&gt;对象名称</code></li><li><strong>意义</strong>：<code>只能接收该类型及其子类</code></li></ul><p><strong>泛型的下限</strong>：</p><ul><li><strong>格式</strong>:<code>类型名称&lt;?super类&gt;对象名称</code></li><li><strong>意义</strong>：<code>只能接收该类型及其父类型</code></li></ul><p>比如：现已知Object，String类，Number类，Integer类，其中Number是Integer的父类。</p><pre><code class="java">/*泛型的上限限定：? extends E 代表使用的泛型只能是E类型的子类/本身泛型的下线限定：? super E   代表使用的泛型只能是E类型的父类/本身 */import java.util.ArrayList;import java.util.Collection;public class Demo01 {    public static void main(String[] args) {        Collection&lt;Integer&gt; ints = new ArrayList&lt;&gt;();        Collection&lt;String&gt; str = new ArrayList&lt;&gt;();        Collection&lt;Number&gt; num = new ArrayList&lt;&gt;();        Collection&lt;Object&gt; obj = new ArrayList&lt;&gt;();        getElement1(ints);        getElement1(str); // 报错 不是Number子类或本身        getElement1(num);        getElement1(obj); // 报错 是Number父类，不符合        getElement2(ints); // 报错        getElement2(str); // 报错        getElement2(num);        getElement2(obj);        /*            类与类之间的继承关系            Integer extends Number extends Object            String extends Object         */    }    // 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类    public static void getElement1(Collection&lt;? extends Number&gt; coll){}    // 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类    public static void getElement2(Collection&lt;? super Number&gt; coll){}}</code></pre><h2 id="4-综合案例"><a href="#4-综合案例" class="headerlink" title="4 综合案例"></a>4 综合案例</h2><p>按照斗地主的规则，完成洗牌发牌的动作。<br>具体规则：使用54张牌打乱顺序，三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留底牌。</p><h3 id="4-1-案例分析"><a href="#4-1-案例分析" class="headerlink" title="4.1 案例分析"></a>4.1 案例分析</h3><ul><li><p>准备牌：</p><p>牌可以设计为一个ArrayList<string>,每个字符串为一张牌。<br>每张牌由花色数字两部分组成，我们可以使用花色集合与数字集合嵌套迭代完成每张牌的组装。<br>牌由Collection类的shuffle方法进行随机排序。</string></p></li><li><p>发牌</p><p>将每个人以底牌设计为ArrayList<string>，将最后3张牌直接存于底牌，剩余牌通过对3取模依次发牌。</string></p></li><li><p>看牌</p><p>直接打印每个集合。</p></li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre><code class="java">import java.util.ArrayList;        import java.util.Collections;/*1. 准备牌：54张牌，存到一个集合中   特殊牌：大小王   其余52张牌：     定义一个数组/集合，存储4种花色     定义一个数组/集合，存储13个序号:2AKQJ....3   循环嵌套遍历两个数组/集合，组装52张牌2. 洗牌    使用集合工具类Collection的方法    static void shuffle(List&lt;?&gt; list) 使用指定的随机源对指定列表进行置换    会随机打乱集合中的元素顺序。3. 发牌    要求：1人17张牌，剩余3张作为底牌，1人以张轮流发牌，集合索引(0-53)%3    定义4个集合，存储3位玩家的牌和底牌    索引%2，有两值(0,1) 0%2=0,1%2=1,2%2=0,3%2=1    索引%3，有三值(0,1,2) 0%3=0,1%3=1,2%3=2,3%3=04. 看牌    直接打印集合即可。 */public class Poker {    public static void main(String[] args) {        ArrayList&lt;String&gt; flowerColor = new ArrayList&lt;&gt;(); // 花色        ArrayList&lt;String&gt; cardNumber = new ArrayList&lt;&gt;(); // 牌数字        ArrayList&lt;String&gt; pokerBox = new ArrayList&lt;&gt;(); // 牌盒        // 添加花色        flowerColor.add("♥");        flowerColor.add("♦");        flowerColor.add("♠");        flowerColor.add("♣");        // 添加牌数字        for (int i = 2; i &lt;= 10; i++) {            cardNumber.add(i + ""); // 将int数字字符串化        }        cardNumber.add("J");        cardNumber.add("Q");        cardNumber.add("K");        cardNumber.add("A");        // 组装牌        for (String color:flowerColor){            for(String numbers:cardNumber){                pokerBox.add(color+numbers);//                System.out.println(color+numbers);            }        }        // 大小王        pokerBox.add("小☺");        pokerBox.add("大☠");//        System.out.println(pokerBox);        // Collection类的shuffle方法进行随机排序。        Collections.shuffle(pokerBox);        // 创建玩家集合和底牌集合        ArrayList&lt;String&gt; player1 = new ArrayList&lt;String&gt;();        ArrayList&lt;String&gt; player2 = new ArrayList&lt;String&gt;();        ArrayList&lt;String&gt; player3 = new ArrayList&lt;String&gt;();        ArrayList&lt;String&gt; dipai = new ArrayList&lt;String&gt;();        // 遍历牌盒        for (int i = 0; i &lt; pokerBox.size(); i++) {            String card = pokerBox.get(i); // 获取一张牌            // 留三张底牌，放入底牌盒中            if(i &gt;= 51){                dipai.add(card);            }else{                if(i%3==0){                    player1.add(card);                }else if(i%3==1){                    player2.add(card);                }else {                    player3.add(card);                }            }        }        System.out.println(player1);        System.out.println(player2);        System.out.println(player3);    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Object类和常用API</title>
      <link href="/2019/04/23/javabasics/object-lei-he-chang-yong-api/"/>
      <url>/2019/04/23/javabasics/object-lei-he-chang-yong-api/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Object类"><a href="#1-Object类" class="headerlink" title="1. Object类"></a>1. Object类</h2><p><code>java.lang.Object</code>类是Java语言中的根类，即所有类的父类。它中描述的所有方法子类都可以使用。在对象实例化的时候，最终找到的父类就是Object。<br>根据JDK源码及Object类的API文档，Object类中包含的方法有11个。本章主要学习其中的2个：</p><ul><li><code>public String toString()</code>; 返回该对象的字符串表示。</li><li><code>public boolean equals(Object obj)</code>:指示其他某个对象是否与此对象”相等”。</li></ul><a id="more"></a><h2 id="1-2-toString方法"><a href="#1-2-toString方法" class="headerlink" title="1.2 toString方法"></a>1.2 toString方法</h2><p>toString方法返回该对象的字符串表示，其实返回的字符串内容就是对象的类型+@+内存地址值。<code>Person@3feba861</code><br>由于该方法返回的是内存地址，所以一般要重写它以获取对象属性。</p><pre><code class="java">public class Person {    private String name;    private int age;    @Override    public String toString() { // 重写toString方法        return "Person{" +                "name='" + name + '\'' +                ", age=" + age +                '}';    }    省略get/set}</code></pre><p>在IntelliJ IDEA中，可以使用快捷键<code>ALT+Insert</code>,点击<code>toString()</code>选项，自动生成该方法。</p><h2 id="1-3-equals方法"><a href="#1-3-equals方法" class="headerlink" title="1.3 equals方法"></a>1.3 equals方法</h2><ul><li><code>public boolean equals(Object obj)</code>:比较两个对象是否“相等”，返回布尔值。<h3 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h3>如果没有覆盖重写equals方法，那么object类默认进行<code>==</code>运算符的对象地址比较，只要不同就返回false。</li></ul><h3 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h3><p>如果希望进行对象的内容比较，可以重写equals方法。</p><pre><code class="java">@Override    public boolean equals(Object o) {        if (this == o) return true;        // 如果o不等于空并且o不等于Person类型，返回false。 getClass() != o.getClass()  使用反射技术，判断o是否是Person类型， 等效于 obj instanceof Person        if (o == null || getClass() != o.getClass()) return false;        // 向下转型        Person person = (Person) o;        /* Object.equals(Object a, Object b); equals方法重载解析：        Objects.equals(name, person.name); // 传入两个对象参数        public static boolean equals(Object a, Object b) {               // 判断a==b 或者 a不等于空，并且a与b的内存地址相同才返回true，反之false            return (a == b) || (a != null &amp;&amp; a.equals(b));        }         */        return age == person.age &amp;&amp; Objects.equals(name, person.name);    }</code></pre><p>使用快捷键<code>ALT+Insert</code>可以自动生成该代码。</p><h2 id="1-4-Oebjects类"><a href="#1-4-Oebjects类" class="headerlink" title="1.4 Oebjects类"></a>1.4 Oebjects类</h2><p>在<strong>JDK7</strong>添加了一个Objects工具类，它提供了一些方来操作对象，它由一些静态的实用方法组成，这些方法是null-save(空指针安全的)或null-tolerant(容忍空指针的),用于计算对象的hashcode、返回对象的字符串表示形式、比较两个对象。</p><p>在比较两个对象时，Object的equals方法容易抛出空指针异常，而Objects类中的equals方法就优化了这个问题。方法如下：</p><ul><li><p><code>public static boolean equals(Objects a,Objects b)</code>:判断两个对象是否相等。<br>源码解析：</p><pre><code class="java">  Object.equals(Object a, Object b); // 对传入的两个对象进行比较，可防止空指针异常。  Objects.equals(name, person.name); // 传入两个对象参数  public static boolean equals(Object a, Object b) {         // 判断a==b 或者 a不等于空，并且a与b的内存地址相同,才能返回true，反之false。      return (a == b) || (a != null &amp;&amp; a.equals(b));}</code></pre></li></ul><h2 id="2-日期时间类"><a href="#2-日期时间类" class="headerlink" title="2. 日期时间类"></a>2. 日期时间类</h2><h3 id="2-1-Date类"><a href="#2-1-Date类" class="headerlink" title="2.1 Date类"></a>2.1 Date类</h3><p><code>java.util.Date</code>类表示特点的瞬间，精确到毫秒。<br>Date中拥有多个构造方法，部分已过时，其中有未过时的构造方法可以把毫秒值转成日期对象。</p><ul><li><code>public Date()</code>:分配Date对象并初始化此对象，以表示分配它的时间(精确到毫秒)。获取当前系统的日期和时间。</li><li><code>public Date(long date)</code>:传递毫秒值，把毫秒值转换为Date日期，以表示自从标准基准时间(称为”历元(epoch)”，即1970年1月1日00:00:00 GMT)以来的指定毫秒数。</li></ul><ul><li><code>public long getTime()</code>：把日期对象转换成对应的时间毫秒值。<blockquote><p>Tips:由于我们处于东八区，所以我们的基准时间为1970年1月1日8时0分0秒。</p></blockquote></li></ul><pre><code class="java">import java.util.Date;public class Demo01Date {    public static void main(String[] args) {        System.out.println("当前系统时间"+new Date());        System.out.println("将传入的毫秒值转换为日期时间格式"+new Date(0L)); // Tue Apr 23 20:39:00 CST 2019        System.out.print("把日期转换为毫秒值"+new Date().getTime()); // 相当于System.currenTimeMillis()方法    }}</code></pre><blockquote><p>Tips:在使用println方法时，会自动调用Date类中的toString方法。Date类重写了toString方法，所以结果为指定格式的字符串。</p></blockquote><h2 id="2-2-DateFormat类"><a href="#2-2-DateFormat类" class="headerlink" title="2.2 DateFormat类"></a>2.2 DateFormat类</h2><p><code>java.text.DateFormat</code>是日期/时间格式子类的抽象类，通过这个类可以帮我们完成日期和文本之间的转换，也就是可以在Date对象与String对象之间进行来回转换。</p><ul><li>格式化：按照指定的格式，从Date对象转换为String对象。</li><li>解析：按照指定的格式，从String对象转换为Date对象。</li></ul><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一默认(格式)来指定格式化或解析的标准。构造方法为：</p><ul><li><code>public SimpleDateFormat(String pattern)</code>:用指定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。参数pattern是一个字符串，代表日期时间的自定义格式。</li></ul><h3 id="格式规则"><a href="#格式规则" class="headerlink" title="格式规则"></a>格式规则</h3><p>常用格式规则为：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/23/pattern%E6%A0%BC%E5%BC%8F-1556026542510.png" alt="title"></p><blockquote><p>更详细的格式规则，可参考SimpleDateFormat类的API文档。<br>创建一个SimpleDateFormat对象代码如下：<br>~~~java<br>import java.text.DateFormat;<br>import java.text.SimpleDateFormat;</p></blockquote><p>public class Demo03DateFormat {<br>    public static void main(String[] args) {<br>        DateFormat format = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>    }<br>}</p><pre><code>### 常用方法- `public String format(Date date)`:将Date对象格式化为字符串。- `public Date parse(String source)`:将字符串解析为Date对象。#### format方法使用DateFormat类中的方法format，将日期格式化为文本，使用步骤如下。1. 创建SimpleDateFormat对象，构造方法中传入指定模式2. 调用SimpleDateFormat对象中的方法format，按照构造方法中的模式，把Date日期格式转换为符合格式的字符串```java    // 1. 创建SimpleDateFormat对象，构造方法中传入指定模式    DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    // 2. 调用SimpleDateFormat对象中的方法format    String a = format.format(new Date());    System.out.println(a);  // 2019-04-23 22:04:11```#### parse方法使用DateFormat类中的方法parse，把文本解析为日期，使用步骤如下：1. 创建SimpleDateFormat对象，构造方法中传入指定模式2. 调用SimpleDateFormat对象中的方法parse，把符合构造方法中模式的字符串，解析为Date日期~~~javaDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");Date date = sdf.parse("1996-06-03 11:45:03");System.out.println(date);/*注意：public Date parse(String source) throws ParseExceptionparse方法声明了一个异常叫ParseException,如果字符串和构造方法的模式不一致，那么程序就会抛出异常。调用了一个抛出异常的方法，就必须处理这个异常，要么throws继续抛出这个异常，要么try catch自己处理。*/</code></pre><h2 id="2-3-练习"><a href="#2-3-练习" class="headerlink" title="2.3 练习"></a>2.3 练习</h2><p>使用日期时间相关API，计算一个人出生了多少天</p><pre><code class="java">import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Scanner;public class Demo02Test {    public static void main(String[] args) throws ParseException {        Scanner sc = new Scanner(System.in);        System.out.println("请输入你的出生日期，格式：年-月-日");        String Birthday = sc.next();        long CurrentTime = new Date().getTime(); // 现在时间        DateFormat format = new SimpleDateFormat("yyyy-MM-dd"); // 设置时间格式        long liveTime = CurrentTime - format.parse(Birthday).getTime(); // 使用parse把文本解析为日期格式在转换为毫秒值//        System.out.println(liveTime);        System.out.println("出生了"+liveTime/1000/60/60/24+"天"); // liveTime/1000/60/60/24 把毫秒值转换为天    }}</code></pre><h2 id="2-4-Calendar类"><a href="#2-4-Calendar类" class="headerlink" title="2.4 Calendar类"></a>2.4 Calendar类</h2><p><code>java.util.Calendar</code>是日历类，在Date后出现，替换掉了许多Date方法。该类将所有可能用到的时间信息封装为静态成员变量，方便获取。日历类就是方便获取各个时间属性的。</p><h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p>Calenday为抽象类，由于语言敏感性，Calendar类在创建对象时并非直接创建，而是通过静态方法创建，返回子类对象，如下：<br>Calendar静态方法</p><ul><li><code>public static Calendar getInstance()</code>:使用默认时区和语言环境获取一个日历。<br>示例代码：<br>~~~java<br>import java.util.Calendar;</li></ul><p>public class Demo04Calendar {<br>    public static void main(String[] args) {<br>        Calendar cal = Calendar.getInstance(); // 多态</p><pre><code>}</code></pre><p>}</p><pre><code>### 常用方法根据Calendar类的API文档，常用方法有：- `public int get(int field)`:返回给定日历字段的值。- `public void set(int field, int value)`:将给定的日历字段设置为给定值。- `public abstract void add(int field,int amount)`:根据日历规则，为给定的日历字段添加或减去指定的时间量。- `public Date getTime()`:返回一个表示此Calendar时间值的Date对象,返回从历元到现在的毫秒偏移量。Calendar类中提供很多成员常量，代表给定的日历字段：![title](https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/23/Calendar%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%88%90%E5%91%98%E5%B8%B8%E9%87%8F-1556029579519.png)#### get/set方法get方法用来获取指定字段的值，set方法用来设置指定字段的值，演示代码如下：```javaimport java.util.Calendar;public class Demo04Calendar {    public static void main(String[] args) {        Calendar cal = Calendar.getInstance(); // 多态        int year = cal.get(Calendar.YEAR); // 获取当前年份        int month = cal.get(Calendar.MONTH)+1; //因为国外月份是0~11，我们是1~12.        int day = cal.get(Calendar.DAY_OF_MONTH); // 当前天数//        System.out.println(day);//        System.out.println(year+"年"+month+"月"+day+"号");        cal.set(Calendar.YEAR,2020); //自定义日期        cal.set(Calendar.MONTH,06);        cal.set(Calendar.DAY_OF_MONTH,03);        int year1 = cal.get(Calendar.YEAR);        int month1 = cal.get(Calendar.MONTH);        int day1 = cal.get(Calendar.DAY_OF_MONTH);        System.out.println(year1+"年"+month1+"月"+day1+"号");    }}```#### add方法add方法可以对指定日历字段的值进行加减操作，如果第二个参数为整数则加上偏移量，负数则减去偏移量，演示代码如下：~~~javaimport java.util.Calendar;public class Demo05CalendarAddMethod {    public static void main(String[] args) {        Calendar cal = Calendar.getInstance();        int year = cal.get(Calendar.YEAR);        int month = cal.get(Calendar.MONTH)+1;        int day = cal.get(Calendar.DAY_OF_MONTH);        System.out.println(year+"年"+month+"月"+day+"号");        // 使用add方法        cal.add(Calendar.YEAR,1); // 当前年份+1        cal.add(Calendar.MONTH,2);        cal.add(Calendar.DAY_OF_MONTH,-20); // 天数-20天        int year1 = cal.get(Calendar.YEAR);        int month1 = cal.get(Calendar.MONTH)+1;        int day1 = cal.get(Calendar.DAY_OF_MONTH);        System.out.println(year1+"年"+month1+"月"+day1+"号");    }}</code></pre><h4 id="getTime方法"><a href="#getTime方法" class="headerlink" title="getTime方法"></a>getTime方法</h4><p>Calendar中的getTime方法并不是获取毫秒时刻，而是拿到对应的Date对象。</p><pre><code class="java">import java.util.Calendar;import java.util.Date;public class Demo06CalendarGetTime {    public static void main(String[] args) {        Calendar cal = Calendar.getInstance();        Date date = cal.getTime(); // 获取的是Date对象        System.out.println(date); // Tue Apr 23 22:52:25 CST 2019    }}</code></pre><h2 id="3-System类"><a href="#3-System类" class="headerlink" title="3. System类"></a>3. System类</h2><p><code>java.lang.System</code>类中提供了大量的静态方法，可以获取与系统相关的信息或者系统级操作，常用方法有：</p><ul><li><code>public static long currentTimeMillis()</code>:返回以毫秒为单位的当前时间。</li><li><code>public static void arraycopy(Object src,int srcPos,Object dest, int destPos, int length)</code>:将数组中指定的数据拷贝到另一个数组中。</li></ul><h3 id="3-1-currentTimeMillis方法"><a href="#3-1-currentTimeMillis方法" class="headerlink" title="3.1 currentTimeMillis方法"></a>3.1 currentTimeMillis方法</h3><p>currentTimeMillis方法获取的是当前系统时间与1970年01月01日00:00(计算机元年)之间的毫秒差值。</p><pre><code class="java">public class Demo07CurrentTime {    public static void main(String[] args) {        System.out.println(System.currentTimeMillis());    }}</code></pre><h3 id="小练习1"><a href="#小练习1" class="headerlink" title="小练习1"></a>小练习1</h3><p>计算for循环打印数字1~9999所需的时间(毫秒)。</p><pre><code class="java">public class Demo08SystemTest {    public static void main(String[] args) {        long CurrentTime = System.currentTimeMillis();        for(int i = 1;i &lt; 10000;i++){            System.out.println(i);        }        System.out.println("打印1~9999花费"+(System.currentTimeMillis() - CurrentTime)+"毫秒");    }}</code></pre><h3 id="3-2-arraycopy方法"><a href="#3-2-arraycopy方法" class="headerlink" title="3.2 arraycopy方法"></a>3.2 arraycopy方法</h3><p>该方法将数组指定数据拷贝到另一个数组中，数组的拷贝动作是系统级的，性能很高。System.arraycopy方法具有5个参数，含义分别为：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/23/arratcopy%E5%8F%82%E6%95%B0%E5%90%AB%E4%B9%89-1556031999370.png" alt="title"></p><h3 id="小练习2"><a href="#小练习2" class="headerlink" title="小练习2"></a>小练习2</h3><p>将src数组中前3个元素，复制到dest数组的前3个位置上。<br>复制元素前：src[1,2,3,4,5]，dest[6,7,8,9,10]<br>复制元素后：src[1,2,3,4,5], dest[1,2,3,9,10]</p><pre><code class="java">arraycopy(源数组，源数组索引起始位置，目标数组，目标数组索引起始位置，复制元素个数) */public class Demo09SystemArrayCopy {    public static void main(String[] args) {        int[] src = {1,2,3,4,5};        int[] dest = {6,7,8,9,10};        System.arraycopy(src,0,dest,0,3);        for (int i = 0; i &lt; dest.length; i++) {            System.out.print(dest[i]+","); // 123910        }    }}</code></pre><h2 id="4-StringBuilder类"><a href="#4-StringBuilder类" class="headerlink" title="4. StringBuilder类"></a>4. StringBuilder类</h2><h3 id="4-1-字符串拼接问题"><a href="#4-1-字符串拼接问题" class="headerlink" title="4.1 字符串拼接问题"></a>4.1 字符串拼接问题</h3><p>由于String类的对象内容不可变，所以每当进行字符串拼接时，都会在内存中创建一新的对象。<br>字符串是常量，它们的值在创建后不能被更改。如果字符串进行拼接操作，每次拼接时都会创建一个新的String对象，耗时又浪费空间。可以使用<code>java.lang.StringBuilder</code>类。</p><h3 id="4-2-StringBuilder类概述"><a href="#4-2-StringBuilder类概述" class="headerlink" title="4.2 StringBuilder类概述"></a>4.2 StringBuilder类概述</h3><p>StringBuilder又称为可变字符序列,它是一个类似于 String 的字符串缓冲区，通过某些方法调用可以改变该序列的长度和内容。即它是一个容器，容器中可以装很多字符串。并且能够对其中的字符串进行各种操作。<br>它的内部拥有一个数组用来存放字符串内容，进行字符串拼接时，直接在数组中加入新内容。StringBuilder会自动维护数组的扩容。原理如下图所示：(默认16字符空间，超过自动扩充)<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/23/01_StringBuilder%E7%9A%84%E5%8E%9F%E7%90%86-1556033213070.bmp" alt="title"></p><h3 id="4-3-构造方法"><a href="#4-3-构造方法" class="headerlink" title="4.3 构造方法"></a>4.3 构造方法</h3><p>常用的构造方法有2个：</p><ul><li><code>public StringBuilder()</code>:构造一个空的StringBuilder容器。</li><li><code>public StringBuilder(String str)</code>:构造一个容器同时将一个字符串添加进去。<pre><code class="java">public class Demo10StringBuilder {  public static void main(String[] args) {      StringBuilder strb = new StringBuilder(); // 创建一个空容器对象      StringBuilder strb2 = new StringBuilder("Hello"); // 带参构造方法  }}</code></pre></li></ul><h3 id="4-4-常用方法"><a href="#4-4-常用方法" class="headerlink" title="4.4 常用方法"></a>4.4 常用方法</h3><p>StringBuilder中常用的方法有2个：</p><ul><li><code>public StringBuilder append(...)</code>：添加任意类型数据的字符串形式，并返回当前对象自身。</li><li><code>public String toString()</code>：将当前StringBuilder对象转换为String对象。</li></ul><h4 id="append方法"><a href="#append方法" class="headerlink" title="append方法"></a>append方法</h4><p>append方法具有多种重载形式，可以接收任意类型的参数。任何数据作为参数都会将对应的字符串内容添加到StringBuilder中。示例如下：</p><pre><code class="java">public class Demo10StringBuilder {    public static void main(String[] args) {        StringBuilder builder = new StringBuilder(); // 创建一个空容器对象        StringBuilder result = builder.append("hello"); //向容器中添加一个字符串类型        System.out.println(builder); // hello        System.out.println(result); // hello        if(builder == result){            System.out.println("它们是同一个容器对象");        }        // 可以添加任意类型,且可以往容器中连续放入        builder.append(100).append(true).append(10.0).append('A');        System.out.println(builder); // hello100true10.0A    /*    如果在开发中，遇到调用一个对象后，返回一个对象的情况，可以使用返回的对象继续调用方法。    如上情况，可以把它们连在一起，这叫做链式编程。    */    }}</code></pre><h4 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h4><p>通过toString方法，StringBuilder对象将会转换为不可变的String对象。如下：</p><pre><code class="java">public class Demo11StringToString {    public static void main(String[] args) {        StringBuilder builder = new StringBuilder("hello").append("world");        String str = builder.toString(); // 将builder容器转换为字符串类型。        System.out.println(str);    }}</code></pre><h2 id="5-包装类"><a href="#5-包装类" class="headerlink" title="5. 包装类"></a>5. 包装类</h2><p>Java提供了两个类型系统，基本类型与引用类型。使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类，如下：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/23/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94%E5%8C%85%E8%A3%85%E7%B1%BB-1556034717119.png" alt="title"></p><h3 id="5-1-装箱与拆箱"><a href="#5-1-装箱与拆箱" class="headerlink" title="5.1 装箱与拆箱"></a>5.1 装箱与拆箱</h3><p>基本类型与对应的包装类对象之间，来回转换的过程称为”装箱” 与 “拆箱”：</p><ul><li><strong>装箱</strong>:从基本类型转换为对应的包装类对象。</li><li><strong>拆箱</strong>:从包装类对象转换为对应的基本类型。</li></ul><p>用Integer与int为例：</p><pre><code class="java">public class Demo12PackClass {    public static void main(String[] args) {        // 基本数值 --&gt; 包装对象        Integer i = new Integer(4); // 使用构造方法        Integer iii = Integer.valueOf(4); // /使用包装类中的valueOf方法        // 包装对象 --&gt; 基本数值        int num = i.intValue();    }}</code></pre><h3 id="5-2-自动装箱与自动拆箱"><a href="#5-2-自动装箱与自动拆箱" class="headerlink" title="5.2 自动装箱与自动拆箱"></a>5.2 自动装箱与自动拆箱</h3><p>由于我们经常要做基本类型与包装类之间的转换，从Java 5开始，基本类型与包装类的装箱、拆箱动作可以自动完成。示例如下：</p><pre><code class="java">Integer i = 4;//自动装箱。相当于Integer i = Integer.valueOf(4);i = i + 5;//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;//加法运算完成后，再次装箱，把基本数值转成对象。</code></pre><h3 id="5-3-基本类型与字符串之间的转换"><a href="#5-3-基本类型与字符串之间的转换" class="headerlink" title="5.3 基本类型与字符串之间的转换"></a>5.3 基本类型与字符串之间的转换</h3><h4 id="基本类型转换为String"><a href="#基本类型转换为String" class="headerlink" title="基本类型转换为String"></a>基本类型转换为String</h4><p>基本类型转换String总共有三种方法，这里只讲解最简单一种方式：基本类型直接与””连接即可，如34+””。</p><h4 id="String转换成对应的基本类型"><a href="#String转换成对应的基本类型" class="headerlink" title="String转换成对应的基本类型"></a>String转换成对应的基本类型</h4><p>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型：</p><ul><li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li><li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li><li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li></ul><blockquote><p>如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的final关键字及内部类</title>
      <link href="/2019/04/22/javabasics/java-zhong-de-final-guan-jian-zi/"/>
      <url>/2019/04/22/javabasics/java-zhong-de-final-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-final关键字"><a href="#1-final关键字" class="headerlink" title="1. final关键字"></a>1. final关键字</h2><p>继承中子类可以在父类的继承上改写父类内容，比如方法重写。但如果我们随意的继承API中提供的类，改写其内容，显示不合适。为了避免这种随意改写的起来，Java提供了final关键字，用于修改不可改变内容。</p><a id="more"></a><ul><li>final：不可改变。可用于修饰类、方法和变量。<ul><li>类：被修改的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，不能被重新赋值。</li></ul></li></ul><h3 id="1-1-使用方式"><a href="#1-1-使用方式" class="headerlink" title="1.1 使用方式"></a>1.1 使用方式</h3><ul><li>修饰类：final class 类名{}</li><li>修饰方法：修饰符 final 返回值类型 方法名(参数列表){方法体}</li><li>修饰变量有以下三种情况：<ul><li>局部变量–基本类型：基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。</li><li>局部变量–引用类型：引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部成员变量值的修改。</li><li>成员变量：成员变量涉及到初始化的问题，初始化方式有两种，显式初始化和构造方法初始化。</li></ul></li></ul><p>代码示例如下：</p><pre><code class="java">public class FinalDemo01 {    public static void main(String[] args) {        // 1. 以下示意局部变量基本类型使用final关键字修饰。        final int a; // 使用final修饰，声明变量。        a = 10; // 第一次赋值，编译通过//        a = 20; // 第二次赋值，报错。        final int b = 10; // 申明变量同时直接赋值，使用final修饰//        b = 20; // 报错,不可重新赋值        for(int i = 0; i &lt; 10;i++){            final int c = i;            System.out.print(c);        }        // 2. 以下示例局部变量引用类型使用final关键字修饰。        final TestFinal tf = new TestFinal("张三",11); // 创建一个测试对象。//        tf = new TestFinal(); // 新创建一个对象，把tf指向该对象。报错，使用final修饰后无法改变地址值。    }}// 成员变量initializepublic class TestFinal {    // 创建类时直接初始化，并用final修饰。/*    final String USERNAME = "张山";    private int age;*/    final String USERNAME;    private int age;    // 使用构造方法initialize    public TestFinal(String USERNAME, int age) {        this.USERNAME = USERNAME;        this.age = age;    }}</code></pre><h2 id="2-权限修饰符"><a href="#2-权限修饰符" class="headerlink" title="2. 权限修饰符"></a>2. 权限修饰符</h2><p>在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限。</p><ul><li>public：公共的</li><li>protected：受保护的</li><li>default：默认的</li><li>private：私有的</li></ul><h3 id="2-1-不同权限的访问能力"><a href="#2-1-不同权限的访问能力" class="headerlink" title="2.1 不同权限的访问能力"></a>2.1 不同权限的访问能力</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/22/Java%E5%9B%9B%E7%A7%8D%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90-1555902457643.png" alt="title"><br><br>public具有最大权限。private则是最小权限。<br>故编写代码时，如果没有特殊的考虑，应该这样使用权限：</p><ul><li>成员变量使用private，隐藏细节。</li><li>构造方法使用public，方便创建对象。</li><li>成员方法使用public，方便调用方法。</li><li>不加权限修饰符的，其访问能力与default修饰符相同。</li></ul><h2 id="3-内部类"><a href="#3-内部类" class="headerlink" title="3. 内部类"></a>3. 内部类</h2><p>如果一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类。</p><h3 id="成员内部类：定义在类中方法外的类。"><a href="#成员内部类：定义在类中方法外的类。" class="headerlink" title="成员内部类：定义在类中方法外的类。"></a>成员内部类：定义在类中<strong>方法外</strong>的类。</h3><p>在描述事物时，若一个事物内部还包含其他事物，就可以使用内部类这种结构。比如，汽车类Car中包含发动机类Engine，这个Engine类就可以使用内部类来描述，定义在成员位置。</p><pre><code class="java">class Car{ //外部类     ...    class Engine{ //成员内部类    ...    }}</code></pre><ul><li>内部类可以直接访问外部类的成员，包括私有成员。</li><li>访问重名的成员变量，使用格式：外部类名称.this.外部类成员变量名<br>如何使用成员内部类？两种方式：</li></ul><ol><li>间接方式：在外部类的方法中，使用内部类；然后通过调用外部类方法来间接调用内部类。</li><li>直接方式：[外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();]</li></ol><pre><code class="java">// 成员内部类示例public class Body { // 内部类    public class Heart{ // 成员内部类        // 内部类方法        public void beat(){            System.out.println("心脏跳动：砰砰砰！");            System.out.println("我叫：" + name); // 内部类可以直接访问外部类成员变量        }    }    private String name; // 外部类成员变量    // 外部类方法    public void methodBody(){        System.out.println("外部类的方法");        new Heart().beat(); // 匿名对象    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}// 成员内部类示例测试类public class InnerClassDemo02 {    public static void main(String[] args) {        Body body = new Body();        body.methodBody(); // 间接通过外部类方法访问内部类        System.out.println("下面使用直接访问方式访问内部类");        Body.Heart heart = new Body().new Heart();        heart.beat();    }}// 访问重名的成员变量示例public class Other {    int num = 10; // 外部类的成员变量    public class Inner{        int num = 20; // 内部类的成员变量        public void methodInner(){            int num = 30; // 内部类方法的局部变量            System.out.println(num); // 局部变量，就近原则            System.out.println(this.num); // 内部类成员变量            System.out.println(Other.this.num); // 外部类成员变量        }    }}// 访问重名的成员变量示例测试类public class InnerClassDemo03 {    public static void main(String[] args) {        Other.Inner obj = new Other().new Inner();        obj.methodInner();    }}</code></pre><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>如果一个类是定义在一个<strong>方法内部</strong>的，那么这就是一个局部内部类<br>“局部”：只有当前所属的方法才能使用它，出了这个方法外面就不能用了。</p><pre><code class="java">// 局部内部类public class Outer {    public void methodOuter(){        class Inner{ // 局部内部类            int num = 10;            public void methodInner(){                System.out.println(num);            }        }        Inner inner = new Inner(); // 创建局部内部类对象        inner.methodInner(); // 调用内部类方法,将打印10    }}// 测试类public class DemoMain {    public static void main(String[] args) {        Outer outer = new Outer();        outer.methodOuter();    }}</code></pre><p>小结类的权限修饰符：<br>public &gt; protected &gt; (default) &gt; private<br>定义一个类时，权限修饰符规则：</p><ol><li>外部类：public / (default)</li><li>成员内部类：public / protected / (default) / private</li><li>局部内部类：什么都不能写</li></ol><p>注意事项：<br>局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是[有效的final的]<br>备注：从Java 8+开始，只要局部变量属实不变，那么final关键字可省略<br>原因：</p><ol><li>new出来的对象在堆内存中。</li><li>局部变量是跟着方法走的，在栈内存当中。</li><li>方法运行结束之后，立即出栈，局部变量就会立即消失。</li><li>但new出来的对象会在堆中持续存在，直到垃圾回收消失。</li></ol><h3 id="匿名内部类-重点"><a href="#匿名内部类-重点" class="headerlink" title="匿名内部类(重点)"></a>匿名内部类(重点)</h3><ul><li>匿名内部类：是内部类的简化写法。它本质是一个<strong>带具体实现的父类或者父接口的匿名</strong>的子类对象。<br>开发中，最常用的内部类就是匿名内部类。以接口为例，当使用一个接口时，得做如下几步操作：</li></ul><ol><li>定义子类</li><li>重写接口中的方法</li><li>创建子类对象</li><li>调用重写后的方法<br>我们最终的目的只是为了调用方法，那么该如何简化。匿名内部类就可以处理这种情况。</li></ol><pre><code class="java">// 接口类public interface MyInterface {    void method();    void method2();}/*匿名内部类的定义格式：接口名称 对象名 = new 接口名称(){    // 覆盖重写所有抽象方法}对格式 “new 接口名称() {...}” 进行解析：1. new代表创建对象的动作2. 接口名称就是匿名内部类需要实现哪个接口3. {...} 这是匿名内部类的内容另外还有注意几点问题：1. 匿名内部类，在创建对象时，只能使用唯一一次。如果希望多次创建对象，而且类的内容一样的话，那么就必须使用单独定义的实现类了。2. 匿名对象，在[调用方法]时，只能调用唯一一次，如果希望同一对象调用多次方法，那么必须给对象起名。3. 匿名内部类是省略了[实现类/子类名称]，但匿名对象是省略了[对象名称]。匿名内部类和匿名对象不是一回事！ */// 主方法测试类public class DemoMain {    public static void main(String[] args) {        // 使用匿名内部类        MyInterface obj = new MyInterface() {            @Override            public void method() {                System.out.println("使用匿名内部类实现了方法1！");            }            @Override            public void method2() {                System.out.println("匿名内部类实现方法2");            }        };        obj.method();        obj.method2();        // 使用了匿名内部类，而且省略了对象名称，也是匿名对象        new MyInterface(){            @Override            public void method() {                System.out.println("使用匿名对象方式，该内部类方法只能调用一次");            }            @Override            public void method2() {            }        }.method(); // 因为匿名对象无法调用第二次方法，所以需要再创建一个匿名内部类的匿名对象才能二次调用。    }}</code></pre><h2 id="4-引用类型用法总结"><a href="#4-引用类型用法总结" class="headerlink" title="4. 引用类型用法总结"></a>4. 引用类型用法总结</h2><p>实际开发中，引用类型的使用非常重要且普遍。基本类型可以作为成员变量、作为方法的参数、作为方法的返回值，那么引用类型也是可以的。</p><h3 id="4-1-class作为成员变量"><a href="#4-1-class作为成员变量" class="headerlink" title="4.1 class作为成员变量"></a>4.1 class作为成员变量</h3><p>具体代码示例如下：</p><pre><code class="java">// 定义一个英雄类public class Hero {    private String name; // 名称    private int blood;  // 生命值    private Weapon weapon; // 添加武器属性    public Hero() {    }    public Hero(String name, int blood, Weapon weapon) {        this.name = name;        this.blood = blood;        this.weapon = weapon;    }    public void attack(){        System.out.println(name+"使用了"+weapon.getName()+"攻击敌方");    }    ... 省略get/set方法}// 定义一个武器类public class Weapon {    private String name; // 武器名称    public Weapon(String name) {        this.name = name;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}// 测试类public class DemoMain {    public static void main(String[] args) {        // 创建英雄对象        Hero hero = new Hero();        // 创建武器对象        Weapon wp = new Weapon("霜之哀伤");        hero.setName("伊利丹"); // 设置英雄名字        hero.setWeapon(wp); // 将武器交给英雄        hero.attack(); // 攻击    }}</code></pre><h3 id="4-2-interface作为方法参数和返回值类型"><a href="#4-2-interface作为方法参数和返回值类型" class="headerlink" title="4.2 interface作为方法参数和返回值类型"></a>4.2 interface作为方法参数和返回值类型</h3><p>以下示意接口作为方法参数：</p><pre><code class="java">// 接口类public interface Skill {    void use(); // 释放技能}// 实现类 public class SkillImpl implements Skill {    @Override    public void use() {        System.out.println("biubiubiu");    }}// 英雄类public class Hero {    private String name; // 英雄名称    private Skill skill; // 英雄技能    public Hero() {    }    public Hero(String name, Skill skill) {        this.name = name;        this.skill = skill;    }    public void attack(){        System.out.println("我叫"+name+"，开始释放技能：");        skill.use(); //调用接口中的抽象方法        System.out.println("释放技能完成。");    }    ....省略get/set方法}// 测试类public class DemoGame {    public static void main(String[] args) {        Hero hero = new Hero();        hero.setName("艾希"); // 设置英雄名称        // 设置英雄技能        // 使用实现类作为参数传递//        hero.setSkill(new SkillImpl());//        hero.attack();        // 使用匿名内部类作为参数//        Skill skill = new Skill() {//            @Override//            public void use() {//                System.out.println("pia~~pia~~pia~~");//            }//        };        // 使用匿名内部类和匿名对象        hero.setSkill(new Skill() {            @Override            public void use() {                System.out.println("da~da~da~");            }        });        hero.attack();    }}</code></pre><p>以下示例接口作为方法的返回值类型</p><pre><code class="java">public class DemoInterface {    public static void main(String[] args) {        // 左边是接口名称，右边是实现类名称，这就是多态写法        List&lt;String&gt; list = new ArrayList&lt;&gt;(); //         List&lt;String&gt; result = addNames(list);        for (int i = 0; i &lt; result.size(); i++) {            System.out.println(result.get(i));        }    }    public static List&lt;String&gt; addNumbers(List&lt;String&gt; list){        list.add("1");        list.add("2");        list.add("3");        return list;    }}// 用一个接口或是自定义类作为方法的参数或者返回值都是可以的</code></pre><h3 id="5-综合案例–发红包-界面版"><a href="#5-综合案例–发红包-界面版" class="headerlink" title="5. 综合案例–发红包[界面版]"></a>5. 综合案例–发红包[界面版]</h3><p>完整代码见：<a href="https://github.com/zero6996/JavaDemo/tree/master/Demo4_22/DemoRedPacket" target="_blank" rel="noopener">SendRedPacket</a></p><p>手气红包算法思路解析：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/22/%E6%89%8B%E6%B0%94%E7%BA%A2%E5%8C%85%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF%E8%A7%A3%E6%9E%90-1555941568465.png" alt="title"></p><h3 id="案例总结"><a href="#案例总结" class="headerlink" title="案例总结"></a>案例总结</h3><p>通过发红包案例，你都学到了什么？请思考如下问题：</p><ol><li>基础语法，你是否清晰？</li><li>一些基本的类的方法，你是否能够调用</li><li>案例中哪里体现了继承，继承的作用是什么？</li><li>接口作为参数，如何使用？</li><li>接口作为成员变量，如何使用?</li><li>如何简化接口的使用方式？</li></ol><h2 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h2><ol><li>使用final关键字修饰类、方法和变量。</li><li>Java中的权限修饰符。</li><li>成员内部类、局部内部类、匿名内部类、匿名对象的基本使用格式。</li><li>引用类型作为参数，返回值类型的使用方式。</li><li>综合案例发红包代码理解。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java三大特性之多态</title>
      <link href="/2019/04/21/javabasics/java-san-da-te-xing-zhi-duo-tai/"/>
      <url>/2019/04/21/javabasics/java-san-da-te-xing-zhi-duo-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>接口，是Java语言中一种引用类型，是方法的集合，如果说类的内部封装了成员变量、构造方法和成员方法，那么接口的内部主要就是<strong>封装了方法</strong>，包含抽象方法，默认方法和静态方法，私有方法。</p><a id="more"></a><p>接口的定义，它与定义类方式相似，但是使用interface关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。<br>接口的使用，它不能创建对象，但是可以被实现(implements，类似于被继承)。一个实现接口的类(可以看做是接口的子类),需要实现接口中所有的抽象方法，创建该类对象，就可以调用方法了，否则它必须是一个抽象类。</p><h3 id="1-2-定义格式"><a href="#1-2-定义格式" class="headerlink" title="1.2 定义格式"></a>1.2 定义格式</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/21/%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F-1555818337838.png" alt="title"></p><h4 id="含有抽象方法"><a href="#含有抽象方法" class="headerlink" title="含有抽象方法"></a>含有抽象方法</h4><ul><li>抽象方法：使用abstract关键字修饰，可以省略，没有方法体。该方法供子类实现使用。<br>代码如下：<pre><code class="java">public interface InterFaceName{  public abstract void method();}</code></pre></li></ul><h4 id="含有默认方法和静态方法"><a href="#含有默认方法和静态方法" class="headerlink" title="含有默认方法和静态方法"></a>含有默认方法和静态方法</h4><ul><li>默认方法：使用default修饰，不可省略，供子类调用或者子类重写。</li><li>静态方法：使用static修饰，供接口直接调用。</li></ul><p>代码如下：</p><pre><code class="java">public interface InterFaceName{    public default void method(){    // 执行语句    }    public static void method2(){    // 执行语句    }}</code></pre><h4 id="含有私有方法和私有静态方法"><a href="#含有私有方法和私有静态方法" class="headerlink" title="含有私有方法和私有静态方法"></a>含有私有方法和私有静态方法</h4><ul><li>私有方法：使用private修饰，供接口中的默认方法或者静态方法调用。</li></ul><p>代码如下：</p><pre><code class="java">public interface InterFaceName{    private void method(){        // 执行语句    }}</code></pre><h3 id="1-3-基本的实现"><a href="#1-3-基本的实现" class="headerlink" title="1.3 基本的实现"></a>1.3 基本的实现</h3><p>类与接口的关系为实现关系，即类实现接口，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相似，只是关键字不同，实现使用implements关键字。</p><p>非抽象子类实现接口：</p><ol><li>必须重写接口中所有抽象方法。</li><li>继承了接口的默认方法，即可以直接调用，也可以重写。<br>格式如下：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/21/%E6%8E%A5%E5%8F%A3%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F-1555826716777.png" alt="title"></li></ol><p>代码示例：</p><pre><code class="java">// 定义接口类public interface LiveAble {    // 定义抽象方法    public abstract void eat();    public abstract void sleep();}// 定义实现类public class Animal implements LiveAble{    @Override    public void eat(){        System.out.println("吃东西");    }    @Override    public void sleep(){        System.out.println("睡觉");    }}// 定义测试类public class InterfaceDemo {    public static void main(String[] args) {        // 创建子类对象        Animal a = new Animal();        a.eat();        a.sleep();    }}</code></pre><h4 id="默认方法的使用"><a href="#默认方法的使用" class="headerlink" title="默认方法的使用"></a>默认方法的使用</h4><p>可以继承，可以重写，但只能通过实现类的对象来调用。接口当中的默认方法，可以解决接口升级的问题。</p><ol><li>实现类可以继承接口类的默认方法，也可以自己重写默认方法。</li></ol><p>代码示例如下：</p><pre><code class="java">// 定义接口类public interface LiveAble {    // 定义抽象方法    public abstract void eat();    public abstract void sleep();    public default void fly(){ // 定义默认方法        System.out.println("飞行");    }}// 定义实现类public class Animal implements LiveAble{    @Override    public void fly(){ // 重写接口中的默认方法，也可以不重写，继承接口类中的默认方法        System.out.println("自由自在的飞！");    }}// 定义测试类public class InterfaceDemo {    public static void main(String[] args) {        // 创建子类对象        Animal a = new Animal();        a.eat();        a.sleep();        a.fly(); // 如果实现类没有重写默认方法，则执行的是继承自接口类的默认方法，重写则执行实现类重写后的方法    }}</code></pre><h4 id="静态方法的使用"><a href="#静态方法的使用" class="headerlink" title="静态方法的使用"></a>静态方法的使用</h4><p>静态与.class文件相关，只能使用接口名调用，不能通过实现类的类名或者实现类的对象调用</p><p>示例如下：</p><pre><code class="java">// 接口类public interface LiveAble {    public static void run(){        System.out.println("这是静态方法，只能通过接口类调用");    }}// 实现类无法继承或重写接口类静态方法// 测试类public class InterfaceDemo {    public static void main(String[] args) {        // 创建子类对象        Animal a = new Animal();    // a.run(); 报错，无法通过实现类调用静态方法        LiveAble.run(); // 接口类的静态方法只能通过接口类来调用    }}</code></pre><h4 id="私有方法的使用"><a href="#私有方法的使用" class="headerlink" title="私有方法的使用"></a>私有方法的使用</h4><ul><li>私有方法：只有默认方法可以调用</li><li>私有静态方法：默认方法和静态方法可以调用。<br>如果一个接口中有多个默认方法且方法中有代码重复内容，那么可以抽取出来，封装到私有方法中，供默认方法去调用。私有方法是对默认方法和静态方法的辅助。<pre><code class="java">public interface LiveAble {  default void func(){  func1();  func2();  }  private void func1(){  System.out.println("跑起来~~~");  }  private void func2(){  System.out.println("跑起来~~~");  }}</code></pre><h4 id="接口的常量定义和使用"><a href="#接口的常量定义和使用" class="headerlink" title="接口的常量定义和使用"></a>接口的常量定义和使用</h4>接口当中也可可以定义”成员变量”，但是必须使用public static final三个关键字进行修饰。可以认为就是接口的[常量]。<br>格式：public static final 数据类型 常量名称 = 数据值; 一旦使用final关键字进行修饰，说明不可改变。<br>注意事项：</li></ul><ol><li>接口中的常量，可以省略public static final。</li><li>接口中的常量，必须进行赋值，不能不赋值。</li><li>接口中常量的名称规则：使用完全大写的字母，单词间用下划线进行分隔。</li></ol><h3 id="接口内容小结"><a href="#接口内容小结" class="headerlink" title="接口内容小结"></a>接口内容小结</h3><p>在Java 9+版本中，接口的内容可以有：</p><ul><li>成员变量其实是常量。<ul><li>格式：[public] [sttaic] [final] 数据类型 常量名称 = 数据值; </li><li>注意：常量必须进行赋值，且一旦赋值不能改变。常量名称完全大写，用下划线分隔。</li></ul></li><li>接口中最重要的就是抽象方法。<ul><li>格式：[public] [abstract] 返回值类型 方法名称(参数列表);</li><li>注意：实现类必须覆盖重写接口的所有抽象方法，除非实现类是抽象类。</li></ul></li><li>从Java 8开始，接口里允许定义默认方法。<ul><li>格式：[public] default 返回值类型 方法名称(参数列表){方法体}</li><li>注意：默认方法也可以被覆盖重写</li></ul></li><li>从Java 8开始，接口里允许定义静态方法。<ul><li>格式：[public] static 返回值类型 方法名称(参数列表){方法体}</li><li>注意：应该通过接口名称进行调用，无法通过实现类对象调用接口静态方法。</li></ul></li><li>从Java 9开始，接口里允许定义私有方法。<ul><li>普通私有方法：private 返回值类型 方法名称(参数列表){方法体}</li><li>静态私有方法：private static 返回值类型 方法名称(参数列表){方法体}</li><li>注意：private方法只要接口自己才能调用，无法被实现类或者别人使用。</li></ul></li></ul><h3 id="接口的多实现"><a href="#接口的多实现" class="headerlink" title="接口的多实现"></a>接口的多实现</h3><p>在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的多实现。并且，一个类能继承一个父类，同时实现多个接口。<br>格式如下：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/21/%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%A4%9A%E5%AE%9E%E7%8E%B0%E6%A0%BC%E5%BC%8F-1555836946283.png" alt="title"><br><br>使用接口的时候，需注意：</p><ol><li>接口是没有静态代码块或者构造方法的。</li><li>一个类的直接父类是唯一的，但是一个类可以同时实现多个接口的。<br>格式：<br>public class MyIntfaceImpl implements MyInterfaceA,MyInterfaceB{<br> // 覆盖重写所有抽象方法<br>}</li><li>如果实现类实现的多个接口中，存在重复的抽象方法，只需覆盖重写一次即可。</li><li>如果实现类没有覆盖重写所以接口的所有抽象方法，那么实现类必须是抽象类。</li><li>如果实现类所实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</li><li>一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，子类优先用父类当中的方法。</li></ol><h3 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h3><p>一个接口能继承另一个或者多个接口。接口的继承使用extends关键字，子接口继承父接口的方法。如果父接口中的默认方法有重名，那么子接口需要重写一次。</p><pre><code class="java">// 父接口Apublic interface MyInterfaceA {    public abstract void methodA();    public abstract void methodCommon();    public default void methodDefault(){        System.out.println("接口A默认方法");    }}// 父接口Bpublic interface MyInterfaceB {    public abstract void methodB();    public abstract void methodCommon();    public default void methodDefault(){        System.out.println("接口B默认方法");    }}// 子接口public interface MyInterface extends MyInterfaceA,MyInterfaceB{    public abstract void method();    @Override    default void methodDefault() { // 重写父接口的默认方法    }}</code></pre><ol><li>类与类之间是单继承的。直接父类只有一个</li><li>类与接口之间是多实现的。一个类可以实现多个接口。</li><li>接口与接口之间是多继承的。</li></ol><p>注意事项：</p><ol><li>多个父接口当中的抽象方法如果重复，没关系</li><li>多个父接口中的默认方法如果重复，那么子接口必须进行默认方法的覆盖重写，[而且带着default关键字</li></ol><h2 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h2><ul><li>多态：是指同一行为，具有多个不同表现形式。</li></ul><h3 id="2-1多态的体现"><a href="#2-1多态的体现" class="headerlink" title="2.1多态的体现"></a>2.1多态的体现</h3><p>多态的体现格式：父类名称 对象名 = new 子类名称();<br>代码中体现多态性，其实就是一句话：父类引用指向子类对象</p><h4 id="成员变量在多态中的规则"><a href="#成员变量在多态中的规则" class="headerlink" title="成员变量在多态中的规则"></a>成员变量在多态中的规则</h4><pre><code class="java">// 父类public class Fu {    int num = 10;    public void showNum(){        System.out.println(num);    }}// 子类public class Zi extends Fu {    int num = 20;    @Override    public void showNum(){        System.out.println(num);    }}// 测试类public class DemoMulti01 {    public static void main(String[] args) {        Fu obj = new Zi();        System.out.println(obj.num); // 直接访问成员变量时，左边是谁就先访问谁的        // 子类没有覆盖重写，就是父：10        // 子类如果覆盖重写，就是子：20        obj.showNum();    }}</code></pre><p>注意事项：</p><ol><li>直接通过对象名称访问成员变量：看等号左边是谁优先访问谁，没有则向上查找。</li><li>间接通过成员方法来访问成员变量：看该方法属于谁优先访问谁，没有则向上找。</li></ol><h4 id="多态中成员方法的使用特点"><a href="#多态中成员方法的使用特点" class="headerlink" title="多态中成员方法的使用特点"></a>多态中成员方法的使用特点</h4><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法。</p><pre><code class="java">// 父类public class Fu {    int num = 10;    public void showNum(){        System.out.println(num);    }    public void method(){        System.out.println("父类方法");    }    public void methodFu(){        System.out.println("父类特有方法");    }}// 子类public class Zi extends Fu {    int num = 20;    @Override    public void showNum(){        System.out.println(num);    }    @Override    public void method(){        System.out.println("子类方法");    }    public void methodZi(){        System.out.println("子类特有方法");    }}// 测试类/*在多态的代码中，成员方法的访问规则是：    看new的是谁，就优先用谁，没有则向上找。成员方法口诀：编译看左边，运行看右边。对比一下：成员变量：编译看左边，运行还看左边。成员方法：编译看左边，运行看右边。 */public class Demo02MultiMethod {    public static void main(String[] args) {            Fu obj = new Zi(); // 多态            // 运行看右边：左边是Fu，Fu有method方法，所以编译通过，但是运行时看右边是Zi，故运行子类方法。            obj.method(); // 父子都有，优先用子            // 运行看右：左边是Fu，Fu有methodFu方法，编译通过，但运行是看右Zi，子类没有该方法，就向上找到父类，然后执行。            obj.methodFu(); // 子类没有，向上找到父类有            // 编译看左边：左边是Fu，Fu中没有methodZi方法，所以编译报错。            // obj.methodZi(); 错误写法！    }}</code></pre><h3 id="2-2-多态的好处"><a href="#2-2-多态的好处" class="headerlink" title="2.2 多态的好处"></a>2.2 多态的好处</h3><p>可以使程序编写的更简单，并且有良好的扩展性。</p><h3 id="2-3-引用类型转换"><a href="#2-3-引用类型转换" class="headerlink" title="2.3 引用类型转换"></a>2.3 引用类型转换</h3><p>多态的转型分为向上转型和向下转型两种：</p><h4 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h4><ul><li>概述：多态本身就子类类型向父类类型向上转换的过程，这个过程是默认的。</li><li>使用格式：父类名称 变量名 = new 子类类型(); 如 Animal a = new Cat();</li><li>含义：右侧创建一个子类对象，把它当做父类来看待使用。如上创建了一只猫，当做动物看待，没问题。</li><li>注意事项：向上转型一定是安全的，从小范围转向了大范围，从小范围的猫，向上转换成为更大范围的动物。</li><li>类似于：double num = 100; // 正确， int–&gt; double， 自动类型转换。</li></ul><h4 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h4><ul><li>概述：父类类型向子类类型向下转换的过程，这个过程是强制的。一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</li><li>格式：子类名称 对象名 = (子类名称)父类对象；如 Cat cat = (Cat)a;</li><li>含义：将父类对象，[还原]成为本来的子类对象。</li></ul><p>注意事项：</p><ol><li>必须保证对象本来创建的时候，就是猫，才能向下转型成为猫。</li><li>如果对象创建时本来就不是猫，现在非要向下转型为猫，会报错ClassCastException</li><li>类似于： int num = (int)10.0; // 可以   int num = (int)10.5 //不可以，精度损失。</li></ol><h4 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h4><p>为了避免ClassCastException的发生，Java提供了 instanceof 关键字，给引用变量做类型的校验。<br>格式：变量名 instanceof 数据类型; 如果变量属于该数据类型，返回true，反之返回false。</p><pre><code class="java">// 父类public abstract class Animal {    public abstract void eat();}// 子类1public class Cat extends Animal{    @Override    public void eat() {        System.out.println("猫吃鱼");    }    public void jump(){        System.out.println("猫跳跳");    }}// 子类2public class Dog extends Animal{    @Override    public void eat() {        System.out.println("狗吃shit");    }    public void watchHouse(){        System.out.println("看家");    }}// 测试类public class MainMethod {    public static void main(String[] args) {        Animal animal = new Dog();        animal.eat();        getAnimal(new Cat());    }    public static void getAnimal(Animal animal){        if(animal instanceof Dog){            Dog dog = (Dog)animal;            dog.watchHouse();        }        if(animal instanceof Cat){            Cat cat = (Cat)animal;            cat.jump();        }    }}</code></pre><h2 id="3-接口多态的综合案例"><a href="#3-接口多态的综合案例" class="headerlink" title="3. 接口多态的综合案例"></a>3. 接口多态的综合案例</h2><p>定义USB接口，具备最基本的开启功能和关闭功能。鼠标和键盘要想能在电脑上使用，那么鼠标和键盘也必须遵守USB规范，实现USB接口，否则鼠标和键盘的生产出来也无法使用。</p><h3 id="3-1-案例分析"><a href="#3-1-案例分析" class="headerlink" title="3.1 案例分析"></a>3.1 案例分析</h3><p>进行描述笔记本类，实现笔记本使用USB鼠标、USB键盘</p><ul><li>USB接口，包含开启功能、关闭功能</li><li>笔记本类，包含运行功能、关机功能、使用USB设备功能</li><li>鼠标类，要实现USB接口，并具备点击的方法</li><li>键盘类，要实现USB接口，具备敲击的方法</li></ul><p>具体代码实现如下：</p><pre><code class="java">// 接口类public interface USB {    public abstract void open(); // 打开设备    public abstract void close(); // 关闭设备}// 笔记本类public class Laptop {    public void powerOn(){        System.out.println("笔记本电脑开机");    }    public void powerOff(){        System.out.println("笔记本电脑关机");    }    // 使用USB设备的方法，使用接口作为方法参数    public void usbDevice(USB usb){        usb.open();        if(usb instanceof Mouse){            Mouse mouse = (Mouse)usb; // 向下转型            mouse.click();        }else if (usb instanceof Keyboard){            Keyboard keyboard = (Keyboard)usb;            keyboard.click();        }        usb.close();    }}// 鼠标类// 鼠标就是一个USB设备public class Mouse implements USB{    @Override    public void open() {        System.out.println("打开鼠标");    }    @Override    public void close() {        System.out.println("关闭鼠标");    }    public void click(){        System.out.println("鼠标点击");    }}// 键盘类// 键盘也是一个USB设备public class Keyboard implements USB{    @Override    public void open() {        System.out.println("打开键盘");    }    @Override    public void close() {        System.out.println("关闭键盘");    }    public void click(){        System.out.println("键盘输入");    }}// 测试类public class DemoMain {    public static void main(String[] args) {        // 首先创建一个电脑        Laptop laptop = new Laptop();        laptop.powerOn();        // 准备一个鼠标,供电脑使用        USB usbMouse = new Mouse(); // 首先向上转型        laptop.usbDevice(usbMouse);        // 创建一个USB键盘        Keyboard keyboard = new Keyboard(); //没有使用多态写法        // 方法参数是USB类型，传递进去的是实现类对象        laptop.usbDevice(keyboard); // 正确写法！ 自动发生了向上转型！        laptop.powerOff();    }}</code></pre><p>该案例主要练习对接口的基本使用，对象的上下转型以及接口作为对象参数的使用。</p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><ol><li>接口的概述以及定义格式，以及实现接口的格式。interface关键字，implements关键字</li><li>接口中的抽象方法，默认方法和静态方法，私有方法和私有静态方法的各自使用特点。</li><li>接口中成员方法，成员变量的特点。</li><li>接口的多继承。</li><li>多态的概念以及前提。</li><li>多态中的向上向下转型格式以及实际使用方法。</li><li>instanceof关键字。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java三大特性之继承</title>
      <link href="/2019/04/20/javabasics/java-san-da-te-xing-zhi-ji-cheng/"/>
      <url>/2019/04/20/javabasics/java-san-da-te-xing-zhi-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那一个类即可。其中，多个类可以称为子类，单独那个类称为父类、超类或者基类。</p><a id="more"></a><h3 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h3><ul><li>定义：继承就是子类继承父类的属性和行为，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接访问父类中的非私有的属性和行为。</li><li>优点：提高了代码的复用性，类与类之间产生了关系，是多态的前提。</li></ul><h3 id="1-1-继承的格式"><a href="#1-1-继承的格式" class="headerlink" title="1.1 继承的格式"></a>1.1 继承的格式</h3><p>通过extends关键字，可以声明一个子类继承另外一个父类，实例如下：</p><pre><code class="java">//定义父类public class Employee {    String name;    public void work(){        System.out.println("努力工作");    }}// 定义子类继承父类class Teacher extends Employee{    public void printName(){        System.out.println("name:" + name);    }}// 测试public class Demo01Extends {    public static void main(String[] args) {        Teacher t = new Teacher();        t.name = "小明";        t.printName();        t.work();    }}</code></pre><h3 id="1-2-继承后的成员变量"><a href="#1-2-继承后的成员变量" class="headerlink" title="1.2 继承后的成员变量"></a>1.2 继承后的成员变量</h3><ul><li>如果子类父类中成员变量未重名，访问没有影响。</li><li>如果成员变量有重名的，访问会有影响，需要使用super关键字修饰父类成员变量。实例如下：<br><code>`</code>java<br>public class Demo02Super {<br>  public static void main(String[] args) {<pre><code>  Zi z = new Zi();  z.show();</code></pre>  }<br>}</li></ul><p>class Fu{<br>    int num = 5;<br>}<br>class Zi extends Fu{<br>    int num = 6;<br>    public void show(){<br>        // 访问父类中的num<br>        System.out.println(“父类num：” + super.num); //使用super关键字即可访问父类成员变量<br>        //访问子类中的num<br>        System.out.println(“子类num：” + this.num);<br>    }<br>}</p><pre><code>注意：1. 父类中的成员变量是非私有时，子类可以直接访问。若父类成员变量私有了，子类是不能直接访问的，可以通过父类设置的getxxx/setxxx方法间接访问。### 1.3 继承后的成员方法。1. 如果子类父类中成员方法不重名，这时调用是没有影响的。对象在调用方法时，会现在子类寻找对应方法，若子类存在就执行子类中的方法，若子类不存在该方法就会执行父类中对应的方法。2. 如果子类父类中成员方法重名，这时访问会造成一种特殊情况，叫做方法重写。3. 重写(Override)：子类中出现与父类一模一样的方法时(返回值类型，方法名和参数列表都相同)，会出现覆盖效果，也称为覆盖或者覆写。声明不变，重新实现。#### 重写的应用子类可以根据需要，定义属于自己的行为。即沿袭了父类的功能名称，有根据子类需要重新实现父类方法，从而进行扩展。```java// 父类public class Phone {    public void call(){        System.out.println("打电话");    }    public void sendMessage(){        System.out.println("发短信");    }    public void showNum(){        System.out.println("来电显示号码");    }}// 子类继承父类，并重写父类方法，扩展自己功能public class NewPhone extends Phone{    public void showNum(){        super.showNum();        System.out.println("来电显示姓名");        System.out.println("来电显示头像");    }}// 实例类public class Demo04Extends {    public static void main(String[] args) {        NewPhone ph = new NewPhone();        ph.call();        ph.sendMessage();        ph.showNum();    }}</code></pre><p>方法覆盖重写的注意事项：</p><ol><li>必须保证父子类之间方法的名称相同，参数列表也相同。<br>@Override:写在方法前面,检测是否是有效的正确覆盖重写，可选</li><li>子类方法的返回值必须小于等于父类方法的返回值范围。<br>扩展：java.lang.Object类是所有类的公共最高父类(祖宗类),String是Object的子类。</li><li>子类方法的权限必须大于等于父类方法的权限修饰符。<br>扩展：public &gt; protected &gt; (default) &gt; private 注：(default)不是关键字default，而是什么都不写，留空。</li></ol><h3 id="1-4-继承关系中构造方法的访问特点"><a href="#1-4-继承关系中构造方法的访问特点" class="headerlink" title="1.4 继承关系中构造方法的访问特点"></a>1.4 继承关系中构造方法的访问特点</h3><ol><li>子类构造方法当中有一个默认隐含的”super()” 调用，所以一定是先调用父类构造，后执行的子类构造。</li><li>子类构造可以通过super关键字来调用父类重载构造</li><li>super的父类构造调用，必须是子类构造方法的第一个语句。子类构造不能调用多次super构造。<br>小结：子类必须调用父类构造方法，不写则赠送super(); 写了则用写的super调用，super有且只能有一个，还必须是第一个。</li></ol><h3 id="1-5-super和this关键字用法小结"><a href="#1-5-super和this关键字用法小结" class="headerlink" title="1.5 super和this关键字用法小结"></a>1.5 super和this关键字用法小结</h3><p>super关键字三种用法：</p><ol><li>在子类的成员方法中，访问父类的成员变量。super.父类成员变量;</li><li>在子类的成员方法中，访问父类的成员方法。super.父类成员方法();</li><li>在子类的构造方法中，访问父类的构造方法。super();<br>this关键字三种用法：</li><li>在本类的成员方法中，访问本类的成员变量。this.本类成员变量;</li><li>在本类的成员方法中，访问本类的另一个成员方法。this.本类成员方法();</li><li><p>在本类的构造方法中，访问本类的另一个构造方法。this(…);<br>注意：<br>A. this(…) 调用也必须是构造方法的第一个语句，且唯一一个。<br>B. super和this两种构造调用，不能同时使用。</p><pre><code class="java">public class Zi extends Fu{ int num = 20; public Zi(){     this(8); // 本类的无参构造，调用本类的有参构造 } public Zi(int n){ } public void showNum(){     int num = 10;     System.out.println(num); // 局部变量     System.out.println(this.num); // 本类成员变量     System.out.println(super.num); //  父类成员变量 } public void methodA(){     System.out.println("AAA"); } public void methodB(){     this.methodA(); // 调用本类成员方法     System.out.println("BBB"); }}</code></pre><p>super和this内存图<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/20/super%26this%E5%86%85%E5%AD%98%E5%9B%BE-1555741452451.png" alt="title"></p><h3 id="1-6-Java继承的三个特点"><a href="#1-6-Java继承的三个特点" class="headerlink" title="1.6 Java继承的三个特点"></a>1.6 Java继承的三个特点</h3></li><li>Java语言只支持单继承，一个类的直接父类只能有唯一个</li><li>Java支持多层继承(继承体系)</li><li>子类和父类是一种相对的概念</li></ol><h2 id="2-抽象类"><a href="#2-抽象类" class="headerlink" title="2. 抽象类"></a>2. 抽象类</h2><p>父类中的方法，被它的子类覆盖重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了。我们把没有方法主体的方法称为<strong>抽象方法</strong>。Java语法规定，包含抽象方法的类就是<strong>抽象类</strong>。</p><ul><li>抽象方法：没有方法体的方法。</li><li>抽象类：包含抽象方法的类。</li></ul><h3 id="2-1-abstract使用格式"><a href="#2-1-abstract使用格式" class="headerlink" title="2.1 abstract使用格式"></a>2.1 abstract使用格式</h3><h3 id="2-2-抽象方法"><a href="#2-2-抽象方法" class="headerlink" title="2.2 抽象方法"></a>2.2 抽象方法</h3><ul><li>使用abstract关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</li><li>定义格式：修饰符 abstract 返回值类型 方法名(参数列表);</li><li>代码示例：public abstract void run();<h3 id="2-3-抽象类"><a href="#2-3-抽象类" class="headerlink" title="2.3 抽象类"></a>2.3 抽象类</h3><ul><li>如果一个类包含抽象方法，那么该类必须是抽象类。<pre><code class="java">定义格式：abstract class 类名称{...}代码示例：public abstract class Animal{ // 抽象类public abstract void run(); // 抽象方法}</code></pre><h3 id="2-4-抽象的使用"><a href="#2-4-抽象的使用" class="headerlink" title="2.4 抽象的使用"></a>2.4 抽象的使用</h3></li></ul><ol><li>不能使用new来直接创建抽象类对象。</li><li>必须用一个子类来继承抽象父类。</li><li>子类必须覆盖重写抽象父类当中所有的抽象方法。覆盖重写(实现方法)：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</li><li>创建子类对象进行使用。<pre><code class="java">// 抽象类public abstract class Animal {public abstract void eat(); // 抽象方法}// 子类继承抽象类public class Cat extends Animal{@Overridepublic void eat(){ // 重写抽象方法，并补上大括号和具体实现  System.out.println("猫吃鱼");}}// 实例public class DemoMain {public static void main(String[] args) {  Cat cat = new Cat(); // 创建子类对象  cat.eat(); // 调用方法}}</code></pre><h3 id="2-5-注意事项"><a href="#2-5-注意事项" class="headerlink" title="2.5 注意事项"></a>2.5 注意事项</h3>关于抽象类的使用，注意事项总结：</li><li>抽象类不能创建对象。只能创建其非抽象子类的对象。原因：抽象类的抽象方法没有具体方法体，没有意义</li><li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。因为子类的构造方法中，有默认的super(); 会调用父类构造方法。</li><li>抽象类中，不一定包含抽象方法，但有抽象方法的类必定是抽象类。未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</li><li>抽象类的子类，必须重写父类中所有的抽象方法，否则会报错。除非该子类也是抽象类。</li></ol></li></ul><h2 id="3-继承的综合案例"><a href="#3-继承的综合案例" class="headerlink" title="3. 继承的综合案例"></a>3. 继承的综合案例</h2><p>群主发普通红包。某群有多名成员，群主发红包。规则：</p><ol><li>群主有一笔金额，从群主余额扣除，平均分为n份，让成员领取。</li><li>成员领取红包后，保存到成员余额中。<br>根据描述，完成案例中所有类的定义以及指定类之间的继承关系，并完成发红包的操作。</li></ol><h3 id="分析案例"><a href="#分析案例" class="headerlink" title="分析案例"></a>分析案例</h3><p>根据描述分析，得出如下继承体系：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/20/%E5%8F%91%E7%BA%A2%E5%8C%85%E6%A1%88%E4%BE%8B%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB-1555750639750.png" alt="title"><br><br>代码实现：</p><pre><code class="java">// 定义父类Userspublic class Users {    private String name;    private double money;    public Users() {    }    public Users(String name, double money) {        this.name = name;        this.money = money;    }    public void show(){        System.out.println("我叫"+name+"，我有"+money+"块钱");    }    ... ...省略get/set方法}// 定义群主类// 群主类public class Manager extends Users{    public Manager(){ // 无参构造方法    }    public Manager(String name, double money) { // 全参构造方法        super(name, money); // 调用了父类的构造方法，并初始化值    }    // 定义群主发红包方法，参数为发红包金额和份数    public ArrayList&lt;Double&gt; send(double totalMoney, int count){        // 首先需要一个集合，用来存储若干个红包的金额        ArrayList&lt;Double&gt; redList = new ArrayList&lt;&gt;();        //首先看一下群主有多少钱        double leftMoney = super.getMoney(); // 群主当前余额        if(totalMoney &gt; leftMoney){            System.out.println("余额不足");            return redList; // 返回空集合        }        //扣钱，其实就是重置余额        super.setMoney(leftMoney - totalMoney);        //发红包需平均拆分为count份        double avg = (int)totalMoney / count; // int化后丢失精度,如何把零头单独拿出来？        double mod = totalMoney - avg * count;//余数，也就是甩下的零头        // 除不来的零头，包在最后一个红包里        // 下面把红包一个一个放到集合中        for (int i = 0; i &lt; count - 1; i++) {            redList.add(avg);        }        double last = avg + mod; //最后一个红包        redList.add(last);        return redList; // 返回的是一个红包数组集合    }}//定义群员类// 成员类public class Member extends Users{    public Member(){    }    public Member(String name, double money) {        super(name, money);}    public void receive(ArrayList&lt;Double&gt; list){        // 从多个红包当中随机抽取一个，给我自己。        // 随机获取一个集和当中的索引编号        int index = new Random().nextInt(list.size());        // 根据索引，从集合中删除，并且得到被删除的红包值，给自己钱        double delta = list.remove(index);        // 成员查看一下自己的余额        double money = super.getMoney();        // 将得到的红包金额加入自己的余额        super.setMoney(delta + money);    }}// 定义主方法实例public class MainRedPacket {    public static void main(String[] args) {        Manager manager = new Manager("群主",100.765);        Member one = new Member("成员A",0);        Member two = new Member("成员B",0);        Member three = new Member("成员C",0);        manager.show();        one.show();        two.show();        three.show();        System.out.println("===================");        ArrayList&lt;Double&gt; redList = manager.send(55.687,3);        one.receive(redList);        two.receive(redList);        three.receive(redList);        manager.show();        one.show();        two.show();        three.show();    }}</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Java继承的概念，特点</li><li>extends关键字的使用</li><li>继承后成员变量成员方法构造方法的访问特点</li><li>方法的覆盖重写</li><li>super和this关键字的使用</li><li>抽象类，抽象方法的概念</li><li>abstract关键字的使用</li><li>综合案例练习</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的常用工具类</title>
      <link href="/2019/04/19/javabasics/java-zhong-de-chang-yong-lei/"/>
      <url>/2019/04/19/javabasics/java-zhong-de-chang-yong-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="1-String类概述"><a href="#1-String类概述" class="headerlink" title="1. String类概述"></a>1. String类概述</h2><p>java.lang.String 类代表字符串。Java程序中所有的字符串文字都可以被看作是实现此类的实例。<br><br>类String中包括用于检查各个字符串的方法，比如用于比较字符串、搜索字符串、提取子字符串以及创建具有翻译为大写或者小写的所有字符的字符串副本。</p><a id="more"></a><h3 id="1-1-字符串的特点"><a href="#1-1-字符串的特点" class="headerlink" title="1.1 字符串的特点"></a>1.1 字符串的特点</h3><ol><li>字符串的内容永不可变。</li><li>因为不可变，所以字符串是可以共享的</li><li>字符串效果上相当于是char[]字符数组，但底层原理是byte[]字节数组。</li></ol><h3 id="1-2-创建字符串的常见3-1种方式"><a href="#1-2-创建字符串的常见3-1种方式" class="headerlink" title="1.2 创建字符串的常见3+1种方式"></a>1.2 创建字符串的常见3+1种方式</h3><h4 id="三种构造方法"><a href="#三种构造方法" class="headerlink" title="三种构造方法"></a>三种构造方法</h4><ol><li>public String(): 创建一个空白字符串，不含有任何内容。</li><li>public String(char[] array)：根据字符数组的内容，来创建对应的字符串。</li><li>public String(byte[] array): 根据字节数组的内容，来创建对应的字符串。<h4 id="一种直接创建："><a href="#一种直接创建：" class="headerlink" title="一种直接创建："></a>一种直接创建：</h4><code>String str = "Hello";</code></li></ol><pre><code class="java">public class Demo02StringTwo {    public static void main(String[] args) {        String str1 = "abc";        String str2 = "abc";        char[] charArray = {'a','b','c'};        String str3 = new String(charArray);    }}</code></pre><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/19/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E5%AD%98%E5%9B%BE-1555640143003.png" alt="title"></p><h3 id="1-3-常用方法"><a href="#1-3-常用方法" class="headerlink" title="1.3 常用方法"></a>1.3 常用方法</h3><h4 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h4><ul><li><p>public boolean equals(Object Obj):参数可以是任何对象，只有参数是一个字符串且内容相同时返回true，反之false。<br><code>`</code>java<br>public class Demo03StringEquals {<br>  public static void main(String[] args) {</p><pre><code>  String str1 = "Hello";  String str2 = "Hello";  char[] charArray = {'H','e','l','l','o'};  String str3 = new String(charArray);  System.out.println(str1.equals(str2));  System.out.println(str2.equals(str3));  System.out.println(str3.equals("Hello"));  System.out.println("Hello".equals(str3));  String str4 = null;  System.out.println("abc".equals(str4)); // false 推荐写法  System.out.println(str4.equals("abc")); // 报错，NullPointerException</code></pre><p>  }<br>}<br>注意事项：</p></li></ul><ol><li>任何对象都能用Object进行接收。</li><li>equals方法具有对称性，也就是a.equals(b)和b.equals(a)效果是一样的。</li><li>如果比较双方一个常量一个变量，推荐把常量字符串写在前面。<br>推荐：”abc”.equals(str),不推荐:str.equals(“abc”)。<br><code>`</code></li></ol><ul><li>public boolean equalsIgnoreCase(String anotherString):将此字符串与指定对象进行比较，忽略大小写。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/19/equalsIgnoreCase-1555643567275.png" alt="title"></li></ul><h4 id="String当中与获取相关的常用方法"><a href="#String当中与获取相关的常用方法" class="headerlink" title="String当中与获取相关的常用方法"></a>String当中与获取相关的常用方法</h4><ul><li>public int lenght(); 获取字符串当中含有的字符个数，拿到字符串长度。</li><li>public String concat(String str); 将指定的字符串连接到该字符串的末尾。</li><li>public char charAt(int index); 获取指定索引位置的单个字符。</li><li>public int indexOf(String str); 查找参数字符串在本字符串当中首次出现的索引位置，如果没有返回-1值。</li></ul><p>举例代码如下：</p><pre><code class="java">public class Demo04StringGet {    public static void main(String[] args) {        int length = "abcdefghijklmnobqrstuvwxyz".length();        System.out.println("字符串长度为：" + length);        //拼接字符串        String str1 = "Hello";        String str2 = "World";        String str3 = str1.concat(str2);        System.out.println(str1); // Hello        System.out.println(str2); // World        System.out.println(str3); // HelloWorld        System.out.println("Hello".charAt(0)); // H        String str4 = str3;        System.out.println(str4.indexOf("llo")); //返回索引位置，即2    }}</code></pre><ul><li>public String substring(int index):截取从参数位置一直到字符串末尾，返回新字符串</li><li>public String substring(int begin,int end):截取从begin开始，一直到end结束，中间的字符串。[begin,end)，包含左边，不包含右边。</li></ul><p>举例代码如下：</p><pre><code class="java">public class Demo05SubString {    public static void main(String[] args) {        String str1 = "HelloWorld";        System.out.println(str1.substring(5)); // 返回World        System.out.println(str1.substring(4,7)); // owo , 4~6不含7    }}</code></pre><h4 id="String当中与转换相关的常用方法"><a href="#String当中与转换相关的常用方法" class="headerlink" title="String当中与转换相关的常用方法"></a>String当中与转换相关的常用方法</h4><ul><li>public char[] toCharArray(); 将当前字符串拆分成为字符数组作为返回值。</li><li>public byte[] getBytes(); 获取当前字符串底层的字节数组。</li><li>public String replace(CharSequence oldString, CharSequence newString);将所有出现的老字符串替换为新的字符串，返回替换后的结果新字符串。</li></ul><p>例子：</p><pre><code class="java">public class Demo06StringConvert {    public static void main(String[] args) {        char[] chars = "Hello".toCharArray();        System.out.println(chars); // Hello        System.out.println(chars[0]); // H        System.out.println(chars.length); // 5        System.out.println("=========================");        String str = "abc";        byte[] bytes = str.getBytes();        System.out.println(bytes); //指向内存地址中abc对应的byte值        System.out.println(bytes[0]); // [0] = 97,[1] = 98,[2] = 99        String str2 = "你怎么回事小老弟，会不会玩啊，fuck";        System.out.println(str2.replace("fuck","儒雅随和"));    }}Tips：CharSequence意思是说可以接受字符串类型。是一个接口，也是一种引用类型。作为参数类型，可以把String对象传递到方法中。</code></pre><h4 id="String中分割字符串的方法"><a href="#String中分割字符串的方法" class="headerlink" title="String中分割字符串的方法"></a>String中分割字符串的方法</h4><p>public String[] split(String regex); 按照参数的规则，将字符串切分为若干部分。</p><pre><code class="java">public class Demo07StringSplit {    public static void main(String[] args) {        String str1 = "a,b,c";        String[] array1 = str1.split(",");        for(int i = 0;i&lt;array1.length;i++){            System.out.println(array1[i]);        }        String str2 = "a b c";        String[] array2 = str2.split(" ");        for(int i=0;i&lt;array2.length;i++){            System.out.println(array2[i]);        }        String str3 = "XXX.YYY.ZZZ";        String[] array3 = str3.split("\\."); //注意转义        for (int i=0;i&lt;array3.length;i++){            System.out.print(array3[i]);        }    }}</code></pre><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p>拼接字符串练习，输入数组{1,2,3}，返回[1#2#3]。</p><pre><code>public class Demo08StringExercise {    public static void main(String[] args) {        int[] arr = {1,2,3,4};        System.out.println(arrayToString(arr));    }    public static String arrayToString(int[] arr){        String str = "[";        for (int i=0;i&lt;arr.length;i++){            if(i != arr.length-1){                str += (arr[i]+"#");            }else{                str += (arr[i]+"]");            }        }        return str;    }}</code></pre><p>统计字符个数：键盘录入一个字符，统计字符串中大小写字母及数字字符个数</p><pre><code class="java">import java.util.Scanner;/*键盘输入一个字符串，统计其中各种字符出现次数，返回次数。字符种类：大写字母，小写字母，数字，其他 */public class Demo09StringExercise02 {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        System.out.println("请输入字符串：");        String input = sc.next(); // 获取键盘输入的字符串        System.out.println(stringCount(input));    }    public static String stringCount(String input){        int countUpper = 0;        int countLower = 0;        int countNumber = 0;        int countOther = 0;        char[] chars = input.toCharArray();        for(int i = 0;i &lt; chars.length;i++){            char ch = chars[i]; // 单个字符，底层表示为byte[]数值            if(ch &gt;= 'A' &amp;&amp; ch &lt;= 'Z'){                countUpper++;            }else if (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z'){                countLower++;            }else if (ch &gt;= '0' &amp;&amp; ch &lt;= '9'){                countNumber++;            }else{                countOther++;            }        }        return "大写字母："+countUpper+"\n小写字母："+countLower+"\n数字:"+countNumber+"\n其他类型："+countOther;    }}</code></pre><h2 id="2-static关键字"><a href="#2-static关键字" class="headerlink" title="2. static关键字"></a>2. static关键字</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>关于static关键字的使用，它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属于某个对象的。也就是说，既然属于类，就不可以靠创建对象来调用了。</p><h3 id="2-2定义和使用格式"><a href="#2-2定义和使用格式" class="headerlink" title="2.2定义和使用格式"></a>2.2定义和使用格式</h3><p>当static修饰成员变量时，该变量称为类变量。该类的每个对象都共享同一个类变量的值。任何对象都可以更改该类变量的值，但也可以在不创建该类对象的情况下对类变量进行操作。</p><h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><ul><li>类变量：使用static关键字修饰的成员变量。格式：static 数据类型 变量名。</li></ul><p>实例：</p><pre><code class="java">//定义学生类public class Student {    private int sid; //学号    private String name;    private int age;    static String room;    public static int idCount = 0; //自动分配学号    public Student() {        this.sid = ++idCount;    }    public Student(String name, int age) {        this.name = name;        this.age = age;        this.sid = ++idCount;    }    ......省略get/set方法}//实例使用public class Demo10Class {    public static void main(String[] args) {        Student stu = new Student("法师",11);        stu.room = "101号教室";        System.out.println("姓名："+stu.getName()+",年龄:"+stu.getAge()+"岁,教室："+stu.getRoom()+",学号："+stu.getSid());        Student stu2 = new Student("盗贼",15);        System.out.println("姓名："+stu2.getName()+",年龄:"+stu2.getAge()+"岁,教室："+stu2.getRoom()+",学号："+stu2.getSid());    }}</code></pre><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>当static修饰成员方法时，该方法称为类方法。静态方法在声明中有static，建议使用类名来调用，而不需要创建类的对象。</p><ul><li>类方法：使用static关键字修饰的成员方法，一般称为静态方法。<br>格式如下：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/19/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95-1555663220471.png" alt="title"></li></ul><p>实例：</p><pre><code class="java">//MyClasspublic class MyClass {    int num; // 成员变量    static int numStatic; //静态变量    public void method(){        System.out.println("这是一个成员方法！");        System.out.println(num); //成员方法可以访问成员变量        System.out.println(numStatic); // 成员方法可以访问静态变量    }    public static void methodStatic(){        System.out.print("这是一个静态方法！");        System.out.println(numStatic); //静态方法可以访问静态变量        //System.out.println(num); //静态方法无法访问成员变量    }}//实例类public class Demo01StaticMethod {    public static void main(String[] args) {        MyClass obj = new MyClass(); // 首先创建对象        obj.method(); // 才能使用没有static关键字的内容        //对于静态方法来说，可以通过对象名进行调用，也可以直接通过类名称来调用。        obj.methodStatic(); // 不推荐写法，编译器编译时会自动优化为下面方法。        MyClass.methodStatic(); // 推荐写法，类名称.静态方法。        // 对于本类当中的静态方法，可以省略名称        myMethod();        Demo01StaticMethod.myMethod(); // 完全等效于上面    }    public static void myMethod(){        System.out.println("自己的方法!");    }}</code></pre><ul><li>静态方法调用总结：<ul><li>静态方法可以直接访问类变量和静态方法。</li><li>静态方法不能直接访问普通成员变量或成员方法。原因：因为在内存中是[先]有的静态内容，[后]有的非静态内容,”前人不知后事，后人尽知前史”。</li><li>静态方法中，不能使用this关键字。</li><li>无论是成员变量，还是成员方法。如果有了static，都推荐使用类名称进行调用。静态变量：类名称.静态变量；静态方法：类名称.静态方法();</li></ul></li></ul><h4 id="2-3-静态原理图解"><a href="#2-3-静态原理图解" class="headerlink" title="2.3 静态原理图解"></a>2.3 静态原理图解</h4><p>static修饰的内容：</p><ul><li>是随着类的加载而加载的，且只加载一次。</li><li>存储于一块固定的内存区域(静态区),所以，可以直接被类名调用。</li><li>它优先于对象存在，所以，可以被所有对象共享。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/19/static%E5%86%85%E5%AD%98%E5%9B%BE-1555683796541.png" alt="title"></li></ul><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><ul><li>静态代码块：定义在成员位置，使用static修饰的代码块{}。<ul><li>位置：类中方法外。</li><li>执行：随着类的加载而执行且只执行一次，优先于main方法和构造方法的执行。</li></ul></li><li>格式：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/19/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97-1555684497323.png" alt="title"></li><li>作用：用来一次性地对静态成员变量进行赋值。</li></ul><h2 id="3-Arrays类"><a href="#3-Arrays类" class="headerlink" title="3. Arrays类"></a>3. Arrays类</h2><p>java.util.Arrays此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法，调用起来非常简单。</p><h3 id="3-1-操作数组的方法"><a href="#3-1-操作数组的方法" class="headerlink" title="3.1 操作数组的方法"></a>3.1 操作数组的方法</h3><ul><li>public static String toString(int[] a): 返回指定数组内容的字符串表示形式。</li><li>public static void sort(int[] a): 对指定的int型数组按数字升序进行排序。</li></ul><p>举例：</p><pre><code class="java">import java.util.Arrays;public class Demo03Arrays {    public static void main(String[] args) {        int[] arr = {1,3,54,86,37,28};        System.out.println(arr); // 打印数组内存地址        String str = Arrays.toString(arr); //将指定数组内容变成字符串返回。        System.out.println(str);        int[] arr2 = {2,5,3,8,4,9,1};        Arrays.sort(arr2); // 升序排序        System.out.println(Arrays.toString(arr2)); // [1, 2, 3, 4, 5, 8, 9]    }}</code></pre><h4 id="小练习-1"><a href="#小练习-1" class="headerlink" title="小练习"></a>小练习</h4><p>对一个随机字符串进行升序排序，然后倒序输出</p><pre><code class="java">import java.util.Arrays;public class Demo04ArraysExercise {    public static void main(String[] args) {        String str = "ehiaroaklcmbzhywqiem";        char[] chars = str.toCharArray();        Arrays.sort(chars); // 对字符串进行升序排序        System.out.println(chars);        for (int i = chars.length - 1; i &gt;= 0; i--) { //快捷键:[chars.forr] , 对chars对象进行倒序遍历; [fori],正序遍历            System.out.print(chars[i]);        }    }}</code></pre><h2 id="4-Math类"><a href="#4-Math类" class="headerlink" title="4. Math类"></a>4. Math类</h2><p>java.lang.Math类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具类，里面提供了大量的静态方法，完成与数学运算的操作。</p><h3 id="4-1-基本运算的方法"><a href="#4-1-基本运算的方法" class="headerlink" title="4.1 基本运算的方法"></a>4.1 基本运算的方法</h3><ul><li>public static double abs(double num): 返回绝对值。</li><li>public static double ceil(double num): 向上取整。</li><li>public static double floor(double num): 向下取整。</li><li>public static double round(double num): 四舍五入。</li></ul><p>实例：</p><pre><code class="java">public class Demo05Math {    public static void main(String[] args) {        System.out.println("以下示例abs用法");        System.out.println(Math.abs(3.14)); // 3.14        System.out.println(Math.abs(-2.5)); // 2.5        System.out.println(Math.abs(0)); // 0        System.out.println("以下示例ceil用法");        System.out.println(Math.ceil(3.9)); // 4.0        System.out.println(Math.ceil(3.1)); // 4.0        System.out.println(Math.ceil(3.0)); // 3.0        System.out.println("以下示例floor用法");        System.out.println(Math.floor(30.9)); // 30.0        System.out.println(Math.floor(30.1)); // 30.0        System.out.println(Math.floor(31.0)); // 31.0        System.out.println("以下示例round用法");        System.out.println(Math.round(20.4)); //20        System.out.println(Math.round(20.5)); //21        System.out.println("圆周率：" + Math.PI);    }}</code></pre><h4 id="小练习-2"><a href="#小练习-2" class="headerlink" title="小练习"></a>小练习</h4><p>请使用 Math 相关的API，计算在 -10.8 到 5.9 之间，绝对值大于 6 或者小于 2.1 的整数有多少个？</p><pre><code class="java">public class Demo06mathExercise {    public static void main(String[] args) {        double min = -10.8;        double max = 5.9;        int num = 0;        for (int i = (int)min; i &lt; max; i++) {            int abs = Math.abs(i); // 绝对值化            if(abs &gt; 6 || abs &lt;2.1){                num++;            }        }        System.out.println(num);    }}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="字符串类及常用方法API"><a href="#字符串类及常用方法API" class="headerlink" title="字符串类及常用方法API"></a>字符串类及常用方法API</h3><ol><li>public String(): 创建一个空白字符串，不含有任何内容。</li><li>public String(char[] array)：根据字符数组的内容，来创建对应的字符串。</li><li>public String(byte[] array): 根据字节数组的内容，来创建对应的字符串</li><li>public boolean equals(Object Obj):参数可以是任何对象，只有参数是一个字符串且内容相同时返回true，反之false。</li><li>public boolean equalsIgnoreCase(String anotherString):将此字符串与指定对象进行比较，忽略大小写。</li><li>public int lenght(); 获取字符串当中含有的字符个数，拿到字符串长度。</li><li>public String concat(String str); 将指定的字符串连接到该字符串的末尾。</li><li>public char charAt(int index); 获取指定索引位置的单个字符。</li><li>public int indexOf(String str); 查找参数字符串在本字符串当中首次出现的索引位置，如果没有返回-1值。</li><li>public String substring(int index):截取从参数位置一直到字符串末尾，返回新字符串。</li><li>public String substring(int begin,int end):截取从begin开始，一直到end结束，中间的字符串。[begin,end)，包含左边，不包含右边。</li><li>public char[] toCharArray(); 将当前字符串拆分成为字符数组作为返回值。</li><li>public byte[] getBytes(); 获取当前字符串底层的字节数组。</li><li>public String replace(CharSequence oldString, CharSequence newString);将所有出现的老字符串替换为新的字符串，返回替换后的结果新字符串。</li><li>public String[] split(String regex); 按照参数的规则，将字符串切分为若干部分。</li></ol><h3 id="static关键字及常用方法"><a href="#static关键字及常用方法" class="headerlink" title="static关键字及常用方法"></a>static关键字及常用方法</h3><ol><li>类变量：使用static关键字修饰的成员变量。格式：static 数据类型 变量名；</li><li>类方法：使用static关键字修饰的成员方法，一般称为静态方法。</li></ol><h3 id="Arrays类操作数组的常用方法"><a href="#Arrays类操作数组的常用方法" class="headerlink" title="Arrays类操作数组的常用方法"></a>Arrays类操作数组的常用方法</h3><ol><li>public static String toString(int[] a): 返回指定数组内容的字符串表示形式。</li><li>public static void sort(int[] a): 对指定的int型数组按数字升序进行排序。</li></ol><h3 id="Math类常用方法"><a href="#Math类常用方法" class="headerlink" title="Math类常用方法"></a>Math类常用方法</h3><ol><li>public static double abs(double num): 返回绝对值。</li><li>public static double ceil(double num): 向上取整。</li><li>public static double floor(double num): 向下取整。</li><li>public static double round(double num): 四舍五入。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API概述</title>
      <link href="/2019/04/18/javabasics/api-gai-shu/"/>
      <url>/2019/04/18/javabasics/api-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>API(Application Programming Interface)，应用程序编程接口。Java API是一本API字典，是JDK中提供给我们使用类的说明文档。这些类将底层的代码实现封装了起来，我们不用关心类是如何实现的，只需学习这些类如何使用即可。</p><a id="more"></a><h3 id="API使用步骤"><a href="#API使用步骤" class="headerlink" title="API使用步骤"></a>API使用步骤</h3><ol><li>打开帮助文档。</li><li>点击显示，找到索引，看到输入框。</li><li>输入你要查询的类名。</li><li>看包。java.lang下的类不需要导包，其他都要import</li><li>看类的解释和说明。</li><li>学习构造方法。</li><li>使用成员方法。</li></ol><h2 id="2-Scanner类"><a href="#2-Scanner类" class="headerlink" title="2. Scanner类"></a>2. Scanner类</h2><h3 id="2-1-什么是Scanner类？"><a href="#2-1-什么是Scanner类？" class="headerlink" title="2.1 什么是Scanner类？"></a>2.1 什么是Scanner类？</h3><p>一个可以解析基本类型和字符串的简单文本扫描器。如下代码能够使用户从System.in中获取数据：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/18/Scanner-1555573837528.png" alt="title"><br><br>System.in系统输入指的是通过键盘录入数据。</p><h3 id="2-2-引用类型使用步骤"><a href="#2-2-引用类型使用步骤" class="headerlink" title="2.2 引用类型使用步骤"></a>2.2 引用类型使用步骤</h3><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><p>使用import关键字导包，在类的所有代码之前导包，引入要使用的类型，java.lang包下的所有类无需导入。格式：import 包名.类名;</p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>使用该类的构造方法，创建一个该类的对象。格式：数据类型 变量名 = new 数据类型(参数列表);</p><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p>调用该类的成员方法，完成指定功能。格式：变量名.方法名();</p><h3 id="2-3-Scanner使用步骤"><a href="#2-3-Scanner使用步骤" class="headerlink" title="2.3 Scanner使用步骤"></a>2.3 Scanner使用步骤</h3><ul><li>java.util.Scanner:该类需要import导入后使用。</li><li>public Scanner(InputStream source):构造一个新的Scanner，它生成的值是从指定的输入流扫描的。</li><li>public int nextInt():将输入信息的下一个标记扫描为一个int值。</li></ul><p>举例：</p><pre><code class="java">import java.util.Scanner;public class Demo03ScannerMax {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        int Max = 0;        for(int i = 1;i &lt; 4;i++){            System.out.println("请输入第" + i + "个数字：");            int temp = sc.nextInt();            if(temp &gt; Max){                Max = temp;            }        }        System.out.println("最大数是：" + Max);    }}</code></pre><h3 id="2-4-匿名对象"><a href="#2-4-匿名对象" class="headerlink" title="2.4 匿名对象"></a>2.4 匿名对象</h3><p>匿名对象就是创建对象时，只有创建对象的语句，却没有把对象地址赋值给某个变量。没有变量名的对象就是匿名对象。</p><ul><li>格式：new 类名(参数列表);<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4></li></ul><ol><li>创建匿名对象直接调用方法，没有变量名。举例：new Scanner(System.in).nextInt();</li><li>一旦调用两次方法，就是创建了两个对象，语句执行完毕即对象销毁。</li><li>匿名对象可以作为方法的参数和返回值。<h4 id="作为参数："><a href="#作为参数：" class="headerlink" title="作为参数："></a>作为参数：</h4><pre><code class="java">class Test { public static void main(String[] args) {     // 普通方式     Scanner sc = new Scanner(System.in); input(sc);  //匿名对象作为方法接收的参数 input(new Scanner(System.in)); } public static void input(Scanner sc){ System.out.println(sc); }}</code></pre><h4 id="作为返回值："><a href="#作为返回值：" class="headerlink" title="作为返回值："></a>作为返回值：</h4><pre><code class="java">public static Scanner getScanner(){     return new Scanner(System.in); }</code></pre></li></ol><h2 id="3-Random类"><a href="#3-Random类" class="headerlink" title="3. Random类"></a>3. Random类</h2><h3 id="3-1-什么是Random类"><a href="#3-1-什么是Random类" class="headerlink" title="3.1 什么是Random类"></a>3.1 什么是Random类</h3><p>此类的实例用于生产伪随机数。如下代码使用户能够得到一个随机数：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/18/Random-1555577504861.png" alt="title"></p><h3 id="3-2-Random使用三步骤"><a href="#3-2-Random使用三步骤" class="headerlink" title="3.2 Random使用三步骤"></a>3.2 Random使用三步骤</h3><ol><li>导包：import java.util.Random;</li><li>创建:Random r = new Random();</li><li>使用:获取一个随机的int数字(范围是int所有范围，有正负两种),int num = r.nextInt();</li></ol><p>举例如下：</p><pre><code class="java">public class Demo05Random {    public static void main(String[] args) {        int a = 0;        while(a &lt; 100){            System.out.println("随机数是：" + new Random().nextInt());            a++;        }    }}</code></pre><p>获取一个随机的int数字(参数代表了范围，左闭右开区间):int num = r.nextInt(3)实际含义是：[0,3),也就是0~2。</p><h4 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h4><pre><code class="java">import java.util.Random;import java.util.Scanner;public class Demo06guessNumber {    public static void main(String[] args) {        int number = new Random().nextInt(100) + 1;        int count = 0;        while (true){            System.out.println("请输入你要猜的数字(1-100)：");            int guessNumber = new Scanner(System.in).nextInt();            if(guessNumber &gt; number){                System.out.println("You enter number is big , again! ");            }else if(guessNumber &lt; number){                System.out.println("You enter number is small , again!");            }else{                System.out.println("Bin1go！你使用了" + count + "次。");                break;            }            count++;        }    }}</code></pre><h2 id="3-ArrayList类"><a href="#3-ArrayList类" class="headerlink" title="3. ArrayList类"></a>3. ArrayList类</h2><h3 id="3-1-什么是ArrayList类？"><a href="#3-1-什么是ArrayList类？" class="headerlink" title="3.1 什么是ArrayList类？"></a>3.1 什么是ArrayList类？</h3><p>java.util.ArrayList是大小可变的数组的实现，存储在内的数据称为元素。此类提供一些方法来操作内部存储的元素。Array中可不断添加元素，其大小也自动增长。</p><h3 id="3-2-ArrayList使用步骤"><a href="#3-2-ArrayList使用步骤" class="headerlink" title="3.2 ArrayList使用步骤"></a>3.2 ArrayList使用步骤</h3><ul><li>java.util.ArrayList<e>:该类需要import导入后使用。<br><br><e>,表示一种指定的数据类型，叫做泛型。E，取自Element(元素)的首字母。在出现E的地方，我们使用一种引用数据类型将其替换即可，表示我们将存储哪种引用类型的元素。</e></e></li><li>基本格式：ArrayList<string> list = new ArrayList<string>();JDK7以后，右边泛型的尖括号可以留空，但&lt;&gt;仍要写。ArrayList<string> list = new ArrayList&lt;&gt;();<h3 id="3-3-常用方法和遍历"><a href="#3-3-常用方法和遍历" class="headerlink" title="3.3 常用方法和遍历"></a>3.3 常用方法和遍历</h3>对于元素的操作，基本体现在增、删、查。常用方法如下：</string></string></string></li><li>public boolean add(E e);向集合当中添加元素，参数的类型和泛型一致。返回值代表添加是否成功。</li><li>public E get(int index);从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素。</li><li>public E remove(int index);从集合中删除元素，参数是索引，返回值就是被删除的元素。</li><li>public int size();获取集合的尺寸长度，返回值是集合中包含的元素个数。</li></ul><h3 id="3-4-存储基本数据类型"><a href="#3-4-存储基本数据类型" class="headerlink" title="3.4 存储基本数据类型"></a>3.4 存储基本数据类型</h3><p>ArrayList对象不能存储基本类型，只能存储引用类型的数据。类似<int>不能写，但是存储基本数据类型对应的包装类型是可以的。所以，想要存储基本类型数据，&lt;&gt;中的数据类型，必须转换后才能编写。转换写法如下：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/18/%E6%95%B0%E7%BB%84%E9%9B%86%E5%90%88%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E5%8C%85%E8%A3%85%E7%B1%BB-1555590027103.png" alt="title"><br><br>可以发现，只有Integer和Character需要特殊记忆，其他基本类型只是首字母大写即可。那么存储基本类型数据，代码如下：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/18/Integer%E4%BD%BF%E7%94%A8%E8%B7%9D%E7%A6%BB-1555590228509.png" alt="title"><br></int></p><h4 id="自定义格式打印集合内容"><a href="#自定义格式打印集合内容" class="headerlink" title="自定义格式打印集合内容"></a>自定义格式打印集合内容</h4><pre><code class="java">import java.util.ArrayList;public class DemoPrintArrayList {    public static void main(String[] args) {        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("盗贼");        list.add("法师");        list.add("术士");        list.add("战士");        print(list);    }    public static void print(ArrayList&lt;String&gt; list){        System.out.print("{");        for (int i = 0;i &lt; list.size();i++){            if (i != list.size()-1){                System.out.print(list.get(i)+ "@");            }else {                System.out.print( list.get(i)+ "}");            }        }    }}</code></pre><h4 id="定义获取偶数元素集合方法"><a href="#定义获取偶数元素集合方法" class="headerlink" title="定义获取偶数元素集合方法"></a>定义获取偶数元素集合方法</h4><pre><code class="java">import java.util.ArrayList;import java.util.Random;/*定义获取所有偶数元素集合的方法(ArrayList类型作为返回值) */public class DemoGetEvenNumber {    public static void main(String[] args) {        ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();        for(int i = 0;i &lt; 20;i++){            list.add(new Random().nextInt(1000)+1);        }        System.out.println(list);        System.out.print(getEvenNumber(list));    }    public static ArrayList&lt;Integer&gt; getEvenNumber(ArrayList&lt;Integer&gt; list){        ArrayList&lt;Integer&gt; Even = new ArrayList&lt;&gt;();        for(int i = 0;i &lt; list.size();i++){            if(list.get(i) %2 == 0){                Even.add(list.get(i));            }        }        return Even;    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类和对象</title>
      <link href="/2019/04/17/javabasics/java-lei-he-dui-xiang/"/>
      <url>/2019/04/17/javabasics/java-lei-he-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象思想"><a href="#1-面向对象思想" class="headerlink" title="1. 面向对象思想"></a>1. 面向对象思想</h2><h3 id="1-1-面向对象思想概述"><a href="#1-1-面向对象思想概述" class="headerlink" title="1.1 面向对象思想概述"></a>1.1 面向对象思想概述</h3><p>Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计，开发计算机程序。这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现。</p><a id="more"></a><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul><li>洗衣服：<ul><li>面向过程：把衣服脱下来–&gt;找一个盆–&gt;放点洗衣粉–&gt;加点水–&gt;浸泡10分钟–&gt;揉一揉–&gt;清洗衣服–&gt;拧干–&gt;晾起来</li><li>面向对象：把衣服脱下来–&gt;打开全自动洗衣机–&gt;放衣服–&gt;开启洗衣机–&gt;晾起来</li></ul></li><li>区别：<ul><li>面向过程：强调步骤</li><li>面向对象：强调对象，这里对象指洗衣机<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。面向对象的语言中，包含了三大基本特征，即封装、继承和多态。</li></ul></li></ul><h3 id="1-2-类和对象"><a href="#1-2-类和对象" class="headerlink" title="1.2 类和对象"></a>1.2 类和对象</h3><h4 id="什么是类？"><a href="#什么是类？" class="headerlink" title="什么是类？"></a>什么是类？</h4><ul><li>类：是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。</li><li>属性：就是该类事物的状态信息</li><li>行为：就是该类事物能够做什么事</li><li>举例：小猫。属性：名字，颜色，年龄，体重。行为：走，跳，叫，吃。<h4 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h4></li><li>对象：是一类事物的具体体现。对象是类的一个实例，必然具备该类事物的属性和行为。</li><li>现实中，一类事物(猫类)的一个实例:一只小猫。</li><li>举例：一只小猫。属性：tom，5kg，2years，yellow。行为：反复横跳，喵喵叫，吃饭。<h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4></li><li>类是对一类事物的描述，是抽象的。</li><li>对象是一类事物的实例，是具体的，实际存在的。</li><li>类是对象的模板，对象是类的实体。</li></ul><h3 id="1-3-类的定义"><a href="#1-3-类的定义" class="headerlink" title="1.3 类的定义"></a>1.3 类的定义</h3><h4 id="事物与类的对比"><a href="#事物与类的对比" class="headerlink" title="事物与类的对比"></a>事物与类的对比</h4><p>现实世界的一类事物：</p><ul><li>属性：事物的状态信息。</li><li>行为：事物能够做什么。<br>Java中用class描述事物也是如此：</li><li>成员变量：对应事物的属性。</li><li>成员方法：对应事物的行为。<h4 id="类的定义格式"><a href="#类的定义格式" class="headerlink" title="类的定义格式"></a>类的定义格式</h4><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/%E7%B1%BB%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F-1555469808569.png" alt="title"></li><li>定义类：就是定义类的成员，包括成员变量和成员方法。</li><li>成员变量：和以前定义变量几乎是一样的。只不过位置发生了改变。在类中，方法外。</li><li><p>成员方法：和以前定义方法几乎一样的。只不过把static去掉。<br><br>举例：</p><pre><code class="java">public class Student {  //成员变量;  String name; // 姓名  int age; //年龄  //成员方法  public void eat(){      System.out.println("吃饭饭");  }  public void sleep(){      System.out.println("睡觉觉");  }  public void study() {      System.out.println("学习");  }}</code></pre></li></ul><h3 id="1-4-对象的使用"><a href="#1-4-对象的使用" class="headerlink" title="1.4 对象的使用"></a>1.4 对象的使用</h3><h4 id="对象的使用格式"><a href="#对象的使用格式" class="headerlink" title="对象的使用格式"></a>对象的使用格式</h4><ul><li>使用步骤1，导包：也就是指出需要使用的类，在什么位置，同一包下可省略导包步骤。<br>import 包名称.类名称;<br>import com.zero.demo.demo03_Class.Student;</li><li>步骤2，创建对象：类名 对象名 = new 类名();</li><li>步骤3，使用对象访问类中成员:<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E7%B1%BB%E4%B8%AD%E6%88%90%E5%91%98-1555470287058.png" alt="title"></li></ul><p>举例：</p><pre><code class="java">public class Demo03Student {    public static void main(String[] args){        Student stu = new Student();        System.out.println(stu.name = "校长");        System.out.println(stu.age = 55);        stu.eat();        stu.sleep();        stu.study();    }}</code></pre><p>注意：如果成员变量没有进行赋值，那么将会有一个默认值，规则和数组一样。</p><h4 id="成员变量的默认值"><a href="#成员变量的默认值" class="headerlink" title="成员变量的默认值"></a>成员变量的默认值</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E9%BB%98%E8%AE%A4%E5%80%BC-1555471157001.png" alt="title"></p><h3 id="1-5-对象内存图"><a href="#1-5-对象内存图" class="headerlink" title="1.5 对象内存图"></a>1.5 对象内存图</h3><p>一个对象，调用一个方法内存图：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE-1555472618000.png" alt="title"><br>两个对象，调用一个方法内存图：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/two%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE-1555482190913.png" alt="title"><br>两个引用指向同一个对象的内存图：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/%E4%B8%A4%E4%B8%AA%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E5%AF%B9%E8%B1%A1-1555482832109.png" alt="title"><br>使用对象类型作为方法的参数：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0-1555484961711.png" alt="title"></p><h3 id="1-6-成员变量和局部变量的区别"><a href="#1-6-成员变量和局部变量的区别" class="headerlink" title="1.6 成员变量和局部变量的区别"></a>1.6 成员变量和局部变量的区别</h3><p>变量根据定义位置的不同，变量有不同的名字</p><ul><li>在类中的位置不同<em>重点</em><ul><li>成员变量：类中，方法外</li><li>局部变量：方法中或者方法声明上(形参)</li></ul></li><li>作用范围不一样<em>重点</em><ul><li>成员变量：类中</li><li>局部变量：方法中</li></ul></li><li>初始化值的不同<em>重点</em><ul><li>成员变量：有默认值</li><li>局部变量：无默认值。必须先定义，赋值，才能使用。</li></ul></li><li>在内存中的位置不同(了解)<ul><li>成员变量：堆内存</li><li>局部变量：栈内存</li></ul></li><li>生命周期不同(了解)<ul><li>成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失</li><li>局部变量：随着方法进栈而诞生，随着方法出栈而消失<h2 id="2-三大特征之一：封装"><a href="#2-三大特征之一：封装" class="headerlink" title="2. 三大特征之一：封装"></a>2. 三大特征之一：封装</h2><h3 id="2-1-封装概述"><a href="#2-1-封装概述" class="headerlink" title="2.1 封装概述"></a>2.1 封装概述</h3>面向对象编程语言是对象客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。<br>封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性。<h4 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h4>将属性隐藏起来，若需要访问某个属性，提供公共方法对其访问。<h3 id="2-2-封装的步骤"><a href="#2-2-封装的步骤" class="headerlink" title="2.2 封装的步骤"></a>2.2 封装的步骤</h3></li></ul></li></ul><ol><li>使用private关键字来修饰成员变量。</li><li>对需要访问的成员变量，提供对应的一对getxxx方法、setxxx方法。</li></ol><h3 id="2-3-封装的操作–private关键字"><a href="#2-3-封装的操作–private关键字" class="headerlink" title="2.3 封装的操作–private关键字"></a>2.3 封装的操作–private关键字</h3><h5 id="private的含义"><a href="#private的含义" class="headerlink" title="private的含义"></a>private的含义</h5><ol><li>private是一个权限修饰符，代表最小权限。</li><li>可以修饰成员变量和成员方法。</li><li>被private修饰后的成员变量和成员方法，只能在本类中才能访问。<h4 id="private的使用格式"><a href="#private的使用格式" class="headerlink" title="private的使用格式"></a>private的使用格式</h4><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/private%E4%BD%BF%E7%94%A8%E6%A0%BC%E5%BC%8F-1555489770741.png" alt="title"></li></ol><p>举例：</p><pre><code class="java">public class Student {private String name; // 使用private修饰成员变量private int age;}// 定义getxxx方法和setxxx方法，提供对外接口public class Student {    private String name;    private int age;    public void setName(String n) {    name = n;}    public String getName() {    return name;}    public void setAge(int a) {    age = a;}    public int getAge() {    return age;}}</code></pre><h3 id="2-4-封装优化–this关键字"><a href="#2-4-封装优化–this关键字" class="headerlink" title="2.4 封装优化–this关键字"></a>2.4 封装优化–this关键字</h3><p>如果方法形参和成员变量名一致，会导致成员变量赋值失败。 这是由于形参变量名与成员变量名重名，导致成员变量名被隐藏，方法中的变量名，无法访问到成员变量，从而赋值失败。我们需使用this关键字，来解决这个重名问题。</p><h4 id="this的含义"><a href="#this的含义" class="headerlink" title="this的含义"></a>this的含义</h4><p>this代表所在类的当前对象的引用(地址值)，即对象自己的引用。</p><ul><li>使用格式：this.成员变量名;</li></ul><p>举例:</p><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/this%E6%96%B9%E6%B3%95%E4%BC%98%E5%8C%96-1555491440061.png" alt="title"></p><h3 id="2-5-封装优化–构造方法"><a href="#2-5-封装优化–构造方法" class="headerlink" title="2.5 封装优化–构造方法"></a>2.5 封装优化–构造方法</h3><p>当一个对象被创建时，构造方法用来初始化该对象，给对象的成员变量赋初始值。</p><h4 id="构造方法的定义格式"><a href="#构造方法的定义格式" class="headerlink" title="构造方法的定义格式"></a>构造方法的定义格式</h4><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E6%A0%BC%E5%BC%8F-1555491533588.png" alt="title"><br><br>构造方法的写法上，方法名与它所在的类名相同。它没有返回值，所以不需要返回值类型，也不需要void。举例如下：</p><pre><code class="java">public class Student {    private String name;    private int age;    // 无参数构造方法    public Student() {}    // 有参数构造方法    public Student(String name,int age) {    this.name = name;    this.age = age;}}</code></pre><p>注意事项：</p><ol><li>构造方法的名称必须和所在的类名称完全一模一样。</li><li>构造方法不要写返回值类型，连void都不写。</li><li>构造方法不能return一个具体的返回值。</li><li>如果没有编写任何构造方法，那么编译器会默认生成一个，没有参数，方法体也为空。public Student(){}；</li><li>一般编写了至少一个构造方法，那么编译器将不再生成。</li></ol><h3 id="2-6-标准代码–JavaBean"><a href="#2-6-标准代码–JavaBean" class="headerlink" title="2.6 标准代码–JavaBean"></a>2.6 标准代码–JavaBean</h3><p>JavaBean是Java语言编写类的一种标志规范。符合JavaBean的类，要求类必须是具体的和公共的，并且具有无参数的构造方法，提供用来操作成员变量的set和get方法。所以一个标准类通常要拥有下面四个组成部分：</p><ol><li>所有的成员变量都要使用private关键字修饰。</li><li>为每个成员变量编写一对getxxx/setxxx方法。</li><li>编写一个无参数的构造方法。</li><li><p>编写一个全参数的构造方法。</p><pre><code class="java">public class ClassName{ //成员变量 //构造方法 //无参构造方法【必须】 //有参构造方法【建议】 //成员方法 //getXxx() //setXxx()}</code></pre><p>编写符合JavaBean规范的类，以学生类为例，标准代码如下：</p><pre><code class="java">public class JavaBeanStudent { private String name; private  int age; public JavaBeanStudent() { } public JavaBeanStudent(String name, int age) {     this.name = name;     this.age = age; } public String getName() {     return name; } public void setName(String name) {     this.name = name; } public int getAge() {     return age; } public void setAge(int age) {     this.age = age; }}</code></pre><p>以上代码可以通过Code-&gt;Generate功能自动生成：<br><br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/17/JavaBean%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90-1555493892266.png" alt="title"></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组</title>
      <link href="/2019/04/16/javabasics/java-shu-zu/"/>
      <url>/2019/04/16/javabasics/java-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="数组概念"><a href="#数组概念" class="headerlink" title="数组概念"></a>数组概念</h2><ul><li>数组的基本概念：数组就是存储数据长度固定的容器，包装多个数据的数据类型要一致。</li><li>容器：是将多个数据存储在一起，每个数据称为该容器的元素。</li><li>数组的特点：<ul><li>数组是一种引用数据类型。</li><li>数组当中的多个数据，类型必须统一。</li><li>数组的长度在程序运行期间不可改变。</li></ul></li></ul><a id="more"></a><h2 id="1-数组的定义和访问"><a href="#1-数组的定义和访问" class="headerlink" title="1. 数组的定义和访问"></a>1. 数组的定义和访问</h2><h3 id="1-1-数组的定义"><a href="#1-1-数组的定义" class="headerlink" title="1.1 数组的定义"></a>1.1 数组的定义</h3><ul><li>数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。</li><li>两种常见的初始化方式：<ul><li>动态初始化（指定长度）</li><li>静态初始化（指定内容）</li></ul></li><li>动态初始化格式：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96-1555383964746.png" alt="title"></li><li>数组定义格式详解：<ul><li>数组存储的数据类型：创建的数组容器可以存储什么数据类型。</li><li>[]:表示数组。</li><li>数组的名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</li><li>new：关键字，创建数组使用的关键字。</li><li>数组存储的数据类型：创建的数组容器可以存储什么数据类型。</li><li>[长度]：数组的长度，表示数组容器中可以存储多少个元素。</li><li>注意：数组有定长特性，长度一旦指定，不可更改。类似你买一个水杯，买了一个1升的水杯，总容量就是1升，不多不少。</li></ul></li><li>举例：定义可以存储3个整数的数组容器，代码如下：<pre><code class="java">int[] arr = new int[3];</code></pre></li><li>静态初始化标准格式：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96-1555384404508.png" alt="title"></li><li>举例：定义存储1,2,3,4,5整数的数组容器。<pre><code class="java">int[] arr = new int[]{1,2,3,4,5};</code></pre></li><li>静态初始化省略格式：</li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15553845603050-1555384614682.png" alt="title"></p><ul><li>举例：定义存储1,2，3整数的数组容器：<pre><code class="java">int[] arr = {1,2,3};</code></pre>注意：</li></ul><ol><li>静态初始化没有直接指定长度，但仍然会自动推算得到长度。</li><li>静态初始化标准格式可以拆分为两个步骤。</li><li>动态初始化也可以拆分成为两个步骤。</li><li>静态初始化一旦使用省略格式，就不能拆分成为两个步骤了。</li><li>不确定数组当中具体内容，使用动态初始化；确认了具体内容，用静态初始化。<pre><code class="java">//静态初始化的标准格式拆分：int[] arrayA;arrayA = new int[]{1,2,3};//动态初始化的拆分步骤：int[] arrayB;arrayB = new intp[3];</code></pre></li></ol><h3 id="1-2-数组的访问"><a href="#1-2-数组的访问" class="headerlink" title="1.2 数组的访问"></a>1.2 数组的访问</h3><ul><li>索引：每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引(index),可以通过数组的索引访问到数组中的元素。</li><li>格式：数组名[索引]</li><li>数组长度属性：每个数组都具有长度，而且是固定的，Java中赋予了数组的一个属性，可以获取到数组的长度，语句为：数据名.length。属性length的执行结果是数组的长度，int类型结果。由此可以推断出，数组的最大索引值为数组名.length-1。<pre><code class="java">public class Demo02ArrayUse {  public static void main(String[] agrs){      int[] arr = new int[]{1,2,3,4,5};      System.out.println(arr.length);      System.out.println(arr[arr.length-1]);  }}</code></pre></li><li>索引访问数组中的元素：<ul><li>数组名[索引]=数组，为数组中的元素赋值</li><li>变量=数组名[索引]，获取数组中的元素</li></ul></li></ul><h2 id="2-数组原理内存图"><a href="#2-数组原理内存图" class="headerlink" title="2. 数组原理内存图"></a>2. 数组原理内存图</h2><h3 id="2-1-内存概述"><a href="#2-1-内存概述" class="headerlink" title="2.1 内存概述"></a>2.1 内存概述</h3><p>内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。<br>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p><h3 id="2-1-Java虚拟机的内存划分"><a href="#2-1-Java虚拟机的内存划分" class="headerlink" title="2.1 Java虚拟机的内存划分"></a>2.1 Java虚拟机的内存划分</h3><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><ul><li>JVM的内存划分：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/JVM%E5%86%85%E5%AD%98%E5%88%92%E5%88%86-1555393728931.png" alt="title"></li></ul><p>Java内存需划分为5个部分：</p><ol><li>==栈(Stack)==：存放的都是方法中的局部变量。方法运行时使用的内存。<ul><li>局部变量：方法的参数，或者是方法{}内部的变量</li><li>作用域：一旦超出作用域，立刻从栈内存当中消失。</li></ul></li><li>==堆(Heap)==：凡是new出来的东西，都在堆当中。存储对象或数组。    <ul><li>堆内存里面的东西都有一个地址值：16进制</li><li>堆内存里面的数据，都有默认值。规则：</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%BB%98%E8%AE%A4%E5%80%BC-1555394445700.png" alt="title"></p><ol start="3"><li>==方法区(Method Area)==：存储.class相关信息，包含方法的信息。</li><li>本地方法栈(Native Method Stack)：与操作系统相关。</li><li>寄存器(pc Register)：与CPU相关。</li></ol><h3 id="2-2-数据在内存中的存储"><a href="#2-2-数据在内存中的存储" class="headerlink" title="2.2 数据在内存中的存储"></a>2.2 数据在内存中的存储</h3><pre><code class="java">public class Demo02ArrayOne {    public static void main(String[] args){        int[] arr = new int[3];        System.out.println(arr); // [I@5f184fc6    }}</code></pre><p>以上方法执行，输出结果是[I@5f184fc6。这个是数组在内存中的地址。new出来的内容，都是在堆内存中存储的，而方法中的变量arr保存的是数组的内存地址。<br><br>一个数组内存图：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE%E8%AF%A6%E8%A7%A3-1555396483239.png" alt="title"><br>两个数组内存图：<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE-1555397156716.png" alt="title"></p><h2 id="3-数组的常见操作"><a href="#3-数组的常见操作" class="headerlink" title="3. 数组的常见操作"></a>3. 数组的常见操作</h2><h3 id="3-1-数组越界异常"><a href="#3-1-数组越界异常" class="headerlink" title="3.1 数组越界异常"></a>3.1 数组越界异常</h3><pre><code class="java">public static void main(String[] args){    int[] arr = {1,2,3};    System.out.print(arr[3]);}</code></pre><p>创建数组，赋值3个元素，数组索引就是0,1,2,没有索引3。如果我们访问了数组中不存在的索引，程序运行后就会抛出<code>ArrayIndexOutOfBoundsException</code>数组越界异常。</p><h3 id="3-2-数组空指针异常"><a href="#3-2-数组空指针异常" class="headerlink" title="3.2 数组空指针异常"></a>3.2 数组空指针异常</h3><pre><code class="java">public class Demo02ArrayNull {    public static void main(String[] args){        int [] array = null;        // array = new int[3];        System.out.println(array[0]);    }}</code></pre><p>所有的引用类型变量，都可以赋值为一个null值。但代表其中什么都没有。</p><ul><li>数组必须进行new初始化才能使用其中的元素，如果赋值一个null，没有进行new创建数组，程序运行后将出现<code>NullPointerException</code>空指针异常。</li></ul><h3 id="3-3-数组遍历"><a href="#3-3-数组遍历" class="headerlink" title="3.3 数组遍历"></a>3.3 数组遍历</h3><ul><li>数组遍历：将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。<pre><code class="java">public class Demo02Array_bianli {  public static void main(String[] args){      int[] arr = {1,2,3,4,5};      for(int i = 0;i &lt; arr.length;i++){          System.out.println(arr[i]);      }  }}</code></pre><h3 id="3-4-数组获取最大值元素"><a href="#3-4-数组获取最大值元素" class="headerlink" title="3.4 数组获取最大值元素"></a>3.4 数组获取最大值元素</h3></li><li>最大值获取：从数组的所有元素中找出最大值。</li><li>实现思路：<ul><li>定义变量，保存数组0索引上的元素</li><li>遍历数组，获取出数组中的每个元素</li><li>将遍历到的元素和保存数组0索引上值的变量进行比较</li><li>如果数组元素值大于保存变量值，则重新赋值给变量，替换掉</li><li>数组循环遍历结束，变量中保存的就是数组中的最大值<pre><code class="java">public class Demo02ArrayMAX {public static void main(String[] args){  int[] arr = {5,15,2000,10000,100,4000};  int max = 0;  for(int i = 0;i &lt; arr.length;i++){      if(arr[i] &gt; max){          max = arr[i];      }  }  System.out.println("arr数组最大值为：" + max);}}</code></pre><h3 id="3-5-数组反转"><a href="#3-5-数组反转" class="headerlink" title="3.5 数组反转"></a>3.5 数组反转</h3></li></ul></li><li>数组的反转：数组中的元素颠倒顺序，例如原始数组为1,2,3,4,5，反转后的数组为5,4,3,2,1</li><li>实现思路：数组最远端的元素互换位置</li><li>定义两个变量，保存数组的最小索引和最大索引</li><li>两个索引上的元素交换位置</li><li>最小索引++，最大索引–，再次交换位置</li><li>最小索引超过了最大索引，数组反转操作结束</li></ul><h2 id="4-数组作为方法参数和返回值"><a href="#4-数组作为方法参数和返回值" class="headerlink" title="4. 数组作为方法参数和返回值"></a>4. 数组作为方法参数和返回值</h2><h3 id="4-1-数组作为方法参数"><a href="#4-1-数组作为方法参数" class="headerlink" title="4.1 数组作为方法参数"></a>4.1 数组作为方法参数</h3><p>以前的方法中我们学习了方法的参数和返回值，但是使用的都是基本数据类型。</p><ul><li>数组作为方法参数传递，传递的参数是数组内存的地址。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/16/reverse-1555405679573.png" alt="title"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发工具的安装</title>
      <link href="/2019/04/15/javabasics/java-kai-fa-gong-ju-an-zhuang/"/>
      <url>/2019/04/15/javabasics/java-kai-fa-gong-ju-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>IDEA是一个专门针对Java的集成开发工具(IDE)，由Java语言编写。所以，需要有JRE运行环境并配置好环境变量。<br>它可以极大地提升我们的开发效率。可以自动编译，检查错误。</p><a id="more"></a><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol><li>官网下载IDE安装包<br><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ官网</a></li><li>修改Hosts文件，使用注册码激活<br><a href="http://idea.lanyus.com/" target="_blank" rel="noopener">破解教程网站</a></li></ol><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><ol><li>新建一个项目，然后点击src文件夹，右击新建package，新建包后右键新建一个class，编写一个HelloWorld程序验证一下是否正常运行。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/15/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15552997771553-1555299788468.png" alt="title"></li><li>IDEA工具默认字体非常小，代码编辑器和控制台的输出字体都需进行调整</li></ol><ul><li>点击菜单栏上的File&gt;Settings&gt;Editor&gt;Font修改字体。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/15/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15552998363731-1555299845339.png" alt="title"></li></ul><h3 id="IDEA的项目目录"><a href="#IDEA的项目目录" class="headerlink" title="IDEA的项目目录"></a>IDEA的项目目录</h3><ul><li>.idea目录和demo.iml和我们开发无关，是IDEA工具自己使用的</li><li>out目录是存储编译后的.class文件</li><li>src目录是存储我们编写的.java源文件<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/15/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15553000533050-1555300185262.png" alt="title"></li></ul><h3 id="IEAD常用快捷键"><a href="#IEAD常用快捷键" class="headerlink" title="IEAD常用快捷键"></a>IEAD常用快捷键</h3><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/15/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15553002176364-1555300220987.png" alt="title"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制语句</title>
      <link href="/2019/04/14/javabasics/java-liu-cheng-kong-zhi/"/>
      <url>/2019/04/14/javabasics/java-liu-cheng-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>在一个程序执行中，各条语句的执行顺序对程序的结果是有直接影响的。所以必须清楚每条语句的执行流程，而且，我们需要通过控制语句的执行顺序来实现我们要完成的功能。</p><a id="more"></a><h3 id="1-if-else-判断语句"><a href="#1-if-else-判断语句" class="headerlink" title="1. if else 判断语句"></a>1. if else 判断语句</h3><h4 id="1-1-if语句第一种格式：if"><a href="#1-1-if语句第一种格式：if" class="headerlink" title="1.1 if语句第一种格式：if"></a>1.1 if语句第一种格式：if</h4><pre><code class="java">if(关系表达式){    语句体；}</code></pre><ul><li>执行流程<ul><li>首先判断关系表达式其结果是true还是false</li><li>如果是true就执行语句体</li><li>如果是false就不执行语句体<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/14/if-1555208361145.png" alt="title"><h4 id="1-2-if语句第二种格式：if…else"><a href="#1-2-if语句第二种格式：if…else" class="headerlink" title="1.2 if语句第二种格式：if…else"></a>1.2 if语句第二种格式：if…else</h4><pre><code class="java">if(关系表达式){语句体1；}else{语句体2；}</code></pre></li></ul></li><li>执行流程<ul><li>首先判断关系表达式看其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就执行语句体2<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/14/if_else-1555208575720.png" alt="title"><pre><code class="java">public static void main(String[] args){// 判断给定的数据是奇数还是偶数// 定义变量int a = 1;if(a % 2 == 0) {  System.out.println("a是偶数");} else{  System.out.println("a是奇数");}System.out.println("结束");}</code></pre><h4 id="1-3-if语句第三种格式：if…else-if…else"><a href="#1-3-if语句第三种格式：if…else-if…else" class="headerlink" title="1.3 if语句第三种格式：if…else if…else"></a>1.3 if语句第三种格式：if…else if…else</h4></li></ul></li></ul><pre><code class="java">if (判断条件1) {    执行语句1;} else if (判断条件2) {    执行语句2;}...}else if (判断条件n) {    执行语句n;} else {    执行语句n+1;}</code></pre><ul><li>执行流程<ul><li>首先判断关系表达式1看其结果是true还是false</li><li>如果是true就执行语句体1</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>true则执行语句体2，false就继续往下判断</li><li>如果没有任何关系表达式为true，则执行else语句体<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/14/ifelseifelse-1555209112731.png" alt="title"></li></ul></li></ul><h3 id="2-switch选择语句"><a href="#2-switch选择语句" class="headerlink" title="2. switch选择语句"></a>2. switch选择语句</h3><h4 id="2-1-选择语句–switch"><a href="#2-1-选择语句–switch" class="headerlink" title="2.1 选择语句–switch"></a>2.1 选择语句–switch</h4><ul><li>switch语句格式：<pre><code class="java">switch(表达式){  case 常量值1：      语句体1；  break；  case 常量值2：  语句体2；  break；  ...  default:  语句体n+1;  break;}</code></pre></li><li>执行流程<ul><li>首先计算表达式的值</li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。</li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束。<br><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/14/switch-1555210158065.png" alt="title"></li></ul></li></ul><p>实例：</p><pre><code class="java">public class switch_exercise {    public static void main(String[] agrs) {        int weekday = 6;        switch(weekday) {            case 1:                System.out.println("今天星期一");                break;            case 2:                System.out.println("今天星期二");                break;            case 3:                System.out.println("今天星期三");                break;            case 4:                System.out.println("今天星期四");                break;            case 5:                System.out.println("今天星期五");                break;            case 6:                System.out.println("今天星期六");                break;            case 7:                System.out.println("今天星期日");                break;            default:                System.out.println("输入数据有误");                break;        }    }}</code></pre><p>switch语句使用的注意事项：</p><ol><li>多个case后面的数值不可重复。</li><li>switch后面小括号中只能是下列数据类型：<ul><li>基本数据类型：byte/short/char/int</li><li>引用数据类型：String字符串、enum枚举</li></ul></li><li>switch语句格式可以很灵活：前后顺序可以颠倒，而且break语句还可以省略，但需要考虑case穿透性。<br>“匹配哪一个case就从哪一个位置向下执行，直到遇到break或者整体结束为止。”</li></ol><h4 id="2-2-case的穿透性"><a href="#2-2-case的穿透性" class="headerlink" title="2.2 case的穿透性"></a>2.2 case的穿透性</h4><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是不会在判断下一个case的值，直接向后运行，直到遇到break，或者整体switch结束。<br>故编写switch语句时，必须写上break。</p><h3 id="3-for循环语句"><a href="#3-for循环语句" class="headerlink" title="3. for循环语句"></a>3. for循环语句</h3><h4 id="3-1-循环概述"><a href="#3-1-循环概述" class="headerlink" title="3.1 循环概述"></a>3.1 循环概述</h4><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句。当反复执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。</p><h4 id="3-2-循环语句–for"><a href="#3-2-循环语句–for" class="headerlink" title="3.2 循环语句–for"></a>3.2 循环语句–for</h4><ul><li>for循环语句格式：<pre><code class="java">for（初始化表达式1；布尔表达式2；步进表达式4）{  循环体3；}</code></pre></li><li>执行流程<ul><li>执行顺序：1234&gt;234&gt;234…直到2不满足为止。</li><li>1负责完成循环变量初始化</li><li>2负责判断是否满足循环条件，不满足则跳出循环</li><li>3具体执行的语句</li><li>4循环后，循环条件所涉及变量的变化情况</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/14/for-1555210990394.png" alt="title"></p><p>实例：</p><pre><code class="java">public class for_exercise {    public static void main(String[] args) {        int sum = 0;        for (int i = 1;i &lt;= 100;i++) {            if(i % 2 == 0) {                sum += i;            }        }        System.out.println("sum:" + sum);    }}</code></pre><h3 id="4-while循环语句"><a href="#4-while循环语句" class="headerlink" title="4. while循环语句"></a>4. while循环语句</h3><ul><li>while循环语句格式：<pre><code class="java">初始化表达式1：  while（布尔表达式2）{  循环体3；  步进表达式4；}</code></pre></li><li>执行流程<ul><li>执行顺序：1234&gt;234&gt;234&gt;234…直到2不满足为止。</li><li>1负责完成循环变量初始化。</li><li>2负责判断是否满足循环条件，不满足则跳出循环。</li><li>3具体执行的语句。</li><li>4循环后，循环变量的变化情况。</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/14/while-1555221264283.png" alt="title"></p><p>实例：</p><pre><code class="java">public class while_exercise {    public static void main(String[] agrs) {        int sum = 0;        int i = 1;        while(i &lt;= 100) {            sum += i;            i++;        }        System.out.println("1~100的值为：" + sum);    }}</code></pre><h3 id="5-do-while循环语句"><a href="#5-do-while循环语句" class="headerlink" title="5. do while循环语句"></a>5. do while循环语句</h3><ul><li>do…while循环格式：<pre><code class="java">初始化表达式1  do{  循环体3；  步进表达式4；}while（布尔表达式2）；</code></pre></li><li>执行流程<ul><li>执行顺序：134&gt;234&gt;234…知道2不满足为止。</li><li>1负责完成循环变量初始化。</li><li>2负责判断是否满足循环条件，不满足则跳出循环。</li><li>3具体执行的语句</li><li>4循环后，循环变量的变化情况</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/zero6996/GitNote-images/master/GitNote/2019/04/14/do...while-1555221971998.png" alt="title"></p><p>实例：</p><pre><code class="java">public class do_while_exercise {    public static void main(String[] args) {        int i = 1;        do {            System.out.println("hello:" + i);            i++;        }while(i&lt;=10);    }}</code></pre><p>Tips：do…while循环特点是会无条件执行一次循环体，即使我们将循环条件写出false，也依然会循环一次。这样的循环具有一定风险，不推荐使用。</p><h3 id="7-循环语句的区别"><a href="#7-循环语句的区别" class="headerlink" title="7.循环语句的区别"></a>7.循环语句的区别</h3><ul><li>三种循环的小区别：<ul><li>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消失，能够提高内存的使用效率</li><li>在已知循环次数的时候推荐使用for，循环次数未知时推荐使用while。</li><li>如果条件判断从来没有满足过，那么for循环和while循环将会执行0次，但是do…while循环会执行至少一次。</li><li>for循环的变量在小括号当中定义，只有循环内部可以使用。while循环和do…while循环初始化语句本来就在外面，所以出了循环可以继续使用。</li></ul></li></ul><h3 id="8-跳出语句"><a href="#8-跳出语句" class="headerlink" title="8. 跳出语句"></a>8. 跳出语句</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul><li>使用场景：终止switch或者循环<ul><li>在选择结构switch语句中</li><li>在循环语句中</li><li>离开使用场景的存在是没有意义的</li></ul></li></ul><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul><li>使用场景：结束本次循环，继续下一次循环</li></ul><h3 id="9-扩展知识点"><a href="#9-扩展知识点" class="headerlink" title="9.扩展知识点"></a>9.扩展知识点</h3><h4 id="9-1嵌套循环"><a href="#9-1嵌套循环" class="headerlink" title="9.1嵌套循环"></a>9.1嵌套循环</h4><ul><li>所谓嵌套循环，是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。总共的循环次数 = 外循环次数 * 内循环次数</li><li>嵌套循环格式：<pre><code class="java">for(初始化表达式1；循环条件2；步进表达式7){  for(初始化表达式3；循环条件4；步进表达式6){  执行语句5；  }}</code></pre></li><li>嵌套循环执行流程：<ul><li>执行顺序：123456&gt;456&gt;723456&gt;456</li><li>外循环一次，内循环多次</li><li>比如跳绳：一共5组，每组跳10个。5组就是外循环，10个就是内循环。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java运算符</title>
      <link href="/2019/04/13/javabasics/java-yun-suan-fu/"/>
      <url>/2019/04/13/javabasics/java-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><ul><li><code>+</code> ：加法运算，字符串连接运算</li><li><code>-</code> : 减法运算</li><li><code>*</code> : 乘法运算</li><li><code>/</code> : 除法运算</li><li><code>%</code> : 取模运算，两个数字相除取余数</li><li><code>++</code>,<code>--</code> : 自增自减运算</li></ul><a id="more"></a><p>Java中，整数使用以上运算符，不会得到小数。</p><ul><li>++运算，变量自增长1。反之，–运算，变量自己减少1。<ul><li>独立运算：++i和i++没有区别</li><li>混合运算：和其他变量放在一起，++i和i++就有不同结果。</li></ul></li></ul><pre><code class="java">//变量前++：变量a自己先+1，将加1后的结果赋值给b，也就是说a先计算后赋值。public static void main(String[] args) {    int a = 1;    int b = ++a;    System.out.println(a);//计算结果是2    System.out.println(b);//计算结果是2}//变量后++：变量a先把自己的值1，赋值给变量b，此时b值就是1，变量a自己再加1，a值就是2。先赋值后计算。public static void main(String[] args) {    int a = 1;    int b = a++;    System.out.println(a);//计算结果是2    System.out.println(b);//计算结果是1}</code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li><code>=</code>  : 等于号</li><li><code>+=</code> : 加等于</li><li><code>-=</code> : 减等于</li><li><code>*=</code> : 乘等于</li><li><code>/=</code> : 除等于</li><li><code>%=</code> : 取模</li></ul><p>赋值运算符，就是将符号右边的值，赋给左边的变量。</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li><code>==</code> : 比较符号两边数据是否相等，相等结果是true。</li><li><code>&lt;</code> : 比较符号左边的数据是否小于右边的数据，如果小于结果是true。</li><li><code>&gt;</code> : 比较符号左边的数据是否大于右边的数据，如果大于结果是true。</li><li><code>&lt;=</code> : 比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。</li><li><code>&gt;=</code> : 比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。</li><li><code>!=</code> : 不等于符号 ，如果符号两边的数据不相等，结果是true。<br>比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值，true或者false。</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><em>&amp;&amp;短路与</em></p><ol><li>两边都真，则真</li><li>一边是假，则假<br>短路特定：如果左边遇假则可以得到最终结果，右边不再运算</li></ol><p><em>||短路或</em></p><ol><li>两边都假，则假</li><li>一边是真，则真<br>短路特点：如果左边遇真则可以得到最终结果，右边不再运算</li></ol><p><em>！取反</em></p><ol><li>！true 则是假</li><li>！false 则是真<pre><code class="java">//逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值 true 或者 falsepublic static void main(String[] args) { System.out.println(true &amp;&amp; true);//true System.out.println(true &amp;&amp; false);//false System.out.println(false &amp;&amp; true);//false，右边不计算 System.out.println(false || false);//falase System.out.println(false || true);//true System.out.println(true || false);//true，右边不计算 System.out.println(!false);//true}</code></pre></li></ol><p>TIPS：</p><ol><li>逻辑运算符只能用于boolean值。</li><li>与、或需要左右各自有一个boolean值，但是取反只要有唯一一个boolean值即可。</li><li>与、或两种运算符，如果有多个条件，可以连续写。多个条件：条件A &amp;&amp; 条件B &amp;&amp; 条件C</li></ol><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul><li><p>三元运算符格式：<br>数据类型 变量名 = 布尔类型表达式？结果1：结果2</p></li><li><p>三元运算符计算方式：</p></li></ul><pre><code class="java">//布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量。//布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量。public static void main(String[] args) {    int i = (1==2 ? 100 : 200);    System.out.println(i);//200    int j = (3&lt;=4 ? 500 : 600);    System.out.println(j);//500}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java修饰符</title>
      <link href="/2019/04/12/javabasics/java-xiu-shi-fu/"/>
      <url>/2019/04/12/javabasics/java-xiu-shi-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java语言提供了很多修饰符,主要分为以下两类:</p><ul><li>访问修饰符</li><li>非访问修饰符<br>修饰符用来定义类、方法或者变量，通常放在语句的最前端。</li></ul><a id="more"></a><h3 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h3><p>Java中，可以使用==访问控制符==来保护对类、变量、方法和构造方法的访问。Java支持4种不同的访问权限。</p><ul><li>default（即缺省，什么也不写）：在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li>private：在同一类内可见。使用对象：变量、方法。注意：不能修饰类（外部类）</li><li>public：对所有类可见。使用对象：类、接口、变量、方法</li><li>protected：对同一包内的类和所有子类可见。使用对象：变量，方法。注意：不能修饰类（外部类）。</li></ul><h4 id="默认访问修饰符-不使用任何关键字"><a href="#默认访问修饰符-不使用任何关键字" class="headerlink" title="默认访问修饰符-不使用任何关键字"></a>默认访问修饰符-不使用任何关键字</h4><p>使用默认访问修饰符声明的变量和方法，对同一包内的类是可见的。接口里的变量都隐式声明为public static final，而接口里的方法默认情况下访问权限为publi。<br>如下例，变量和方法的声明可以不使用任何修饰符</p><pre><code class="java">String version = "3.0.3";boolean processOrder(){    return true;}</code></pre><h4 id="私有访问修饰符-private"><a href="#私有访问修饰符-private" class="headerlink" title="私有访问修饰符-private"></a>私有访问修饰符-private</h4><p>私有访问修饰符是最严格的访问级别，所以被声明为private的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为private。<br>声明为私有访问类型的变量只能通过类中公共的getter方法被外部类访问。<br>Private访问控制修饰符的使用主要用来隐藏类的实现细节和保护类的数据。<br>下面的类使用了私有访问控制符：</p><pre><code class="java">public class Logger{    private String format;    public String getFormat(){    return this.format;    }    public void setFormat(String format){    this.format = format;    }}</code></pre><p>实例中，Logger类中的format变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个public方法：getFormat()（能够返回format的值）和setFormat(String)（设置format的值）</p><h4 id="公有访问修饰符-public"><a href="#公有访问修饰符-public" class="headerlink" title="公有访问修饰符-public"></a>公有访问修饰符-public</h4><p>被声明为public的类、方法、构造方法和接口能够被任何其他类访问。<br>如果几个相互访问的public类分布在不同的包中，则需要导入相应public类所在包。由于类的继承性，类的所有公有方法和变量都能被其子类继承。<br>以下函数使用了公有访问控制：</p><pre><code class="java">public static void main(String[] args){    // ...}</code></pre><p>Java程序的main()方法必须设置公有的，否则，Java解释器将不能运行该类。</p><h4 id="受保护的访问修饰符-protected"><a href="#受保护的访问修饰符-protected" class="headerlink" title="受保护的访问修饰符-protected"></a>受保护的访问修饰符-protected</h4><p>protected需要从以下两个点来分析说明：</p><ul><li>子类与基类在同一包中：被声明protected的变量、方法和构造器能够被同一个包中的任何其他类访问；</li><li>子类与基类不在同一包中：那么在子类中，子类实例可以访问其从基类继承而来的protected方法，而不能访问基类实例的protected方法。<br>protected可以修饰数据成员，构造方法，方法成员，不能修饰类(内部类除外)。<br><br>子类能访问protected修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。<br>下面的父类使用了protected访问修饰符，子类重写了父类的openSpeaker()方法。<br><code>`</code>java<br>class AudioPlayer{<br>  protected boolean openSpeaker(Speaker sp){<br>  //实现细节<br>  }<br>}</li></ul><p>class StreamingAudioPlayer extends AudioPlayer{<br>    protected boolean openSpeaker(Speaker sp){<br>        //实现细节<br>    }<br>}</p><pre><code>如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。&lt;br&gt;如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。&lt;br&gt;如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。&lt;br&gt;[Java protected关键字详解](https://www.runoob.com/w3cnote/java-protected-keyword-detailed-explanation.html)#### 访问控制和继承请注意以下方法继承的规则:- 父类中声明为public的方法在子类中也必须为public。- 父类中声明为protected的方法在子类中要么声明为protected，要么声明为public，不能声明为private。- 父类中声明为private的方法，不能被继承。### 非访问修饰符为了实现一些其他功能，Java也提供了许多非访问修饰符。- static修饰符，用来修饰类方法和类变量。- final修饰符，用来修饰类、方法和变量，final修饰的类不能被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。- abstract修饰符，用来创建抽象类和抽象方法。- synchronized和volatile修饰符，主要用于线程的编程。#### static修饰符- 静态变量：static关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。静态变量也被称为类变量。局部变量不能被声明为static变量。- 静态方法：static关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。对类变量和方法的访问可以直接使用classname.variablename和classname.methodname方式访问。&lt;br&gt;如下示例，static修饰符用来创建类方法和类变量。```javapublic class InstanceCounter {   private static int numInstances = 0;   protected static int getCount() {      return numInstances;   }   private static void addInstance() {      numInstances++;   }   InstanceCounter() {      InstanceCounter.addInstance();   }   public static void main(String[] arguments) {      System.out.println("Starting with " +      InstanceCounter.getCount() + " instances");      for (int i = 0; i &lt; 500; ++i){         new InstanceCounter();          }      System.out.println("Created " +      InstanceCounter.getCount() + " instances");   }}//以上示例运行结果如下：Starting with 0 instancesCreated 500 instances</code></pre><h4 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h4><p>final变量：final表示“最后的，最终的”意思，变量一旦赋值后，不能被重新赋值。被final修饰的实例变量必须显式指定初始值。final修饰符通常和static修饰符一起使用来创建类常量。</p><pre><code class="java">//实例public class Test{  final int value = 10;  // 下面是声明常量的实例  public static final int BOXWIDTH = 6;  static final String TITLE = "Manager";  public void changeValue(){     value = 12; //将输出一个错误  }}</code></pre><h5 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h5><ul><li>类中的final方法可以被子类继承，但不能被子类修改。</li><li>声明final方法的主要目的是防止该方法的内容被修改。<br>如下所示，使用final修饰符声明方法。<pre><code class="java">public class Test{  public final void changeName(){  //方法体  }}</code></pre><h5 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h5>final类不能被继承，没有类能够继承final类的任何特性。<pre><code class="java">//实例public final class Test{  //类体}</code></pre><h4 id="abstract修饰符"><a href="#abstract修饰符" class="headerlink" title="abstract修饰符"></a>abstract修饰符</h4><h5 id="抽象类："><a href="#抽象类：" class="headerlink" title="抽象类："></a>抽象类：</h5></li><li>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了对该类进行扩充。</li><li>一个类不能同时被abstract和final修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将会编译错误。</li><li>抽象类可以包含抽象方法和非抽象方法。<br><code>`</code>java<br>//实例<br>abstract class Caravan{<br> private double price;<br> private String model;<br> private String year;<br> public abstract void goFast(); //抽象方法<br> public abstract void changeColor();</li></ul><p>}</p><pre><code>##### 抽象方法- 抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。- 抽象方法不能被声明成final和static。- 任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。- 如果一个类包含若干个抽象方法，那么该类必须声明为抽象类，抽象类可以不包含抽象方法。抽象方法的声明以分号结尾，例如:public abstract sample();```java//实例public abstract class SuperClass{    abstract void m(); //抽象方法}class SubClass extends SuperClass{     //实现抽象方法      void m(){          .........      }}</code></pre><h4 id="synchronized-同步-修饰符"><a href="#synchronized-同步-修饰符" class="headerlink" title="synchronized(同步)修饰符"></a>synchronized(同步)修饰符</h4><p>synchronized关键字声明的方法同一时间只能被一个线程访问。synchronized修饰符可以应用于四个访问修饰符。</p><pre><code class="java">//实例public synchronized void showDetails(){    .......}</code></pre><h4 id="transient-瞬态-修饰符"><a href="#transient-瞬态-修饰符" class="headerlink" title="transient(瞬态)修饰符"></a>transient(瞬态)修饰符</h4><p>序列化的对象包含被transient修饰的实例变量时，java虚拟机（JVM）跳过该特定的变量。<br>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><pre><code class="java">//实例public transient int limit = 55;   // 不会持久化public int b; // 持久化</code></pre><h4 id="volatile（挥发性）修饰符"><a href="#volatile（挥发性）修饰符" class="headerlink" title="volatile（挥发性）修饰符"></a>volatile（挥发性）修饰符</h4><p>volatile修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且当成员变量发生变化时，会强制线程将变量值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。<br>一个volatile对象引用可能是null。</p><pre><code class="java">//实例public class MyRunnable implements Runnable{    private volatile boolean active;    public void run()    {        active = true;        while (active) // 第一行        {            // 代码        }    }    public void stop()    {        active = false; // 第二行    }}</code></pre><p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 第一行 中缓冲区的 active 值被使用，那么在 第二行 的 active 值为 false 时循环不会停止。<br><br>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p><h3 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h3><p>Java的类（外部类）有2种访问权限：public，default。<br>而方法和变量有4种：public、default、protected，private。<br>其中默认访问权限和protected很相似，有着细微的差别。</p><ul><li>public意味着任何地方的其他类都能访问。</li><li>default则是同一个包的类可以访问。</li><li>protected表示同一个包的类可以访问，其他的包的该类子类也可以访问。</li><li>private表示只有自己类能够访问。</li></ul><p>修饰符：abstract、static、final</p><ul><li>abstract：表示是抽象类。使用对象：类、接口、方法。</li><li>static：可以当做普通类使用，而不用先实例化一个外部类。（用他修饰后，就成了静态内部类了）。使用对象：类、变量、方法、初始化函数（注意：修饰类时只能修饰内部类）</li><li>final：表示类不可以被继承。使用对象：类、变量、方法。</li></ul><h5 id="关于static"><a href="#关于static" class="headerlink" title="关于static"></a>关于static</h5><ul><li>static全局变量与普通的全局变量：static全局变量只初使化一次，防止在其他文件单元中被引用;</li><li>static局部变量和普通局部变量：static局部变量只被初始化一次，下一次依据上一次结果值；</li><li>static函数与普通函数：static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java变量类型</title>
      <link href="/2019/04/12/javabasics/java-bian-liang-lei-xing/"/>
      <url>/2019/04/12/javabasics/java-bian-liang-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Java语言中,所以的变量在使用前必须声明. 声明变量的基本格式如下:</p><pre><code class="java">type indentifier = [ = value][, indentifier [= value] ...];</code></pre><a id="more"></a><p>以下列出了一些变量的声明实例.注意有些包含了初始化过程</p><pre><code class="java">int a,b,c;     //声明三个int型整数:a,b,cint d = 3,e = 4, f = 5;  //声明三个整数并赋予初值byte z = 22;     // 声明并初始化 zString s = "runoob";    //声明并初始化字符串sdouble pi = 3.14159;    //声明了双精度浮点型变量 pichar x = 'x';    //声明变量x的值是字符 'x'</code></pre><p>Java语言支持的变量类型有:</p><ul><li>类变量:独立于方法之外的变量,用static修饰</li><li>实例变量:独立于方法之外的变量,不用static修饰</li><li>局部变量:类的方法中的变量<pre><code class="java">public class Variable{  static int allClicks = 0; //类变量  String str = "hello world"; //实例变量  public void method(){      int i = 0 // 局部变量  }}</code></pre><h3 id="Java局部变量"><a href="#Java局部变量" class="headerlink" title="Java局部变量"></a>Java局部变量</h3></li><li>局部变量声明在方法,构造方法或者语句块中;</li><li>局部变量在方法,构造方法,或者语句块被执行时创建,当它们执行完毕后,变量将会被销毁;</li><li>访问修饰符不能用于局部变量;</li><li>局部变量只在声明它的方法,构造方法或者语句块中可见;</li><li>局部变量是在栈上分配的;</li><li>局部变量没有默认值,所以局部变量被声明后,必须经过初始化,才可以使用<h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3></li><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li><li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li><li>实例变量在对象创建时被创建，在对象销毁时被销毁；</li><li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方法获取实例变量信息；</li><li>实例变量可以声明在使用前或者使用后；</li><li>访问修饰符可以修饰实例变量；</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li><li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObjectReference.VariableName。<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><code>`</code>java<br>package zerofirst.test;</li></ul><p>import java.io.*;<br>public class Employee {<br>    public String name; //这个实例变量对子类可见<br>    private double salary; //私有变量，仅在该类可见<br>    public Employee (String empName) {<br>        name = empName; //在构造器中对name赋值<br>    }<br>    public void setSalary(double empSal) {<br>        salary = empSal; // 设定salary的值<br>    }<br>    //打印信息<br>    public void printEmp() {<br>        System.out.println(“名字：” + name);<br>        System.out.println(“薪水：” + salary);<br>    }<br>    public static void main(String[] args) {<br>        Employee empOne = new Employee(“Java”);<br>        empOne.setSalary(1000);<br>        empOne.printEmp();<br>    }<br>}<br>//以上结果输出<br>名字：Java<br>薪水：1000.0<br><code>`</code></p><h3 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h3><ul><li>类变量也称为静态变量，在类中以static关键字声明，但必须在方法之外。</li><li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。</li><li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</li><li>静态变量在第一次被访问时创建，在程序结束时销毁。</li><li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</li><li>默认值和实例变量相似。数值型变量默认值是0，布尔型默认是false，引用类型默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li><li>静态变量可以通过：ClassName，VariableName的方式访问。</li><li>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本数据类型</title>
      <link href="/2019/04/11/javabasics/java-ji-ben-shu-ju-lei-xing/"/>
      <url>/2019/04/11/javabasics/java-ji-ben-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>变量就是申请内存来存储值.也就是说,当创建变量时,需要在内存中申请空间.<br>内存管理系统根据变量的类型为变量分配存储空间,分配的空间只能用来存储该类型数据.<br><img src="https://i.loli.net/2019/04/11/5cae9c0f20f05.jpg" alt="title"><br><br>因此,通过定义不同类型的变量,可以在内存中存储整数,小数或者字符<br>Java的两大数据类型:</p><ul><li>内置数据类型</li><li>引用数据类型</li></ul><a id="more"></a><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><p>Java语言提供了四类八种基本类型。整数型,浮点型, 字符类型,布尔型。</p><h5 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h5><ul><li>byte数据类型是8位,有符号的,以二进制补码表示的整数;</li><li>最小值是-128(-2^7), 最大值是127(2^7-1), 默认值为0;</li><li>byte类型用在大型数组中节约空间,主要代替整数,因为byte变量占用的空间只有int类型的四分之一;</li><li>例子:byte a = 100, byte b = -50;</li></ul><h5 id="short"><a href="#short" class="headerlink" title="short"></a>short</h5><ul><li>short数据类型是16位,有符号的以二进制补码表示的整数;</li><li>最小值是-32768(-2^15),最大值是32767(2^15-1), 默认值为0;</li><li>short数据类型也可以像byte那样节省空间. 一个short变量是int型变量的二分之一;</li><li>例子:short s = 1000, short r = -20000<h5 id="int"><a href="#int" class="headerlink" title="int"></a>int</h5></li><li>int数据类型是32位,有符号的以二进制补码表示的整数;</li><li>最小值是-2 147 483 648(-2^31),最大值是2147483647(2^31-1),默认值为0;</li><li>一般地整型变量默认为int类型;</li><li>例子:int a = 10000, int b = - 200000<h5 id="long"><a href="#long" class="headerlink" title="long"></a>long</h5></li><li>long数据类型是64位,有符号的二进制补码表示的整数;</li><li>最小值是-9 223 372 036 854 775 808(-2^63);</li><li>最大值是9 223 372 036 854 775 807(2^63-1);</li><li>这种类型主要使用在需要比较大整数的系统上;</li><li>默认值是0L;</li><li>例子:long a = 1000000L, Long b = -2000000L<h5 id="float"><a href="#float" class="headerlink" title="float"></a>float</h5></li><li>float数据类型是单精度,32位,符合IEEE754标准的浮点数;</li><li>float在存储大型浮点数值时可以节省内存空间;</li><li>默认值是0.0f;</li><li>浮点数不能用来表示精确的值,如货币;</li><li>例子:float f1 = 234.5f<h5 id="double"><a href="#double" class="headerlink" title="double"></a>double</h5></li><li>double数据类型是双精度,64位,符合IEEE754标准的浮点数;</li><li>浮点数的默认类型为double类型;</li><li>double类型同样不能表示精确的值;</li><li>默认值为0.0d;</li><li>例子: double d1 = 123.4<h5 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h5></li><li>boolean数据类型表示一位的信息;</li><li>只有两个取值:true和false;</li><li>这种类型只作为一种标志来记录true/false情况;</li><li>默认值是false;</li><li>例子:boolean one = true<h5 id="char"><a href="#char" class="headerlink" title="char"></a>char</h5></li><li>char类型是一个单一的16位Unicode字符;</li><li>最小值是\u0000(即为0),最大值是\uffff(即为65535);</li><li>char数据类型可以存储任何字符;</li><li>例子:char letter = ‘A’<br><img src="https://i.loli.net/2019/04/13/5cb143c1690a8.png" alt="title"></li></ul><h4 id="变量定义的格式包括三个要素：数据类型、变量名、数据值"><a href="#变量定义的格式包括三个要素：数据类型、变量名、数据值" class="headerlink" title="变量定义的格式包括三个要素：数据类型、变量名、数据值"></a>变量定义的格式包括三个要素：数据类型、变量名、数据值</h4><pre><code class="java">//数据类型 变量名 = 数据值;//例子：byte b = 100；short s = 1000;int i = 5;long l = 10000000000L;float f = 5.5F;double d = 8.5;boolean bool = true;char c = 'A';</code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre><code class="java">public class PrimitiveType {    public static void main(String[] args) {        //byte        System.out.println("基本类型:byte 二进制位数:" + Byte.SIZE);        System.out.println("包装类:java.lang.Byte");        System.out.println("最小值:Byte.MIN_VALUE=" + Byte.MIN_VALUE);        System.out.println("最大值:Byte.MAX_VALUE=" + Byte.MAX_VALUE);        System.out.println();        //short        System.out.println("基本类型: short 二进制位数:" + Short.SIZE);        System.out.println("包装类:java.lang.Short");        System.out.println("最小值:Short.MIN_VALUE=" + Short.MIN_VALUE);        System.out.println("最大值:Short.MAX_VALUE=" + Short.MAX_VALUE);        System.out.println();        //int        System.out.println("基本类型: int 二级制位数:" + Integer.SIZE);        System.out.println("包装类:java.lang.Integer");        System.out.println("最小值:Integer.MIN_VALUE=" + Integer.MIN_VALUE);        System.out.println("最大值:Integer.MAX_VALUE=" + Integer.MAX_VALUE);        System.out.println();        //long        System.out.println("基本类型: long 二进制位数:" + Long.SIZE);        System.out.println("包装类:java.lang.Long");        System.out.println("最小值:Long.MIN_VALUE" + Long.MIN_VALUE);        System.out.println("最大值:Long.MAX_VALUE" + Long.MAX_VALUE);        System.out.println();        //float        System.out.println("基本类型: float 二进制位数:" + Float.SIZE);        System.out.println("包装类:java.lang.Float");        System.out.println("最小值:Float.MIN_VALUE" + Float.MIN_VALUE);        System.out.println("最大值:Float.MAX_VALUE" + Float.MAX_VALUE);        System.out.println();        //double        System.out.println("基本类型: double 二进制位数:" + Double.SIZE);        System.out.println("包装类:java.lang.Double");        System.out.println("最小值:Double.MIN_VALUE" + Double.MIN_VALUE);        System.out.println("最大值:Double.MAX_VALUE" + Double.MAX_VALUE);        System.out.println();        //char        System.out.println("基本类型: char 二进制位数:" + Character.SIZE);        System.out.println("包装类: java.lang.Character");        // 以数值形式而不是字符形式将Character.MIN_VALUE输出至控制台        System.out.println("最小值:Character.MIN_VALUE=" + (int) Character.MIN_VALUE);        System.out.println("最大值:Character.MAX_VALUE=" + (int) Character.MAX_VALUE);    }}//学习类之后将该程序改进一下:输入任意类型就打印该类型的信息</code></pre><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul><li>在Java中,引用类型的变量非常类似于C/C++的指针.引用类型指向一个对象,指向对象的变量是引用变量.这些变量在声明时被指定为一个特定的类型. 比如Employee,Puppy等. 变量一旦声明,类型就不能被改变了.</li><li>对象,数组都是引用数据类型</li><li>所以引用类型的默认值都是null</li><li>一个引用变量可以用来引用任何与之兼容的类型</li><li>例子: Site site = new Site(‘Java’)<h3 id="Java常量"><a href="#Java常量" class="headerlink" title="Java常量"></a>Java常量</h3>常量是指在Java程序中固定不变的数据。以下是常量的分类：</li></ul><ol><li>字符串常量：凡是用双引号引起来的部分，叫做字符串常量。例如：”abc”, “Hello”,”123”</li><li>字符常量：凡是用单引号引起来的单个字符，就是字符常量。例如：’A’,’b’,’9’,’中’</li><li>整数常量：直接写上的数字，没有小数点。例如：100,123,200,0，-1</li><li>浮点数常量：直接写上数字，有小数点的。例如：2.5，-3.14,0.0</li><li>布尔常量：只有量中取值。true，false。</li><li>空常量：null。代表没有任何数据。<br>在Java中使用final关键字来修饰常量,声明方式和变量类似:<pre><code class="java">final double PI = 3.1415927;</code></pre>虽然常量名也可以用小写,但为了方便识别,通常使用大写字母表示常量.<br>字面量可以赋给任何内置类型的变量.例如:<pre><code class="java">byte a = 68;char a = 'A';</code></pre>byte,int,long和short都可以用十进制,16进制以及8进制的方式来表示.<br>当使用常量时,前缀0表示8进制,而前缀0x代办16进制,例如:<pre><code class="java">int decimal = 100;int octal = 0144;int hexa = 0x64;</code></pre>和其他语言一样,Java的字符串常量也是包含在两个引号之间的字符序列,例子:<pre><code class="java">"Hello World""two\nlines""\"This is in quotes\""</code></pre>字符串常量和字符常量都可以包含任何Unicode字符,例如:<pre><code class="java">char a = "\u0001";String a = "\u0001";</code></pre>Java支持的转义字符序列</li></ol><h3 id="自动类型转换（显式）"><a href="#自动类型转换（显式）" class="headerlink" title="自动类型转换（显式）"></a>自动类型转换（显式）</h3><p>整型,实型(常量),字符型数据可以混合运算.运算中,不同类型的数据先转化为同一类型,然后进行运算.<br>转换从低级到高级</p><pre><code class="java">低-------------------------------------&gt;高byte,short,char--&gt; int--&gt; long--&gt; float--&gt; double</code></pre><p>数据类型转换必须满足如下规则:</p><ol><li>不能对boolean类型进行类型转换</li><li>不能把对象类型转换成不相关类的对象</li><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换</li><li>转换过程中可能导致溢出或损失精度,例如:<pre><code class="java">int i = 128;byte b = (byte)i;</code></pre>因为byte类型是8位,最大值为127,所以当int强制转换为byte类型时,值128会导致溢出<br><br>5. 浮点数到整数的转换是通过舍弃小数得到,而不是四舍五入,例如:<pre><code class="java">(int)23.7 == 23;(int)-45.89f == -45;</code></pre><h4 id="自动类型转换-隐式"><a href="#自动类型转换-隐式" class="headerlink" title="自动类型转换(隐式)"></a>自动类型转换(隐式)</h4>必须满足转换前的数据类型的位数要低于转换后的数据类型,例如 short数据类型的位数为16位,就可以自动转换位数为32的int类型,同样float数据类型的位数为32位,可以自动转换为64位的double类型.<br></li></ol><ul><li>特点：代码不需要进行特殊处理，自动完成</li><li>规则：数据范围从小到大。</li></ul><pre><code class="java">public class AutoSwitch{    public static viod main(String[] args){    char c1 = 'a'; // 定义一个char类型    int i1 = c1; //char自动类型转换为int    System.out.println("char自动类型转换为int后的值=" + i1);    char c2 = 'A'; //定义一个char类型    int i2 = c2 + 1; //char类型金额int类型计算    System.out.println("char类型和int计算后的值为 = " + i2);    }}//运行结果为://char自动类型转换为int后的值=97//char类型和int计算后的值为 = 66//解析:c1的值为字符a,查ASCII码表的对应的int类型值为97,A对应值为65,故i2=65+1=66</code></pre><h4 id="强制类型转换-显式"><a href="#强制类型转换-显式" class="headerlink" title="强制类型转换(显式)"></a>强制类型转换(显式)</h4><p>将取值范围大的类型强制转换成取值范围小的类型</p><ul><li>转换格式：数据类型 变量名 = （数据类型）被强转的数据值；</li></ul><pre><code class="java">//double类型强制转换为int类型，直接去掉小数点int i = (int)1.5;public class QiangZhiZhuanHuan{    public static viod main(String[] args){    int i1 = 123; //    byte b = (byte)i1; //int类型强制类型转换为byte    System.out.println("int强制类型转换为byte后的值为:" + b);    }}//运行结果:int强制类型转换为byte后的值等于123</code></pre><p>Tips：</p><ol><li>浮点转成整数，直接取消小数点，可能会造成数据损失精度。</li><li>int强制转成short砍掉2个字节，可能会造成数据溢出，导致数据丢失。  </li><li>byte/short/char这三种类型都可以发生数学运算，例如加法“+”。</li><li>byte/short/char这三种类型在运算时，都会首先自动被提升成为int类型，然后再计算。</li><li>boolean类型不能发生任何数据类型转换<h4 id="强制类型转换-隐式"><a href="#强制类型转换-隐式" class="headerlink" title="强制类型转换(隐式)"></a>强制类型转换(隐式)</h4></li><li>整数的默认类型是int</li><li>浮点型不存在这种情况,因为在定义float类型时必须在数字后面跟上F或者f<br>对于byte/short/char三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器将会自动隐式地为我们补上一个(byte)(short)(char)。</li></ol><ul><li>如果没有超过左侧的范围，编译器补上强转。</li><li><p>如果右侧超过了左侧的范围，编译报错。</p><pre><code class="java">public class Notice{  public static void main(String[] args){  //右侧确实是一个int数字，但没有超过左侧的范围，故自动隐式强转不会报错。  //int --&gt; byte 高位到低位，不是自动类型转换  byte num1 = 30; // 右侧没有超过左侧范围  System.out.println(num1);  //byte num2 = 128; // 右侧超过了左侧范围  // int --&gt; char 只要右侧没超出范围，编译器会自动补上一个隐含的(char)，进行自动隐式强转。  char strings = /*(char)*/ 65；  System.out.println(strings)  }}</code></pre></li></ul><h4 id="编译器的常量优化"><a href="#编译器的常量优化" class="headerlink" title="编译器的常量优化"></a>编译器的常量优化</h4><p>在给变量进行赋值时，如果右侧表达式当中全部是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。<br>short result = 5+8；//等号右边全部是常量，没有任何变量参与运算，编译之后，得到的.class字节码文件当中相当于==直接就是==：short result = 13;<br>右侧的常量结果数值，没有超过左侧范围，所以正确。<br>这称为“编译器的常量优化”</p><p>但是注意：一旦表达式当中有变量参与，那么就不能进行这种优化了。</p><h3 id="ASCII编码表"><a href="#ASCII编码表" class="headerlink" title="ASCII编码表"></a>ASCII编码表</h3><p>ASCII码表：American Standard Code for Information Interchange，美国信息交换标准码。<br>Unicode码表：万国码。也是数学和符号的对照关系，开头0-127部分和ASCII完全一样，但从128开始包含更多的字符。<br><img src="https://i.loli.net/2019/04/13/5cb190886bf51.jpg" alt="title"><br>只需特殊记住三个字符，分别是</p><ul><li>‘0’=48</li><li>‘A’=65</li><li>‘a’=97</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2019/04/10/javabasics/java-ji-chu/"/>
      <url>/2019/04/10/javabasics/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h2><p><a href="https://www.runoob.com/java/java-intro.html" target="_blank" rel="noopener">参考Runoob</a></p><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><ul><li>JVM(Java Virtual Machine):Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java最具吸引力的特性之一。我们编写的Java代码，都是运行在Jvm之上。</li><li>跨平台：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。</li><li>JRE（Java Runtime Environment）:是Java程序的运行时环境，包含JVM和运行时所需的核心类库。</li><li>JDK（Java Development Kit）:是Java程序开发工具包，包含JRE和开发人员使用工具。<br><img src="https://i.loli.net/2019/04/13/5cb13efcda904.png" alt="title"><br><br><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载JDK</a><br><br><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">下载Eclipse</a></li></ul><a id="more"></a><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>编写Java程序时,需注意以下几点:</p><ul><li>大小写敏感:Java是大小写敏感的,这就意味着标识符Hello与hello是不同的</li><li>类名:对于所有的类来说,类名的首字母应该大写.如果类名由若干单词组成,那么需采用驼峰命名法</li><li>方法名:所有的方法都应该以小写字母开头.如果方法名含有若干单词,则后面的每个单词首字母大写</li><li>源文件名:源文件名必须和类名相同.当保存文件时,你应该使用类名作为文件名保存,文件名的后缀为.java(如文件名和类名不相同则会导致编译错误)</li><li>主方法入口:所有的Java程序由public static void main(String []args)方法开始执行<h3 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h3>Java所有的组成部分都需要名字. 类名,变量名以及方法名都被称为标识符.<br>关于Java标识符,有一下几点需要注意:</li><li>所有的标识符都应该以字母(A-Za-z),美元符($),或者下划线(_)开始</li><li>首字符之后可以是字母(A-Za-z),美元符,下划线或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符大小写敏感</li><li>合法标识符举例:age, $salary, _value, __1_value</li><li>非法标识符举例:123abc, -salary<h3 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h3>像其他语言一样,Java可以使用修饰符来修饰类中方法和属性.主要有两类修饰符:</li><li>访问控制修饰符: default, public, protected, private</li><li>非访问控制修饰符: final, abstract, static, synchronized<h3 id="Java变量"><a href="#Java变量" class="headerlink" title="Java变量"></a>Java变量</h3>Java中主要有如下几种类型的变量</li><li>局部变量</li><li>类变量(静态变量)</li><li>成员变量(非静态变量)<h3 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h3>数组是存储在堆上的对象,可以保存多个同类型变量<h3 id="Java枚举"><a href="#Java枚举" class="headerlink" title="Java枚举"></a>Java枚举</h3>枚举限制变量只能是预先设定好的值. 使用枚举可以减少代码中的bug.<br><br>例如:为果汁店设计一个程序,它将限制果汁为小杯,中杯,大杯. 这就意味着它不允许顾客点除了这三种尺寸外的果汁<br><code>`</code>java<br>class FreshJuice {<br>  enum FreshJuinceSize{ SMALL, MEDIUM, LARGE }<br>  FreshJuiceSize size;<br>}</li></ul><p>public class FreshJuiceTest {<br>    public static void main(String []args){<br>        FreshJuice juice = new FreshJuice();<br>    juice.size = FreshJuice.FreshJuiceSize.MEDIUM;<br>    }<br>}<br>//注意：枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义</p><pre><code>### Java关键字以下列出Java关键字,这些保留字不能用于常量,变量,和任何标识符的名称.[详见runoob Java关键字](https://www.runoob.com/java/java-basic-syntax.html)### Java注释类似于C/C++, Java也支持单行以及多行注释.注释字符将被Java编译器忽略.```javapublic class HelloWorld {   /* 这是第一个Java程序    *它将打印Hello World    * 这是一个多行注释的示例    */    public static void main(String []args){       // 这是单行注释的示例       /* 这个也是单行注释的示例 */       System.out.println("Hello World");     }}</code></pre><h3 id="Java空行"><a href="#Java空行" class="headerlink" title="Java空行"></a>Java空行</h3><p>空白行或者有注释的行,Java编译器都会忽略掉</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在Java中,一个类可以由其他类派生.如果你要创建一个类,而且已经存在一个类具有你所需的属性或者方法,那么你可以将新创建的类继承该类.<br><br>利用继承的方法,可以重用已存在类的方法和属性,而不用重写这些代码. 被继承的类称为超类(super class),派生类称为子类(sub class)</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>在Java中,接口可以理解为对象间相互通信的协议.接口在继承中扮演者重要的角色<br><br>接口只定义派生要用到的方法,但是方法的具体实现完全取决于派生类</p><h3 id="Java源程序与编译型运行区别"><a href="#Java源程序与编译型运行区别" class="headerlink" title="Java源程序与编译型运行区别"></a>Java源程序与编译型运行区别</h3><p>如图所示:<br><img src="https://i.loli.net/2019/04/10/5cad995bb0b6b.png" alt="Java源程序与编译型运行区别"></p><h2 id="Java对象和类"><a href="#Java对象和类" class="headerlink" title="Java对象和类"></a>Java对象和类</h2><p>Java作为一种面向对象语言,支持以下基本概念:</p><ul><li>多态</li><li>继承</li><li>封装</li><li>抽象</li><li>类</li><li>对象</li><li>实例</li><li>方法</li><li>重载<br>以下重点研究对象和类的概念</li><li>对象:对象是类的一个实例,例如,一条狗是一个对象,它的状态有:颜色,名字,品种;行为有:摇尾巴,叫,吃等</li><li>类:类是一个模板,它描述一类对象的行为和状态.<br>下图中男孩女孩为类,具体每个人为该类的对象:<br><img src="https://i.loli.net/2019/04/10/5cad9e36a063b.jpg" alt="object-class.jpg"><h3 id="Java中的对象"><a href="#Java中的对象" class="headerlink" title="Java中的对象"></a>Java中的对象</h3>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。<br><br>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。<br><br>对比现实对象和软件对象，它们之间十分相似。<br><br>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。<br><br>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。<h3 id="Java中的类"><a href="#Java中的类" class="headerlink" title="Java中的类"></a>Java中的类</h3>类可以看成是创建Java对象的模板,<br>下面通过一个简单的类来理解下Java中类的定义:<pre><code class="java">public class Dog{  String breed;  int age;  String color;  void barking(){  }  void hungry(){  }  void sleeping(){      }}</code></pre>一个类可以包含以下类型变量:</li><li>局部变量:在方法,构造方法或者语句块中定义的变量被称为局部变量.变量声明和初始化都是在方法中,方法结束后,变量就会自动销毁.</li><li>成员变量:成员变量是定义在类中,方法体之外的变量.这种变量在创建对象时实例化.成员变量可以被类中方法,构造方法和特定类的语句块访问</li><li>类变量:类变量也声明在类中,方法体之外,但必须声明为static类型<br>一个类可以拥有多个方法,在上面的例子中:barking(),hungry(),sleeping()都是Dog类的方法<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3>每个类都有构造方法. 如果没有显式地为类定义构造方法,Java编译器将会为该类提供一个默认构造方法<br>在创建一个对象时,至少要调用一个构造方法,构造方法的名称必须与类同名,一个类可以有多个构造方法.<br>下面是一个构造方法实例:<pre><code class="java">public class Puppy{  public Puppy(){  }  public Puppy(String name){  //这个构造器仅有一个参数:name  }}</code></pre><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3>对象是根据类创建的.在Java中,使用关键字==new==来创建一个新的对象.创建对象需要以下三步:</li><li>声明:声明一个对象,包括对象名称和对象类型</li><li>实例化:使用关键字new来创建一个对象</li><li><p>初始化:使用new创建对象时,会调用构造方法初始化对象<br>下面是一个创建对象的例子:</p><pre><code class="java">public class Puppy{  public Puppy(String name){  //这个构造器仅有一个参数:name  Syetem.out.println("小狗的名字是:"+name);  }  public static void main(String []args){  //下面语句将创建一个Puppy对象  Puppy myPuppy = new Puppy("tommy");  }}</code></pre><h3 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法,如下所示:</p><pre><code class="java">/* 实例化对象 */Object referenceVariable = new Constructor();/* 访问类中的变量 */referenceVariable.variableName;/* 访问类中的方法 */referenceVariable.methodName();</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面的例子展示如何访问实例变量和调用成员方法:<br><code>`</code>java<br>public class Puppy {<br>  int puppyAge;<br>  public Puppy(String name) {</p><pre><code>  /*这个构造器仅有一个参数:name*/  System.out.println("小狗的名字是:" + name);</code></pre><p>  }</p><p>  public void setAge(int age) {</p><pre><code>  puppyAge = age;</code></pre><p>  }<br>  public int getAge() {</p><pre><code>  System.out.println("小狗的年龄为:" + puppyAge);  return puppyAge;</code></pre><p>  }</p><p>  public static void main(String []args) {</p><pre><code>  //使用new创建对象  Puppy myPuppy = new Puppy("tommy");  //通过方法来设定age  myPuppy.setAge( 2 );  //调用另一个方法获取age  myPuppy.getAge();  //你也可以通过下面方法访问成员变量  System.out.println("变量值:" + myPuppy.puppyAge);</code></pre><p>  }<br>}</p></li></ul><pre><code>### 源文件声明规则当在一个源文件中定义多个类,并且还有import语句和package语句时,要特别注意以下规则- 一个源文件中只能有一个public类- 一个源文件可以有多个非public类- 源文件的名称应该和public类的类名保持一致.例如:源文件中public类的类名是Test,那么源文件应该命名为Test.java- 如果一个类定义在某个包中,那么package语句应该在源文件的首行- 如果源文件包含import语句,那么应该放在package语句和类定义之间.如果没有package语句,那么import语句应该在源文件中最前面- import语句和package语句对源文件中定义的所有类都有效.在同一源文件中,不能给不同的类不同的包声明.类有若干种访问级别,并且类也分不同的类型:抽象类和final类等.&lt;br&gt;除了上述提到的几种类型,Java还有一些特殊类,如:内部类,匿名类.### Java包包主要用来对类和接口进行分类,当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。### import语句在Java中,如果给出一个完整的限定名,包括包名,类名,那么Java编译器就可以很容易地定位到源代码或者类.import语句就是用来提供一个合理的路径,使得编译器可以找到某个类.&lt;br&gt;例如,下面的命令行将会命令编译器载入java_installation/java/io路径下的所有类.```javaimport java.io.*;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Git搭建个人博客</title>
      <link href="/2018/12/04/other/hexo-git-da-jian-ge-ren-bo-ke/"/>
      <url>/2018/12/04/other/hexo-git-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基于hexo+github pages服务搭建博客,快速,便捷,免费的搭建属于自己的个人博客</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>在开始一切之前,你必须已经:</p><ul><li>有一个github账号,没有的话去<a href="https://github.com" target="_blank" rel="noopener">注册一个</a></li><li>电脑 <a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">安装</a> 了node.js,npm,并了解相关基础知识</li><li>安装了<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git for windows</a> (或其他git客户端工具)</li></ul><a id="more"></a><h2 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2.创建仓库"></a>2.创建仓库</h2><ul><li>新建一个名为 用户名.github.io的仓库.比如说,如果你的github用户名是test</li><li>那么你就新建test.github.io的仓库(必须是你的用户名,其他的无效)</li><li>然后你的网站访问地址就是<a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了<br>注意几个地方:<ul><li>注册的邮箱一定要验证,否则不会成功</li><li>仓库名字必须是:username.github.io,其中username就是你的用户名</li><li>仓库创建成功不会立即生效,需要过一段时间(等待github分配网站域名等)</li></ul></li></ul><h2 id="3-绑定域名"><a href="#3-绑定域名" class="headerlink" title="3.绑定域名"></a>3.绑定域名</h2><ul><li>域名配置最常见有2种方式,CNAME和A记录,CNAME填写域名,A记录填写IP</li><li>由于不带WWW方式只能采用A记录,所以先ping一下username.github.io的IP</li><li>然后到你的域名DNS设置页,将A记录指向你ping出来的IP,将CNAME指向:yourname.github.io</li><li>这样可以保证无论是否添加WWW都可以访问</li><li>例:<ul><li>记录类型:A      主机记录:@   解析线路默认  记录值:IP</li><li>记录类型:CNAME  主机记录:www 解析线路默认  记录值:username.github.io</li></ul></li><li>然后到你的github项目跟目录新建一个名为CNAME的文件(无后缀),里面填写你自定义的域名</li></ul><h2 id="4-配置SSH-key"><a href="#4-配置SSH-key" class="headerlink" title="4.配置SSH key"></a>4.配置SSH key</h2><p>提交代码需要github权限才可以,这里使用ssh key来解决本地和服务器的连接问题</p><pre><code class="bash">$ cd ~/.ssh # 检查本机已存在的ssh秘钥</code></pre><p>如果提示:”No such file or directory”说明你是第一次使用git</p><pre><code class="bash">ssh-keygen -t rsa -C 'your email@example.com'</code></pre><p>一般情况下直接默认值就行,所以不用设置密码,一路回车就行<br>最终会在.ssh目录下生成两个文件,id_rsa和id_rsa.pub,这两个就是SSH Key的密钥对id_rsa是私钥,不能泄露!</p><pre><code class="bash">cat id_rsa.pub</code></pre><p>复制输出的内容,打开你的github主页,打开”Account settings”&gt;&gt;”SSH keys”页面</p><ol><li>点击 ‘Add SSH Key’,填上任意title,在Key文本框内粘贴id_rsa.pub文件的内容</li><li>点击 ‘Add Key’,就成功添加Key了<br>测试是否成功<pre><code class="bash">$ ssh -T git@github.com</code></pre>如果提示”Are you sure you want to continum connecting (yes/no)?” 输入yes,就会看到<pre><code>Hi zero6996! You've successfully authenticated, but GitHub does not provide shell access.</code></pre>说明SSH配置成功!<br>此时你还需要配置:<pre><code class="bash">$ git config --global user.name 'zero6996' #你的github用户名$ git config --global user.email 'youremail@xx.com' #你的github注册email</code></pre><h2 id="5-hexo简介"><a href="#5-hexo简介" class="headerlink" title="5.hexo简介"></a>5.hexo简介</h2>Hexo是一个简单,快速,强大的基于GitHub Pages的博客发布工具,支持Markdown格式,有众多优秀的插件和主题<br><a href="http://hexo.io" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Github</a><h3 id="5-1-安装注意事项"><a href="#5-1-安装注意事项" class="headerlink" title="5.1.安装注意事项"></a>5.1.安装注意事项</h3></li><li>很多命令既可以用Windows的cmd来完成,也可以使用git bash来完成,但是部分命令会有一些问题,为避免不必要的问题,这里统一使用git bash来执行</li><li>hexo不同版本差别较大,网上很文章的配置信息都是基于2.x的,所以注意不要被误导</li><li>hexo有两种”_config.yml” 文件,一个是跟目录下的全局的”_config.yml” , 一个是各个”theme” 下的</li><li>安装完node和npm以后,将npm替换为<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像</a>,执行以下命令即可将,后续命令全部以cnpm执行<pre><code class="bash">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h3 id="5-2-安装"><a href="#5-2-安装" class="headerlink" title="5.2.安装"></a>5.2.安装</h3><pre><code class="bash">$ cnpm install -g hexo</code></pre><h3 id="5-3-初始化"><a href="#5-3-初始化" class="headerlink" title="5.3.初始化"></a>5.3.初始化</h3>在本地新建一个名为hexo的文件夹(名字任意取),这里作为一个你存放代码的地方,比如我是D:\hexo<pre><code class="bash">$ cd /d/hexo # 进入文件夹$ hexo init # 初始化</code></pre>hexo会自动下载一些文件到这个目录,包括node_modules,目录结构<pre><code class="bash">$ ls_config.yml  node_modules/  package-lock.json  scaffolds/  themes/db.json      package.json   public/   source/$ hexo g # 生成$ hexo s # 启动服务</code></pre></li></ol><ul><li>执行上述命令之后,hexo就会在public文件夹生成相关html文件,这些文件后续会提交到github上去</li><li>“hexo s”是开启本地预览服务,打开浏览器访问<a href="http://localhost:4000" target="_blank" rel="noopener">localhost:4000</a>即可看到博客内容.</li><li>如果无显示内容或拒绝访问,就是端口占用的问题,重新开启服务,使用”hexo s -p 8888”指定端口</li></ul><h3 id="5-4-修改主题"><a href="#5-4-修改主题" class="headerlink" title="5.4.修改主题"></a>5.4.修改主题</h3><p>hexo社区有丰富的主题可选,从<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网主题</a>自己挑选下载</p><p>下载主题(以<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>为例):</p><pre><code class="bash">$ cd /d/hexo/$ git clone git@github.com:litten/hexo-theme-yilia.git themes/yilia # 从github克隆主题,到本地的themes/yilia文件夹</code></pre><p>下载的主题都在hexo/themes文件夹内</p><pre><code class="bash">$ cd themes$ lslandscape/  yilia/</code></pre><p>修改”_config.yml”中的”theme: landscape”改为”theme: yilia”,然后重新执行”hexo g”来生成页面<br>如果出现一些莫名其妙的问题,可以先执行”hexo clean”来清理一下public的内容,然后再来重新生成和发布</p><h3 id="5-5-上传之前"><a href="#5-5-上传之前" class="headerlink" title="5.5.上传之前"></a>5.5.上传之前</h3><p>上传代码到github之前,记得备份以前的所有代码,因为hexo提交代码时会把你以前的所有代码都删除</p><h3 id="5-6-上传到Github"><a href="#5-6-上传到Github" class="headerlink" title="5.6.上传到Github"></a>5.6.上传到Github</h3><p>如果你一切都配置好了,发布上传只需要”hexo d”就可以了,当然关键是所有东西都配置好<br>首先,”ssh key”肯定要配置好<br>其次,配置”_config.yml”中有关deploy的部分:</p><pre><code>#正确写法deploy:   type: git   repository: git@github.com:zero6996/zero6996.github.io.git   branch: master</code></pre><p>如果报如下错误:</p><pre><code>Deployer not found: github 或者 Deployer not found: git</code></pre><p>原因是还需安装一个插件:</p><pre><code> cnpm install hexo-deployer-git --save</code></pre><p>安装无误,输入github账户密码,输入”hexo d”就会将本次有改动的代码全部提交,没有改动的不会</p><h3 id="5-7-常用hexo命令"><a href="#5-7-常用hexo命令" class="headerlink" title="5.7.常用hexo命令"></a>5.7.常用hexo命令</h3><pre><code>hexo new 'postName' # 新建文章hexo new page 'pageName' # 新建页面hexo generate # 生成静态页面至public目录hexo server # 开启预览访问端口(默认4000,使用-p可更换端口)hexo deploy # 部署至Githubhexo help # 查看帮助hexo version # 查看版本</code></pre><p>以上命令均可缩写</p><pre><code>hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>以及组合命令:</p><pre><code>hexo s -g # 生成页面并本地预览hexo d -g # 生成页面并上传hexo s -p # 本地预览并改变端口</code></pre><h3 id="5-8-config-yml"><a href="#5-8-config-yml" class="headerlink" title="5.8._config.yml"></a>5.8._config.yml</h3><p>这里面都是一些全局配置,每个参数意思都比较简单明了,需要注意的是冒号后面必须有一个空格</p><h2 id="6-写博客"><a href="#6-写博客" class="headerlink" title="6.写博客"></a>6.写博客</h2><p>进入hexo根目录,执行命令:</p><pre><code>hexo new 'my-first-blog'</code></pre><p>hexo会帮我们在_posts下生成相关的md文件,我们只需要打开这个文件就可以开始写博客了</p><p>一般完整格式如下:</p><pre><code>---title: postName # 文章页面上的显示名称,一般是中文date: 2018-12-5 15:46:10 # 文章生成时间,一般不用改,也可自定义categories: 默认分类 # 分类tags: [tag1,tag2,tag3] # 文章标签,可空,多标签请用格式description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文内容</code></pre><p>hexo new page ‘my-second-blog’ 生成的是:index.md,它不会作为文章出现在博客目录</p><h3 id="6-1-写博客工具"><a href="#6-1-写博客工具" class="headerlink" title="6.1.写博客工具"></a>6.1.写博客工具</h3><p>   个人使用的是 ‘Visual Studio Code’ IDE</p><h3 id="6-2-如何让博文列表不显示全部内容"><a href="#6-2-如何让博文列表不显示全部内容" class="headerlink" title="6.2.如何让博文列表不显示全部内容"></a>6.2.如何让博文列表不显示全部内容</h3><p>默认情况下,生成的博文目录会显示全部文章内容,如何设置文章摘要长度呢?</p><p>可以在合适的位置加上’<!--more-->‘即可,显示在页面上的效果就是新增了一个’more&gt;&gt;’功能选项,查看更多内容</p><h3 id="7-关于缺失模块"><a href="#7-关于缺失模块" class="headerlink" title="7.关于缺失模块"></a>7.关于缺失模块</h3><p>缺失模块</p><ol><li>请确保node版本大于6.2</li><li>在博客根目录（注意不是yilia根目录）执行以下命令:<pre><code class="bash">cnpm i hexo-generator-json-content --save</code></pre></li><li>在根目录_config.yml里添加配置：<pre><code class="bash">jsonContent: meta: false pages: false posts:   title: true   date: true   path: true   text: false   raw: false   content: false   slug: false   updated: false   comments: false   link: false   permalink: false   excerpt: false   categories: false   tags: true</code></pre><h4 id="参考自"><a href="#参考自" class="headerlink" title="参考自"></a>参考自</h4><a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">以上内容整理参考自文章</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
